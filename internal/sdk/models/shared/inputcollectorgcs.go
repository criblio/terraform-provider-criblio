// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type InputCollectorGCSTypeCollection1 string

const (
	InputCollectorGCSTypeCollection1Collection InputCollectorGCSTypeCollection1 = "collection"
)

func (e InputCollectorGCSTypeCollection1) ToPointer() *InputCollectorGCSTypeCollection1 {
	return &e
}
func (e *InputCollectorGCSTypeCollection1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "collection":
		*e = InputCollectorGCSTypeCollection1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCollectorGCSTypeCollection1: %v", v)
	}
}

// InputCollectorGCSSavedState - Saved state for the collector
type InputCollectorGCSSavedState struct {
}

func (i InputCollectorGCSSavedState) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorGCSSavedState) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

// InputCollectorGCSLogLevel - Level at which to set task logging
type InputCollectorGCSLogLevel string

const (
	InputCollectorGCSLogLevelError InputCollectorGCSLogLevel = "error"
	InputCollectorGCSLogLevelWarn  InputCollectorGCSLogLevel = "warn"
	InputCollectorGCSLogLevelInfo  InputCollectorGCSLogLevel = "info"
	InputCollectorGCSLogLevelDebug InputCollectorGCSLogLevel = "debug"
	InputCollectorGCSLogLevelSilly InputCollectorGCSLogLevel = "silly"
)

func (e InputCollectorGCSLogLevel) ToPointer() *InputCollectorGCSLogLevel {
	return &e
}
func (e *InputCollectorGCSLogLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "warn":
		fallthrough
	case "info":
		fallthrough
	case "debug":
		fallthrough
	case "silly":
		*e = InputCollectorGCSLogLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCollectorGCSLogLevel: %v", v)
	}
}

// InputCollectorGCSMode - Job run mode. Preview will either return up to N matching results, or will run until capture time T is reached. Discovery will gather the list of files to turn into streaming tasks, without running the data collection job. Full Run will run the collection job.
type InputCollectorGCSMode string

const (
	InputCollectorGCSModeList    InputCollectorGCSMode = "list"
	InputCollectorGCSModePreview InputCollectorGCSMode = "preview"
	InputCollectorGCSModeRun     InputCollectorGCSMode = "run"
)

func (e InputCollectorGCSMode) ToPointer() *InputCollectorGCSMode {
	return &e
}
func (e *InputCollectorGCSMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "list":
		fallthrough
	case "preview":
		fallthrough
	case "run":
		*e = InputCollectorGCSMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCollectorGCSMode: %v", v)
	}
}

type InputCollectorGCSTimeRange string

const (
	InputCollectorGCSTimeRangeRelative InputCollectorGCSTimeRange = "relative"
	InputCollectorGCSTimeRangeAbsolute InputCollectorGCSTimeRange = "absolute"
)

func (e InputCollectorGCSTimeRange) ToPointer() *InputCollectorGCSTimeRange {
	return &e
}
func (e *InputCollectorGCSTimeRange) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relative":
		fallthrough
	case "absolute":
		*e = InputCollectorGCSTimeRange(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCollectorGCSTimeRange: %v", v)
	}
}

// InputCollectorGCSTimeWarning - Time warning configuration
type InputCollectorGCSTimeWarning struct {
}

func (i InputCollectorGCSTimeWarning) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorGCSTimeWarning) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

// InputCollectorGCSStateTracking - State tracking configuration
type InputCollectorGCSStateTracking struct {
	StateUpdateExpression *string `json:"stateUpdateExpression,omitempty"`
	StateMergeExpression  *string `json:"stateMergeExpression,omitempty"`
	Enabled               *bool   `default:"false" json:"enabled"`
}

func (i InputCollectorGCSStateTracking) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorGCSStateTracking) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *InputCollectorGCSStateTracking) GetStateUpdateExpression() *string {
	if o == nil {
		return nil
	}
	return o.StateUpdateExpression
}

func (o *InputCollectorGCSStateTracking) GetStateMergeExpression() *string {
	if o == nil {
		return nil
	}
	return o.StateMergeExpression
}

func (o *InputCollectorGCSStateTracking) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type InputCollectorGCSRunSettings struct {
	// Reschedule tasks that failed with non-fatal errors
	RescheduleDroppedTasks *bool `default:"true" json:"rescheduleDroppedTasks"`
	// Maximum number of times a task can be rescheduled
	MaxTaskReschedule *float64 `default:"1" json:"maxTaskReschedule"`
	// Level at which to set task logging
	LogLevel *InputCollectorGCSLogLevel `default:"info" json:"logLevel"`
	// Maximum time the job is allowed to run. Time unit defaults to seconds if not specified (examples: 30, 45s, 15m). Enter 0 for unlimited time.
	JobTimeout *string `default:"0" json:"jobTimeout"`
	// Job run mode. Preview will either return up to N matching results, or will run until capture time T is reached. Discovery will gather the list of files to turn into streaming tasks, without running the data collection job. Full Run will run the collection job.
	Mode          *InputCollectorGCSMode      `default:"list" json:"mode"`
	TimeRangeType *InputCollectorGCSTimeRange `default:"relative" json:"timeRangeType"`
	// Earliest time to collect data for the selected timezone
	Earliest *float64 `default:"0" json:"earliest"`
	// Latest time to collect data for the selected timezone
	Latest *float64 `default:"1" json:"latest"`
	// A filter for tokens in the provided collect path and/or the events being collected
	Expression *string `default:"true" json:"expression"`
	// Limits the bundle size for small tasks. For example, if your lower bundle size is 1MB, you can bundle up to five 200KB files into one task.
	MinTaskSize *string `default:"1MB" json:"minTaskSize"`
	// Limits the bundle size for files above the lower task bundle size. For example, if your upper bundle size is 10MB, you can bundle up to five 2MB files into one task. Files greater than this size will be assigned to individual tasks.
	MaxTaskSize *string `default:"10MB" json:"maxTaskSize"`
	// Time warning configuration
	TimeWarning *InputCollectorGCSTimeWarning `json:"timeWarning,omitempty"`
	// State tracking configuration
	StateTracking *InputCollectorGCSStateTracking `json:"stateTracking,omitempty"`
}

func (i InputCollectorGCSRunSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorGCSRunSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *InputCollectorGCSRunSettings) GetRescheduleDroppedTasks() *bool {
	if o == nil {
		return nil
	}
	return o.RescheduleDroppedTasks
}

func (o *InputCollectorGCSRunSettings) GetMaxTaskReschedule() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxTaskReschedule
}

func (o *InputCollectorGCSRunSettings) GetLogLevel() *InputCollectorGCSLogLevel {
	if o == nil {
		return nil
	}
	return o.LogLevel
}

func (o *InputCollectorGCSRunSettings) GetJobTimeout() *string {
	if o == nil {
		return nil
	}
	return o.JobTimeout
}

func (o *InputCollectorGCSRunSettings) GetMode() *InputCollectorGCSMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *InputCollectorGCSRunSettings) GetTimeRangeType() *InputCollectorGCSTimeRange {
	if o == nil {
		return nil
	}
	return o.TimeRangeType
}

func (o *InputCollectorGCSRunSettings) GetEarliest() *float64 {
	if o == nil {
		return nil
	}
	return o.Earliest
}

func (o *InputCollectorGCSRunSettings) GetLatest() *float64 {
	if o == nil {
		return nil
	}
	return o.Latest
}

func (o *InputCollectorGCSRunSettings) GetExpression() *string {
	if o == nil {
		return nil
	}
	return o.Expression
}

func (o *InputCollectorGCSRunSettings) GetMinTaskSize() *string {
	if o == nil {
		return nil
	}
	return o.MinTaskSize
}

func (o *InputCollectorGCSRunSettings) GetMaxTaskSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxTaskSize
}

func (o *InputCollectorGCSRunSettings) GetTimeWarning() *InputCollectorGCSTimeWarning {
	if o == nil {
		return nil
	}
	return o.TimeWarning
}

func (o *InputCollectorGCSRunSettings) GetStateTracking() *InputCollectorGCSStateTracking {
	if o == nil {
		return nil
	}
	return o.StateTracking
}

// InputCollectorGCSSchedule - Configuration for a scheduled job
type InputCollectorGCSSchedule struct {
	// Enable to configure scheduling for this Collector
	Enabled *bool `json:"enabled,omitempty"`
	// A cron schedule on which to run this job
	CronSchedule *string `default:"*/5 * * * *" json:"cronSchedule"`
	// The maximum number of instances of this scheduled job that may be running at any time
	MaxConcurrentRuns *float64 `default:"1" json:"maxConcurrentRuns"`
	// Skippable jobs can be delayed, up to their next run time, if the system is hitting concurrency limits
	Skippable *bool `default:"true" json:"skippable"`
	// Resume missed scheduled runs
	ResumeMissed *bool                         `default:"false" json:"resumeMissed"`
	Run          *InputCollectorGCSRunSettings `json:"run,omitempty"`
}

func (i InputCollectorGCSSchedule) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorGCSSchedule) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *InputCollectorGCSSchedule) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *InputCollectorGCSSchedule) GetCronSchedule() *string {
	if o == nil {
		return nil
	}
	return o.CronSchedule
}

func (o *InputCollectorGCSSchedule) GetMaxConcurrentRuns() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxConcurrentRuns
}

func (o *InputCollectorGCSSchedule) GetSkippable() *bool {
	if o == nil {
		return nil
	}
	return o.Skippable
}

func (o *InputCollectorGCSSchedule) GetResumeMissed() *bool {
	if o == nil {
		return nil
	}
	return o.ResumeMissed
}

func (o *InputCollectorGCSSchedule) GetRun() *InputCollectorGCSRunSettings {
	if o == nil {
		return nil
	}
	return o.Run
}

type InputCollectorGCSTypeCollection2 string

const (
	InputCollectorGCSTypeCollection2Collection InputCollectorGCSTypeCollection2 = "collection"
)

func (e InputCollectorGCSTypeCollection2) ToPointer() *InputCollectorGCSTypeCollection2 {
	return &e
}
func (e *InputCollectorGCSTypeCollection2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "collection":
		*e = InputCollectorGCSTypeCollection2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCollectorGCSTypeCollection2: %v", v)
	}
}

type InputCollectorGCSPreprocess struct {
	Disabled *bool `default:"true" json:"disabled"`
	// Command to feed the data through (via stdin) and process its output (stdout)
	Command *string `json:"command,omitempty"`
	// Arguments to be added to the custom command
	Args []string `json:"args,omitempty"`
}

func (i InputCollectorGCSPreprocess) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorGCSPreprocess) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *InputCollectorGCSPreprocess) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputCollectorGCSPreprocess) GetCommand() *string {
	if o == nil {
		return nil
	}
	return o.Command
}

func (o *InputCollectorGCSPreprocess) GetArgs() []string {
	if o == nil {
		return nil
	}
	return o.Args
}

type InputCollectorGCSMetadatum struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (i InputCollectorGCSMetadatum) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorGCSMetadatum) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"name", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *InputCollectorGCSMetadatum) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputCollectorGCSMetadatum) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type InputCollectorGCSInput struct {
	Type *InputCollectorGCSTypeCollection2 `default:"collection" json:"type"`
	// A list of event-breaking rulesets that will be applied, in order, to the input data stream
	BreakerRulesets []string `json:"breakerRulesets,omitempty"`
	// How long (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel before flushing the data stream out, as is, to the Pipelines
	StaleChannelFlushMs *float64 `default:"10000" json:"staleChannelFlushMs"`
	// Send events to normal routing and event processing. Disable to select a specific Pipeline/Destination combination.
	SendToRoutes *bool                        `default:"true" json:"sendToRoutes"`
	Preprocess   *InputCollectorGCSPreprocess `json:"preprocess,omitempty"`
	// Rate (in bytes per second) to throttle while writing to an output. Accepts values with multiple-byte units, such as KB, MB, and GB. (Example: 42 MB) Default value of 0 specifies no throttling.
	ThrottleRatePerSec *string `default:"0" json:"throttleRatePerSec"`
	// Fields to add to events from this input
	Metadata []InputCollectorGCSMetadatum `json:"metadata,omitempty"`
	// Pipeline to process results
	Pipeline *string `json:"pipeline,omitempty"`
	// Destination to send results to
	Output *string `json:"output,omitempty"`
}

func (i InputCollectorGCSInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorGCSInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *InputCollectorGCSInput) GetType() *InputCollectorGCSTypeCollection2 {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *InputCollectorGCSInput) GetBreakerRulesets() []string {
	if o == nil {
		return nil
	}
	return o.BreakerRulesets
}

func (o *InputCollectorGCSInput) GetStaleChannelFlushMs() *float64 {
	if o == nil {
		return nil
	}
	return o.StaleChannelFlushMs
}

func (o *InputCollectorGCSInput) GetSendToRoutes() *bool {
	if o == nil {
		return nil
	}
	return o.SendToRoutes
}

func (o *InputCollectorGCSInput) GetPreprocess() *InputCollectorGCSPreprocess {
	if o == nil {
		return nil
	}
	return o.Preprocess
}

func (o *InputCollectorGCSInput) GetThrottleRatePerSec() *string {
	if o == nil {
		return nil
	}
	return o.ThrottleRatePerSec
}

func (o *InputCollectorGCSInput) GetMetadata() []InputCollectorGCSMetadatum {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *InputCollectorGCSInput) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputCollectorGCSInput) GetOutput() *string {
	if o == nil {
		return nil
	}
	return o.Output
}

type TypeGcs string

const (
	TypeGcsGcs TypeGcs = "gcs"
)

func (e TypeGcs) ToPointer() *TypeGcs {
	return &e
}
func (e *TypeGcs) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gcs":
		*e = TypeGcs(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeGcs: %v", v)
	}
}

type InputCollectorGCSAuthenticationMethod string

const (
	InputCollectorGCSAuthenticationMethodManual       InputCollectorGCSAuthenticationMethod = "manual"
	InputCollectorGCSAuthenticationMethodSecret       InputCollectorGCSAuthenticationMethod = "secret"
	InputCollectorGCSAuthenticationMethodClientSecret InputCollectorGCSAuthenticationMethod = "clientSecret"
	InputCollectorGCSAuthenticationMethodClientCert   InputCollectorGCSAuthenticationMethod = "clientCert"
)

func (e InputCollectorGCSAuthenticationMethod) ToPointer() *InputCollectorGCSAuthenticationMethod {
	return &e
}
func (e *InputCollectorGCSAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manual":
		fallthrough
	case "secret":
		fallthrough
	case "clientSecret":
		fallthrough
	case "clientCert":
		*e = InputCollectorGCSAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCollectorGCSAuthenticationMethod: %v", v)
	}
}

type InputCollectorGCSExtractor struct {
}

func (i InputCollectorGCSExtractor) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorGCSExtractor) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

type InputCollectorGCSConf struct {
	ServiceAccountCredentials *string `json:"serviceAccountCredentials,omitempty"`
	// GCS Bucket from which to collect data
	Bucket *string `json:"bucket,omitempty"`
	// Directory where data will be collected
	Path         *string                                `json:"path,omitempty"`
	AuthType     *InputCollectorGCSAuthenticationMethod `json:"authType,omitempty"`
	Recurse      *bool                                  `json:"recurse,omitempty"`
	Extractors   []InputCollectorGCSExtractor           `json:"extractors,omitempty"`
	MaxBatchSize *int64                                 `json:"maxBatchSize,omitempty"`
}

func (i InputCollectorGCSConf) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorGCSConf) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *InputCollectorGCSConf) GetServiceAccountCredentials() *string {
	if o == nil {
		return nil
	}
	return o.ServiceAccountCredentials
}

func (o *InputCollectorGCSConf) GetBucket() *string {
	if o == nil {
		return nil
	}
	return o.Bucket
}

func (o *InputCollectorGCSConf) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *InputCollectorGCSConf) GetAuthType() *InputCollectorGCSAuthenticationMethod {
	if o == nil {
		return nil
	}
	return o.AuthType
}

func (o *InputCollectorGCSConf) GetRecurse() *bool {
	if o == nil {
		return nil
	}
	return o.Recurse
}

func (o *InputCollectorGCSConf) GetExtractors() []InputCollectorGCSExtractor {
	if o == nil {
		return nil
	}
	return o.Extractors
}

func (o *InputCollectorGCSConf) GetMaxBatchSize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxBatchSize
}

type InputCollectorGCSCollector struct {
	Type TypeGcs                `json:"type"`
	Conf *InputCollectorGCSConf `json:"conf,omitempty"`
}

func (i InputCollectorGCSCollector) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorGCSCollector) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *InputCollectorGCSCollector) GetType() TypeGcs {
	if o == nil {
		return TypeGcs("")
	}
	return o.Type
}

func (o *InputCollectorGCSCollector) GetConf() *InputCollectorGCSConf {
	if o == nil {
		return nil
	}
	return o.Conf
}

type InputCollectorGCS struct {
	ID                   *string                           `json:"id,omitempty"`
	Type                 *InputCollectorGCSTypeCollection1 `default:"collection" json:"type"`
	TTL                  *string                           `default:"4h" json:"ttl"`
	IgnoreGroupJobsLimit *bool                             `default:"false" json:"ignoreGroupJobsLimit"`
	RemoveFields         []string                          `json:"removeFields,omitempty"`
	ResumeOnBoot         *bool                             `default:"true" json:"resumeOnBoot"`
	Environment          *string                           `json:"environment,omitempty"`
	// Saved state for the collector
	SavedState *InputCollectorGCSSavedState `json:"savedState,omitempty"`
	// Configuration for a scheduled job
	Schedule *InputCollectorGCSSchedule `json:"schedule,omitempty"`
	// Tags for filtering and grouping
	Streamtags []string `json:"streamtags,omitempty"`
	// If enabled, tasks are created and run by the same Worker Node
	WorkerAffinity *bool                      `default:"false" json:"workerAffinity"`
	Input          *InputCollectorGCSInput    `json:"input,omitempty"`
	Collector      InputCollectorGCSCollector `json:"collector"`
}

func (i InputCollectorGCS) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorGCS) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"collector"}); err != nil {
		return err
	}
	return nil
}

func (o *InputCollectorGCS) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InputCollectorGCS) GetType() *InputCollectorGCSTypeCollection1 {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *InputCollectorGCS) GetTTL() *string {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *InputCollectorGCS) GetIgnoreGroupJobsLimit() *bool {
	if o == nil {
		return nil
	}
	return o.IgnoreGroupJobsLimit
}

func (o *InputCollectorGCS) GetRemoveFields() []string {
	if o == nil {
		return nil
	}
	return o.RemoveFields
}

func (o *InputCollectorGCS) GetResumeOnBoot() *bool {
	if o == nil {
		return nil
	}
	return o.ResumeOnBoot
}

func (o *InputCollectorGCS) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *InputCollectorGCS) GetSavedState() *InputCollectorGCSSavedState {
	if o == nil {
		return nil
	}
	return o.SavedState
}

func (o *InputCollectorGCS) GetSchedule() *InputCollectorGCSSchedule {
	if o == nil {
		return nil
	}
	return o.Schedule
}

func (o *InputCollectorGCS) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *InputCollectorGCS) GetWorkerAffinity() *bool {
	if o == nil {
		return nil
	}
	return o.WorkerAffinity
}

func (o *InputCollectorGCS) GetInput() *InputCollectorGCSInput {
	if o == nil {
		return nil
	}
	return o.Input
}

func (o *InputCollectorGCS) GetCollector() InputCollectorGCSCollector {
	if o == nil {
		return InputCollectorGCSCollector{}
	}
	return o.Collector
}

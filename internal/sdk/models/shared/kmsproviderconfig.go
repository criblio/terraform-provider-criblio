// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type KMSProviderConfigAuth2 struct {
	AssumeRoleArn           *string `json:"assumeRoleArn,omitempty"`
	AssumeRoleExternalID    *string `json:"assumeRoleExternalId,omitempty"`
	AwsAPIKey               *string `json:"awsApiKey,omitempty"`
	AwsAuthenticationMethod *string `json:"awsAuthenticationMethod,omitempty"`
	AwsSecretKey            *string `json:"awsSecretKey,omitempty"`
	EnableAssumeRole        *bool   `json:"enableAssumeRole,omitempty"`
}

func (k KMSProviderConfigAuth2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KMSProviderConfigAuth2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (k *KMSProviderConfigAuth2) GetAssumeRoleArn() *string {
	if k == nil {
		return nil
	}
	return k.AssumeRoleArn
}

func (k *KMSProviderConfigAuth2) GetAssumeRoleExternalID() *string {
	if k == nil {
		return nil
	}
	return k.AssumeRoleExternalID
}

func (k *KMSProviderConfigAuth2) GetAwsAPIKey() *string {
	if k == nil {
		return nil
	}
	return k.AwsAPIKey
}

func (k *KMSProviderConfigAuth2) GetAwsAuthenticationMethod() *string {
	if k == nil {
		return nil
	}
	return k.AwsAuthenticationMethod
}

func (k *KMSProviderConfigAuth2) GetAwsSecretKey() *string {
	if k == nil {
		return nil
	}
	return k.AwsSecretKey
}

func (k *KMSProviderConfigAuth2) GetEnableAssumeRole() *bool {
	if k == nil {
		return nil
	}
	return k.EnableAssumeRole
}

type KMSProviderConfigAuth1 struct {
	AssumeRoleArn           *string      `json:"assumeRoleArn,omitempty"`
	AssumeRoleExternalID    *string      `json:"assumeRoleExternalId,omitempty"`
	AwsAPIKey               *string      `json:"awsApiKey,omitempty"`
	AwsAuthenticationMethod *string      `json:"awsAuthenticationMethod,omitempty"`
	AwsSecretKey            *string      `json:"awsSecretKey,omitempty"`
	EnableAssumeRole        *bool        `json:"enableAssumeRole,omitempty"`
	Provider                AuthProvider `json:"provider"`
	Token                   *string      `json:"token,omitempty"`
	VaultAWSIAMServerID     string       `json:"vaultAWSIAMServerID"`
	VaultRole               *string      `json:"vaultRole,omitempty"`
}

func (k KMSProviderConfigAuth1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KMSProviderConfigAuth1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, []string{"provider", "vaultAWSIAMServerID"}); err != nil {
		return err
	}
	return nil
}

func (k *KMSProviderConfigAuth1) GetAssumeRoleArn() *string {
	if k == nil {
		return nil
	}
	return k.AssumeRoleArn
}

func (k *KMSProviderConfigAuth1) GetAssumeRoleExternalID() *string {
	if k == nil {
		return nil
	}
	return k.AssumeRoleExternalID
}

func (k *KMSProviderConfigAuth1) GetAwsAPIKey() *string {
	if k == nil {
		return nil
	}
	return k.AwsAPIKey
}

func (k *KMSProviderConfigAuth1) GetAwsAuthenticationMethod() *string {
	if k == nil {
		return nil
	}
	return k.AwsAuthenticationMethod
}

func (k *KMSProviderConfigAuth1) GetAwsSecretKey() *string {
	if k == nil {
		return nil
	}
	return k.AwsSecretKey
}

func (k *KMSProviderConfigAuth1) GetEnableAssumeRole() *bool {
	if k == nil {
		return nil
	}
	return k.EnableAssumeRole
}

func (k *KMSProviderConfigAuth1) GetProvider() AuthProvider {
	if k == nil {
		return AuthProvider("")
	}
	return k.Provider
}

func (k *KMSProviderConfigAuth1) GetToken() *string {
	if k == nil {
		return nil
	}
	return k.Token
}

func (k *KMSProviderConfigAuth1) GetVaultAWSIAMServerID() string {
	if k == nil {
		return ""
	}
	return k.VaultAWSIAMServerID
}

func (k *KMSProviderConfigAuth1) GetVaultRole() *string {
	if k == nil {
		return nil
	}
	return k.VaultRole
}

type AuthType string

const (
	AuthTypeKMSProviderConfigAuth1 AuthType = "KMSProviderConfig_auth_1"
	AuthTypeKMSProviderConfigAuth2 AuthType = "KMSProviderConfig_auth_2"
)

type Auth struct {
	KMSProviderConfigAuth1 *KMSProviderConfigAuth1 `queryParam:"inline" name:"auth"`
	KMSProviderConfigAuth2 *KMSProviderConfigAuth2 `queryParam:"inline" name:"auth"`

	Type AuthType
}

func CreateAuthKMSProviderConfigAuth1(kmsProviderConfigAuth1 KMSProviderConfigAuth1) Auth {
	typ := AuthTypeKMSProviderConfigAuth1

	return Auth{
		KMSProviderConfigAuth1: &kmsProviderConfigAuth1,
		Type:                   typ,
	}
}

func CreateAuthKMSProviderConfigAuth2(kmsProviderConfigAuth2 KMSProviderConfigAuth2) Auth {
	typ := AuthTypeKMSProviderConfigAuth2

	return Auth{
		KMSProviderConfigAuth2: &kmsProviderConfigAuth2,
		Type:                   typ,
	}
}

func (u *Auth) UnmarshalJSON(data []byte) error {

	var kmsProviderConfigAuth1 KMSProviderConfigAuth1 = KMSProviderConfigAuth1{}
	if err := utils.UnmarshalJSON(data, &kmsProviderConfigAuth1, "", true, nil); err == nil {
		u.KMSProviderConfigAuth1 = &kmsProviderConfigAuth1
		u.Type = AuthTypeKMSProviderConfigAuth1
		return nil
	}

	var kmsProviderConfigAuth2 KMSProviderConfigAuth2 = KMSProviderConfigAuth2{}
	if err := utils.UnmarshalJSON(data, &kmsProviderConfigAuth2, "", true, nil); err == nil {
		u.KMSProviderConfigAuth2 = &kmsProviderConfigAuth2
		u.Type = AuthTypeKMSProviderConfigAuth2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Auth", string(data))
}

func (u Auth) MarshalJSON() ([]byte, error) {
	if u.KMSProviderConfigAuth1 != nil {
		return utils.MarshalJSON(u.KMSProviderConfigAuth1, "", true)
	}

	if u.KMSProviderConfigAuth2 != nil {
		return utils.MarshalJSON(u.KMSProviderConfigAuth2, "", true)
	}

	return nil, errors.New("could not marshal union type Auth: all fields are null")
}

type KMSProviderConfig struct {
	Auth                *Auth                    `json:"auth,omitempty"`
	EnableHealthCheck   bool                     `json:"enableHealthCheck"`
	HealthCheckEndpoint *string                  `json:"healthCheckEndpoint,omitempty"`
	Namespace           *string                  `json:"namespace,omitempty"`
	Provider            SecretProvider           `json:"provider"`
	SecretDir           *string                  `json:"secretDir,omitempty"`
	Service             *AWSKMSServiceConfig     `json:"service,omitempty"`
	TLS                 *VaultKMSTLSClientConfig `json:"tls,omitempty"`
	URL                 *string                  `json:"url,omitempty"`
}

func (k *KMSProviderConfig) GetAuth() *Auth {
	if k == nil {
		return nil
	}
	return k.Auth
}

func (k *KMSProviderConfig) GetEnableHealthCheck() bool {
	if k == nil {
		return false
	}
	return k.EnableHealthCheck
}

func (k *KMSProviderConfig) GetHealthCheckEndpoint() *string {
	if k == nil {
		return nil
	}
	return k.HealthCheckEndpoint
}

func (k *KMSProviderConfig) GetNamespace() *string {
	if k == nil {
		return nil
	}
	return k.Namespace
}

func (k *KMSProviderConfig) GetProvider() SecretProvider {
	if k == nil {
		return SecretProvider("")
	}
	return k.Provider
}

func (k *KMSProviderConfig) GetSecretDir() *string {
	if k == nil {
		return nil
	}
	return k.SecretDir
}

func (k *KMSProviderConfig) GetService() *AWSKMSServiceConfig {
	if k == nil {
		return nil
	}
	return k.Service
}

func (k *KMSProviderConfig) GetTLS() *VaultKMSTLSClientConfig {
	if k == nil {
		return nil
	}
	return k.TLS
}

func (k *KMSProviderConfig) GetURL() *string {
	if k == nil {
		return nil
	}
	return k.URL
}

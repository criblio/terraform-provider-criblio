// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Op string

const (
	OpSet        Op = "set"
	OpPushRecent Op = "push-recent"
)

func (e Op) ToPointer() *Op {
	return &e
}
func (e *Op) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "set":
		fallthrough
	case "push-recent":
		*e = Op(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Op: %v", v)
	}
}

type UIStatePatch struct {
	Op    Op             `json:"op"`
	Value any            `json:"value"`
	Args  map[string]any `json:"args,omitempty"`
}

func (u *UIStatePatch) GetOp() Op {
	if u == nil {
		return Op("")
	}
	return u.Op
}

func (u *UIStatePatch) GetValue() any {
	if u == nil {
		return nil
	}
	return u.Value
}

func (u *UIStatePatch) GetArgs() map[string]any {
	if u == nil {
		return nil
	}
	return u.Args
}

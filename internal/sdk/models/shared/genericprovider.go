// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type GcsProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
	// Contents of Google Cloud service account credentials (JSON keys) file
	ServiceAccountCredentials string `json:"serviceAccountCredentials"`
	// Google Cloud Storage service endpoint
	Endpoint *string `json:"endpoint,omitempty"`
}

func (o *GcsProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GcsProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GcsProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GcsProvider) GetServiceAccountCredentials() string {
	if o == nil {
		return ""
	}
	return o.ServiceAccountCredentials
}

func (o *GcsProvider) GetEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.Endpoint
}

// AzureBlobProviderAuthenticationMethod - Azure Storage authentication method
type AzureBlobProviderAuthenticationMethod string

const (
	AzureBlobProviderAuthenticationMethodConnectionString AzureBlobProviderAuthenticationMethod = "connection_string"
	AzureBlobProviderAuthenticationMethodBlobSasURL       AzureBlobProviderAuthenticationMethod = "blob_sas_url"
	AzureBlobProviderAuthenticationMethodClientSecret     AzureBlobProviderAuthenticationMethod = "client_secret"
)

func (e AzureBlobProviderAuthenticationMethod) ToPointer() *AzureBlobProviderAuthenticationMethod {
	return &e
}
func (e *AzureBlobProviderAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "connection_string":
		fallthrough
	case "blob_sas_url":
		fallthrough
	case "client_secret":
		*e = AzureBlobProviderAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AzureBlobProviderAuthenticationMethod: %v", v)
	}
}

type SasConfig struct {
	// Name of the Azure Blob Storage container
	ContainerName string `json:"containerName"`
	// Container-specific Blob SAS URL
	BlobSasURL string `json:"blobSasUrl"`
}

func (o *SasConfig) GetContainerName() string {
	if o == nil {
		return ""
	}
	return o.ContainerName
}

func (o *SasConfig) GetBlobSasURL() string {
	if o == nil {
		return ""
	}
	return o.BlobSasURL
}

type AzureBlobProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
	// Azure Storage authentication method
	AuthenticationMethod *AzureBlobProviderAuthenticationMethod `default:"connection_string" json:"authenticationMethod"`
	// Primary region in which the storage account is located
	Location string `json:"location"`
	// Storage account connection string
	ConnectionString *string `json:"connectionString,omitempty"`
	// A list of container-specific SAS configurations
	SasConfigs []SasConfig `json:"sasConfigs,omitempty"`
	// The name of your Azure storage account
	StorageAccountName *string `json:"storageAccountName,omitempty"`
	// The service principal's tenant ID
	TenantID *string `json:"tenantId,omitempty"`
	// The service principal's client ID
	ClientID *string `json:"clientId,omitempty"`
	// The service principal's client secret
	ClientSecret *string `json:"clientSecret,omitempty"`
}

func (a AzureBlobProvider) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AzureBlobProvider) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *AzureBlobProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AzureBlobProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *AzureBlobProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *AzureBlobProvider) GetAuthenticationMethod() *AzureBlobProviderAuthenticationMethod {
	if o == nil {
		return nil
	}
	return o.AuthenticationMethod
}

func (o *AzureBlobProvider) GetLocation() string {
	if o == nil {
		return ""
	}
	return o.Location
}

func (o *AzureBlobProvider) GetConnectionString() *string {
	if o == nil {
		return nil
	}
	return o.ConnectionString
}

func (o *AzureBlobProvider) GetSasConfigs() []SasConfig {
	if o == nil {
		return nil
	}
	return o.SasConfigs
}

func (o *AzureBlobProvider) GetStorageAccountName() *string {
	if o == nil {
		return nil
	}
	return o.StorageAccountName
}

func (o *AzureBlobProvider) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *AzureBlobProvider) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *AzureBlobProvider) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

type EdgeProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
}

func (o *EdgeProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *EdgeProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *EdgeProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

type MetaProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
}

func (o *MetaProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *MetaProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *MetaProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

type CriblLeaderProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
}

func (o *CriblLeaderProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CriblLeaderProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CriblLeaderProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

// S3ProviderAuthenticationMethod - AWS authentication method
type S3ProviderAuthenticationMethod string

const (
	S3ProviderAuthenticationMethodAuto   S3ProviderAuthenticationMethod = "auto"
	S3ProviderAuthenticationMethodManual S3ProviderAuthenticationMethod = "manual"
)

func (e S3ProviderAuthenticationMethod) ToPointer() *S3ProviderAuthenticationMethod {
	return &e
}
func (e *S3ProviderAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		fallthrough
	case "manual":
		*e = S3ProviderAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for S3ProviderAuthenticationMethod: %v", v)
	}
}

// S3ProviderSignatureVersion - AWS signature version
type S3ProviderSignatureVersion string

const (
	S3ProviderSignatureVersionV2 S3ProviderSignatureVersion = "v2"
	S3ProviderSignatureVersionV4 S3ProviderSignatureVersion = "v4"
)

func (e S3ProviderSignatureVersion) ToPointer() *S3ProviderSignatureVersion {
	return &e
}
func (e *S3ProviderSignatureVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2":
		fallthrough
	case "v4":
		*e = S3ProviderSignatureVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for S3ProviderSignatureVersion: %v", v)
	}
}

type S3Provider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
	// AWS authentication method
	AwsAuthenticationMethod *S3ProviderAuthenticationMethod `json:"awsAuthenticationMethod,omitempty"`
	// ARN of the role to assume
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`
	// External ID for role assumption
	AssumeRoleExternalID *string `json:"assumeRoleExternalId,omitempty"`
	// AWS access key
	AwsAPIKey *string `json:"awsApiKey,omitempty"`
	// AWS secret key
	AwsSecretKey *string `json:"awsSecretKey,omitempty"`
	// S3 bucket name
	Bucket *string `json:"bucket,omitempty"`
	// AWS region
	Region *string `json:"region,omitempty"`
	// S3 endpoint URL
	Endpoint *string `json:"endpoint,omitempty"`
	// AWS signature version
	SignatureVersion S3ProviderSignatureVersion `json:"signatureVersion"`
	// Whether to reject unauthorized requests
	RejectUnauthorized *bool `json:"rejectUnauthorized,omitempty"`
	// Whether to reuse connections
	ReuseConnections *bool `json:"reuseConnections,omitempty"`
	// Whether to enable role assumption
	EnableAssumeRole *bool `json:"enableAssumeRole,omitempty"`
	// Suggested bucket path
	BucketPathSuggestion *string `json:"bucketPathSuggestion,omitempty"`
	// AWS session token
	SessionToken *string `json:"sessionToken,omitempty"`
	// Whether to enable ABAC source-ip tagging
	EnableAbacTagging *bool `json:"enableAbacTagging,omitempty"`
}

func (o *S3Provider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *S3Provider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *S3Provider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *S3Provider) GetAwsAuthenticationMethod() *S3ProviderAuthenticationMethod {
	if o == nil {
		return nil
	}
	return o.AwsAuthenticationMethod
}

func (o *S3Provider) GetAssumeRoleArn() *string {
	if o == nil {
		return nil
	}
	return o.AssumeRoleArn
}

func (o *S3Provider) GetAssumeRoleExternalID() *string {
	if o == nil {
		return nil
	}
	return o.AssumeRoleExternalID
}

func (o *S3Provider) GetAwsAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsAPIKey
}

func (o *S3Provider) GetAwsSecretKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsSecretKey
}

func (o *S3Provider) GetBucket() *string {
	if o == nil {
		return nil
	}
	return o.Bucket
}

func (o *S3Provider) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *S3Provider) GetEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.Endpoint
}

func (o *S3Provider) GetSignatureVersion() S3ProviderSignatureVersion {
	if o == nil {
		return S3ProviderSignatureVersion("")
	}
	return o.SignatureVersion
}

func (o *S3Provider) GetRejectUnauthorized() *bool {
	if o == nil {
		return nil
	}
	return o.RejectUnauthorized
}

func (o *S3Provider) GetReuseConnections() *bool {
	if o == nil {
		return nil
	}
	return o.ReuseConnections
}

func (o *S3Provider) GetEnableAssumeRole() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAssumeRole
}

func (o *S3Provider) GetBucketPathSuggestion() *string {
	if o == nil {
		return nil
	}
	return o.BucketPathSuggestion
}

func (o *S3Provider) GetSessionToken() *string {
	if o == nil {
		return nil
	}
	return o.SessionToken
}

func (o *S3Provider) GetEnableAbacTagging() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAbacTagging
}

type AwsSecurityLakeProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
}

func (o *AwsSecurityLakeProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AwsSecurityLakeProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *AwsSecurityLakeProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

type APIElasticSearchProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
	// Elasticsearch username for authentication
	Username string `json:"username"`
	// Elasticsearch password for authentication
	Password string `json:"password"`
	// Elasticsearch API endpoint URL
	Endpoint string `json:"endpoint"`
}

func (o *APIElasticSearchProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIElasticSearchProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIElasticSearchProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIElasticSearchProvider) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *APIElasticSearchProvider) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *APIElasticSearchProvider) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

type APIOpenSearchProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
	// OpenSearch username for authentication
	Username string `json:"username"`
	// OpenSearch password for authentication
	Password string `json:"password"`
	// OpenSearch API endpoint URL. Example: https://opensearch.mycompany.com
	Endpoint string `json:"endpoint"`
}

func (o *APIOpenSearchProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIOpenSearchProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIOpenSearchProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIOpenSearchProvider) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *APIOpenSearchProvider) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *APIOpenSearchProvider) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

type PrometheusProviderAuthenticationType string

const (
	PrometheusProviderAuthenticationTypeNone  PrometheusProviderAuthenticationType = "none"
	PrometheusProviderAuthenticationTypeBasic PrometheusProviderAuthenticationType = "basic"
	PrometheusProviderAuthenticationTypeToken PrometheusProviderAuthenticationType = "token"
)

func (e PrometheusProviderAuthenticationType) ToPointer() *PrometheusProviderAuthenticationType {
	return &e
}
func (e *PrometheusProviderAuthenticationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "basic":
		fallthrough
	case "token":
		*e = PrometheusProviderAuthenticationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PrometheusProviderAuthenticationType: %v", v)
	}
}

type PrometheusProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
	// Prometheus API endpoint URL. Example: https://prometheus.goats.biz
	Endpoint string                                `json:"endpoint"`
	AuthType *PrometheusProviderAuthenticationType `default:"none" json:"authType"`
	// Basic auth username
	Username *string `json:"username,omitempty"`
	// Basic auth password
	Password *string `json:"password,omitempty"`
	// Bearer token
	Token *string `json:"token,omitempty"`
	// Maximum number of concurrent API requests
	MaxConcurrency *float64 `default:"3" json:"maxConcurrency"`
}

func (p PrometheusProvider) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PrometheusProvider) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *PrometheusProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PrometheusProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *PrometheusProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PrometheusProvider) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *PrometheusProvider) GetAuthType() *PrometheusProviderAuthenticationType {
	if o == nil {
		return nil
	}
	return o.AuthType
}

func (o *PrometheusProvider) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *PrometheusProvider) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *PrometheusProvider) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *PrometheusProvider) GetMaxConcurrency() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxConcurrency
}

type ClickHouseProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
	// The ClickHouse username for authentication
	Username string `json:"username"`
	// The ClickHouse user password for authentication
	Password *string `json:"password,omitempty"`
	// URL to ClickHouse server with HTTP interface enabled. Ideally should be HTTPS over port 8443.
	Endpoint string `json:"endpoint"`
}

func (o *ClickHouseProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ClickHouseProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *ClickHouseProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ClickHouseProvider) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *ClickHouseProvider) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *ClickHouseProvider) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

type SnowflakeProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
	// The Snowflake account identifier, in the format <orgname>-<account_name>
	AccountIdentifier string `json:"accountIdentifier"`
	// The Snowflake user for key pair authentication
	Username string `json:"username"`
	// The private key string out of the key file, from the pair of keys generated for authentication
	PrivKey string `json:"privKey"`
	// The key password for the private key
	Passphrase *string `json:"passphrase,omitempty"`
	// Total number of concurrent executors for processing Snowflake partitions
	MaxConcurrency *int64 `json:"maxConcurrency,omitempty"`
	// Optional endpoint to override default REST API endpoint
	Endpoint *string `json:"endpoint,omitempty"`
}

func (o *SnowflakeProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *SnowflakeProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *SnowflakeProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *SnowflakeProvider) GetAccountIdentifier() string {
	if o == nil {
		return ""
	}
	return o.AccountIdentifier
}

func (o *SnowflakeProvider) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *SnowflakeProvider) GetPrivKey() string {
	if o == nil {
		return ""
	}
	return o.PrivKey
}

func (o *SnowflakeProvider) GetPassphrase() *string {
	if o == nil {
		return nil
	}
	return o.Passphrase
}

func (o *SnowflakeProvider) GetMaxConcurrency() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxConcurrency
}

func (o *SnowflakeProvider) GetEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.Endpoint
}

type APIAzureDataExplorerProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
	// The Tenant ID of the authorized application
	TenantID string `json:"tenantId"`
	// The Client ID (also known as Secret ID) of the authorized application
	ClientID string `json:"clientId"`
	// The Client Secret of the authorized application
	ClientSecret string `json:"clientSecret"`
}

func (o *APIAzureDataExplorerProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIAzureDataExplorerProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIAzureDataExplorerProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIAzureDataExplorerProvider) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *APIAzureDataExplorerProvider) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *APIAzureDataExplorerProvider) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

type APIZoomProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
	// A list of account configurations
	AccountConfigs []ZoomAccountConfig `json:"accountConfigs"`
}

func (o *APIZoomProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIZoomProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIZoomProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIZoomProvider) GetAccountConfigs() []ZoomAccountConfig {
	if o == nil {
		return []ZoomAccountConfig{}
	}
	return o.AccountConfigs
}

type APITailscaleProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
	// A list of account configuration
	AccountConfigs []TailscaleAccountConfig `json:"accountConfigs"`
}

func (o *APITailscaleProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APITailscaleProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APITailscaleProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APITailscaleProvider) GetAccountConfigs() []TailscaleAccountConfig {
	if o == nil {
		return []TailscaleAccountConfig{}
	}
	return o.AccountConfigs
}

type APIOktaProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
	// A list of account configurations
	AccountConfigs []OktaAccountConfig `json:"accountConfigs"`
}

func (o *APIOktaProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIOktaProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIOktaProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIOktaProvider) GetAccountConfigs() []OktaAccountConfig {
	if o == nil {
		return []OktaAccountConfig{}
	}
	return o.AccountConfigs
}

type APIMsGraphProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
	// A list of account configurations
	AccountConfigs []MsGraphAccountConfig `json:"accountConfigs"`
}

func (o *APIMsGraphProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIMsGraphProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIMsGraphProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIMsGraphProvider) GetAccountConfigs() []MsGraphAccountConfig {
	if o == nil {
		return []MsGraphAccountConfig{}
	}
	return o.AccountConfigs
}

type APIGoogleWorkspaceProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
	// A list of account configurations
	AccountConfigs []GoogleWorkspaceAccountConfig `json:"accountConfigs"`
}

func (o *APIGoogleWorkspaceProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIGoogleWorkspaceProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIGoogleWorkspaceProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIGoogleWorkspaceProvider) GetAccountConfigs() []GoogleWorkspaceAccountConfig {
	if o == nil {
		return []GoogleWorkspaceAccountConfig{}
	}
	return o.AccountConfigs
}

type APIGcpProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
	// A list of account configurations
	AccountConfigs []GcpAccountConfig `json:"accountConfigs"`
}

func (o *APIGcpProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIGcpProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIGcpProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIGcpProvider) GetAccountConfigs() []GcpAccountConfig {
	if o == nil {
		return []GcpAccountConfig{}
	}
	return o.AccountConfigs
}

type APIAzureProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
	// A list of account configurations
	AccountConfigs []AzureAccountConfig `json:"accountConfigs"`
}

func (o *APIAzureProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIAzureProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIAzureProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIAzureProvider) GetAccountConfigs() []AzureAccountConfig {
	if o == nil {
		return []AzureAccountConfig{}
	}
	return o.AccountConfigs
}

type APIAwsProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
	// A list of account configurations
	AccountConfigs []AwsAccountConfig `json:"accountConfigs"`
}

func (o *APIAwsProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIAwsProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIAwsProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIAwsProvider) GetAccountConfigs() []AwsAccountConfig {
	if o == nil {
		return []AwsAccountConfig{}
	}
	return o.AccountConfigs
}

// APIHTTPProviderAuthenticationMethod - The authentication method for API calls
type APIHTTPProviderAuthenticationMethod string

const (
	APIHTTPProviderAuthenticationMethodNone  APIHTTPProviderAuthenticationMethod = "none"
	APIHTTPProviderAuthenticationMethodBasic APIHTTPProviderAuthenticationMethod = "basic"
	APIHTTPProviderAuthenticationMethodLogin APIHTTPProviderAuthenticationMethod = "login"
	APIHTTPProviderAuthenticationMethodOauth APIHTTPProviderAuthenticationMethod = "oauth"
)

func (e APIHTTPProviderAuthenticationMethod) ToPointer() *APIHTTPProviderAuthenticationMethod {
	return &e
}
func (e *APIHTTPProviderAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "basic":
		fallthrough
	case "login":
		fallthrough
	case "oauth":
		*e = APIHTTPProviderAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for APIHTTPProviderAuthenticationMethod: %v", v)
	}
}

type APIHTTPProvider struct {
	// Unique identifier for the provider
	ID string `json:"id"`
	// Type of the provider
	Type string `json:"type"`
	// Description of the provider
	Description *string `json:"description,omitempty"`
	// A list of the available endpoints for this provider
	AvailableEndpoints []HTTPEndpoint `json:"availableEndpoints"`
	// The authentication method for API calls
	AuthenticationMethod *APIHTTPProviderAuthenticationMethod `default:"none" json:"authenticationMethod"`
}

func (a APIHTTPProvider) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *APIHTTPProvider) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *APIHTTPProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIHTTPProvider) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIHTTPProvider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIHTTPProvider) GetAvailableEndpoints() []HTTPEndpoint {
	if o == nil {
		return []HTTPEndpoint{}
	}
	return o.AvailableEndpoints
}

func (o *APIHTTPProvider) GetAuthenticationMethod() *APIHTTPProviderAuthenticationMethod {
	if o == nil {
		return nil
	}
	return o.AuthenticationMethod
}

type GenericProviderType string

const (
	GenericProviderTypeAPIHTTPProvider              GenericProviderType = "ApiHttpProvider"
	GenericProviderTypeAPIAwsProvider               GenericProviderType = "ApiAwsProvider"
	GenericProviderTypeAPIAzureProvider             GenericProviderType = "ApiAzureProvider"
	GenericProviderTypeAPIGcpProvider               GenericProviderType = "ApiGcpProvider"
	GenericProviderTypeAPIGoogleWorkspaceProvider   GenericProviderType = "ApiGoogleWorkspaceProvider"
	GenericProviderTypeAPIMsGraphProvider           GenericProviderType = "ApiMsGraphProvider"
	GenericProviderTypeAPIOktaProvider              GenericProviderType = "ApiOktaProvider"
	GenericProviderTypeAPITailscaleProvider         GenericProviderType = "ApiTailscaleProvider"
	GenericProviderTypeAPIZoomProvider              GenericProviderType = "ApiZoomProvider"
	GenericProviderTypeAPIAzureDataExplorerProvider GenericProviderType = "ApiAzureDataExplorerProvider"
	GenericProviderTypeSnowflakeProvider            GenericProviderType = "SnowflakeProvider"
	GenericProviderTypeClickHouseProvider           GenericProviderType = "ClickHouseProvider"
	GenericProviderTypePrometheusProvider           GenericProviderType = "PrometheusProvider"
	GenericProviderTypeAPIOpenSearchProvider        GenericProviderType = "ApiOpenSearchProvider"
	GenericProviderTypeAPIElasticSearchProvider     GenericProviderType = "ApiElasticSearchProvider"
	GenericProviderTypeAwsSecurityLakeProvider      GenericProviderType = "AwsSecurityLakeProvider"
	GenericProviderTypeS3Provider                   GenericProviderType = "S3Provider"
	GenericProviderTypeCriblLeaderProvider          GenericProviderType = "CriblLeaderProvider"
	GenericProviderTypeMetaProvider                 GenericProviderType = "MetaProvider"
	GenericProviderTypeEdgeProvider                 GenericProviderType = "EdgeProvider"
	GenericProviderTypeAzureBlobProvider            GenericProviderType = "AzureBlobProvider"
	GenericProviderTypeGcsProvider                  GenericProviderType = "GcsProvider"
)

type GenericProvider struct {
	APIHTTPProvider              *APIHTTPProvider              `queryParam:"inline"`
	APIAwsProvider               *APIAwsProvider               `queryParam:"inline"`
	APIAzureProvider             *APIAzureProvider             `queryParam:"inline"`
	APIGcpProvider               *APIGcpProvider               `queryParam:"inline"`
	APIGoogleWorkspaceProvider   *APIGoogleWorkspaceProvider   `queryParam:"inline"`
	APIMsGraphProvider           *APIMsGraphProvider           `queryParam:"inline"`
	APIOktaProvider              *APIOktaProvider              `queryParam:"inline"`
	APITailscaleProvider         *APITailscaleProvider         `queryParam:"inline"`
	APIZoomProvider              *APIZoomProvider              `queryParam:"inline"`
	APIAzureDataExplorerProvider *APIAzureDataExplorerProvider `queryParam:"inline"`
	SnowflakeProvider            *SnowflakeProvider            `queryParam:"inline"`
	ClickHouseProvider           *ClickHouseProvider           `queryParam:"inline"`
	PrometheusProvider           *PrometheusProvider           `queryParam:"inline"`
	APIOpenSearchProvider        *APIOpenSearchProvider        `queryParam:"inline"`
	APIElasticSearchProvider     *APIElasticSearchProvider     `queryParam:"inline"`
	AwsSecurityLakeProvider      *AwsSecurityLakeProvider      `queryParam:"inline"`
	S3Provider                   *S3Provider                   `queryParam:"inline"`
	CriblLeaderProvider          *CriblLeaderProvider          `queryParam:"inline"`
	MetaProvider                 *MetaProvider                 `queryParam:"inline"`
	EdgeProvider                 *EdgeProvider                 `queryParam:"inline"`
	AzureBlobProvider            *AzureBlobProvider            `queryParam:"inline"`
	GcsProvider                  *GcsProvider                  `queryParam:"inline"`

	Type GenericProviderType
}

func CreateGenericProviderAPIHTTPProvider(apiHTTPProvider APIHTTPProvider) GenericProvider {
	typ := GenericProviderTypeAPIHTTPProvider

	return GenericProvider{
		APIHTTPProvider: &apiHTTPProvider,
		Type:            typ,
	}
}

func CreateGenericProviderAPIAwsProvider(apiAwsProvider APIAwsProvider) GenericProvider {
	typ := GenericProviderTypeAPIAwsProvider

	return GenericProvider{
		APIAwsProvider: &apiAwsProvider,
		Type:           typ,
	}
}

func CreateGenericProviderAPIAzureProvider(apiAzureProvider APIAzureProvider) GenericProvider {
	typ := GenericProviderTypeAPIAzureProvider

	return GenericProvider{
		APIAzureProvider: &apiAzureProvider,
		Type:             typ,
	}
}

func CreateGenericProviderAPIGcpProvider(apiGcpProvider APIGcpProvider) GenericProvider {
	typ := GenericProviderTypeAPIGcpProvider

	return GenericProvider{
		APIGcpProvider: &apiGcpProvider,
		Type:           typ,
	}
}

func CreateGenericProviderAPIGoogleWorkspaceProvider(apiGoogleWorkspaceProvider APIGoogleWorkspaceProvider) GenericProvider {
	typ := GenericProviderTypeAPIGoogleWorkspaceProvider

	return GenericProvider{
		APIGoogleWorkspaceProvider: &apiGoogleWorkspaceProvider,
		Type:                       typ,
	}
}

func CreateGenericProviderAPIMsGraphProvider(apiMsGraphProvider APIMsGraphProvider) GenericProvider {
	typ := GenericProviderTypeAPIMsGraphProvider

	return GenericProvider{
		APIMsGraphProvider: &apiMsGraphProvider,
		Type:               typ,
	}
}

func CreateGenericProviderAPIOktaProvider(apiOktaProvider APIOktaProvider) GenericProvider {
	typ := GenericProviderTypeAPIOktaProvider

	return GenericProvider{
		APIOktaProvider: &apiOktaProvider,
		Type:            typ,
	}
}

func CreateGenericProviderAPITailscaleProvider(apiTailscaleProvider APITailscaleProvider) GenericProvider {
	typ := GenericProviderTypeAPITailscaleProvider

	return GenericProvider{
		APITailscaleProvider: &apiTailscaleProvider,
		Type:                 typ,
	}
}

func CreateGenericProviderAPIZoomProvider(apiZoomProvider APIZoomProvider) GenericProvider {
	typ := GenericProviderTypeAPIZoomProvider

	return GenericProvider{
		APIZoomProvider: &apiZoomProvider,
		Type:            typ,
	}
}

func CreateGenericProviderAPIAzureDataExplorerProvider(apiAzureDataExplorerProvider APIAzureDataExplorerProvider) GenericProvider {
	typ := GenericProviderTypeAPIAzureDataExplorerProvider

	return GenericProvider{
		APIAzureDataExplorerProvider: &apiAzureDataExplorerProvider,
		Type:                         typ,
	}
}

func CreateGenericProviderSnowflakeProvider(snowflakeProvider SnowflakeProvider) GenericProvider {
	typ := GenericProviderTypeSnowflakeProvider

	return GenericProvider{
		SnowflakeProvider: &snowflakeProvider,
		Type:              typ,
	}
}

func CreateGenericProviderClickHouseProvider(clickHouseProvider ClickHouseProvider) GenericProvider {
	typ := GenericProviderTypeClickHouseProvider

	return GenericProvider{
		ClickHouseProvider: &clickHouseProvider,
		Type:               typ,
	}
}

func CreateGenericProviderPrometheusProvider(prometheusProvider PrometheusProvider) GenericProvider {
	typ := GenericProviderTypePrometheusProvider

	return GenericProvider{
		PrometheusProvider: &prometheusProvider,
		Type:               typ,
	}
}

func CreateGenericProviderAPIOpenSearchProvider(apiOpenSearchProvider APIOpenSearchProvider) GenericProvider {
	typ := GenericProviderTypeAPIOpenSearchProvider

	return GenericProvider{
		APIOpenSearchProvider: &apiOpenSearchProvider,
		Type:                  typ,
	}
}

func CreateGenericProviderAPIElasticSearchProvider(apiElasticSearchProvider APIElasticSearchProvider) GenericProvider {
	typ := GenericProviderTypeAPIElasticSearchProvider

	return GenericProvider{
		APIElasticSearchProvider: &apiElasticSearchProvider,
		Type:                     typ,
	}
}

func CreateGenericProviderAwsSecurityLakeProvider(awsSecurityLakeProvider AwsSecurityLakeProvider) GenericProvider {
	typ := GenericProviderTypeAwsSecurityLakeProvider

	return GenericProvider{
		AwsSecurityLakeProvider: &awsSecurityLakeProvider,
		Type:                    typ,
	}
}

func CreateGenericProviderS3Provider(s3Provider S3Provider) GenericProvider {
	typ := GenericProviderTypeS3Provider

	return GenericProvider{
		S3Provider: &s3Provider,
		Type:       typ,
	}
}

func CreateGenericProviderCriblLeaderProvider(criblLeaderProvider CriblLeaderProvider) GenericProvider {
	typ := GenericProviderTypeCriblLeaderProvider

	return GenericProvider{
		CriblLeaderProvider: &criblLeaderProvider,
		Type:                typ,
	}
}

func CreateGenericProviderMetaProvider(metaProvider MetaProvider) GenericProvider {
	typ := GenericProviderTypeMetaProvider

	return GenericProvider{
		MetaProvider: &metaProvider,
		Type:         typ,
	}
}

func CreateGenericProviderEdgeProvider(edgeProvider EdgeProvider) GenericProvider {
	typ := GenericProviderTypeEdgeProvider

	return GenericProvider{
		EdgeProvider: &edgeProvider,
		Type:         typ,
	}
}

func CreateGenericProviderAzureBlobProvider(azureBlobProvider AzureBlobProvider) GenericProvider {
	typ := GenericProviderTypeAzureBlobProvider

	return GenericProvider{
		AzureBlobProvider: &azureBlobProvider,
		Type:              typ,
	}
}

func CreateGenericProviderGcsProvider(gcsProvider GcsProvider) GenericProvider {
	typ := GenericProviderTypeGcsProvider

	return GenericProvider{
		GcsProvider: &gcsProvider,
		Type:        typ,
	}
}

func (u *GenericProvider) UnmarshalJSON(data []byte) error {

	var awsSecurityLakeProvider AwsSecurityLakeProvider = AwsSecurityLakeProvider{}
	if err := utils.UnmarshalJSON(data, &awsSecurityLakeProvider, "", true, true); err == nil {
		u.AwsSecurityLakeProvider = &awsSecurityLakeProvider
		u.Type = GenericProviderTypeAwsSecurityLakeProvider
		return nil
	}

	var edgeProvider EdgeProvider = EdgeProvider{}
	if err := utils.UnmarshalJSON(data, &edgeProvider, "", true, true); err == nil {
		u.EdgeProvider = &edgeProvider
		u.Type = GenericProviderTypeEdgeProvider
		return nil
	}

	var metaProvider MetaProvider = MetaProvider{}
	if err := utils.UnmarshalJSON(data, &metaProvider, "", true, true); err == nil {
		u.MetaProvider = &metaProvider
		u.Type = GenericProviderTypeMetaProvider
		return nil
	}

	var criblLeaderProvider CriblLeaderProvider = CriblLeaderProvider{}
	if err := utils.UnmarshalJSON(data, &criblLeaderProvider, "", true, true); err == nil {
		u.CriblLeaderProvider = &criblLeaderProvider
		u.Type = GenericProviderTypeCriblLeaderProvider
		return nil
	}

	var apiMsGraphProvider APIMsGraphProvider = APIMsGraphProvider{}
	if err := utils.UnmarshalJSON(data, &apiMsGraphProvider, "", true, true); err == nil {
		u.APIMsGraphProvider = &apiMsGraphProvider
		u.Type = GenericProviderTypeAPIMsGraphProvider
		return nil
	}

	var apiGoogleWorkspaceProvider APIGoogleWorkspaceProvider = APIGoogleWorkspaceProvider{}
	if err := utils.UnmarshalJSON(data, &apiGoogleWorkspaceProvider, "", true, true); err == nil {
		u.APIGoogleWorkspaceProvider = &apiGoogleWorkspaceProvider
		u.Type = GenericProviderTypeAPIGoogleWorkspaceProvider
		return nil
	}

	var apiOktaProvider APIOktaProvider = APIOktaProvider{}
	if err := utils.UnmarshalJSON(data, &apiOktaProvider, "", true, true); err == nil {
		u.APIOktaProvider = &apiOktaProvider
		u.Type = GenericProviderTypeAPIOktaProvider
		return nil
	}

	var apiTailscaleProvider APITailscaleProvider = APITailscaleProvider{}
	if err := utils.UnmarshalJSON(data, &apiTailscaleProvider, "", true, true); err == nil {
		u.APITailscaleProvider = &apiTailscaleProvider
		u.Type = GenericProviderTypeAPITailscaleProvider
		return nil
	}

	var apiZoomProvider APIZoomProvider = APIZoomProvider{}
	if err := utils.UnmarshalJSON(data, &apiZoomProvider, "", true, true); err == nil {
		u.APIZoomProvider = &apiZoomProvider
		u.Type = GenericProviderTypeAPIZoomProvider
		return nil
	}

	var apiAwsProvider APIAwsProvider = APIAwsProvider{}
	if err := utils.UnmarshalJSON(data, &apiAwsProvider, "", true, true); err == nil {
		u.APIAwsProvider = &apiAwsProvider
		u.Type = GenericProviderTypeAPIAwsProvider
		return nil
	}

	var apiAzureProvider APIAzureProvider = APIAzureProvider{}
	if err := utils.UnmarshalJSON(data, &apiAzureProvider, "", true, true); err == nil {
		u.APIAzureProvider = &apiAzureProvider
		u.Type = GenericProviderTypeAPIAzureProvider
		return nil
	}

	var apiGcpProvider APIGcpProvider = APIGcpProvider{}
	if err := utils.UnmarshalJSON(data, &apiGcpProvider, "", true, true); err == nil {
		u.APIGcpProvider = &apiGcpProvider
		u.Type = GenericProviderTypeAPIGcpProvider
		return nil
	}

	var apiHTTPProvider APIHTTPProvider = APIHTTPProvider{}
	if err := utils.UnmarshalJSON(data, &apiHTTPProvider, "", true, true); err == nil {
		u.APIHTTPProvider = &apiHTTPProvider
		u.Type = GenericProviderTypeAPIHTTPProvider
		return nil
	}

	var gcsProvider GcsProvider = GcsProvider{}
	if err := utils.UnmarshalJSON(data, &gcsProvider, "", true, true); err == nil {
		u.GcsProvider = &gcsProvider
		u.Type = GenericProviderTypeGcsProvider
		return nil
	}

	var apiAzureDataExplorerProvider APIAzureDataExplorerProvider = APIAzureDataExplorerProvider{}
	if err := utils.UnmarshalJSON(data, &apiAzureDataExplorerProvider, "", true, true); err == nil {
		u.APIAzureDataExplorerProvider = &apiAzureDataExplorerProvider
		u.Type = GenericProviderTypeAPIAzureDataExplorerProvider
		return nil
	}

	var apiElasticSearchProvider APIElasticSearchProvider = APIElasticSearchProvider{}
	if err := utils.UnmarshalJSON(data, &apiElasticSearchProvider, "", true, true); err == nil {
		u.APIElasticSearchProvider = &apiElasticSearchProvider
		u.Type = GenericProviderTypeAPIElasticSearchProvider
		return nil
	}

	var apiOpenSearchProvider APIOpenSearchProvider = APIOpenSearchProvider{}
	if err := utils.UnmarshalJSON(data, &apiOpenSearchProvider, "", true, true); err == nil {
		u.APIOpenSearchProvider = &apiOpenSearchProvider
		u.Type = GenericProviderTypeAPIOpenSearchProvider
		return nil
	}

	var clickHouseProvider ClickHouseProvider = ClickHouseProvider{}
	if err := utils.UnmarshalJSON(data, &clickHouseProvider, "", true, true); err == nil {
		u.ClickHouseProvider = &clickHouseProvider
		u.Type = GenericProviderTypeClickHouseProvider
		return nil
	}

	var prometheusProvider PrometheusProvider = PrometheusProvider{}
	if err := utils.UnmarshalJSON(data, &prometheusProvider, "", true, true); err == nil {
		u.PrometheusProvider = &prometheusProvider
		u.Type = GenericProviderTypePrometheusProvider
		return nil
	}

	var snowflakeProvider SnowflakeProvider = SnowflakeProvider{}
	if err := utils.UnmarshalJSON(data, &snowflakeProvider, "", true, true); err == nil {
		u.SnowflakeProvider = &snowflakeProvider
		u.Type = GenericProviderTypeSnowflakeProvider
		return nil
	}

	var azureBlobProvider AzureBlobProvider = AzureBlobProvider{}
	if err := utils.UnmarshalJSON(data, &azureBlobProvider, "", true, true); err == nil {
		u.AzureBlobProvider = &azureBlobProvider
		u.Type = GenericProviderTypeAzureBlobProvider
		return nil
	}

	var s3Provider S3Provider = S3Provider{}
	if err := utils.UnmarshalJSON(data, &s3Provider, "", true, true); err == nil {
		u.S3Provider = &s3Provider
		u.Type = GenericProviderTypeS3Provider
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GenericProvider", string(data))
}

func (u GenericProvider) MarshalJSON() ([]byte, error) {
	if u.APIHTTPProvider != nil {
		return utils.MarshalJSON(u.APIHTTPProvider, "", true)
	}

	if u.APIAwsProvider != nil {
		return utils.MarshalJSON(u.APIAwsProvider, "", true)
	}

	if u.APIAzureProvider != nil {
		return utils.MarshalJSON(u.APIAzureProvider, "", true)
	}

	if u.APIGcpProvider != nil {
		return utils.MarshalJSON(u.APIGcpProvider, "", true)
	}

	if u.APIGoogleWorkspaceProvider != nil {
		return utils.MarshalJSON(u.APIGoogleWorkspaceProvider, "", true)
	}

	if u.APIMsGraphProvider != nil {
		return utils.MarshalJSON(u.APIMsGraphProvider, "", true)
	}

	if u.APIOktaProvider != nil {
		return utils.MarshalJSON(u.APIOktaProvider, "", true)
	}

	if u.APITailscaleProvider != nil {
		return utils.MarshalJSON(u.APITailscaleProvider, "", true)
	}

	if u.APIZoomProvider != nil {
		return utils.MarshalJSON(u.APIZoomProvider, "", true)
	}

	if u.APIAzureDataExplorerProvider != nil {
		return utils.MarshalJSON(u.APIAzureDataExplorerProvider, "", true)
	}

	if u.SnowflakeProvider != nil {
		return utils.MarshalJSON(u.SnowflakeProvider, "", true)
	}

	if u.ClickHouseProvider != nil {
		return utils.MarshalJSON(u.ClickHouseProvider, "", true)
	}

	if u.PrometheusProvider != nil {
		return utils.MarshalJSON(u.PrometheusProvider, "", true)
	}

	if u.APIOpenSearchProvider != nil {
		return utils.MarshalJSON(u.APIOpenSearchProvider, "", true)
	}

	if u.APIElasticSearchProvider != nil {
		return utils.MarshalJSON(u.APIElasticSearchProvider, "", true)
	}

	if u.AwsSecurityLakeProvider != nil {
		return utils.MarshalJSON(u.AwsSecurityLakeProvider, "", true)
	}

	if u.S3Provider != nil {
		return utils.MarshalJSON(u.S3Provider, "", true)
	}

	if u.CriblLeaderProvider != nil {
		return utils.MarshalJSON(u.CriblLeaderProvider, "", true)
	}

	if u.MetaProvider != nil {
		return utils.MarshalJSON(u.MetaProvider, "", true)
	}

	if u.EdgeProvider != nil {
		return utils.MarshalJSON(u.EdgeProvider, "", true)
	}

	if u.AzureBlobProvider != nil {
		return utils.MarshalJSON(u.AzureBlobProvider, "", true)
	}

	if u.GcsProvider != nil {
		return utils.MarshalJSON(u.GcsProvider, "", true)
	}

	return nil, errors.New("could not marshal union type GenericProvider: all fields are null")
}

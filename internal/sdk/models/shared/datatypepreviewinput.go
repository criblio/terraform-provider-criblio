// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type TypeRawData string

const (
	TypeRawDataRawData TypeRawData = "rawData"
)

func (e TypeRawData) ToPointer() *TypeRawData {
	return &e
}
func (e *TypeRawData) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rawData":
		*e = TypeRawData(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeRawData: %v", v)
	}
}

type DatatypePreviewInputRawData struct {
	RawData string      `json:"rawData"`
	Type    TypeRawData `json:"type"`
}

func (o *DatatypePreviewInputRawData) GetRawData() string {
	if o == nil {
		return ""
	}
	return o.RawData
}

func (o *DatatypePreviewInputRawData) GetType() TypeRawData {
	if o == nil {
		return TypeRawData("")
	}
	return o.Type
}

type DatatypePreviewInputTypeDataset string

const (
	DatatypePreviewInputTypeDatasetDataset DatatypePreviewInputTypeDataset = "dataset"
)

func (e DatatypePreviewInputTypeDataset) ToPointer() *DatatypePreviewInputTypeDataset {
	return &e
}
func (e *DatatypePreviewInputTypeDataset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dataset":
		*e = DatatypePreviewInputTypeDataset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatatypePreviewInputTypeDataset: %v", v)
	}
}

type DatatypePreviewInputDataset struct {
	Dataset string                          `json:"dataset"`
	Type    DatatypePreviewInputTypeDataset `json:"type"`
}

func (o *DatatypePreviewInputDataset) GetDataset() string {
	if o == nil {
		return ""
	}
	return o.Dataset
}

func (o *DatatypePreviewInputDataset) GetType() DatatypePreviewInputTypeDataset {
	if o == nil {
		return DatatypePreviewInputTypeDataset("")
	}
	return o.Type
}

type DatatypePreviewInputType string

const (
	DatatypePreviewInputTypeDatatypePreviewInputDataset DatatypePreviewInputType = "DatatypePreviewInput_Dataset"
	DatatypePreviewInputTypeDatatypePreviewInputRawData DatatypePreviewInputType = "DatatypePreviewInput_RawData"
)

type DatatypePreviewInput struct {
	DatatypePreviewInputDataset *DatatypePreviewInputDataset `queryParam:"inline"`
	DatatypePreviewInputRawData *DatatypePreviewInputRawData `queryParam:"inline"`

	Type DatatypePreviewInputType
}

func CreateDatatypePreviewInputDatatypePreviewInputDataset(datatypePreviewInputDataset DatatypePreviewInputDataset) DatatypePreviewInput {
	typ := DatatypePreviewInputTypeDatatypePreviewInputDataset

	return DatatypePreviewInput{
		DatatypePreviewInputDataset: &datatypePreviewInputDataset,
		Type:                        typ,
	}
}

func CreateDatatypePreviewInputDatatypePreviewInputRawData(datatypePreviewInputRawData DatatypePreviewInputRawData) DatatypePreviewInput {
	typ := DatatypePreviewInputTypeDatatypePreviewInputRawData

	return DatatypePreviewInput{
		DatatypePreviewInputRawData: &datatypePreviewInputRawData,
		Type:                        typ,
	}
}

func (u *DatatypePreviewInput) UnmarshalJSON(data []byte) error {

	var datatypePreviewInputDataset DatatypePreviewInputDataset = DatatypePreviewInputDataset{}
	if err := utils.UnmarshalJSON(data, &datatypePreviewInputDataset, "", true, true); err == nil {
		u.DatatypePreviewInputDataset = &datatypePreviewInputDataset
		u.Type = DatatypePreviewInputTypeDatatypePreviewInputDataset
		return nil
	}

	var datatypePreviewInputRawData DatatypePreviewInputRawData = DatatypePreviewInputRawData{}
	if err := utils.UnmarshalJSON(data, &datatypePreviewInputRawData, "", true, true); err == nil {
		u.DatatypePreviewInputRawData = &datatypePreviewInputRawData
		u.Type = DatatypePreviewInputTypeDatatypePreviewInputRawData
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DatatypePreviewInput", string(data))
}

func (u DatatypePreviewInput) MarshalJSON() ([]byte, error) {
	if u.DatatypePreviewInputDataset != nil {
		return utils.MarshalJSON(u.DatatypePreviewInputDataset, "", true)
	}

	if u.DatatypePreviewInputRawData != nil {
		return utils.MarshalJSON(u.DatatypePreviewInputRawData, "", true)
	}

	return nil, errors.New("could not marshal union type DatatypePreviewInput: all fields are null")
}

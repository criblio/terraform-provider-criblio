// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AppscopeConfigWithCustomCribl struct {
	Authtoken               *string            `json:"authtoken,omitempty"`
	Enable                  *bool              `json:"enable,omitempty"`
	Transport               *AppscopeTransport `json:"transport,omitempty"`
	UseScopeSourceTransport *bool              `json:"useScopeSourceTransport,omitempty"`
}

func (a *AppscopeConfigWithCustomCribl) GetAuthtoken() *string {
	if a == nil {
		return nil
	}
	return a.Authtoken
}

func (a *AppscopeConfigWithCustomCribl) GetEnable() *bool {
	if a == nil {
		return nil
	}
	return a.Enable
}

func (a *AppscopeConfigWithCustomCribl) GetTransport() *AppscopeTransport {
	if a == nil {
		return nil
	}
	return a.Transport
}

func (a *AppscopeConfigWithCustomCribl) GetUseScopeSourceTransport() *bool {
	if a == nil {
		return nil
	}
	return a.UseScopeSourceTransport
}

type AppscopeConfigWithCustomFormatNdjson struct {
	Enhancefs      bool    `json:"enhancefs"`
	Maxeventpersec float64 `json:"maxeventpersec"`
}

func (a *AppscopeConfigWithCustomFormatNdjson) GetEnhancefs() bool {
	if a == nil {
		return false
	}
	return a.Enhancefs
}

func (a *AppscopeConfigWithCustomFormatNdjson) GetMaxeventpersec() float64 {
	if a == nil {
		return 0.0
	}
	return a.Maxeventpersec
}

type AppscopeConfigWithCustomType string

const (
	AppscopeConfigWithCustomTypeNdjson AppscopeConfigWithCustomType = "ndjson"
)

func (e AppscopeConfigWithCustomType) ToPointer() *AppscopeConfigWithCustomType {
	return &e
}
func (e *AppscopeConfigWithCustomType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ndjson":
		*e = AppscopeConfigWithCustomType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppscopeConfigWithCustomType: %v", v)
	}
}

type AppscopeConfigWithCustomWatch struct {
	Allowbinary *bool    `json:"allowbinary,omitempty"`
	Enabled     *bool    `json:"enabled,omitempty"`
	Field       *string  `json:"field,omitempty"`
	Headers     []string `json:"headers,omitempty"`
	Name        *string  `json:"name,omitempty"`
	Type        string   `json:"type"`
	Value       *string  `json:"value,omitempty"`
}

func (a *AppscopeConfigWithCustomWatch) GetAllowbinary() *bool {
	if a == nil {
		return nil
	}
	return a.Allowbinary
}

func (a *AppscopeConfigWithCustomWatch) GetEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.Enabled
}

func (a *AppscopeConfigWithCustomWatch) GetField() *string {
	if a == nil {
		return nil
	}
	return a.Field
}

func (a *AppscopeConfigWithCustomWatch) GetHeaders() []string {
	if a == nil {
		return nil
	}
	return a.Headers
}

func (a *AppscopeConfigWithCustomWatch) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AppscopeConfigWithCustomWatch) GetType() string {
	if a == nil {
		return ""
	}
	return a.Type
}

func (a *AppscopeConfigWithCustomWatch) GetValue() *string {
	if a == nil {
		return nil
	}
	return a.Value
}

type AppscopeConfigWithCustomEvent struct {
	Enable    bool                                 `json:"enable"`
	Format    AppscopeConfigWithCustomFormatNdjson `json:"format"`
	Transport AppscopeTransport                    `json:"transport"`
	Type      AppscopeConfigWithCustomType         `json:"type"`
	Watch     []AppscopeConfigWithCustomWatch      `json:"watch"`
}

func (a *AppscopeConfigWithCustomEvent) GetEnable() bool {
	if a == nil {
		return false
	}
	return a.Enable
}

func (a *AppscopeConfigWithCustomEvent) GetFormat() AppscopeConfigWithCustomFormatNdjson {
	if a == nil {
		return AppscopeConfigWithCustomFormatNdjson{}
	}
	return a.Format
}

func (a *AppscopeConfigWithCustomEvent) GetTransport() AppscopeTransport {
	if a == nil {
		return AppscopeTransport{}
	}
	return a.Transport
}

func (a *AppscopeConfigWithCustomEvent) GetType() AppscopeConfigWithCustomType {
	if a == nil {
		return AppscopeConfigWithCustomType("")
	}
	return a.Type
}

func (a *AppscopeConfigWithCustomEvent) GetWatch() []AppscopeConfigWithCustomWatch {
	if a == nil {
		return []AppscopeConfigWithCustomWatch{}
	}
	return a.Watch
}

type AppscopeConfigWithCustomFormatLevel string

const (
	AppscopeConfigWithCustomFormatLevelInfo    AppscopeConfigWithCustomFormatLevel = "info"
	AppscopeConfigWithCustomFormatLevelDebug   AppscopeConfigWithCustomFormatLevel = "debug"
	AppscopeConfigWithCustomFormatLevelTrace   AppscopeConfigWithCustomFormatLevel = "trace"
	AppscopeConfigWithCustomFormatLevelWarning AppscopeConfigWithCustomFormatLevel = "warning"
	AppscopeConfigWithCustomFormatLevelError   AppscopeConfigWithCustomFormatLevel = "error"
)

func (e AppscopeConfigWithCustomFormatLevel) ToPointer() *AppscopeConfigWithCustomFormatLevel {
	return &e
}
func (e *AppscopeConfigWithCustomFormatLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "info":
		fallthrough
	case "debug":
		fallthrough
	case "trace":
		fallthrough
	case "warning":
		fallthrough
	case "error":
		*e = AppscopeConfigWithCustomFormatLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppscopeConfigWithCustomFormatLevel: %v", v)
	}
}

type AppscopeConfigWithCustomConfigFormat struct {
	Level   *AppscopeConfigWithCustomFormatLevel `json:"level,omitempty"`
	Maxline *float64                             `json:"maxline,omitempty"`
}

func (a *AppscopeConfigWithCustomConfigFormat) GetLevel() *AppscopeConfigWithCustomFormatLevel {
	if a == nil {
		return nil
	}
	return a.Level
}

func (a *AppscopeConfigWithCustomConfigFormat) GetMaxline() *float64 {
	if a == nil {
		return nil
	}
	return a.Maxline
}

type AppscopeConfigWithCustomLogLevel string

const (
	AppscopeConfigWithCustomLogLevelInfo  AppscopeConfigWithCustomLogLevel = "info"
	AppscopeConfigWithCustomLogLevelDebug AppscopeConfigWithCustomLogLevel = "debug"
	AppscopeConfigWithCustomLogLevelTrace AppscopeConfigWithCustomLogLevel = "trace"
)

func (e AppscopeConfigWithCustomLogLevel) ToPointer() *AppscopeConfigWithCustomLogLevel {
	return &e
}
func (e *AppscopeConfigWithCustomLogLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "info":
		fallthrough
	case "debug":
		fallthrough
	case "trace":
		*e = AppscopeConfigWithCustomLogLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppscopeConfigWithCustomLogLevel: %v", v)
	}
}

type AppscopeConfigWithCustomLog struct {
	Level     *AppscopeConfigWithCustomLogLevel `json:"level,omitempty"`
	Transport *AppscopeTransport                `json:"transport,omitempty"`
}

func (a *AppscopeConfigWithCustomLog) GetLevel() *AppscopeConfigWithCustomLogLevel {
	if a == nil {
		return nil
	}
	return a.Level
}

func (a *AppscopeConfigWithCustomLog) GetTransport() *AppscopeTransport {
	if a == nil {
		return nil
	}
	return a.Transport
}

type AppscopeConfigWithCustomConfig struct {
	Enable    *bool                                 `json:"enable,omitempty"`
	Format    *AppscopeConfigWithCustomConfigFormat `json:"format,omitempty"`
	Transport *AppscopeTransport                    `json:"transport,omitempty"`
	Log       *AppscopeConfigWithCustomLog          `json:"log,omitempty"`
}

func (a *AppscopeConfigWithCustomConfig) GetEnable() *bool {
	if a == nil {
		return nil
	}
	return a.Enable
}

func (a *AppscopeConfigWithCustomConfig) GetFormat() *AppscopeConfigWithCustomConfigFormat {
	if a == nil {
		return nil
	}
	return a.Format
}

func (a *AppscopeConfigWithCustomConfig) GetTransport() *AppscopeTransport {
	if a == nil {
		return nil
	}
	return a.Transport
}

func (a *AppscopeConfigWithCustomConfig) GetLog() *AppscopeConfigWithCustomLog {
	if a == nil {
		return nil
	}
	return a.Log
}

type AppscopeConfigWithCustomLibscope struct {
	Commanddir  *string                         `json:"commanddir,omitempty"`
	Configevent *bool                           `json:"configevent,omitempty"`
	Config      *AppscopeConfigWithCustomConfig `json:"config,omitempty"`
}

func (a *AppscopeConfigWithCustomLibscope) GetCommanddir() *string {
	if a == nil {
		return nil
	}
	return a.Commanddir
}

func (a *AppscopeConfigWithCustomLibscope) GetConfigevent() *bool {
	if a == nil {
		return nil
	}
	return a.Configevent
}

func (a *AppscopeConfigWithCustomLibscope) GetConfig() *AppscopeConfigWithCustomConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

type AppscopeConfigWithCustomMetricFormat string

const (
	AppscopeConfigWithCustomMetricFormatStatsd AppscopeConfigWithCustomMetricFormat = "statsd"
	AppscopeConfigWithCustomMetricFormatNdjson AppscopeConfigWithCustomMetricFormat = "ndjson"
)

func (e AppscopeConfigWithCustomMetricFormat) ToPointer() *AppscopeConfigWithCustomMetricFormat {
	return &e
}
func (e *AppscopeConfigWithCustomMetricFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "statsd":
		fallthrough
	case "ndjson":
		*e = AppscopeConfigWithCustomMetricFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppscopeConfigWithCustomMetricFormat: %v", v)
	}
}

type AppscopeConfigWithCustomMetric struct {
	Enable       *bool                                 `json:"enable,omitempty"`
	Format       *AppscopeConfigWithCustomMetricFormat `json:"format,omitempty"`
	Statsdmaxlen *float64                              `json:"statsdmaxlen,omitempty"`
	Statsdprefix *string                               `json:"statsdprefix,omitempty"`
	Verbosity    *float64                              `json:"verbosity,omitempty"`
	Transport    *AppscopeTransport                    `json:"transport,omitempty"`
}

func (a *AppscopeConfigWithCustomMetric) GetEnable() *bool {
	if a == nil {
		return nil
	}
	return a.Enable
}

func (a *AppscopeConfigWithCustomMetric) GetFormat() *AppscopeConfigWithCustomMetricFormat {
	if a == nil {
		return nil
	}
	return a.Format
}

func (a *AppscopeConfigWithCustomMetric) GetStatsdmaxlen() *float64 {
	if a == nil {
		return nil
	}
	return a.Statsdmaxlen
}

func (a *AppscopeConfigWithCustomMetric) GetStatsdprefix() *string {
	if a == nil {
		return nil
	}
	return a.Statsdprefix
}

func (a *AppscopeConfigWithCustomMetric) GetVerbosity() *float64 {
	if a == nil {
		return nil
	}
	return a.Verbosity
}

func (a *AppscopeConfigWithCustomMetric) GetTransport() *AppscopeTransport {
	if a == nil {
		return nil
	}
	return a.Transport
}

type AppscopeConfigWithCustomPayload struct {
	Dir    string `json:"dir"`
	Enable bool   `json:"enable"`
}

func (a *AppscopeConfigWithCustomPayload) GetDir() string {
	if a == nil {
		return ""
	}
	return a.Dir
}

func (a *AppscopeConfigWithCustomPayload) GetEnable() bool {
	if a == nil {
		return false
	}
	return a.Enable
}

type AppscopeConfigWithCustomProtocol struct {
	Binary  bool    `json:"binary"`
	Detect  bool    `json:"detect"`
	Len     float64 `json:"len"`
	Name    string  `json:"name"`
	Payload bool    `json:"payload"`
	Regex   string  `json:"regex"`
}

func (a *AppscopeConfigWithCustomProtocol) GetBinary() bool {
	if a == nil {
		return false
	}
	return a.Binary
}

func (a *AppscopeConfigWithCustomProtocol) GetDetect() bool {
	if a == nil {
		return false
	}
	return a.Detect
}

func (a *AppscopeConfigWithCustomProtocol) GetLen() float64 {
	if a == nil {
		return 0.0
	}
	return a.Len
}

func (a *AppscopeConfigWithCustomProtocol) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AppscopeConfigWithCustomProtocol) GetPayload() bool {
	if a == nil {
		return false
	}
	return a.Payload
}

func (a *AppscopeConfigWithCustomProtocol) GetRegex() string {
	if a == nil {
		return ""
	}
	return a.Regex
}

type AppscopeConfigWithCustomTag struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (a *AppscopeConfigWithCustomTag) GetKey() string {
	if a == nil {
		return ""
	}
	return a.Key
}

func (a *AppscopeConfigWithCustomTag) GetValue() string {
	if a == nil {
		return ""
	}
	return a.Value
}

type AppscopeConfigWithCustom struct {
	Cribl    *AppscopeConfigWithCustomCribl     `json:"cribl,omitempty"`
	Custom   []AppscopeCustom                   `json:"custom,omitempty"`
	Event    *AppscopeConfigWithCustomEvent     `json:"event,omitempty"`
	Libscope *AppscopeConfigWithCustomLibscope  `json:"libscope,omitempty"`
	Metric   *AppscopeConfigWithCustomMetric    `json:"metric,omitempty"`
	Payload  *AppscopeConfigWithCustomPayload   `json:"payload,omitempty"`
	Protocol []AppscopeConfigWithCustomProtocol `json:"protocol,omitempty"`
	Tags     []AppscopeConfigWithCustomTag      `json:"tags,omitempty"`
}

func (a *AppscopeConfigWithCustom) GetCribl() *AppscopeConfigWithCustomCribl {
	if a == nil {
		return nil
	}
	return a.Cribl
}

func (a *AppscopeConfigWithCustom) GetCustom() []AppscopeCustom {
	if a == nil {
		return nil
	}
	return a.Custom
}

func (a *AppscopeConfigWithCustom) GetEvent() *AppscopeConfigWithCustomEvent {
	if a == nil {
		return nil
	}
	return a.Event
}

func (a *AppscopeConfigWithCustom) GetLibscope() *AppscopeConfigWithCustomLibscope {
	if a == nil {
		return nil
	}
	return a.Libscope
}

func (a *AppscopeConfigWithCustom) GetMetric() *AppscopeConfigWithCustomMetric {
	if a == nil {
		return nil
	}
	return a.Metric
}

func (a *AppscopeConfigWithCustom) GetPayload() *AppscopeConfigWithCustomPayload {
	if a == nil {
		return nil
	}
	return a.Payload
}

func (a *AppscopeConfigWithCustom) GetProtocol() []AppscopeConfigWithCustomProtocol {
	if a == nil {
		return nil
	}
	return a.Protocol
}

func (a *AppscopeConfigWithCustom) GetTags() []AppscopeConfigWithCustomTag {
	if a == nil {
		return nil
	}
	return a.Tags
}

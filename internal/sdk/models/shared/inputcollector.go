// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type InputCollectorType string

const (
	InputCollectorTypeInputCollectorSplunk      InputCollectorType = "InputCollectorSplunk"
	InputCollectorTypeInputCollectorRest        InputCollectorType = "InputCollectorRest"
	InputCollectorTypeInputCollectorS3          InputCollectorType = "InputCollectorS3"
	InputCollectorTypeInputCollectorAzureBlob   InputCollectorType = "InputCollectorAzureBlob"
	InputCollectorTypeInputCollectorCriblLake   InputCollectorType = "InputCollectorCriblLake"
	InputCollectorTypeInputCollectorDatabase    InputCollectorType = "InputCollectorDatabase"
	InputCollectorTypeInputCollectorGCS         InputCollectorType = "InputCollectorGCS"
	InputCollectorTypeInputCollectorHealthCheck InputCollectorType = "InputCollectorHealthCheck"
)

type InputCollector struct {
	InputCollectorSplunk      *InputCollectorSplunk      `queryParam:"inline" name:"InputCollector"`
	InputCollectorRest        *InputCollectorRest        `queryParam:"inline" name:"InputCollector"`
	InputCollectorS3          *InputCollectorS3          `queryParam:"inline" name:"InputCollector"`
	InputCollectorAzureBlob   *InputCollectorAzureBlob   `queryParam:"inline" name:"InputCollector"`
	InputCollectorCriblLake   *InputCollectorCriblLake   `queryParam:"inline" name:"InputCollector"`
	InputCollectorDatabase    *InputCollectorDatabase    `queryParam:"inline" name:"InputCollector"`
	InputCollectorGCS         *InputCollectorGCS         `queryParam:"inline" name:"InputCollector"`
	InputCollectorHealthCheck *InputCollectorHealthCheck `queryParam:"inline" name:"InputCollector"`

	Type InputCollectorType
}

func CreateInputCollectorInputCollectorSplunk(inputCollectorSplunk InputCollectorSplunk) InputCollector {
	typ := InputCollectorTypeInputCollectorSplunk

	return InputCollector{
		InputCollectorSplunk: &inputCollectorSplunk,
		Type:                 typ,
	}
}

func CreateInputCollectorInputCollectorRest(inputCollectorRest InputCollectorRest) InputCollector {
	typ := InputCollectorTypeInputCollectorRest

	return InputCollector{
		InputCollectorRest: &inputCollectorRest,
		Type:               typ,
	}
}

func CreateInputCollectorInputCollectorS3(inputCollectorS3 InputCollectorS3) InputCollector {
	typ := InputCollectorTypeInputCollectorS3

	return InputCollector{
		InputCollectorS3: &inputCollectorS3,
		Type:             typ,
	}
}

func CreateInputCollectorInputCollectorAzureBlob(inputCollectorAzureBlob InputCollectorAzureBlob) InputCollector {
	typ := InputCollectorTypeInputCollectorAzureBlob

	return InputCollector{
		InputCollectorAzureBlob: &inputCollectorAzureBlob,
		Type:                    typ,
	}
}

func CreateInputCollectorInputCollectorCriblLake(inputCollectorCriblLake InputCollectorCriblLake) InputCollector {
	typ := InputCollectorTypeInputCollectorCriblLake

	return InputCollector{
		InputCollectorCriblLake: &inputCollectorCriblLake,
		Type:                    typ,
	}
}

func CreateInputCollectorInputCollectorDatabase(inputCollectorDatabase InputCollectorDatabase) InputCollector {
	typ := InputCollectorTypeInputCollectorDatabase

	return InputCollector{
		InputCollectorDatabase: &inputCollectorDatabase,
		Type:                   typ,
	}
}

func CreateInputCollectorInputCollectorGCS(inputCollectorGCS InputCollectorGCS) InputCollector {
	typ := InputCollectorTypeInputCollectorGCS

	return InputCollector{
		InputCollectorGCS: &inputCollectorGCS,
		Type:              typ,
	}
}

func CreateInputCollectorInputCollectorHealthCheck(inputCollectorHealthCheck InputCollectorHealthCheck) InputCollector {
	typ := InputCollectorTypeInputCollectorHealthCheck

	return InputCollector{
		InputCollectorHealthCheck: &inputCollectorHealthCheck,
		Type:                      typ,
	}
}

func (u *InputCollector) UnmarshalJSON(data []byte) error {

	var inputCollectorSplunk InputCollectorSplunk = InputCollectorSplunk{}
	if err := utils.UnmarshalJSON(data, &inputCollectorSplunk, "", true, nil); err == nil {
		u.InputCollectorSplunk = &inputCollectorSplunk
		u.Type = InputCollectorTypeInputCollectorSplunk
		return nil
	}

	var inputCollectorRest InputCollectorRest = InputCollectorRest{}
	if err := utils.UnmarshalJSON(data, &inputCollectorRest, "", true, nil); err == nil {
		u.InputCollectorRest = &inputCollectorRest
		u.Type = InputCollectorTypeInputCollectorRest
		return nil
	}

	var inputCollectorS3 InputCollectorS3 = InputCollectorS3{}
	if err := utils.UnmarshalJSON(data, &inputCollectorS3, "", true, nil); err == nil {
		u.InputCollectorS3 = &inputCollectorS3
		u.Type = InputCollectorTypeInputCollectorS3
		return nil
	}

	var inputCollectorAzureBlob InputCollectorAzureBlob = InputCollectorAzureBlob{}
	if err := utils.UnmarshalJSON(data, &inputCollectorAzureBlob, "", true, nil); err == nil {
		u.InputCollectorAzureBlob = &inputCollectorAzureBlob
		u.Type = InputCollectorTypeInputCollectorAzureBlob
		return nil
	}

	var inputCollectorCriblLake InputCollectorCriblLake = InputCollectorCriblLake{}
	if err := utils.UnmarshalJSON(data, &inputCollectorCriblLake, "", true, nil); err == nil {
		u.InputCollectorCriblLake = &inputCollectorCriblLake
		u.Type = InputCollectorTypeInputCollectorCriblLake
		return nil
	}

	var inputCollectorDatabase InputCollectorDatabase = InputCollectorDatabase{}
	if err := utils.UnmarshalJSON(data, &inputCollectorDatabase, "", true, nil); err == nil {
		u.InputCollectorDatabase = &inputCollectorDatabase
		u.Type = InputCollectorTypeInputCollectorDatabase
		return nil
	}

	var inputCollectorGCS InputCollectorGCS = InputCollectorGCS{}
	if err := utils.UnmarshalJSON(data, &inputCollectorGCS, "", true, nil); err == nil {
		u.InputCollectorGCS = &inputCollectorGCS
		u.Type = InputCollectorTypeInputCollectorGCS
		return nil
	}

	var inputCollectorHealthCheck InputCollectorHealthCheck = InputCollectorHealthCheck{}
	if err := utils.UnmarshalJSON(data, &inputCollectorHealthCheck, "", true, nil); err == nil {
		u.InputCollectorHealthCheck = &inputCollectorHealthCheck
		u.Type = InputCollectorTypeInputCollectorHealthCheck
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for InputCollector", string(data))
}

func (u InputCollector) MarshalJSON() ([]byte, error) {
	if u.InputCollectorSplunk != nil {
		return utils.MarshalJSON(u.InputCollectorSplunk, "", true)
	}

	if u.InputCollectorRest != nil {
		return utils.MarshalJSON(u.InputCollectorRest, "", true)
	}

	if u.InputCollectorS3 != nil {
		return utils.MarshalJSON(u.InputCollectorS3, "", true)
	}

	if u.InputCollectorAzureBlob != nil {
		return utils.MarshalJSON(u.InputCollectorAzureBlob, "", true)
	}

	if u.InputCollectorCriblLake != nil {
		return utils.MarshalJSON(u.InputCollectorCriblLake, "", true)
	}

	if u.InputCollectorDatabase != nil {
		return utils.MarshalJSON(u.InputCollectorDatabase, "", true)
	}

	if u.InputCollectorGCS != nil {
		return utils.MarshalJSON(u.InputCollectorGCS, "", true)
	}

	if u.InputCollectorHealthCheck != nil {
		return utils.MarshalJSON(u.InputCollectorHealthCheck, "", true)
	}

	return nil, errors.New("could not marshal union type InputCollector: all fields are null")
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type Add struct {
	// Name of the field to add
	Name string `json:"name"`
	// Value to assign to the field
	Value string `json:"value"`
}

func (a *Add) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *Add) GetValue() string {
	if a == nil {
		return ""
	}
	return a.Value
}

type FunctionSpecificConfigs struct {
	// List of fields to add to the event
	Add []Add `json:"add,omitempty"`
}

func (f *FunctionSpecificConfigs) GetAdd() []Add {
	if f == nil {
		return nil
	}
	return f.Add
}

type MappingRulesetFunctionConf struct {
	// Filter that selects data to be fed through this Function
	Filter *string `default:"true" json:"filter"`
	// Function ID
	ID string `json:"id"`
	// Simple description of this step
	Description *string `json:"description,omitempty"`
	// If true, data will not be pushed through this function
	Disabled *bool `json:"disabled,omitempty"`
	// If enabled, stops the results of this Function from being passed to the downstream Functions
	Final *bool                   `json:"final,omitempty"`
	Conf  FunctionSpecificConfigs `json:"conf"`
	// Group ID
	GroupID *string `json:"groupId,omitempty"`
}

func (m MappingRulesetFunctionConf) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MappingRulesetFunctionConf) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"id", "conf"}); err != nil {
		return err
	}
	return nil
}

func (m *MappingRulesetFunctionConf) GetFilter() *string {
	if m == nil {
		return nil
	}
	return m.Filter
}

func (m *MappingRulesetFunctionConf) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

func (m *MappingRulesetFunctionConf) GetDescription() *string {
	if m == nil {
		return nil
	}
	return m.Description
}

func (m *MappingRulesetFunctionConf) GetDisabled() *bool {
	if m == nil {
		return nil
	}
	return m.Disabled
}

func (m *MappingRulesetFunctionConf) GetFinal() *bool {
	if m == nil {
		return nil
	}
	return m.Final
}

func (m *MappingRulesetFunctionConf) GetConf() FunctionSpecificConfigs {
	if m == nil {
		return FunctionSpecificConfigs{}
	}
	return m.Conf
}

func (m *MappingRulesetFunctionConf) GetGroupID() *string {
	if m == nil {
		return nil
	}
	return m.GroupID
}

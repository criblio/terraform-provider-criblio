// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type CompatibilityChecks struct {
	Datatypes *bool    `json:"datatypes,omitempty"`
	StageIds  []string `json:"stageIds,omitempty"`
}

func (c *CompatibilityChecks) GetDatatypes() *bool {
	if c == nil {
		return nil
	}
	return c.Datatypes
}

func (c *CompatibilityChecks) GetStageIds() []string {
	if c == nil {
		return nil
	}
	return c.StageIds
}

type SearchJobEarliestType string

const (
	SearchJobEarliestTypeStr    SearchJobEarliestType = "str"
	SearchJobEarliestTypeNumber SearchJobEarliestType = "number"
)

type SearchJobEarliest struct {
	Str    *string  `queryParam:"inline,name=earliest"`
	Number *float64 `queryParam:"inline,name=earliest"`

	Type SearchJobEarliestType
}

func CreateSearchJobEarliestStr(str string) SearchJobEarliest {
	typ := SearchJobEarliestTypeStr

	return SearchJobEarliest{
		Str:  &str,
		Type: typ,
	}
}

func CreateSearchJobEarliestNumber(number float64) SearchJobEarliest {
	typ := SearchJobEarliestTypeNumber

	return SearchJobEarliest{
		Number: &number,
		Type:   typ,
	}
}

func (u *SearchJobEarliest) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = SearchJobEarliestTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = SearchJobEarliestTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SearchJobEarliest", string(data))
}

func (u SearchJobEarliest) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type SearchJobEarliest: all fields are null")
}

type SearchJobLatestType string

const (
	SearchJobLatestTypeStr    SearchJobLatestType = "str"
	SearchJobLatestTypeNumber SearchJobLatestType = "number"
)

type SearchJobLatest struct {
	Str    *string  `queryParam:"inline,name=latest"`
	Number *float64 `queryParam:"inline,name=latest"`

	Type SearchJobLatestType
}

func CreateSearchJobLatestStr(str string) SearchJobLatest {
	typ := SearchJobLatestTypeStr

	return SearchJobLatest{
		Str:  &str,
		Type: typ,
	}
}

func CreateSearchJobLatestNumber(number float64) SearchJobLatest {
	typ := SearchJobLatestTypeNumber

	return SearchJobLatest{
		Number: &number,
		Type:   typ,
	}
}

func (u *SearchJobLatest) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = SearchJobLatestTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = SearchJobLatestTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SearchJobLatest", string(data))
}

func (u SearchJobLatest) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type SearchJobLatest: all fields are null")
}

type SearchJobStatus string

const (
	SearchJobStatusNew       SearchJobStatus = "new"
	SearchJobStatusFailed    SearchJobStatus = "failed"
	SearchJobStatusRunning   SearchJobStatus = "running"
	SearchJobStatusCompleted SearchJobStatus = "completed"
	SearchJobStatusCanceled  SearchJobStatus = "canceled"
	SearchJobStatusQueued    SearchJobStatus = "queued"
)

func (e SearchJobStatus) ToPointer() *SearchJobStatus {
	return &e
}
func (e *SearchJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "new":
		fallthrough
	case "failed":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		fallthrough
	case "canceled":
		fallthrough
	case "queued":
		*e = SearchJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchJobStatus: %v", v)
	}
}

type SearchJobType string

const (
	SearchJobTypeCommand         SearchJobType = "command"
	SearchJobTypeStandard        SearchJobType = "standard"
	SearchJobTypeDatatypePreview SearchJobType = "datatypePreview"
	SearchJobTypeScheduled       SearchJobType = "scheduled"
	SearchJobTypeDashboard       SearchJobType = "dashboard"
)

func (e SearchJobType) ToPointer() *SearchJobType {
	return &e
}
func (e *SearchJobType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "command":
		fallthrough
	case "standard":
		fallthrough
	case "datatypePreview":
		fallthrough
	case "scheduled":
		fallthrough
	case "dashboard":
		*e = SearchJobType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchJobType: %v", v)
	}
}

type SearchJob struct {
	Accelerated                 *bool                      `json:"accelerated,omitempty"`
	AliasOfOriginalJobID        *string                    `json:"aliasOfOriginalJobId,omitempty"`
	CompatibilityChecks         *CompatibilityChecks       `json:"compatibilityChecks,omitempty"`
	CompletionInfo              *string                    `json:"completionInfo,omitempty"`
	Context                     *string                    `json:"context,omitempty"`
	CorrelationID               *string                    `json:"correlationId,omitempty"`
	CPUMetrics                  *CPUTimeMetric             `json:"cpuMetrics,omitempty"`
	DatatypeOverrides           *DatatypeOverrides         `json:"datatypeOverrides,omitempty"`
	DisableNotifications        *bool                      `json:"disableNotifications,omitempty"`
	DisplayUsername             string                     `json:"displayUsername"`
	Earliest                    *SearchJobEarliest         `json:"earliest,omitempty"`
	EarliestEpoch               *float64                   `json:"earliestEpoch,omitempty"`
	ErrorStateConfig            *SearchJobErrorStateConfig `json:"errorStateConfig,omitempty"`
	Group                       string                     `json:"group"`
	ID                          string                     `json:"id"`
	IsPrivate                   *bool                      `json:"isPrivate,omitempty"`
	Latest                      *SearchJobLatest           `json:"latest,omitempty"`
	LatestEpoch                 *float64                   `json:"latestEpoch,omitempty"`
	Metadata                    *SearchJobMetadata         `json:"metadata,omitempty"`
	NumEventsAfter              *float64                   `json:"numEventsAfter,omitempty"`
	NumEventsBefore             *float64                   `json:"numEventsBefore,omitempty"`
	Query                       string                     `json:"query"`
	QueryWithMacrosResolved     *string                    `json:"queryWithMacrosResolved,omitempty"`
	SampleRate                  *float64                   `json:"sampleRate,omitempty"`
	SavedQueryName              *string                    `json:"savedQueryName,omitempty"`
	SearchParameterDeclarations []SearchParameter          `json:"searchParameterDeclarations,omitempty"`
	SearchParameterValues       any                        `json:"searchParameterValues,omitempty"`
	Stages                      []SearchJobStageConfig     `json:"stages,omitempty"`
	Status                      SearchJobStatus            `json:"status"`
	TableConfig                 *TableViewSettings         `json:"tableConfig,omitempty"`
	TargetEventTime             *float64                   `json:"targetEventTime,omitempty"`
	TimeCompleted               *float64                   `json:"timeCompleted,omitempty"`
	TimeCreated                 float64                    `json:"timeCreated"`
	TimeStarted                 float64                    `json:"timeStarted"`
	TimeToFirstByte             *float64                   `json:"timeToFirstByte,omitempty"`
	TotalBytesScanned           *float64                   `json:"totalBytesScanned,omitempty"`
	TotalEventCount             *float64                   `json:"totalEventCount,omitempty"`
	Type                        *SearchJobType             `json:"type,omitempty"`
	UsageGroupID                *string                    `json:"usageGroupId,omitempty"`
	UsageMetrics                *SearchAuditMetrics        `json:"usageMetrics,omitempty"`
	User                        string                     `json:"user"`
}

func (s *SearchJob) GetAccelerated() *bool {
	if s == nil {
		return nil
	}
	return s.Accelerated
}

func (s *SearchJob) GetAliasOfOriginalJobID() *string {
	if s == nil {
		return nil
	}
	return s.AliasOfOriginalJobID
}

func (s *SearchJob) GetCompatibilityChecks() *CompatibilityChecks {
	if s == nil {
		return nil
	}
	return s.CompatibilityChecks
}

func (s *SearchJob) GetCompletionInfo() *string {
	if s == nil {
		return nil
	}
	return s.CompletionInfo
}

func (s *SearchJob) GetContext() *string {
	if s == nil {
		return nil
	}
	return s.Context
}

func (s *SearchJob) GetCorrelationID() *string {
	if s == nil {
		return nil
	}
	return s.CorrelationID
}

func (s *SearchJob) GetCPUMetrics() *CPUTimeMetric {
	if s == nil {
		return nil
	}
	return s.CPUMetrics
}

func (s *SearchJob) GetDatatypeOverrides() *DatatypeOverrides {
	if s == nil {
		return nil
	}
	return s.DatatypeOverrides
}

func (s *SearchJob) GetDisableNotifications() *bool {
	if s == nil {
		return nil
	}
	return s.DisableNotifications
}

func (s *SearchJob) GetDisplayUsername() string {
	if s == nil {
		return ""
	}
	return s.DisplayUsername
}

func (s *SearchJob) GetEarliest() *SearchJobEarliest {
	if s == nil {
		return nil
	}
	return s.Earliest
}

func (s *SearchJob) GetEarliestEpoch() *float64 {
	if s == nil {
		return nil
	}
	return s.EarliestEpoch
}

func (s *SearchJob) GetErrorStateConfig() *SearchJobErrorStateConfig {
	if s == nil {
		return nil
	}
	return s.ErrorStateConfig
}

func (s *SearchJob) GetGroup() string {
	if s == nil {
		return ""
	}
	return s.Group
}

func (s *SearchJob) GetID() string {
	if s == nil {
		return ""
	}
	return s.ID
}

func (s *SearchJob) GetIsPrivate() *bool {
	if s == nil {
		return nil
	}
	return s.IsPrivate
}

func (s *SearchJob) GetLatest() *SearchJobLatest {
	if s == nil {
		return nil
	}
	return s.Latest
}

func (s *SearchJob) GetLatestEpoch() *float64 {
	if s == nil {
		return nil
	}
	return s.LatestEpoch
}

func (s *SearchJob) GetMetadata() *SearchJobMetadata {
	if s == nil {
		return nil
	}
	return s.Metadata
}

func (s *SearchJob) GetNumEventsAfter() *float64 {
	if s == nil {
		return nil
	}
	return s.NumEventsAfter
}

func (s *SearchJob) GetNumEventsBefore() *float64 {
	if s == nil {
		return nil
	}
	return s.NumEventsBefore
}

func (s *SearchJob) GetQuery() string {
	if s == nil {
		return ""
	}
	return s.Query
}

func (s *SearchJob) GetQueryWithMacrosResolved() *string {
	if s == nil {
		return nil
	}
	return s.QueryWithMacrosResolved
}

func (s *SearchJob) GetSampleRate() *float64 {
	if s == nil {
		return nil
	}
	return s.SampleRate
}

func (s *SearchJob) GetSavedQueryName() *string {
	if s == nil {
		return nil
	}
	return s.SavedQueryName
}

func (s *SearchJob) GetSearchParameterDeclarations() []SearchParameter {
	if s == nil {
		return nil
	}
	return s.SearchParameterDeclarations
}

func (s *SearchJob) GetSearchParameterValues() any {
	if s == nil {
		return nil
	}
	return s.SearchParameterValues
}

func (s *SearchJob) GetStages() []SearchJobStageConfig {
	if s == nil {
		return nil
	}
	return s.Stages
}

func (s *SearchJob) GetStatus() SearchJobStatus {
	if s == nil {
		return SearchJobStatus("")
	}
	return s.Status
}

func (s *SearchJob) GetTableConfig() *TableViewSettings {
	if s == nil {
		return nil
	}
	return s.TableConfig
}

func (s *SearchJob) GetTargetEventTime() *float64 {
	if s == nil {
		return nil
	}
	return s.TargetEventTime
}

func (s *SearchJob) GetTimeCompleted() *float64 {
	if s == nil {
		return nil
	}
	return s.TimeCompleted
}

func (s *SearchJob) GetTimeCreated() float64 {
	if s == nil {
		return 0.0
	}
	return s.TimeCreated
}

func (s *SearchJob) GetTimeStarted() float64 {
	if s == nil {
		return 0.0
	}
	return s.TimeStarted
}

func (s *SearchJob) GetTimeToFirstByte() *float64 {
	if s == nil {
		return nil
	}
	return s.TimeToFirstByte
}

func (s *SearchJob) GetTotalBytesScanned() *float64 {
	if s == nil {
		return nil
	}
	return s.TotalBytesScanned
}

func (s *SearchJob) GetTotalEventCount() *float64 {
	if s == nil {
		return nil
	}
	return s.TotalEventCount
}

func (s *SearchJob) GetType() *SearchJobType {
	if s == nil {
		return nil
	}
	return s.Type
}

func (s *SearchJob) GetUsageGroupID() *string {
	if s == nil {
		return nil
	}
	return s.UsageGroupID
}

func (s *SearchJob) GetUsageMetrics() *SearchAuditMetrics {
	if s == nil {
		return nil
	}
	return s.UsageMetrics
}

func (s *SearchJob) GetUser() string {
	if s == nil {
		return ""
	}
	return s.User
}

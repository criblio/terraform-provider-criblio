// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AuthConfigType string

const (
	AuthConfigTypeLdap   AuthConfigType = "ldap"
	AuthConfigTypeSplunk AuthConfigType = "splunk"
	AuthConfigTypeLocal  AuthConfigType = "local"
	AuthConfigTypeSaas   AuthConfigType = "saas"
	AuthConfigTypeSaml   AuthConfigType = "saml"
	AuthConfigTypeOpenid AuthConfigType = "openid"
)

func (e AuthConfigType) ToPointer() *AuthConfigType {
	return &e
}
func (e *AuthConfigType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ldap":
		fallthrough
	case "splunk":
		fallthrough
	case "local":
		fallthrough
	case "saas":
		fallthrough
	case "saml":
		fallthrough
	case "openid":
		*e = AuthConfigType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthConfigType: %v", v)
	}
}

type AuthConfig struct {
	Fallback         bool           `json:"fallback"`
	FallbackBadLogin bool           `json:"fallbackBadLogin"`
	FilterType       *string        `json:"filter_type,omitempty"`
	Host             string         `json:"host"`
	Port             float64        `json:"port"`
	Ssl              bool           `json:"ssl"`
	Type             AuthConfigType `json:"type"`
}

func (a *AuthConfig) GetFallback() bool {
	if a == nil {
		return false
	}
	return a.Fallback
}

func (a *AuthConfig) GetFallbackBadLogin() bool {
	if a == nil {
		return false
	}
	return a.FallbackBadLogin
}

func (a *AuthConfig) GetFilterType() *string {
	if a == nil {
		return nil
	}
	return a.FilterType
}

func (a *AuthConfig) GetHost() string {
	if a == nil {
		return ""
	}
	return a.Host
}

func (a *AuthConfig) GetPort() float64 {
	if a == nil {
		return 0.0
	}
	return a.Port
}

func (a *AuthConfig) GetSsl() bool {
	if a == nil {
		return false
	}
	return a.Ssl
}

func (a *AuthConfig) GetType() AuthConfigType {
	if a == nil {
		return AuthConfigType("")
	}
	return a.Type
}

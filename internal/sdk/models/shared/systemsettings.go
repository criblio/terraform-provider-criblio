// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SystemSettingsHeaders struct {
}

type SystemSettingsSsl struct {
	CaPath      *string `json:"caPath,omitempty"`
	CertPath    string  `json:"certPath"`
	Disabled    bool    `json:"disabled"`
	Passphrase  string  `json:"passphrase"`
	PrivKeyPath string  `json:"privKeyPath"`
}

func (s *SystemSettingsSsl) GetCaPath() *string {
	if s == nil {
		return nil
	}
	return s.CaPath
}

func (s *SystemSettingsSsl) GetCertPath() string {
	if s == nil {
		return ""
	}
	return s.CertPath
}

func (s *SystemSettingsSsl) GetDisabled() bool {
	if s == nil {
		return false
	}
	return s.Disabled
}

func (s *SystemSettingsSsl) GetPassphrase() string {
	if s == nil {
		return ""
	}
	return s.Passphrase
}

func (s *SystemSettingsSsl) GetPrivKeyPath() string {
	if s == nil {
		return ""
	}
	return s.PrivKeyPath
}

type SystemSettingsAPI struct {
	BaseURL            *string                `json:"baseUrl,omitempty"`
	DisableAPICache    *bool                  `json:"disableApiCache,omitempty"`
	Disabled           bool                   `json:"disabled"`
	Headers            *SystemSettingsHeaders `json:"headers,omitempty"`
	Host               string                 `json:"host"`
	IdleSessionTTL     *float64               `json:"idleSessionTTL,omitempty"`
	ListenOnPort       *bool                  `json:"listenOnPort,omitempty"`
	LoginRateLimit     *string                `json:"loginRateLimit,omitempty"`
	Port               float64                `json:"port"`
	Protocol           string                 `json:"protocol"`
	Scripts            *bool                  `json:"scripts,omitempty"`
	SensitiveFields    []string               `json:"sensitiveFields,omitempty"`
	Ssl                SystemSettingsSsl      `json:"ssl"`
	SsoRateLimit       *string                `json:"ssoRateLimit,omitempty"`
	WorkerRemoteAccess bool                   `json:"workerRemoteAccess"`
}

func (s *SystemSettingsAPI) GetBaseURL() *string {
	if s == nil {
		return nil
	}
	return s.BaseURL
}

func (s *SystemSettingsAPI) GetDisableAPICache() *bool {
	if s == nil {
		return nil
	}
	return s.DisableAPICache
}

func (s *SystemSettingsAPI) GetDisabled() bool {
	if s == nil {
		return false
	}
	return s.Disabled
}

func (s *SystemSettingsAPI) GetHeaders() *SystemSettingsHeaders {
	if s == nil {
		return nil
	}
	return s.Headers
}

func (s *SystemSettingsAPI) GetHost() string {
	if s == nil {
		return ""
	}
	return s.Host
}

func (s *SystemSettingsAPI) GetIdleSessionTTL() *float64 {
	if s == nil {
		return nil
	}
	return s.IdleSessionTTL
}

func (s *SystemSettingsAPI) GetListenOnPort() *bool {
	if s == nil {
		return nil
	}
	return s.ListenOnPort
}

func (s *SystemSettingsAPI) GetLoginRateLimit() *string {
	if s == nil {
		return nil
	}
	return s.LoginRateLimit
}

func (s *SystemSettingsAPI) GetPort() float64 {
	if s == nil {
		return 0.0
	}
	return s.Port
}

func (s *SystemSettingsAPI) GetProtocol() string {
	if s == nil {
		return ""
	}
	return s.Protocol
}

func (s *SystemSettingsAPI) GetScripts() *bool {
	if s == nil {
		return nil
	}
	return s.Scripts
}

func (s *SystemSettingsAPI) GetSensitiveFields() []string {
	if s == nil {
		return nil
	}
	return s.SensitiveFields
}

func (s *SystemSettingsAPI) GetSsl() SystemSettingsSsl {
	if s == nil {
		return SystemSettingsSsl{}
	}
	return s.Ssl
}

func (s *SystemSettingsAPI) GetSsoRateLimit() *string {
	if s == nil {
		return nil
	}
	return s.SsoRateLimit
}

func (s *SystemSettingsAPI) GetWorkerRemoteAccess() bool {
	if s == nil {
		return false
	}
	return s.WorkerRemoteAccess
}

type SystemSettingsBackups struct {
	BackupPersistence string `json:"backupPersistence"`
	BackupsDirectory  string `json:"backupsDirectory"`
}

func (s *SystemSettingsBackups) GetBackupPersistence() string {
	if s == nil {
		return ""
	}
	return s.BackupPersistence
}

func (s *SystemSettingsBackups) GetBackupsDirectory() string {
	if s == nil {
		return ""
	}
	return s.BackupsDirectory
}

type SystemSettingsCustomLogo struct {
	Enabled         bool   `json:"enabled"`
	LogoDescription string `json:"logoDescription"`
	LogoImage       string `json:"logoImage"`
}

func (s *SystemSettingsCustomLogo) GetEnabled() bool {
	if s == nil {
		return false
	}
	return s.Enabled
}

func (s *SystemSettingsCustomLogo) GetLogoDescription() string {
	if s == nil {
		return ""
	}
	return s.LogoDescription
}

func (s *SystemSettingsCustomLogo) GetLogoImage() string {
	if s == nil {
		return ""
	}
	return s.LogoImage
}

type Distributed struct {
	Mode AppMode `json:"mode"`
}

func (d *Distributed) GetMode() AppMode {
	if d == nil {
		return AppMode("")
	}
	return d.Mode
}

type SystemSettingsPii struct {
	EnablePiiDetection bool `json:"enablePiiDetection"`
}

func (s *SystemSettingsPii) GetEnablePiiDetection() bool {
	if s == nil {
		return false
	}
	return s.EnablePiiDetection
}

type SystemSettingsProxy struct {
	UseEnvVars bool `json:"useEnvVars"`
}

func (s *SystemSettingsProxy) GetUseEnvVars() bool {
	if s == nil {
		return false
	}
	return s.UseEnvVars
}

type SystemSettingsRollback struct {
	RollbackEnabled bool     `json:"rollbackEnabled"`
	RollbackRetries *float64 `json:"rollbackRetries,omitempty"`
	RollbackTimeout *float64 `json:"rollbackTimeout,omitempty"`
}

func (s *SystemSettingsRollback) GetRollbackEnabled() bool {
	if s == nil {
		return false
	}
	return s.RollbackEnabled
}

func (s *SystemSettingsRollback) GetRollbackRetries() *float64 {
	if s == nil {
		return nil
	}
	return s.RollbackRetries
}

func (s *SystemSettingsRollback) GetRollbackTimeout() *float64 {
	if s == nil {
		return nil
	}
	return s.RollbackTimeout
}

type SystemSettingsShutdown struct {
	DrainTimeout float64 `json:"drainTimeout"`
}

func (s *SystemSettingsShutdown) GetDrainTimeout() float64 {
	if s == nil {
		return 0.0
	}
	return s.DrainTimeout
}

type SystemSettingsSni struct {
	DisableSNIRouting bool `json:"disableSNIRouting"`
}

func (s *SystemSettingsSni) GetDisableSNIRouting() bool {
	if s == nil {
		return false
	}
	return s.DisableSNIRouting
}

type SystemSettingsSockets struct {
	Directory *string `json:"directory,omitempty"`
}

func (s *SystemSettingsSockets) GetDirectory() *string {
	if s == nil {
		return nil
	}
	return s.Directory
}

type SystemSettingsUpgrade string

const (
	SystemSettingsUpgradeFalse SystemSettingsUpgrade = "false"
	SystemSettingsUpgradeAPI   SystemSettingsUpgrade = "api"
)

func (e SystemSettingsUpgrade) ToPointer() *SystemSettingsUpgrade {
	return &e
}
func (e *SystemSettingsUpgrade) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "false":
		fallthrough
	case "api":
		*e = SystemSettingsUpgrade(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SystemSettingsUpgrade: %v", v)
	}
}

type SystemSettingsSystem struct {
	Intercom bool                  `json:"intercom"`
	Upgrade  SystemSettingsUpgrade `json:"upgrade"`
}

func (s *SystemSettingsSystem) GetIntercom() bool {
	if s == nil {
		return false
	}
	return s.Intercom
}

func (s *SystemSettingsSystem) GetUpgrade() SystemSettingsUpgrade {
	if s == nil {
		return SystemSettingsUpgrade("")
	}
	return s.Upgrade
}

type SystemSettingsTLS struct {
	DefaultCipherList  string `json:"defaultCipherList"`
	DefaultEcdhCurve   string `json:"defaultEcdhCurve"`
	MaxVersion         string `json:"maxVersion"`
	MinVersion         string `json:"minVersion"`
	RejectUnauthorized bool   `json:"rejectUnauthorized"`
}

func (s *SystemSettingsTLS) GetDefaultCipherList() string {
	if s == nil {
		return ""
	}
	return s.DefaultCipherList
}

func (s *SystemSettingsTLS) GetDefaultEcdhCurve() string {
	if s == nil {
		return ""
	}
	return s.DefaultEcdhCurve
}

func (s *SystemSettingsTLS) GetMaxVersion() string {
	if s == nil {
		return ""
	}
	return s.MaxVersion
}

func (s *SystemSettingsTLS) GetMinVersion() string {
	if s == nil {
		return ""
	}
	return s.MinVersion
}

func (s *SystemSettingsTLS) GetRejectUnauthorized() bool {
	if s == nil {
		return false
	}
	return s.RejectUnauthorized
}

type SystemSettingsWorkers struct {
	Count                  float64  `json:"count"`
	EnableHeapSnapshots    *bool    `json:"enableHeapSnapshots,omitempty"`
	LoadThrottlePerc       *float64 `json:"loadThrottlePerc,omitempty"`
	Memory                 float64  `json:"memory"`
	Minimum                float64  `json:"minimum"`
	StartupMaxConns        *float64 `json:"startupMaxConns,omitempty"`
	StartupThrottleTimeout *float64 `json:"startupThrottleTimeout,omitempty"`
	V8SingleThread         *bool    `json:"v8SingleThread,omitempty"`
}

func (s *SystemSettingsWorkers) GetCount() float64 {
	if s == nil {
		return 0.0
	}
	return s.Count
}

func (s *SystemSettingsWorkers) GetEnableHeapSnapshots() *bool {
	if s == nil {
		return nil
	}
	return s.EnableHeapSnapshots
}

func (s *SystemSettingsWorkers) GetLoadThrottlePerc() *float64 {
	if s == nil {
		return nil
	}
	return s.LoadThrottlePerc
}

func (s *SystemSettingsWorkers) GetMemory() float64 {
	if s == nil {
		return 0.0
	}
	return s.Memory
}

func (s *SystemSettingsWorkers) GetMinimum() float64 {
	if s == nil {
		return 0.0
	}
	return s.Minimum
}

func (s *SystemSettingsWorkers) GetStartupMaxConns() *float64 {
	if s == nil {
		return nil
	}
	return s.StartupMaxConns
}

func (s *SystemSettingsWorkers) GetStartupThrottleTimeout() *float64 {
	if s == nil {
		return nil
	}
	return s.StartupThrottleTimeout
}

func (s *SystemSettingsWorkers) GetV8SingleThread() *bool {
	if s == nil {
		return nil
	}
	return s.V8SingleThread
}

type SystemSettings struct {
	API                  SystemSettingsAPI        `json:"api"`
	Auth                 AuthConfig               `json:"auth"`
	Backups              SystemSettingsBackups    `json:"backups"`
	CustomLogo           SystemSettingsCustomLogo `json:"customLogo"`
	Distributed          Distributed              `json:"distributed"`
	Fips                 bool                     `json:"fips"`
	Git                  GitSettings              `json:"git"`
	JobLimits            JobSettings              `json:"jobLimits"`
	Limits               Limits                   `json:"limits"`
	Pii                  SystemSettingsPii        `json:"pii"`
	Proxy                SystemSettingsProxy      `json:"proxy"`
	RedisCacheLimits     RedisCacheLimits         `json:"redisCacheLimits"`
	RedisLimits          RedisLimits              `json:"redisLimits"`
	Rollback             SystemSettingsRollback   `json:"rollback"`
	SearchLimits         SearchSettings           `json:"searchLimits"`
	ServicesLimits       ServicesLimits           `json:"servicesLimits"`
	Shutdown             SystemSettingsShutdown   `json:"shutdown"`
	Sni                  SystemSettingsSni        `json:"sni"`
	Sockets              *SystemSettingsSockets   `json:"sockets,omitempty"`
	System               SystemSettingsSystem     `json:"system"`
	TLS                  SystemSettingsTLS        `json:"tls"`
	UpgradeGroupSettings UpgradeGroupSettings     `json:"upgradeGroupSettings"`
	UpgradeSettings      UpgradeSettings          `json:"upgradeSettings"`
	Workers              SystemSettingsWorkers    `json:"workers"`
}

func (s *SystemSettings) GetAPI() SystemSettingsAPI {
	if s == nil {
		return SystemSettingsAPI{}
	}
	return s.API
}

func (s *SystemSettings) GetAuth() AuthConfig {
	if s == nil {
		return AuthConfig{}
	}
	return s.Auth
}

func (s *SystemSettings) GetBackups() SystemSettingsBackups {
	if s == nil {
		return SystemSettingsBackups{}
	}
	return s.Backups
}

func (s *SystemSettings) GetCustomLogo() SystemSettingsCustomLogo {
	if s == nil {
		return SystemSettingsCustomLogo{}
	}
	return s.CustomLogo
}

func (s *SystemSettings) GetDistributed() Distributed {
	if s == nil {
		return Distributed{}
	}
	return s.Distributed
}

func (s *SystemSettings) GetFips() bool {
	if s == nil {
		return false
	}
	return s.Fips
}

func (s *SystemSettings) GetGit() GitSettings {
	if s == nil {
		return GitSettings{}
	}
	return s.Git
}

func (s *SystemSettings) GetJobLimits() JobSettings {
	if s == nil {
		return JobSettings{}
	}
	return s.JobLimits
}

func (s *SystemSettings) GetLimits() Limits {
	if s == nil {
		return Limits{}
	}
	return s.Limits
}

func (s *SystemSettings) GetPii() SystemSettingsPii {
	if s == nil {
		return SystemSettingsPii{}
	}
	return s.Pii
}

func (s *SystemSettings) GetProxy() SystemSettingsProxy {
	if s == nil {
		return SystemSettingsProxy{}
	}
	return s.Proxy
}

func (s *SystemSettings) GetRedisCacheLimits() RedisCacheLimits {
	if s == nil {
		return RedisCacheLimits{}
	}
	return s.RedisCacheLimits
}

func (s *SystemSettings) GetRedisLimits() RedisLimits {
	if s == nil {
		return RedisLimits{}
	}
	return s.RedisLimits
}

func (s *SystemSettings) GetRollback() SystemSettingsRollback {
	if s == nil {
		return SystemSettingsRollback{}
	}
	return s.Rollback
}

func (s *SystemSettings) GetSearchLimits() SearchSettings {
	if s == nil {
		return SearchSettings{}
	}
	return s.SearchLimits
}

func (s *SystemSettings) GetServicesLimits() ServicesLimits {
	if s == nil {
		return ServicesLimits{}
	}
	return s.ServicesLimits
}

func (s *SystemSettings) GetShutdown() SystemSettingsShutdown {
	if s == nil {
		return SystemSettingsShutdown{}
	}
	return s.Shutdown
}

func (s *SystemSettings) GetSni() SystemSettingsSni {
	if s == nil {
		return SystemSettingsSni{}
	}
	return s.Sni
}

func (s *SystemSettings) GetSockets() *SystemSettingsSockets {
	if s == nil {
		return nil
	}
	return s.Sockets
}

func (s *SystemSettings) GetSystem() SystemSettingsSystem {
	if s == nil {
		return SystemSettingsSystem{}
	}
	return s.System
}

func (s *SystemSettings) GetTLS() SystemSettingsTLS {
	if s == nil {
		return SystemSettingsTLS{}
	}
	return s.TLS
}

func (s *SystemSettings) GetUpgradeGroupSettings() UpgradeGroupSettings {
	if s == nil {
		return UpgradeGroupSettings{}
	}
	return s.UpgradeGroupSettings
}

func (s *SystemSettings) GetUpgradeSettings() UpgradeSettings {
	if s == nil {
		return UpgradeSettings{}
	}
	return s.UpgradeSettings
}

func (s *SystemSettings) GetWorkers() SystemSettingsWorkers {
	if s == nil {
		return SystemSettingsWorkers{}
	}
	return s.Workers
}

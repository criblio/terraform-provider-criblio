// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type Objects struct {
	Discovered float64 `json:"discovered"`
	Scanned    float64 `json:"scanned"`
	Skipped    float64 `json:"skipped"`
}

func (o *Objects) GetDiscovered() float64 {
	if o == nil {
		return 0.0
	}
	return o.Discovered
}

func (o *Objects) GetScanned() float64 {
	if o == nil {
		return 0.0
	}
	return o.Scanned
}

func (o *Objects) GetSkipped() float64 {
	if o == nil {
		return 0.0
	}
	return o.Skipped
}

type Time struct {
	QueuedSec              float64 `json:"queuedSec"`
	RunningSec             float64 `json:"runningSec"`
	TaskCompletionTotalSec float64 `json:"taskCompletionTotalSec"`
	TaskReceivingTotalSec  float64 `json:"taskReceivingTotalSec"`
}

func (t *Time) GetQueuedSec() float64 {
	if t == nil {
		return 0.0
	}
	return t.QueuedSec
}

func (t *Time) GetRunningSec() float64 {
	if t == nil {
		return 0.0
	}
	return t.RunningSec
}

func (t *Time) GetTaskCompletionTotalSec() float64 {
	if t == nil {
		return 0.0
	}
	return t.TaskCompletionTotalSec
}

func (t *Time) GetTaskReceivingTotalSec() float64 {
	if t == nil {
		return 0.0
	}
	return t.TaskReceivingTotalSec
}

type SearchAuditMetrics struct {
	BytesIn   float64 `json:"bytesIn"`
	BytesOut  float64 `json:"bytesOut"`
	EventsIn  float64 `json:"eventsIn"`
	EventsOut float64 `json:"eventsOut"`
	Objects   Objects `json:"objects"`
	Time      Time    `json:"time"`
}

func (s *SearchAuditMetrics) GetBytesIn() float64 {
	if s == nil {
		return 0.0
	}
	return s.BytesIn
}

func (s *SearchAuditMetrics) GetBytesOut() float64 {
	if s == nil {
		return 0.0
	}
	return s.BytesOut
}

func (s *SearchAuditMetrics) GetEventsIn() float64 {
	if s == nil {
		return 0.0
	}
	return s.EventsIn
}

func (s *SearchAuditMetrics) GetEventsOut() float64 {
	if s == nil {
		return 0.0
	}
	return s.EventsOut
}

func (s *SearchAuditMetrics) GetObjects() Objects {
	if s == nil {
		return Objects{}
	}
	return s.Objects
}

func (s *SearchAuditMetrics) GetTime() Time {
	if s == nil {
		return Time{}
	}
	return s.Time
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

// AttachmentType - Type of attachment for the notification
type AttachmentType string

const (
	AttachmentTypeInline     AttachmentType = "inline"
	AttachmentTypeAttachment AttachmentType = "attachment"
)

func (e AttachmentType) ToPointer() *AttachmentType {
	return &e
}
func (e *AttachmentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inline":
		fallthrough
	case "attachment":
		*e = AttachmentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AttachmentType: %v", v)
	}
}

type TargetConfigConf struct {
	// Whether to include search results in the notification
	IncludeResults *bool `default:"false" json:"includeResults"`
	// Type of attachment for the notification
	AttachmentType *AttachmentType `default:"inline" json:"attachmentType"`
}

func (t TargetConfigConf) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TargetConfigConf) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (t *TargetConfigConf) GetIncludeResults() *bool {
	if t == nil {
		return nil
	}
	return t.IncludeResults
}

func (t *TargetConfigConf) GetAttachmentType() *AttachmentType {
	if t == nil {
		return nil
	}
	return t.AttachmentType
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type InstanceSettingsSchema2 struct {
	BootstrapHost *string `json:"bootstrapHost,omitempty"`
	ID            *string `json:"id,omitempty"`
}

func (i InstanceSettingsSchema2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InstanceSettingsSchema2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InstanceSettingsSchema2) GetBootstrapHost() *string {
	if i == nil {
		return nil
	}
	return i.BootstrapHost
}

func (i *InstanceSettingsSchema2) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

type InstanceSettingsSchema1 struct {
	CloudWorkspace       *CloudWorkspaceSchema `json:"cloudWorkspace,omitempty"`
	EnvRegex             *string               `json:"envRegex,omitempty"`
	Group                *string               `json:"group,omitempty"`
	ID                   string                `json:"id"`
	Master               *MasterSchema         `json:"master,omitempty"`
	Mode                 AppMode               `json:"mode"`
	ReportedDeploymentID *string               `json:"reportedDeploymentId,omitempty"`
	Tags                 []string              `json:"tags,omitempty"`
}

func (i InstanceSettingsSchema1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InstanceSettingsSchema1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"id", "mode"}); err != nil {
		return err
	}
	return nil
}

func (i *InstanceSettingsSchema1) GetCloudWorkspace() *CloudWorkspaceSchema {
	if i == nil {
		return nil
	}
	return i.CloudWorkspace
}

func (i *InstanceSettingsSchema1) GetEnvRegex() *string {
	if i == nil {
		return nil
	}
	return i.EnvRegex
}

func (i *InstanceSettingsSchema1) GetGroup() *string {
	if i == nil {
		return nil
	}
	return i.Group
}

func (i *InstanceSettingsSchema1) GetID() string {
	if i == nil {
		return ""
	}
	return i.ID
}

func (i *InstanceSettingsSchema1) GetMaster() *MasterSchema {
	if i == nil {
		return nil
	}
	return i.Master
}

func (i *InstanceSettingsSchema1) GetMode() AppMode {
	if i == nil {
		return AppMode("")
	}
	return i.Mode
}

func (i *InstanceSettingsSchema1) GetReportedDeploymentID() *string {
	if i == nil {
		return nil
	}
	return i.ReportedDeploymentID
}

func (i *InstanceSettingsSchema1) GetTags() []string {
	if i == nil {
		return nil
	}
	return i.Tags
}

type InstanceSettingsSchemaUnionType string

const (
	InstanceSettingsSchemaUnionTypeInstanceSettingsSchema1 InstanceSettingsSchemaUnionType = "InstanceSettingsSchema_1"
	InstanceSettingsSchemaUnionTypeInstanceSettingsSchema2 InstanceSettingsSchemaUnionType = "InstanceSettingsSchema_2"
)

type InstanceSettingsSchemaUnion struct {
	InstanceSettingsSchema1 *InstanceSettingsSchema1 `queryParam:"inline,name=InstanceSettingsSchema"`
	InstanceSettingsSchema2 *InstanceSettingsSchema2 `queryParam:"inline,name=InstanceSettingsSchema"`

	Type InstanceSettingsSchemaUnionType
}

func CreateInstanceSettingsSchemaUnionInstanceSettingsSchema1(instanceSettingsSchema1 InstanceSettingsSchema1) InstanceSettingsSchemaUnion {
	typ := InstanceSettingsSchemaUnionTypeInstanceSettingsSchema1

	return InstanceSettingsSchemaUnion{
		InstanceSettingsSchema1: &instanceSettingsSchema1,
		Type:                    typ,
	}
}

func CreateInstanceSettingsSchemaUnionInstanceSettingsSchema2(instanceSettingsSchema2 InstanceSettingsSchema2) InstanceSettingsSchemaUnion {
	typ := InstanceSettingsSchemaUnionTypeInstanceSettingsSchema2

	return InstanceSettingsSchemaUnion{
		InstanceSettingsSchema2: &instanceSettingsSchema2,
		Type:                    typ,
	}
}

func (u *InstanceSettingsSchemaUnion) UnmarshalJSON(data []byte) error {

	var instanceSettingsSchema1 InstanceSettingsSchema1 = InstanceSettingsSchema1{}
	if err := utils.UnmarshalJSON(data, &instanceSettingsSchema1, "", true, nil); err == nil {
		u.InstanceSettingsSchema1 = &instanceSettingsSchema1
		u.Type = InstanceSettingsSchemaUnionTypeInstanceSettingsSchema1
		return nil
	}

	var instanceSettingsSchema2 InstanceSettingsSchema2 = InstanceSettingsSchema2{}
	if err := utils.UnmarshalJSON(data, &instanceSettingsSchema2, "", true, nil); err == nil {
		u.InstanceSettingsSchema2 = &instanceSettingsSchema2
		u.Type = InstanceSettingsSchemaUnionTypeInstanceSettingsSchema2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for InstanceSettingsSchemaUnion", string(data))
}

func (u InstanceSettingsSchemaUnion) MarshalJSON() ([]byte, error) {
	if u.InstanceSettingsSchema1 != nil {
		return utils.MarshalJSON(u.InstanceSettingsSchema1, "", true)
	}

	if u.InstanceSettingsSchema2 != nil {
		return utils.MarshalJSON(u.InstanceSettingsSchema2, "", true)
	}

	return nil, errors.New("could not marshal union type InstanceSettingsSchemaUnion: all fields are null")
}

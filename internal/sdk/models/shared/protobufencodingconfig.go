// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WrapperFieldType string

const (
	WrapperFieldTypeSingle WrapperFieldType = "single"
	WrapperFieldTypeArray  WrapperFieldType = "array"
)

func (e WrapperFieldType) ToPointer() *WrapperFieldType {
	return &e
}
func (e *WrapperFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "array":
		*e = WrapperFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WrapperFieldType: %v", v)
	}
}

type Wrapping struct {
	WrapperField     string           `json:"wrapperField"`
	WrapperFieldType WrapperFieldType `json:"wrapperFieldType"`
	WrapperModel     string           `json:"wrapperModel"`
}

func (w *Wrapping) GetWrapperField() string {
	if w == nil {
		return ""
	}
	return w.WrapperField
}

func (w *Wrapping) GetWrapperFieldType() WrapperFieldType {
	if w == nil {
		return WrapperFieldType("")
	}
	return w.WrapperFieldType
}

func (w *Wrapping) GetWrapperModel() string {
	if w == nil {
		return ""
	}
	return w.WrapperModel
}

type ProtobufEncodingConfig struct {
	EventModel string    `json:"eventModel"`
	ID         string    `json:"id"`
	Name       string    `json:"name"`
	Wrapping   *Wrapping `json:"wrapping,omitempty"`
}

func (p *ProtobufEncodingConfig) GetEventModel() string {
	if p == nil {
		return ""
	}
	return p.EventModel
}

func (p *ProtobufEncodingConfig) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *ProtobufEncodingConfig) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *ProtobufEncodingConfig) GetWrapping() *Wrapping {
	if p == nil {
		return nil
	}
	return p.Wrapping
}

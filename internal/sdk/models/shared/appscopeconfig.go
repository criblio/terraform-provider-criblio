// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AppscopeConfigCribl struct {
	Authtoken               *string            `json:"authtoken,omitempty"`
	Enable                  *bool              `json:"enable,omitempty"`
	Transport               *AppscopeTransport `json:"transport,omitempty"`
	UseScopeSourceTransport *bool              `json:"useScopeSourceTransport,omitempty"`
}

func (a *AppscopeConfigCribl) GetAuthtoken() *string {
	if a == nil {
		return nil
	}
	return a.Authtoken
}

func (a *AppscopeConfigCribl) GetEnable() *bool {
	if a == nil {
		return nil
	}
	return a.Enable
}

func (a *AppscopeConfigCribl) GetTransport() *AppscopeTransport {
	if a == nil {
		return nil
	}
	return a.Transport
}

func (a *AppscopeConfigCribl) GetUseScopeSourceTransport() *bool {
	if a == nil {
		return nil
	}
	return a.UseScopeSourceTransport
}

type AppscopeConfigFormatNdjson struct {
	Enhancefs      bool    `json:"enhancefs"`
	Maxeventpersec float64 `json:"maxeventpersec"`
}

func (a *AppscopeConfigFormatNdjson) GetEnhancefs() bool {
	if a == nil {
		return false
	}
	return a.Enhancefs
}

func (a *AppscopeConfigFormatNdjson) GetMaxeventpersec() float64 {
	if a == nil {
		return 0.0
	}
	return a.Maxeventpersec
}

type AppscopeConfigType string

const (
	AppscopeConfigTypeNdjson AppscopeConfigType = "ndjson"
)

func (e AppscopeConfigType) ToPointer() *AppscopeConfigType {
	return &e
}
func (e *AppscopeConfigType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ndjson":
		*e = AppscopeConfigType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppscopeConfigType: %v", v)
	}
}

type AppscopeConfigWatch struct {
	Allowbinary *bool    `json:"allowbinary,omitempty"`
	Enabled     *bool    `json:"enabled,omitempty"`
	Field       *string  `json:"field,omitempty"`
	Headers     []string `json:"headers,omitempty"`
	Name        *string  `json:"name,omitempty"`
	Type        string   `json:"type"`
	Value       *string  `json:"value,omitempty"`
}

func (a *AppscopeConfigWatch) GetAllowbinary() *bool {
	if a == nil {
		return nil
	}
	return a.Allowbinary
}

func (a *AppscopeConfigWatch) GetEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.Enabled
}

func (a *AppscopeConfigWatch) GetField() *string {
	if a == nil {
		return nil
	}
	return a.Field
}

func (a *AppscopeConfigWatch) GetHeaders() []string {
	if a == nil {
		return nil
	}
	return a.Headers
}

func (a *AppscopeConfigWatch) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AppscopeConfigWatch) GetType() string {
	if a == nil {
		return ""
	}
	return a.Type
}

func (a *AppscopeConfigWatch) GetValue() *string {
	if a == nil {
		return nil
	}
	return a.Value
}

type AppscopeConfigEvent struct {
	Enable    *bool                       `json:"enable,omitempty"`
	Format    *AppscopeConfigFormatNdjson `json:"format,omitempty"`
	Transport *AppscopeTransport          `json:"transport,omitempty"`
	Type      *AppscopeConfigType         `json:"type,omitempty"`
	Watch     []AppscopeConfigWatch       `json:"watch,omitempty"`
}

func (a *AppscopeConfigEvent) GetEnable() *bool {
	if a == nil {
		return nil
	}
	return a.Enable
}

func (a *AppscopeConfigEvent) GetFormat() *AppscopeConfigFormatNdjson {
	if a == nil {
		return nil
	}
	return a.Format
}

func (a *AppscopeConfigEvent) GetTransport() *AppscopeTransport {
	if a == nil {
		return nil
	}
	return a.Transport
}

func (a *AppscopeConfigEvent) GetType() *AppscopeConfigType {
	if a == nil {
		return nil
	}
	return a.Type
}

func (a *AppscopeConfigEvent) GetWatch() []AppscopeConfigWatch {
	if a == nil {
		return nil
	}
	return a.Watch
}

type AppscopeConfigFormatLevel string

const (
	AppscopeConfigFormatLevelInfo  AppscopeConfigFormatLevel = "info"
	AppscopeConfigFormatLevelDebug AppscopeConfigFormatLevel = "debug"
	AppscopeConfigFormatLevelTrace AppscopeConfigFormatLevel = "trace"
)

func (e AppscopeConfigFormatLevel) ToPointer() *AppscopeConfigFormatLevel {
	return &e
}
func (e *AppscopeConfigFormatLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "info":
		fallthrough
	case "debug":
		fallthrough
	case "trace":
		*e = AppscopeConfigFormatLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppscopeConfigFormatLevel: %v", v)
	}
}

type AppscopeConfigConfigFormat struct {
	Level   *AppscopeConfigFormatLevel `json:"level,omitempty"`
	Maxline *float64                   `json:"maxline,omitempty"`
}

func (a *AppscopeConfigConfigFormat) GetLevel() *AppscopeConfigFormatLevel {
	if a == nil {
		return nil
	}
	return a.Level
}

func (a *AppscopeConfigConfigFormat) GetMaxline() *float64 {
	if a == nil {
		return nil
	}
	return a.Maxline
}

type AppscopeConfigLogLevel string

const (
	AppscopeConfigLogLevelInfo  AppscopeConfigLogLevel = "info"
	AppscopeConfigLogLevelDebug AppscopeConfigLogLevel = "debug"
	AppscopeConfigLogLevelTrace AppscopeConfigLogLevel = "trace"
)

func (e AppscopeConfigLogLevel) ToPointer() *AppscopeConfigLogLevel {
	return &e
}
func (e *AppscopeConfigLogLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "info":
		fallthrough
	case "debug":
		fallthrough
	case "trace":
		*e = AppscopeConfigLogLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppscopeConfigLogLevel: %v", v)
	}
}

type AppscopeConfigLog struct {
	Level     *AppscopeConfigLogLevel `json:"level,omitempty"`
	Transport *AppscopeTransport      `json:"transport,omitempty"`
}

func (a *AppscopeConfigLog) GetLevel() *AppscopeConfigLogLevel {
	if a == nil {
		return nil
	}
	return a.Level
}

func (a *AppscopeConfigLog) GetTransport() *AppscopeTransport {
	if a == nil {
		return nil
	}
	return a.Transport
}

type AppscopeConfigConfig struct {
	Enable    *bool                       `json:"enable,omitempty"`
	Format    *AppscopeConfigConfigFormat `json:"format,omitempty"`
	Transport *AppscopeTransport          `json:"transport,omitempty"`
	Log       *AppscopeConfigLog          `json:"log,omitempty"`
}

func (a *AppscopeConfigConfig) GetEnable() *bool {
	if a == nil {
		return nil
	}
	return a.Enable
}

func (a *AppscopeConfigConfig) GetFormat() *AppscopeConfigConfigFormat {
	if a == nil {
		return nil
	}
	return a.Format
}

func (a *AppscopeConfigConfig) GetTransport() *AppscopeTransport {
	if a == nil {
		return nil
	}
	return a.Transport
}

func (a *AppscopeConfigConfig) GetLog() *AppscopeConfigLog {
	if a == nil {
		return nil
	}
	return a.Log
}

type AppscopeConfigLibscope struct {
	Config *AppscopeConfigConfig `json:"config,omitempty"`
}

func (a *AppscopeConfigLibscope) GetConfig() *AppscopeConfigConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

type AppscopeConfigMetricFormat string

const (
	AppscopeConfigMetricFormatStatsd AppscopeConfigMetricFormat = "statsd"
	AppscopeConfigMetricFormatNdjson AppscopeConfigMetricFormat = "ndjson"
)

func (e AppscopeConfigMetricFormat) ToPointer() *AppscopeConfigMetricFormat {
	return &e
}
func (e *AppscopeConfigMetricFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "statsd":
		fallthrough
	case "ndjson":
		*e = AppscopeConfigMetricFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppscopeConfigMetricFormat: %v", v)
	}
}

type AppscopeConfigMetric struct {
	Enable       *bool                       `json:"enable,omitempty"`
	Format       *AppscopeConfigMetricFormat `json:"format,omitempty"`
	Statsdmaxlen *float64                    `json:"statsdmaxlen,omitempty"`
	Transport    *AppscopeTransport          `json:"transport,omitempty"`
}

func (a *AppscopeConfigMetric) GetEnable() *bool {
	if a == nil {
		return nil
	}
	return a.Enable
}

func (a *AppscopeConfigMetric) GetFormat() *AppscopeConfigMetricFormat {
	if a == nil {
		return nil
	}
	return a.Format
}

func (a *AppscopeConfigMetric) GetStatsdmaxlen() *float64 {
	if a == nil {
		return nil
	}
	return a.Statsdmaxlen
}

func (a *AppscopeConfigMetric) GetTransport() *AppscopeTransport {
	if a == nil {
		return nil
	}
	return a.Transport
}

type AppscopeConfigPayload struct {
	Dir    *string `json:"dir,omitempty"`
	Enable *bool   `json:"enable,omitempty"`
}

func (a *AppscopeConfigPayload) GetDir() *string {
	if a == nil {
		return nil
	}
	return a.Dir
}

func (a *AppscopeConfigPayload) GetEnable() *bool {
	if a == nil {
		return nil
	}
	return a.Enable
}

type AppscopeConfigProtocol struct {
	Binary  bool    `json:"binary"`
	Detect  bool    `json:"detect"`
	Len     float64 `json:"len"`
	Name    string  `json:"name"`
	Payload bool    `json:"payload"`
	Regex   string  `json:"regex"`
}

func (a *AppscopeConfigProtocol) GetBinary() bool {
	if a == nil {
		return false
	}
	return a.Binary
}

func (a *AppscopeConfigProtocol) GetDetect() bool {
	if a == nil {
		return false
	}
	return a.Detect
}

func (a *AppscopeConfigProtocol) GetLen() float64 {
	if a == nil {
		return 0.0
	}
	return a.Len
}

func (a *AppscopeConfigProtocol) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AppscopeConfigProtocol) GetPayload() bool {
	if a == nil {
		return false
	}
	return a.Payload
}

func (a *AppscopeConfigProtocol) GetRegex() string {
	if a == nil {
		return ""
	}
	return a.Regex
}

type AppscopeConfigTag struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (a *AppscopeConfigTag) GetKey() string {
	if a == nil {
		return ""
	}
	return a.Key
}

func (a *AppscopeConfigTag) GetValue() string {
	if a == nil {
		return ""
	}
	return a.Value
}

type AppscopeConfig struct {
	Cribl    *AppscopeConfigCribl     `json:"cribl,omitempty"`
	Event    *AppscopeConfigEvent     `json:"event,omitempty"`
	Libscope *AppscopeConfigLibscope  `json:"libscope,omitempty"`
	Metric   *AppscopeConfigMetric    `json:"metric,omitempty"`
	Payload  *AppscopeConfigPayload   `json:"payload,omitempty"`
	Protocol []AppscopeConfigProtocol `json:"protocol,omitempty"`
	Tags     []AppscopeConfigTag      `json:"tags,omitempty"`
}

func (a *AppscopeConfig) GetCribl() *AppscopeConfigCribl {
	if a == nil {
		return nil
	}
	return a.Cribl
}

func (a *AppscopeConfig) GetEvent() *AppscopeConfigEvent {
	if a == nil {
		return nil
	}
	return a.Event
}

func (a *AppscopeConfig) GetLibscope() *AppscopeConfigLibscope {
	if a == nil {
		return nil
	}
	return a.Libscope
}

func (a *AppscopeConfig) GetMetric() *AppscopeConfigMetric {
	if a == nil {
		return nil
	}
	return a.Metric
}

func (a *AppscopeConfig) GetPayload() *AppscopeConfigPayload {
	if a == nil {
		return nil
	}
	return a.Payload
}

func (a *AppscopeConfig) GetProtocol() []AppscopeConfigProtocol {
	if a == nil {
		return nil
	}
	return a.Protocol
}

func (a *AppscopeConfig) GetTags() []AppscopeConfigTag {
	if a == nil {
		return nil
	}
	return a.Tags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type InputCriblType string

const (
	InputCriblTypeCribl InputCriblType = "cribl"
)

func (e InputCriblType) ToPointer() *InputCriblType {
	return &e
}
func (e *InputCriblType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cribl":
		*e = InputCriblType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCriblType: %v", v)
	}
}

type InputCriblConnection struct {
	Pipeline *string `json:"pipeline,omitempty"`
	Output   string  `json:"output"`
}

func (i InputCriblConnection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCriblConnection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"output"}); err != nil {
		return err
	}
	return nil
}

func (i *InputCriblConnection) GetPipeline() *string {
	if i == nil {
		return nil
	}
	return i.Pipeline
}

func (i *InputCriblConnection) GetOutput() string {
	if i == nil {
		return ""
	}
	return i.Output
}

// InputCriblMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputCriblMode string

const (
	InputCriblModeSmart  InputCriblMode = "smart"
	InputCriblModeAlways InputCriblMode = "always"
)

func (e InputCriblMode) ToPointer() *InputCriblMode {
	return &e
}
func (e *InputCriblMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputCriblMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCriblMode: %v", v)
	}
}

// InputCriblCompression - Codec to use to compress the persisted data
type InputCriblCompression string

const (
	InputCriblCompressionNone InputCriblCompression = "none"
	InputCriblCompressionGzip InputCriblCompression = "gzip"
)

func (e InputCriblCompression) ToPointer() *InputCriblCompression {
	return &e
}
func (e *InputCriblCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputCriblCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCriblCompression: %v", v)
	}
}

type InputCriblPq struct {
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputCriblMode `default:"always" json:"mode"`
	// The maximum number of events to hold in memory before writing the events to disk
	MaxBufferSize *float64 `default:"1000" json:"maxBufferSize"`
	// The number of events to send downstream before committing that Stream has read them
	CommitFrequency *float64 `default:"42" json:"commitFrequency"`
	// The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
	MaxFileSize *string `default:"1 MB" json:"maxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `default:"5GB" json:"maxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
	Path *string `default:"$CRIBL_HOME/state/queues" json:"path"`
	// Codec to use to compress the persisted data
	Compress *InputCriblCompression `default:"none" json:"compress"`
}

func (i InputCriblPq) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCriblPq) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputCriblPq) GetMode() *InputCriblMode {
	if i == nil {
		return nil
	}
	return i.Mode
}

func (i *InputCriblPq) GetMaxBufferSize() *float64 {
	if i == nil {
		return nil
	}
	return i.MaxBufferSize
}

func (i *InputCriblPq) GetCommitFrequency() *float64 {
	if i == nil {
		return nil
	}
	return i.CommitFrequency
}

func (i *InputCriblPq) GetMaxFileSize() *string {
	if i == nil {
		return nil
	}
	return i.MaxFileSize
}

func (i *InputCriblPq) GetMaxSize() *string {
	if i == nil {
		return nil
	}
	return i.MaxSize
}

func (i *InputCriblPq) GetPath() *string {
	if i == nil {
		return nil
	}
	return i.Path
}

func (i *InputCriblPq) GetCompress() *InputCriblCompression {
	if i == nil {
		return nil
	}
	return i.Compress
}

type InputCriblMetadatum struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (i InputCriblMetadatum) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCriblMetadatum) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"name", "value"}); err != nil {
		return err
	}
	return nil
}

func (i *InputCriblMetadatum) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *InputCriblMetadatum) GetValue() string {
	if i == nil {
		return ""
	}
	return i.Value
}

type InputCribl struct {
	// Unique ID for this input
	ID       string         `json:"id"`
	Type     InputCriblType `json:"type"`
	Disabled *bool          `default:"false" json:"disabled"`
	// Pipeline to process data from this Source before sending it through the Routes
	Pipeline *string `json:"pipeline,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `default:"true" json:"sendToRoutes"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
	PqEnabled *bool `default:"false" json:"pqEnabled"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Direct connections to Destinations, and optionally via a Pipeline or a Pack
	Connections []InputCriblConnection `json:"connections,omitempty"`
	Pq          *InputCriblPq          `json:"pq,omitempty"`
	Filter      *string                `json:"filter,omitempty"`
	// Fields to add to events from this input
	Metadata    []InputCriblMetadatum `json:"metadata,omitempty"`
	Description *string               `json:"description,omitempty"`
}

func (i InputCribl) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCribl) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"id", "type"}); err != nil {
		return err
	}
	return nil
}

func (i *InputCribl) GetID() string {
	if i == nil {
		return ""
	}
	return i.ID
}

func (i *InputCribl) GetType() InputCriblType {
	if i == nil {
		return InputCriblType("")
	}
	return i.Type
}

func (i *InputCribl) GetDisabled() *bool {
	if i == nil {
		return nil
	}
	return i.Disabled
}

func (i *InputCribl) GetPipeline() *string {
	if i == nil {
		return nil
	}
	return i.Pipeline
}

func (i *InputCribl) GetSendToRoutes() *bool {
	if i == nil {
		return nil
	}
	return i.SendToRoutes
}

func (i *InputCribl) GetEnvironment() *string {
	if i == nil {
		return nil
	}
	return i.Environment
}

func (i *InputCribl) GetPqEnabled() *bool {
	if i == nil {
		return nil
	}
	return i.PqEnabled
}

func (i *InputCribl) GetStreamtags() []string {
	if i == nil {
		return nil
	}
	return i.Streamtags
}

func (i *InputCribl) GetConnections() []InputCriblConnection {
	if i == nil {
		return nil
	}
	return i.Connections
}

func (i *InputCribl) GetPq() *InputCriblPq {
	if i == nil {
		return nil
	}
	return i.Pq
}

func (i *InputCribl) GetFilter() *string {
	if i == nil {
		return nil
	}
	return i.Filter
}

func (i *InputCribl) GetMetadata() []InputCriblMetadatum {
	if i == nil {
		return nil
	}
	return i.Metadata
}

func (i *InputCribl) GetDescription() *string {
	if i == nil {
		return nil
	}
	return i.Description
}

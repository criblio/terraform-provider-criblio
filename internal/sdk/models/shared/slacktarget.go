// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type SlackTargetType string

const (
	SlackTargetTypeSlack SlackTargetType = "slack"
)

func (e SlackTargetType) ToPointer() *SlackTargetType {
	return &e
}
func (e *SlackTargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "slack":
		*e = SlackTargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SlackTargetType: %v", v)
	}
}

type SlackTarget struct {
	// Unique ID for this notification target
	ID   string          `json:"id"`
	Type SlackTargetType `json:"type"`
	// Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
	SystemFields []string `json:"systemFields,omitempty"`
	// Slack's Incoming Webhook URL
	URL string `json:"url"`
}

func (s SlackTarget) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SlackTarget) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"id", "type", "url"}); err != nil {
		return err
	}
	return nil
}

func (s *SlackTarget) GetID() string {
	if s == nil {
		return ""
	}
	return s.ID
}

func (s *SlackTarget) GetType() SlackTargetType {
	if s == nil {
		return SlackTargetType("")
	}
	return s.Type
}

func (s *SlackTarget) GetSystemFields() []string {
	if s == nil {
		return nil
	}
	return s.SystemFields
}

func (s *SlackTarget) GetURL() string {
	if s == nil {
		return ""
	}
	return s.URL
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type SearchDashboardType string

const (
	SearchDashboardTypeMarkdownDefault SearchDashboardType = "markdown.default"
)

func (e SearchDashboardType) ToPointer() *SearchDashboardType {
	return &e
}
func (e *SearchDashboardType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "markdown.default":
		*e = SearchDashboardType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchDashboardType: %v", v)
	}
}

type Variant string

const (
	VariantMarkdown Variant = "markdown"
)

func (e Variant) ToPointer() *Variant {
	return &e
}
func (e *Variant) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "markdown":
		*e = Variant(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Variant: %v", v)
	}
}

type ElementMarkdown struct {
	Description *string             `json:"description,omitempty"`
	Empty       *bool               `json:"empty,omitempty"`
	HidePanel   *bool               `json:"hidePanel,omitempty"`
	ID          string              `json:"id"`
	Index       *float64            `json:"index,omitempty"`
	Layout      DashboardLayout     `json:"layout"`
	Title       *string             `json:"title,omitempty"`
	Type        SearchDashboardType `json:"type"`
	Value       *string             `json:"value,omitempty"`
	Variant     Variant             `json:"variant"`
}

func (e ElementMarkdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ElementMarkdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"id", "layout", "type", "variant"}); err != nil {
		return err
	}
	return nil
}

func (e *ElementMarkdown) GetDescription() *string {
	if e == nil {
		return nil
	}
	return e.Description
}

func (e *ElementMarkdown) GetEmpty() *bool {
	if e == nil {
		return nil
	}
	return e.Empty
}

func (e *ElementMarkdown) GetHidePanel() *bool {
	if e == nil {
		return nil
	}
	return e.HidePanel
}

func (e *ElementMarkdown) GetID() string {
	if e == nil {
		return ""
	}
	return e.ID
}

func (e *ElementMarkdown) GetIndex() *float64 {
	if e == nil {
		return nil
	}
	return e.Index
}

func (e *ElementMarkdown) GetLayout() DashboardLayout {
	if e == nil {
		return DashboardLayout{}
	}
	return e.Layout
}

func (e *ElementMarkdown) GetTitle() *string {
	if e == nil {
		return nil
	}
	return e.Title
}

func (e *ElementMarkdown) GetType() SearchDashboardType {
	if e == nil {
		return SearchDashboardType("")
	}
	return e.Type
}

func (e *ElementMarkdown) GetValue() *string {
	if e == nil {
		return nil
	}
	return e.Value
}

func (e *ElementMarkdown) GetVariant() Variant {
	if e == nil {
		return Variant("")
	}
	return e.Variant
}

type Element struct {
	Description     *string                  `json:"description,omitempty"`
	Empty           *bool                    `json:"empty,omitempty"`
	HidePanel       *bool                    `json:"hidePanel,omitempty"`
	HorizontalChart *bool                    `json:"horizontalChart,omitempty"`
	ID              string                   `json:"id"`
	Index           *float64                 `json:"index,omitempty"`
	InputID         *string                  `json:"inputId,omitempty"`
	Layout          DashboardLayout          `json:"layout"`
	Search          SearchQuery              `json:"search"`
	Title           *string                  `json:"title,omitempty"`
	Type            DashboardElementType     `json:"type"`
	Value           map[string]any           `json:"value,omitempty"`
	Variant         *DashboardElementVariant `json:"variant,omitempty"`
}

func (e Element) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Element) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"id", "layout", "search", "type"}); err != nil {
		return err
	}
	return nil
}

func (e *Element) GetDescription() *string {
	if e == nil {
		return nil
	}
	return e.Description
}

func (e *Element) GetEmpty() *bool {
	if e == nil {
		return nil
	}
	return e.Empty
}

func (e *Element) GetHidePanel() *bool {
	if e == nil {
		return nil
	}
	return e.HidePanel
}

func (e *Element) GetHorizontalChart() *bool {
	if e == nil {
		return nil
	}
	return e.HorizontalChart
}

func (e *Element) GetID() string {
	if e == nil {
		return ""
	}
	return e.ID
}

func (e *Element) GetIndex() *float64 {
	if e == nil {
		return nil
	}
	return e.Index
}

func (e *Element) GetInputID() *string {
	if e == nil {
		return nil
	}
	return e.InputID
}

func (e *Element) GetLayout() DashboardLayout {
	if e == nil {
		return DashboardLayout{}
	}
	return e.Layout
}

func (e *Element) GetSearch() SearchQuery {
	if e == nil {
		return SearchQuery{}
	}
	return e.Search
}

func (e *Element) GetTitle() *string {
	if e == nil {
		return nil
	}
	return e.Title
}

func (e *Element) GetType() DashboardElementType {
	if e == nil {
		return DashboardElementType("")
	}
	return e.Type
}

func (e *Element) GetValue() map[string]any {
	if e == nil {
		return nil
	}
	return e.Value
}

func (e *Element) GetVariant() *DashboardElementVariant {
	if e == nil {
		return nil
	}
	return e.Variant
}

type ElementUnionType string

const (
	ElementUnionTypeElement         ElementUnionType = "element"
	ElementUnionTypeElementMarkdown ElementUnionType = "element_Markdown"
)

type ElementUnion struct {
	Element         *Element         `queryParam:"inline,name=element"`
	ElementMarkdown *ElementMarkdown `queryParam:"inline,name=element"`

	Type ElementUnionType
}

func CreateElementUnionElement(element Element) ElementUnion {
	typ := ElementUnionTypeElement

	return ElementUnion{
		Element: &element,
		Type:    typ,
	}
}

func CreateElementUnionElementMarkdown(elementMarkdown ElementMarkdown) ElementUnion {
	typ := ElementUnionTypeElementMarkdown

	return ElementUnion{
		ElementMarkdown: &elementMarkdown,
		Type:            typ,
	}
}

func (u *ElementUnion) UnmarshalJSON(data []byte) error {

	var element Element = Element{}
	if err := utils.UnmarshalJSON(data, &element, "", true, nil); err == nil {
		u.Element = &element
		u.Type = ElementUnionTypeElement
		return nil
	}

	var elementMarkdown ElementMarkdown = ElementMarkdown{}
	if err := utils.UnmarshalJSON(data, &elementMarkdown, "", true, nil); err == nil {
		u.ElementMarkdown = &elementMarkdown
		u.Type = ElementUnionTypeElementMarkdown
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ElementUnion", string(data))
}

func (u ElementUnion) MarshalJSON() ([]byte, error) {
	if u.Element != nil {
		return utils.MarshalJSON(u.Element, "", true)
	}

	if u.ElementMarkdown != nil {
		return utils.MarshalJSON(u.ElementMarkdown, "", true)
	}

	return nil, errors.New("could not marshal union type ElementUnion: all fields are null")
}

type SearchDashboard struct {
	CacheTTLSeconds    *float64            `json:"cacheTTLSeconds,omitempty"`
	Category           *string             `json:"category,omitempty"`
	Created            float64             `json:"created"`
	CreatedBy          string              `json:"createdBy"`
	Description        *string             `json:"description,omitempty"`
	DisplayCreatedBy   *string             `json:"displayCreatedBy,omitempty"`
	DisplayModifiedBy  *string             `json:"displayModifiedBy,omitempty"`
	Elements           []ElementUnion      `json:"elements"`
	ID                 string              `json:"id"`
	Modified           float64             `json:"modified"`
	ModifiedBy         *string             `json:"modifiedBy,omitempty"`
	Name               string              `json:"name"`
	PackID             *string             `json:"packId,omitempty"`
	RefreshRate        *float64            `json:"refreshRate,omitempty"`
	ResolvedDatasetIds []string            `json:"resolvedDatasetIds,omitempty"`
	Schedule           *SavedQuerySchedule `json:"schedule,omitempty"`
}

func (s *SearchDashboard) GetCacheTTLSeconds() *float64 {
	if s == nil {
		return nil
	}
	return s.CacheTTLSeconds
}

func (s *SearchDashboard) GetCategory() *string {
	if s == nil {
		return nil
	}
	return s.Category
}

func (s *SearchDashboard) GetCreated() float64 {
	if s == nil {
		return 0.0
	}
	return s.Created
}

func (s *SearchDashboard) GetCreatedBy() string {
	if s == nil {
		return ""
	}
	return s.CreatedBy
}

func (s *SearchDashboard) GetDescription() *string {
	if s == nil {
		return nil
	}
	return s.Description
}

func (s *SearchDashboard) GetDisplayCreatedBy() *string {
	if s == nil {
		return nil
	}
	return s.DisplayCreatedBy
}

func (s *SearchDashboard) GetDisplayModifiedBy() *string {
	if s == nil {
		return nil
	}
	return s.DisplayModifiedBy
}

func (s *SearchDashboard) GetElements() []ElementUnion {
	if s == nil {
		return []ElementUnion{}
	}
	return s.Elements
}

func (s *SearchDashboard) GetID() string {
	if s == nil {
		return ""
	}
	return s.ID
}

func (s *SearchDashboard) GetModified() float64 {
	if s == nil {
		return 0.0
	}
	return s.Modified
}

func (s *SearchDashboard) GetModifiedBy() *string {
	if s == nil {
		return nil
	}
	return s.ModifiedBy
}

func (s *SearchDashboard) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *SearchDashboard) GetPackID() *string {
	if s == nil {
		return nil
	}
	return s.PackID
}

func (s *SearchDashboard) GetRefreshRate() *float64 {
	if s == nil {
		return nil
	}
	return s.RefreshRate
}

func (s *SearchDashboard) GetResolvedDatasetIds() []string {
	if s == nil {
		return nil
	}
	return s.ResolvedDatasetIds
}

func (s *SearchDashboard) GetSchedule() *SavedQuerySchedule {
	if s == nil {
		return nil
	}
	return s.Schedule
}

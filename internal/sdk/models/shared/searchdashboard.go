// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type XAxis struct {
	DataField        *string  `json:"dataField,omitempty"`
	Inverse          *bool    `json:"inverse,omitempty"`
	LabelInterval    *string  `json:"labelInterval,omitempty"`
	LabelOrientation *float64 `json:"labelOrientation,omitempty"`
	Name             *string  `json:"name,omitempty"`
	Offset           *float64 `json:"offset,omitempty"`
	Position         *string  `json:"position,omitempty"`
	Type             *string  `json:"type,omitempty"`
}

func (x XAxis) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(x, "", false)
}

func (x *XAxis) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &x, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (x *XAxis) GetDataField() *string {
	if x == nil {
		return nil
	}
	return x.DataField
}

func (x *XAxis) GetInverse() *bool {
	if x == nil {
		return nil
	}
	return x.Inverse
}

func (x *XAxis) GetLabelInterval() *string {
	if x == nil {
		return nil
	}
	return x.LabelInterval
}

func (x *XAxis) GetLabelOrientation() *float64 {
	if x == nil {
		return nil
	}
	return x.LabelOrientation
}

func (x *XAxis) GetName() *string {
	if x == nil {
		return nil
	}
	return x.Name
}

func (x *XAxis) GetOffset() *float64 {
	if x == nil {
		return nil
	}
	return x.Offset
}

func (x *XAxis) GetPosition() *string {
	if x == nil {
		return nil
	}
	return x.Position
}

func (x *XAxis) GetType() *string {
	if x == nil {
		return nil
	}
	return x.Type
}

type YAxis struct {
	DataField []string `json:"dataField,omitempty"`
	Interval  *float64 `json:"interval,omitempty"`
	Max       *float64 `json:"max,omitempty"`
	Min       *float64 `json:"min,omitempty"`
	Position  *string  `json:"position,omitempty"`
	Scale     *string  `json:"scale,omitempty"`
	SplitLine *bool    `json:"splitLine,omitempty"`
	Type      *string  `json:"type,omitempty"`
}

func (y YAxis) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(y, "", false)
}

func (y *YAxis) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &y, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (y *YAxis) GetDataField() []string {
	if y == nil {
		return nil
	}
	return y.DataField
}

func (y *YAxis) GetInterval() *float64 {
	if y == nil {
		return nil
	}
	return y.Interval
}

func (y *YAxis) GetMax() *float64 {
	if y == nil {
		return nil
	}
	return y.Max
}

func (y *YAxis) GetMin() *float64 {
	if y == nil {
		return nil
	}
	return y.Min
}

func (y *YAxis) GetPosition() *string {
	if y == nil {
		return nil
	}
	return y.Position
}

func (y *YAxis) GetScale() *string {
	if y == nil {
		return nil
	}
	return y.Scale
}

func (y *YAxis) GetSplitLine() *bool {
	if y == nil {
		return nil
	}
	return y.SplitLine
}

func (y *YAxis) GetType() *string {
	if y == nil {
		return nil
	}
	return y.Type
}

type Element struct {
	Description     *string              `json:"description,omitempty"`
	Empty           *bool                `json:"empty,omitempty"`
	HidePanel       *bool                `json:"hidePanel,omitempty"`
	HorizontalChart *bool                `json:"horizontalChart,omitempty"`
	ID              string               `json:"id"`
	Query           *SearchQuery         `json:"query,omitempty"`
	Title           *string              `json:"title,omitempty"`
	Type            DashboardElementType `json:"type"`
	Variant         string               `json:"variant"`
	W               *float64             `json:"w,omitempty"`
	H               *float64             `json:"h,omitempty"`
	X               *float64             `json:"x,omitempty"`
	Y               *float64             `json:"y,omitempty"`
	ColorPalette    string               `json:"colorPalette"`
	Layout          DashboardLayout      `json:"layout"`
	XAxis           *XAxis               `json:"xAxis,omitempty"`
	YAxis           *YAxis               `json:"yAxis,omitempty"`
}

func (e Element) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Element) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"id", "type", "variant", "colorPalette", "layout"}); err != nil {
		return err
	}
	return nil
}

func (e *Element) GetDescription() *string {
	if e == nil {
		return nil
	}
	return e.Description
}

func (e *Element) GetEmpty() *bool {
	if e == nil {
		return nil
	}
	return e.Empty
}

func (e *Element) GetHidePanel() *bool {
	if e == nil {
		return nil
	}
	return e.HidePanel
}

func (e *Element) GetHorizontalChart() *bool {
	if e == nil {
		return nil
	}
	return e.HorizontalChart
}

func (e *Element) GetID() string {
	if e == nil {
		return ""
	}
	return e.ID
}

func (e *Element) GetQuery() *SearchQuery {
	if e == nil {
		return nil
	}
	return e.Query
}

func (e *Element) GetTitle() *string {
	if e == nil {
		return nil
	}
	return e.Title
}

func (e *Element) GetType() DashboardElementType {
	if e == nil {
		return DashboardElementType("")
	}
	return e.Type
}

func (e *Element) GetVariant() string {
	if e == nil {
		return ""
	}
	return e.Variant
}

func (e *Element) GetW() *float64 {
	if e == nil {
		return nil
	}
	return e.W
}

func (e *Element) GetH() *float64 {
	if e == nil {
		return nil
	}
	return e.H
}

func (e *Element) GetX() *float64 {
	if e == nil {
		return nil
	}
	return e.X
}

func (e *Element) GetY() *float64 {
	if e == nil {
		return nil
	}
	return e.Y
}

func (e *Element) GetColorPalette() string {
	if e == nil {
		return ""
	}
	return e.ColorPalette
}

func (e *Element) GetLayout() DashboardLayout {
	if e == nil {
		return DashboardLayout{}
	}
	return e.Layout
}

func (e *Element) GetXAxis() *XAxis {
	if e == nil {
		return nil
	}
	return e.XAxis
}

func (e *Element) GetYAxis() *YAxis {
	if e == nil {
		return nil
	}
	return e.YAxis
}

type ElementUnionType string

const (
	ElementUnionTypeElement ElementUnionType = "element"
)

type ElementUnion struct {
	Element *Element `queryParam:"inline,name=element"`

	Type ElementUnionType
}

func CreateElementUnionElement(element Element) ElementUnion {
	typ := ElementUnionTypeElement

	return ElementUnion{
		Element: &element,
		Type:    typ,
	}
}

func (u *ElementUnion) UnmarshalJSON(data []byte) error {

	var element Element = Element{}
	if err := utils.UnmarshalJSON(data, &element, "", true, nil); err == nil {
		u.Element = &element
		u.Type = ElementUnionTypeElement
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ElementUnion", string(data))
}

func (u ElementUnion) MarshalJSON() ([]byte, error) {
	if u.Element != nil {
		return utils.MarshalJSON(u.Element, "", true)
	}

	return nil, errors.New("could not marshal union type ElementUnion: all fields are null")
}

type SearchDashboard struct {
	CacheTTLSeconds    *float64            `json:"cacheTTLSeconds,omitempty"`
	Category           *string             `json:"category,omitempty"`
	Created            float64             `json:"created"`
	CreatedBy          string              `json:"createdBy"`
	Description        *string             `json:"description,omitempty"`
	DisplayCreatedBy   *string             `json:"displayCreatedBy,omitempty"`
	DisplayModifiedBy  *string             `json:"displayModifiedBy,omitempty"`
	Elements           []ElementUnion      `json:"elements"`
	ID                 string              `json:"id"`
	Modified           float64             `json:"modified"`
	ModifiedBy         *string             `json:"modifiedBy,omitempty"`
	Name               string              `json:"name"`
	PackID             *string             `json:"packId,omitempty"`
	RefreshRate        *float64            `json:"refreshRate,omitempty"`
	ResolvedDatasetIds []string            `json:"resolvedDatasetIds,omitempty"`
	Owner              *string             `json:"owner,omitempty"`
	Tags               []string            `json:"tags,omitempty"`
	Schedule           *SavedQuerySchedule `json:"schedule,omitempty"`
}

func (s *SearchDashboard) GetCacheTTLSeconds() *float64 {
	if s == nil {
		return nil
	}
	return s.CacheTTLSeconds
}

func (s *SearchDashboard) GetCategory() *string {
	if s == nil {
		return nil
	}
	return s.Category
}

func (s *SearchDashboard) GetCreated() float64 {
	if s == nil {
		return 0.0
	}
	return s.Created
}

func (s *SearchDashboard) GetCreatedBy() string {
	if s == nil {
		return ""
	}
	return s.CreatedBy
}

func (s *SearchDashboard) GetDescription() *string {
	if s == nil {
		return nil
	}
	return s.Description
}

func (s *SearchDashboard) GetDisplayCreatedBy() *string {
	if s == nil {
		return nil
	}
	return s.DisplayCreatedBy
}

func (s *SearchDashboard) GetDisplayModifiedBy() *string {
	if s == nil {
		return nil
	}
	return s.DisplayModifiedBy
}

func (s *SearchDashboard) GetElements() []ElementUnion {
	if s == nil {
		return []ElementUnion{}
	}
	return s.Elements
}

func (s *SearchDashboard) GetID() string {
	if s == nil {
		return ""
	}
	return s.ID
}

func (s *SearchDashboard) GetModified() float64 {
	if s == nil {
		return 0.0
	}
	return s.Modified
}

func (s *SearchDashboard) GetModifiedBy() *string {
	if s == nil {
		return nil
	}
	return s.ModifiedBy
}

func (s *SearchDashboard) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *SearchDashboard) GetPackID() *string {
	if s == nil {
		return nil
	}
	return s.PackID
}

func (s *SearchDashboard) GetRefreshRate() *float64 {
	if s == nil {
		return nil
	}
	return s.RefreshRate
}

func (s *SearchDashboard) GetResolvedDatasetIds() []string {
	if s == nil {
		return nil
	}
	return s.ResolvedDatasetIds
}

func (s *SearchDashboard) GetOwner() *string {
	if s == nil {
		return nil
	}
	return s.Owner
}

func (s *SearchDashboard) GetTags() []string {
	if s == nil {
		return nil
	}
	return s.Tags
}

func (s *SearchDashboard) GetSchedule() *SavedQuerySchedule {
	if s == nil {
		return nil
	}
	return s.Schedule
}

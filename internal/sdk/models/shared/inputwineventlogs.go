// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type InputWinEventLogsType string

const (
	InputWinEventLogsTypeWinEventLogs InputWinEventLogsType = "win_event_logs"
)

func (e InputWinEventLogsType) ToPointer() *InputWinEventLogsType {
	return &e
}
func (e *InputWinEventLogsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "win_event_logs":
		*e = InputWinEventLogsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWinEventLogsType: %v", v)
	}
}

type InputWinEventLogsConnection struct {
	Pipeline *string `json:"pipeline,omitempty"`
	Output   string  `json:"output"`
}

func (i InputWinEventLogsConnection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputWinEventLogsConnection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"output"}); err != nil {
		return err
	}
	return nil
}

func (i *InputWinEventLogsConnection) GetPipeline() *string {
	if i == nil {
		return nil
	}
	return i.Pipeline
}

func (i *InputWinEventLogsConnection) GetOutput() string {
	if i == nil {
		return ""
	}
	return i.Output
}

// InputWinEventLogsMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputWinEventLogsMode string

const (
	InputWinEventLogsModeSmart  InputWinEventLogsMode = "smart"
	InputWinEventLogsModeAlways InputWinEventLogsMode = "always"
)

func (e InputWinEventLogsMode) ToPointer() *InputWinEventLogsMode {
	return &e
}
func (e *InputWinEventLogsMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputWinEventLogsMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWinEventLogsMode: %v", v)
	}
}

// InputWinEventLogsCompression - Codec to use to compress the persisted data
type InputWinEventLogsCompression string

const (
	InputWinEventLogsCompressionNone InputWinEventLogsCompression = "none"
	InputWinEventLogsCompressionGzip InputWinEventLogsCompression = "gzip"
)

func (e InputWinEventLogsCompression) ToPointer() *InputWinEventLogsCompression {
	return &e
}
func (e *InputWinEventLogsCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputWinEventLogsCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWinEventLogsCompression: %v", v)
	}
}

type InputWinEventLogsPq struct {
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputWinEventLogsMode `default:"always" json:"mode"`
	// The maximum number of events to hold in memory before writing the events to disk
	MaxBufferSize *float64 `default:"1000" json:"maxBufferSize"`
	// The number of events to send downstream before committing that Stream has read them
	CommitFrequency *float64 `default:"42" json:"commitFrequency"`
	// The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
	MaxFileSize *string `default:"1 MB" json:"maxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `default:"5GB" json:"maxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
	Path *string `default:"$CRIBL_HOME/state/queues" json:"path"`
	// Codec to use to compress the persisted data
	Compress *InputWinEventLogsCompression `default:"none" json:"compress"`
}

func (i InputWinEventLogsPq) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputWinEventLogsPq) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputWinEventLogsPq) GetMode() *InputWinEventLogsMode {
	if i == nil {
		return nil
	}
	return i.Mode
}

func (i *InputWinEventLogsPq) GetMaxBufferSize() *float64 {
	if i == nil {
		return nil
	}
	return i.MaxBufferSize
}

func (i *InputWinEventLogsPq) GetCommitFrequency() *float64 {
	if i == nil {
		return nil
	}
	return i.CommitFrequency
}

func (i *InputWinEventLogsPq) GetMaxFileSize() *string {
	if i == nil {
		return nil
	}
	return i.MaxFileSize
}

func (i *InputWinEventLogsPq) GetMaxSize() *string {
	if i == nil {
		return nil
	}
	return i.MaxSize
}

func (i *InputWinEventLogsPq) GetPath() *string {
	if i == nil {
		return nil
	}
	return i.Path
}

func (i *InputWinEventLogsPq) GetCompress() *InputWinEventLogsCompression {
	if i == nil {
		return nil
	}
	return i.Compress
}

// ReadMode - Read all stored and future event logs, or only future events
type ReadMode string

const (
	ReadModeOldest ReadMode = "oldest"
	ReadModeNewest ReadMode = "newest"
)

func (e ReadMode) ToPointer() *ReadMode {
	return &e
}
func (e *ReadMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oldest":
		fallthrough
	case "newest":
		*e = ReadMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReadMode: %v", v)
	}
}

// EventFormat - Format of individual events
type EventFormat string

const (
	EventFormatJSON EventFormat = "json"
	EventFormatXML  EventFormat = "xml"
)

func (e EventFormat) ToPointer() *EventFormat {
	return &e
}
func (e *EventFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "xml":
		*e = EventFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventFormat: %v", v)
	}
}

type InputWinEventLogsMetadatum struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (i InputWinEventLogsMetadatum) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputWinEventLogsMetadatum) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"name", "value"}); err != nil {
		return err
	}
	return nil
}

func (i *InputWinEventLogsMetadatum) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *InputWinEventLogsMetadatum) GetValue() string {
	if i == nil {
		return ""
	}
	return i.Value
}

type InputWinEventLogs struct {
	// Unique ID for this input
	ID       *string               `json:"id,omitempty"`
	Type     InputWinEventLogsType `json:"type"`
	Disabled *bool                 `default:"false" json:"disabled"`
	// Pipeline to process data from this Source before sending it through the Routes
	Pipeline *string `json:"pipeline,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `default:"true" json:"sendToRoutes"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
	PqEnabled *bool `default:"false" json:"pqEnabled"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Direct connections to Destinations, and optionally via a Pipeline or a Pack
	Connections []InputWinEventLogsConnection `json:"connections,omitempty"`
	Pq          *InputWinEventLogsPq          `json:"pq,omitempty"`
	// Enter the event logs to collect. Run "Get-WinEvent -ListLog *" in PowerShell to see the available logs.
	LogNames []string `json:"logNames,omitempty"`
	// Read all stored and future event logs, or only future events
	ReadMode *ReadMode `default:"oldest" json:"readMode"`
	// Format of individual events
	EventFormat *EventFormat `default:"json" json:"eventFormat"`
	// Enable to use built-in tools (PowerShell for JSON, wevtutil for XML) to collect event logs instead of native API (default) [Learn more](https://docs.cribl.io/edge/sources-windows-event-logs/#advanced-settings)
	DisableNativeModule *bool `default:"false" json:"disableNativeModule"`
	// Time, in seconds, between checking for new entries (Applicable for pre-4.8.0 nodes that use Windows Tools)
	Interval *float64 `default:"10" json:"interval"`
	// The maximum number of events to read in one polling interval. A batch size higher than 500 can cause delays when pulling from multiple event logs. (Applicable for pre-4.8.0 nodes that use Windows Tools)
	BatchSize *float64 `default:"500" json:"batchSize"`
	// Fields to add to events from this input
	Metadata []InputWinEventLogsMetadatum `json:"metadata,omitempty"`
	// The maximum number of bytes in an event before it is flushed to the pipelines
	MaxEventBytes *float64 `default:"51200" json:"maxEventBytes"`
	Description   *string  `json:"description,omitempty"`
}

func (i InputWinEventLogs) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputWinEventLogs) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (i *InputWinEventLogs) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *InputWinEventLogs) GetType() InputWinEventLogsType {
	if i == nil {
		return InputWinEventLogsType("")
	}
	return i.Type
}

func (i *InputWinEventLogs) GetDisabled() *bool {
	if i == nil {
		return nil
	}
	return i.Disabled
}

func (i *InputWinEventLogs) GetPipeline() *string {
	if i == nil {
		return nil
	}
	return i.Pipeline
}

func (i *InputWinEventLogs) GetSendToRoutes() *bool {
	if i == nil {
		return nil
	}
	return i.SendToRoutes
}

func (i *InputWinEventLogs) GetEnvironment() *string {
	if i == nil {
		return nil
	}
	return i.Environment
}

func (i *InputWinEventLogs) GetPqEnabled() *bool {
	if i == nil {
		return nil
	}
	return i.PqEnabled
}

func (i *InputWinEventLogs) GetStreamtags() []string {
	if i == nil {
		return nil
	}
	return i.Streamtags
}

func (i *InputWinEventLogs) GetConnections() []InputWinEventLogsConnection {
	if i == nil {
		return nil
	}
	return i.Connections
}

func (i *InputWinEventLogs) GetPq() *InputWinEventLogsPq {
	if i == nil {
		return nil
	}
	return i.Pq
}

func (i *InputWinEventLogs) GetLogNames() []string {
	if i == nil {
		return nil
	}
	return i.LogNames
}

func (i *InputWinEventLogs) GetReadMode() *ReadMode {
	if i == nil {
		return nil
	}
	return i.ReadMode
}

func (i *InputWinEventLogs) GetEventFormat() *EventFormat {
	if i == nil {
		return nil
	}
	return i.EventFormat
}

func (i *InputWinEventLogs) GetDisableNativeModule() *bool {
	if i == nil {
		return nil
	}
	return i.DisableNativeModule
}

func (i *InputWinEventLogs) GetInterval() *float64 {
	if i == nil {
		return nil
	}
	return i.Interval
}

func (i *InputWinEventLogs) GetBatchSize() *float64 {
	if i == nil {
		return nil
	}
	return i.BatchSize
}

func (i *InputWinEventLogs) GetMetadata() []InputWinEventLogsMetadatum {
	if i == nil {
		return nil
	}
	return i.Metadata
}

func (i *InputWinEventLogs) GetMaxEventBytes() *float64 {
	if i == nil {
		return nil
	}
	return i.MaxEventBytes
}

func (i *InputWinEventLogs) GetDescription() *string {
	if i == nil {
		return nil
	}
	return i.Description
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type InputPrometheusType string

const (
	InputPrometheusTypePrometheus InputPrometheusType = "prometheus"
)

func (e InputPrometheusType) ToPointer() *InputPrometheusType {
	return &e
}
func (e *InputPrometheusType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "prometheus":
		*e = InputPrometheusType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputPrometheusType: %v", v)
	}
}

type InputPrometheusConnection struct {
	Pipeline *string `json:"pipeline,omitempty"`
	Output   string  `json:"output"`
}

func (i InputPrometheusConnection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputPrometheusConnection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"output"}); err != nil {
		return err
	}
	return nil
}

func (i *InputPrometheusConnection) GetPipeline() *string {
	if i == nil {
		return nil
	}
	return i.Pipeline
}

func (i *InputPrometheusConnection) GetOutput() string {
	if i == nil {
		return ""
	}
	return i.Output
}

// InputPrometheusMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputPrometheusMode string

const (
	InputPrometheusModeSmart  InputPrometheusMode = "smart"
	InputPrometheusModeAlways InputPrometheusMode = "always"
)

func (e InputPrometheusMode) ToPointer() *InputPrometheusMode {
	return &e
}
func (e *InputPrometheusMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputPrometheusMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputPrometheusMode: %v", v)
	}
}

// InputPrometheusCompression - Codec to use to compress the persisted data
type InputPrometheusCompression string

const (
	InputPrometheusCompressionNone InputPrometheusCompression = "none"
	InputPrometheusCompressionGzip InputPrometheusCompression = "gzip"
)

func (e InputPrometheusCompression) ToPointer() *InputPrometheusCompression {
	return &e
}
func (e *InputPrometheusCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputPrometheusCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputPrometheusCompression: %v", v)
	}
}

type InputPrometheusPq struct {
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputPrometheusMode `default:"always" json:"mode"`
	// The maximum number of events to hold in memory before writing the events to disk
	MaxBufferSize *float64 `default:"1000" json:"maxBufferSize"`
	// The number of events to send downstream before committing that Stream has read them
	CommitFrequency *float64 `default:"42" json:"commitFrequency"`
	// The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
	MaxFileSize *string `default:"1 MB" json:"maxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `default:"5GB" json:"maxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
	Path *string `default:"$CRIBL_HOME/state/queues" json:"path"`
	// Codec to use to compress the persisted data
	Compress *InputPrometheusCompression `default:"none" json:"compress"`
}

func (i InputPrometheusPq) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputPrometheusPq) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputPrometheusPq) GetMode() *InputPrometheusMode {
	if i == nil {
		return nil
	}
	return i.Mode
}

func (i *InputPrometheusPq) GetMaxBufferSize() *float64 {
	if i == nil {
		return nil
	}
	return i.MaxBufferSize
}

func (i *InputPrometheusPq) GetCommitFrequency() *float64 {
	if i == nil {
		return nil
	}
	return i.CommitFrequency
}

func (i *InputPrometheusPq) GetMaxFileSize() *string {
	if i == nil {
		return nil
	}
	return i.MaxFileSize
}

func (i *InputPrometheusPq) GetMaxSize() *string {
	if i == nil {
		return nil
	}
	return i.MaxSize
}

func (i *InputPrometheusPq) GetPath() *string {
	if i == nil {
		return nil
	}
	return i.Path
}

func (i *InputPrometheusPq) GetCompress() *InputPrometheusCompression {
	if i == nil {
		return nil
	}
	return i.Compress
}

// InputPrometheusDiscoveryType - Target discovery mechanism. Use static to manually enter a list of targets.
type InputPrometheusDiscoveryType string

const (
	InputPrometheusDiscoveryTypeStatic InputPrometheusDiscoveryType = "static"
	InputPrometheusDiscoveryTypeDNS    InputPrometheusDiscoveryType = "dns"
	InputPrometheusDiscoveryTypeEc2    InputPrometheusDiscoveryType = "ec2"
)

func (e InputPrometheusDiscoveryType) ToPointer() *InputPrometheusDiscoveryType {
	return &e
}
func (e *InputPrometheusDiscoveryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "static":
		fallthrough
	case "dns":
		fallthrough
	case "ec2":
		*e = InputPrometheusDiscoveryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputPrometheusDiscoveryType: %v", v)
	}
}

// InputPrometheusLogLevel - Collector runtime Log Level
type InputPrometheusLogLevel string

const (
	InputPrometheusLogLevelError InputPrometheusLogLevel = "error"
	InputPrometheusLogLevelWarn  InputPrometheusLogLevel = "warn"
	InputPrometheusLogLevelInfo  InputPrometheusLogLevel = "info"
	InputPrometheusLogLevelDebug InputPrometheusLogLevel = "debug"
)

func (e InputPrometheusLogLevel) ToPointer() *InputPrometheusLogLevel {
	return &e
}
func (e *InputPrometheusLogLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "warn":
		fallthrough
	case "info":
		fallthrough
	case "debug":
		*e = InputPrometheusLogLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputPrometheusLogLevel: %v", v)
	}
}

type InputPrometheusMetadatum struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (i InputPrometheusMetadatum) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputPrometheusMetadatum) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"name", "value"}); err != nil {
		return err
	}
	return nil
}

func (i *InputPrometheusMetadatum) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *InputPrometheusMetadatum) GetValue() string {
	if i == nil {
		return ""
	}
	return i.Value
}

// InputPrometheusAuthTypeAuthenticationMethod - Enter credentials directly, or select a stored secret
type InputPrometheusAuthTypeAuthenticationMethod string

const (
	InputPrometheusAuthTypeAuthenticationMethodManual InputPrometheusAuthTypeAuthenticationMethod = "manual"
	InputPrometheusAuthTypeAuthenticationMethodSecret InputPrometheusAuthTypeAuthenticationMethod = "secret"
)

func (e InputPrometheusAuthTypeAuthenticationMethod) ToPointer() *InputPrometheusAuthTypeAuthenticationMethod {
	return &e
}
func (e *InputPrometheusAuthTypeAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manual":
		fallthrough
	case "secret":
		*e = InputPrometheusAuthTypeAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputPrometheusAuthTypeAuthenticationMethod: %v", v)
	}
}

// InputPrometheusRecordType - DNS Record type to resolve
type InputPrometheusRecordType string

const (
	InputPrometheusRecordTypeSrv  InputPrometheusRecordType = "SRV"
	InputPrometheusRecordTypeA    InputPrometheusRecordType = "A"
	InputPrometheusRecordTypeAaaa InputPrometheusRecordType = "AAAA"
)

func (e InputPrometheusRecordType) ToPointer() *InputPrometheusRecordType {
	return &e
}
func (e *InputPrometheusRecordType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SRV":
		fallthrough
	case "A":
		fallthrough
	case "AAAA":
		*e = InputPrometheusRecordType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputPrometheusRecordType: %v", v)
	}
}

// MetricsProtocol - Protocol to use when collecting metrics
type MetricsProtocol string

const (
	MetricsProtocolHTTP  MetricsProtocol = "http"
	MetricsProtocolHTTPS MetricsProtocol = "https"
)

func (e MetricsProtocol) ToPointer() *MetricsProtocol {
	return &e
}
func (e *MetricsProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "https":
		*e = MetricsProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MetricsProtocol: %v", v)
	}
}

type InputPrometheusSearchFilter struct {
	// Search filter attribute name, see: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html for more information. Attributes can be manually entered if not present in the drop down list
	Name string `json:"Name"`
	// Search Filter Values, if empty only "running" EC2 instances will be returned
	Values []string `json:"Values,omitempty"`
}

func (i InputPrometheusSearchFilter) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputPrometheusSearchFilter) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"Name"}); err != nil {
		return err
	}
	return nil
}

func (i *InputPrometheusSearchFilter) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *InputPrometheusSearchFilter) GetValues() []string {
	if i == nil {
		return nil
	}
	return i.Values
}

// InputPrometheusAwsAuthenticationMethodAuthenticationMethod - AWS authentication method. Choose Auto to use IAM roles.
type InputPrometheusAwsAuthenticationMethodAuthenticationMethod string

const (
	InputPrometheusAwsAuthenticationMethodAuthenticationMethodAuto   InputPrometheusAwsAuthenticationMethodAuthenticationMethod = "auto"
	InputPrometheusAwsAuthenticationMethodAuthenticationMethodManual InputPrometheusAwsAuthenticationMethodAuthenticationMethod = "manual"
	InputPrometheusAwsAuthenticationMethodAuthenticationMethodSecret InputPrometheusAwsAuthenticationMethodAuthenticationMethod = "secret"
)

func (e InputPrometheusAwsAuthenticationMethodAuthenticationMethod) ToPointer() *InputPrometheusAwsAuthenticationMethodAuthenticationMethod {
	return &e
}
func (e *InputPrometheusAwsAuthenticationMethodAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		fallthrough
	case "manual":
		fallthrough
	case "secret":
		*e = InputPrometheusAwsAuthenticationMethodAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputPrometheusAwsAuthenticationMethodAuthenticationMethod: %v", v)
	}
}

// InputPrometheusSignatureVersion - Signature version to use for signing EC2 requests
type InputPrometheusSignatureVersion string

const (
	InputPrometheusSignatureVersionV2 InputPrometheusSignatureVersion = "v2"
	InputPrometheusSignatureVersionV4 InputPrometheusSignatureVersion = "v4"
)

func (e InputPrometheusSignatureVersion) ToPointer() *InputPrometheusSignatureVersion {
	return &e
}
func (e *InputPrometheusSignatureVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2":
		fallthrough
	case "v4":
		*e = InputPrometheusSignatureVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputPrometheusSignatureVersion: %v", v)
	}
}

type InputPrometheus struct {
	// Unique ID for this input
	ID       *string              `json:"id,omitempty"`
	Type     *InputPrometheusType `json:"type,omitempty"`
	Disabled *bool                `default:"false" json:"disabled"`
	// Pipeline to process data from this Source before sending it through the Routes
	Pipeline *string `json:"pipeline,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `default:"true" json:"sendToRoutes"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
	PqEnabled *bool `default:"false" json:"pqEnabled"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Direct connections to Destinations, and optionally via a Pipeline or a Pack
	Connections []InputPrometheusConnection `json:"connections,omitempty"`
	Pq          *InputPrometheusPq          `json:"pq,omitempty"`
	// Other dimensions to include in events
	DimensionList []string `json:"dimensionList,omitempty"`
	// Target discovery mechanism. Use static to manually enter a list of targets.
	DiscoveryType *InputPrometheusDiscoveryType `default:"static" json:"discoveryType"`
	// How often in minutes to scrape targets for metrics, 60 must be evenly divisible by the value or save will fail.
	Interval *float64 `default:"15" json:"interval"`
	// Collector runtime Log Level
	LogLevel *InputPrometheusLogLevel `default:"info" json:"logLevel"`
	// Reject certificates that cannot be verified against a valid CA, such as self-signed certificates
	RejectUnauthorized *bool `default:"true" json:"rejectUnauthorized"`
	// How often workers should check in with the scheduler to keep job subscription alive
	KeepAliveTime *float64 `default:"30" json:"keepAliveTime"`
	// Maximum time the job is allowed to run (e.g., 30, 45s or 15m). Units are seconds, if not specified. Enter 0 for unlimited time.
	JobTimeout *string `default:"0" json:"jobTimeout"`
	// The number of Keep Alive Time periods before an inactive worker will have its job subscription revoked.
	MaxMissedKeepAlives *float64 `default:"3" json:"maxMissedKeepAlives"`
	// Time to keep the job's artifacts on disk after job completion. This also affects how long a job is listed in the Job Inspector.
	TTL *string `default:"4h" json:"ttl"`
	// When enabled, this job's artifacts are not counted toward the Worker Group's finished job artifacts limit. Artifacts will be removed only after the Collector's configured time to live.
	IgnoreGroupJobsLimit *bool `default:"false" json:"ignoreGroupJobsLimit"`
	// Fields to add to events from this input
	Metadata []InputPrometheusMetadatum `json:"metadata,omitempty"`
	// Enter credentials directly, or select a stored secret
	AuthType    *InputPrometheusAuthTypeAuthenticationMethod `default:"manual" json:"authType"`
	Description *string                                      `json:"description,omitempty"`
	// List of Prometheus targets to pull metrics from. Values can be in URL or host[:port] format. For example: http://localhost:9090/metrics, localhost:9090, or localhost. In cases where just host[:port] is specified, the endpoint will resolve to 'http://host[:port]/metrics'.
	TargetList []string `json:"targetList,omitempty"`
	// List of DNS names to resolve
	NameList []string `json:"nameList,omitempty"`
	// DNS Record type to resolve
	RecordType *InputPrometheusRecordType `default:"SRV" json:"recordType"`
	// Protocol to use when collecting metrics
	ScrapeProtocol *MetricsProtocol `default:"http" json:"scrapeProtocol"`
	// Path to use when collecting metrics from discovered targets
	ScrapePath *string `default:"/metrics" json:"scrapePath"`
	// Use public IP address for discovered targets. Set to false if the private IP address should be used.
	UsePublicIP *bool `default:"true" json:"usePublicIp"`
	// The port number in the metrics URL for discovered targets.
	ScrapePort *float64 `default:"9090" json:"scrapePort"`
	// EC2 Instance Search Filter
	SearchFilter []InputPrometheusSearchFilter `json:"searchFilter,omitempty"`
	// AWS authentication method. Choose Auto to use IAM roles.
	AwsAuthenticationMethod *InputPrometheusAwsAuthenticationMethodAuthenticationMethod `default:"auto" json:"awsAuthenticationMethod"`
	AwsSecretKey            *string                                                     `json:"awsSecretKey,omitempty"`
	// Region where the EC2 is located
	Region *string `json:"region,omitempty"`
	// EC2 service endpoint. If empty, defaults to the AWS Region-specific endpoint. Otherwise, it must point to EC2-compatible endpoint.
	Endpoint *string `json:"endpoint,omitempty"`
	// Signature version to use for signing EC2 requests
	SignatureVersion *InputPrometheusSignatureVersion `default:"v4" json:"signatureVersion"`
	// Reuse connections between requests, which can improve performance
	ReuseConnections *bool `default:"true" json:"reuseConnections"`
	// Use Assume Role credentials to access EC2
	EnableAssumeRole *bool `default:"false" json:"enableAssumeRole"`
	// Amazon Resource Name (ARN) of the role to assume
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`
	// External ID to use when assuming role
	AssumeRoleExternalID *string `json:"assumeRoleExternalId,omitempty"`
	// Duration of the assumed role's session, in seconds. Minimum is 900 (15 minutes), default is 3600 (1 hour), and maximum is 43200 (12 hours).
	DurationSeconds *float64 `default:"3600" json:"durationSeconds"`
	// Username for Prometheus Basic authentication
	Username *string `json:"username,omitempty"`
	// Password for Prometheus Basic authentication
	Password *string `json:"password,omitempty"`
	// Select or create a secret that references your credentials
	CredentialsSecret *string `json:"credentialsSecret,omitempty"`
}

func (i InputPrometheus) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputPrometheus) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputPrometheus) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *InputPrometheus) GetType() *InputPrometheusType {
	if i == nil {
		return nil
	}
	return i.Type
}

func (i *InputPrometheus) GetDisabled() *bool {
	if i == nil {
		return nil
	}
	return i.Disabled
}

func (i *InputPrometheus) GetPipeline() *string {
	if i == nil {
		return nil
	}
	return i.Pipeline
}

func (i *InputPrometheus) GetSendToRoutes() *bool {
	if i == nil {
		return nil
	}
	return i.SendToRoutes
}

func (i *InputPrometheus) GetEnvironment() *string {
	if i == nil {
		return nil
	}
	return i.Environment
}

func (i *InputPrometheus) GetPqEnabled() *bool {
	if i == nil {
		return nil
	}
	return i.PqEnabled
}

func (i *InputPrometheus) GetStreamtags() []string {
	if i == nil {
		return nil
	}
	return i.Streamtags
}

func (i *InputPrometheus) GetConnections() []InputPrometheusConnection {
	if i == nil {
		return nil
	}
	return i.Connections
}

func (i *InputPrometheus) GetPq() *InputPrometheusPq {
	if i == nil {
		return nil
	}
	return i.Pq
}

func (i *InputPrometheus) GetDimensionList() []string {
	if i == nil {
		return nil
	}
	return i.DimensionList
}

func (i *InputPrometheus) GetDiscoveryType() *InputPrometheusDiscoveryType {
	if i == nil {
		return nil
	}
	return i.DiscoveryType
}

func (i *InputPrometheus) GetInterval() *float64 {
	if i == nil {
		return nil
	}
	return i.Interval
}

func (i *InputPrometheus) GetLogLevel() *InputPrometheusLogLevel {
	if i == nil {
		return nil
	}
	return i.LogLevel
}

func (i *InputPrometheus) GetRejectUnauthorized() *bool {
	if i == nil {
		return nil
	}
	return i.RejectUnauthorized
}

func (i *InputPrometheus) GetKeepAliveTime() *float64 {
	if i == nil {
		return nil
	}
	return i.KeepAliveTime
}

func (i *InputPrometheus) GetJobTimeout() *string {
	if i == nil {
		return nil
	}
	return i.JobTimeout
}

func (i *InputPrometheus) GetMaxMissedKeepAlives() *float64 {
	if i == nil {
		return nil
	}
	return i.MaxMissedKeepAlives
}

func (i *InputPrometheus) GetTTL() *string {
	if i == nil {
		return nil
	}
	return i.TTL
}

func (i *InputPrometheus) GetIgnoreGroupJobsLimit() *bool {
	if i == nil {
		return nil
	}
	return i.IgnoreGroupJobsLimit
}

func (i *InputPrometheus) GetMetadata() []InputPrometheusMetadatum {
	if i == nil {
		return nil
	}
	return i.Metadata
}

func (i *InputPrometheus) GetAuthType() *InputPrometheusAuthTypeAuthenticationMethod {
	if i == nil {
		return nil
	}
	return i.AuthType
}

func (i *InputPrometheus) GetDescription() *string {
	if i == nil {
		return nil
	}
	return i.Description
}

func (i *InputPrometheus) GetTargetList() []string {
	if i == nil {
		return nil
	}
	return i.TargetList
}

func (i *InputPrometheus) GetNameList() []string {
	if i == nil {
		return nil
	}
	return i.NameList
}

func (i *InputPrometheus) GetRecordType() *InputPrometheusRecordType {
	if i == nil {
		return nil
	}
	return i.RecordType
}

func (i *InputPrometheus) GetScrapeProtocol() *MetricsProtocol {
	if i == nil {
		return nil
	}
	return i.ScrapeProtocol
}

func (i *InputPrometheus) GetScrapePath() *string {
	if i == nil {
		return nil
	}
	return i.ScrapePath
}

func (i *InputPrometheus) GetUsePublicIP() *bool {
	if i == nil {
		return nil
	}
	return i.UsePublicIP
}

func (i *InputPrometheus) GetScrapePort() *float64 {
	if i == nil {
		return nil
	}
	return i.ScrapePort
}

func (i *InputPrometheus) GetSearchFilter() []InputPrometheusSearchFilter {
	if i == nil {
		return nil
	}
	return i.SearchFilter
}

func (i *InputPrometheus) GetAwsAuthenticationMethod() *InputPrometheusAwsAuthenticationMethodAuthenticationMethod {
	if i == nil {
		return nil
	}
	return i.AwsAuthenticationMethod
}

func (i *InputPrometheus) GetAwsSecretKey() *string {
	if i == nil {
		return nil
	}
	return i.AwsSecretKey
}

func (i *InputPrometheus) GetRegion() *string {
	if i == nil {
		return nil
	}
	return i.Region
}

func (i *InputPrometheus) GetEndpoint() *string {
	if i == nil {
		return nil
	}
	return i.Endpoint
}

func (i *InputPrometheus) GetSignatureVersion() *InputPrometheusSignatureVersion {
	if i == nil {
		return nil
	}
	return i.SignatureVersion
}

func (i *InputPrometheus) GetReuseConnections() *bool {
	if i == nil {
		return nil
	}
	return i.ReuseConnections
}

func (i *InputPrometheus) GetEnableAssumeRole() *bool {
	if i == nil {
		return nil
	}
	return i.EnableAssumeRole
}

func (i *InputPrometheus) GetAssumeRoleArn() *string {
	if i == nil {
		return nil
	}
	return i.AssumeRoleArn
}

func (i *InputPrometheus) GetAssumeRoleExternalID() *string {
	if i == nil {
		return nil
	}
	return i.AssumeRoleExternalID
}

func (i *InputPrometheus) GetDurationSeconds() *float64 {
	if i == nil {
		return nil
	}
	return i.DurationSeconds
}

func (i *InputPrometheus) GetUsername() *string {
	if i == nil {
		return nil
	}
	return i.Username
}

func (i *InputPrometheus) GetPassword() *string {
	if i == nil {
		return nil
	}
	return i.Password
}

func (i *InputPrometheus) GetCredentialsSecret() *string {
	if i == nil {
		return nil
	}
	return i.CredentialsSecret
}

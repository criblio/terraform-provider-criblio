// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Category string

const (
	CategoryLink Category = "link"
)

func (e Category) ToPointer() *Category {
	return &e
}
func (e *Category) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "link":
		*e = Category(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Category: %v", v)
	}
}

type CluiItem struct {
	Category Category `json:"category"`
	GroupID  *string  `json:"groupId,omitempty"`
	ID       *string  `json:"id,omitempty"`
	Name     *string  `json:"name,omitempty"`
	PackID   *string  `json:"packId,omitempty"`
	SubType  *string  `json:"subType,omitempty"`
	Type     CluiType `json:"type"`
}

func (c *CluiItem) GetCategory() Category {
	if c == nil {
		return Category("")
	}
	return c.Category
}

func (c *CluiItem) GetGroupID() *string {
	if c == nil {
		return nil
	}
	return c.GroupID
}

func (c *CluiItem) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CluiItem) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CluiItem) GetPackID() *string {
	if c == nil {
		return nil
	}
	return c.PackID
}

func (c *CluiItem) GetSubType() *string {
	if c == nil {
		return nil
	}
	return c.SubType
}

func (c *CluiItem) GetType() CluiType {
	if c == nil {
		return CluiType("")
	}
	return c.Type
}

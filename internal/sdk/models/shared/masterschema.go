// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type MasterSchemaCheckServerIdentity struct {
}

func (m MasterSchemaCheckServerIdentity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MasterSchemaCheckServerIdentity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, nil); err != nil {
		return err
	}
	return nil
}

type MasterSchemaTLS struct {
	CaPath              *string                          `json:"caPath,omitempty"`
	CertPath            *string                          `json:"certPath,omitempty"`
	CertificateName     *string                          `json:"certificateName,omitempty"`
	CheckServerIdentity *MasterSchemaCheckServerIdentity `json:"checkServerIdentity,omitempty"`
	CommonNameRegex     map[string]any                   `json:"commonNameRegex,omitempty"`
	Disabled            bool                             `json:"disabled"`
	Passphrase          *string                          `json:"passphrase,omitempty"`
	PrivKeyPath         *string                          `json:"privKeyPath,omitempty"`
	RejectUnauthorized  *bool                            `json:"rejectUnauthorized,omitempty"`
	RequestCert         *bool                            `json:"requestCert,omitempty"`
	Servername          *string                          `json:"servername,omitempty"`
}

func (m MasterSchemaTLS) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MasterSchemaTLS) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"disabled"}); err != nil {
		return err
	}
	return nil
}

func (m *MasterSchemaTLS) GetCaPath() *string {
	if m == nil {
		return nil
	}
	return m.CaPath
}

func (m *MasterSchemaTLS) GetCertPath() *string {
	if m == nil {
		return nil
	}
	return m.CertPath
}

func (m *MasterSchemaTLS) GetCertificateName() *string {
	if m == nil {
		return nil
	}
	return m.CertificateName
}

func (m *MasterSchemaTLS) GetCheckServerIdentity() *MasterSchemaCheckServerIdentity {
	if m == nil {
		return nil
	}
	return m.CheckServerIdentity
}

func (m *MasterSchemaTLS) GetCommonNameRegex() map[string]any {
	if m == nil {
		return nil
	}
	return m.CommonNameRegex
}

func (m *MasterSchemaTLS) GetDisabled() bool {
	if m == nil {
		return false
	}
	return m.Disabled
}

func (m *MasterSchemaTLS) GetPassphrase() *string {
	if m == nil {
		return nil
	}
	return m.Passphrase
}

func (m *MasterSchemaTLS) GetPrivKeyPath() *string {
	if m == nil {
		return nil
	}
	return m.PrivKeyPath
}

func (m *MasterSchemaTLS) GetRejectUnauthorized() *bool {
	if m == nil {
		return nil
	}
	return m.RejectUnauthorized
}

func (m *MasterSchemaTLS) GetRequestCert() *bool {
	if m == nil {
		return nil
	}
	return m.RequestCert
}

func (m *MasterSchemaTLS) GetServername() *string {
	if m == nil {
		return nil
	}
	return m.Servername
}

type MasterSchema struct {
	AuthToken             *string            `json:"authToken,omitempty"`
	Compression           *TCPOutCompression `json:"compression,omitempty"`
	ConfigBundles         *ConfigBundles     `json:"configBundles,omitempty"`
	ConfigHelperSocketDir *string            `json:"configHelperSocketDir,omitempty"`
	ConnectionTimeout     *float64           `json:"connectionTimeout,omitempty"`
	DisableSNIRouting     *bool              `json:"disableSNIRouting,omitempty"`
	Failover              *FailoverConfigs   `json:"failover,omitempty"`
	ForwardToLeaderAPI    *bool              `json:"forwardToLeaderApi,omitempty"`
	Host                  string             `json:"host"`
	IPWhitelistRegex      *string            `json:"ipWhitelistRegex,omitempty"`
	MaxActiveCxn          *float64           `json:"maxActiveCxn,omitempty"`
	MaxBufferBytes        *float64           `json:"maxBufferBytes,omitempty"`
	Port                  float64            `json:"port"`
	Protocol              *string            `json:"protocol,omitempty"`
	Proxy                 *SocksProxyOpts    `json:"proxy,omitempty"`
	Resiliency            *ResiliencyType    `json:"resiliency,omitempty"`
	TLS                   *MasterSchemaTLS   `json:"tls,omitempty"`
	WriteTimeout          *float64           `json:"writeTimeout,omitempty"`
}

func (m MasterSchema) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MasterSchema) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"host", "port"}); err != nil {
		return err
	}
	return nil
}

func (m *MasterSchema) GetAuthToken() *string {
	if m == nil {
		return nil
	}
	return m.AuthToken
}

func (m *MasterSchema) GetCompression() *TCPOutCompression {
	if m == nil {
		return nil
	}
	return m.Compression
}

func (m *MasterSchema) GetConfigBundles() *ConfigBundles {
	if m == nil {
		return nil
	}
	return m.ConfigBundles
}

func (m *MasterSchema) GetConfigHelperSocketDir() *string {
	if m == nil {
		return nil
	}
	return m.ConfigHelperSocketDir
}

func (m *MasterSchema) GetConnectionTimeout() *float64 {
	if m == nil {
		return nil
	}
	return m.ConnectionTimeout
}

func (m *MasterSchema) GetDisableSNIRouting() *bool {
	if m == nil {
		return nil
	}
	return m.DisableSNIRouting
}

func (m *MasterSchema) GetFailover() *FailoverConfigs {
	if m == nil {
		return nil
	}
	return m.Failover
}

func (m *MasterSchema) GetForwardToLeaderAPI() *bool {
	if m == nil {
		return nil
	}
	return m.ForwardToLeaderAPI
}

func (m *MasterSchema) GetHost() string {
	if m == nil {
		return ""
	}
	return m.Host
}

func (m *MasterSchema) GetIPWhitelistRegex() *string {
	if m == nil {
		return nil
	}
	return m.IPWhitelistRegex
}

func (m *MasterSchema) GetMaxActiveCxn() *float64 {
	if m == nil {
		return nil
	}
	return m.MaxActiveCxn
}

func (m *MasterSchema) GetMaxBufferBytes() *float64 {
	if m == nil {
		return nil
	}
	return m.MaxBufferBytes
}

func (m *MasterSchema) GetPort() float64 {
	if m == nil {
		return 0.0
	}
	return m.Port
}

func (m *MasterSchema) GetProtocol() *string {
	if m == nil {
		return nil
	}
	return m.Protocol
}

func (m *MasterSchema) GetProxy() *SocksProxyOpts {
	if m == nil {
		return nil
	}
	return m.Proxy
}

func (m *MasterSchema) GetResiliency() *ResiliencyType {
	if m == nil {
		return nil
	}
	return m.Resiliency
}

func (m *MasterSchema) GetTLS() *MasterSchemaTLS {
	if m == nil {
		return nil
	}
	return m.TLS
}

func (m *MasterSchema) GetWriteTimeout() *float64 {
	if m == nil {
		return nil
	}
	return m.WriteTimeout
}

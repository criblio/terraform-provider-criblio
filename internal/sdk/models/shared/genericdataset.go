// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

// S3Bucket - S3 bucket configuration
type S3Bucket struct {
	// S3 bucket name
	Name *string `json:"name,omitempty"`
	// Region where the bucket is located
	Region *string `json:"region,omitempty"`
}

func (o *S3Bucket) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *S3Bucket) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

type AwsSecurityLakeDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// The templated path under which to look for data, in each folder
	Path *string `default:"\\${vendor}/\\${sourceLocation}/\\${pathVersion}/region=\\${region}/accountId=\\${accountId}/eventDay=\\${_time:%Y%m%d}/" json:"path"`
	// A JavaScript filter expression to be evaluated against the provided path
	Filter *string `default:"true" json:"filter"`
	// A list of the buckets that should be searched by this dataset
	SelectedBuckets []S3Bucket `json:"selectedBuckets"`
}

func (a AwsSecurityLakeDataset) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AwsSecurityLakeDataset) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *AwsSecurityLakeDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AwsSecurityLakeDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *AwsSecurityLakeDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *AwsSecurityLakeDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *AwsSecurityLakeDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *AwsSecurityLakeDataset) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *AwsSecurityLakeDataset) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *AwsSecurityLakeDataset) GetSelectedBuckets() []S3Bucket {
	if o == nil {
		return []S3Bucket{}
	}
	return o.SelectedBuckets
}

type GcsDatasetExtraPath struct {
	// Google Cloud Storage bucket path
	Bucket string `json:"bucket"`
	// A JavaScript filter expression to be evaluated against the provided path
	Filter *string `default:"true" json:"filter"`
	// Where the bucket is located
	Region *string `json:"region,omitempty"`
}

func (g GcsDatasetExtraPath) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GcsDatasetExtraPath) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GcsDatasetExtraPath) GetBucket() string {
	if o == nil {
		return ""
	}
	return o.Bucket
}

func (o *GcsDatasetExtraPath) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *GcsDatasetExtraPath) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

type GcsDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// Google Cloud Storage bucket path. Templating is supported.
	Bucket string `json:"bucket"`
	// A JavaScript filter expression to be evaluated against the provided path
	Filter *string `default:"true" json:"filter"`
	// Where the bucket is located
	Region *string `json:"region,omitempty"`
	// Additional bucket paths that are included in this dataset
	ExtraPaths []GcsDatasetExtraPath `json:"extraPaths,omitempty"`
	// Storage classes to include in the search
	StorageClasses []string `json:"storageClasses,omitempty"`
	// Whether to skip event time filtering
	SkipEventTimeFilter *bool `json:"skipEventTimeFilter,omitempty"`
}

func (g GcsDataset) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GcsDataset) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GcsDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GcsDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GcsDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *GcsDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GcsDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *GcsDataset) GetBucket() string {
	if o == nil {
		return ""
	}
	return o.Bucket
}

func (o *GcsDataset) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *GcsDataset) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *GcsDataset) GetExtraPaths() []GcsDatasetExtraPath {
	if o == nil {
		return nil
	}
	return o.ExtraPaths
}

func (o *GcsDataset) GetStorageClasses() []string {
	if o == nil {
		return nil
	}
	return o.StorageClasses
}

func (o *GcsDataset) GetSkipEventTimeFilter() *bool {
	if o == nil {
		return nil
	}
	return o.SkipEventTimeFilter
}

type AzureBlobDatasetExtraPath struct {
	// Azure Blob Storage container name
	ContainerName string `json:"containerName"`
	// The templated path under which to look for data
	Path *string `json:"path,omitempty"`
	// A JavaScript filter expression to be evaluated against the provided path
	Filter *string `default:"true" json:"filter"`
}

func (a AzureBlobDatasetExtraPath) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AzureBlobDatasetExtraPath) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AzureBlobDatasetExtraPath) GetContainerName() string {
	if o == nil {
		return ""
	}
	return o.ContainerName
}

func (o *AzureBlobDatasetExtraPath) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *AzureBlobDatasetExtraPath) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

type AzureBlobDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// Azure Blob Storage container name
	ContainerName string `json:"containerName"`
	// The templated path under which to look for data
	Path *string `json:"path,omitempty"`
	// A JavaScript filter expression to be evaluated against the provided path
	Filter *string `default:"true" json:"filter"`
	// Additional container paths that are included in this dataset
	ExtraPaths []AzureBlobDatasetExtraPath `json:"extraPaths,omitempty"`
	// Storage classes to include in the search
	StorageClasses []string `json:"storageClasses,omitempty"`
	// Whether to skip event time filtering
	SkipEventTimeFilter *bool `json:"skipEventTimeFilter,omitempty"`
}

func (a AzureBlobDataset) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AzureBlobDataset) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *AzureBlobDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AzureBlobDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *AzureBlobDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *AzureBlobDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *AzureBlobDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *AzureBlobDataset) GetContainerName() string {
	if o == nil {
		return ""
	}
	return o.ContainerName
}

func (o *AzureBlobDataset) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *AzureBlobDataset) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *AzureBlobDataset) GetExtraPaths() []AzureBlobDatasetExtraPath {
	if o == nil {
		return nil
	}
	return o.ExtraPaths
}

func (o *AzureBlobDataset) GetStorageClasses() []string {
	if o == nil {
		return nil
	}
	return o.StorageClasses
}

func (o *AzureBlobDataset) GetSkipEventTimeFilter() *bool {
	if o == nil {
		return nil
	}
	return o.SkipEventTimeFilter
}

type EdgeDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// Fleets to query. '*' for all
	Fleets []string `json:"fleets,omitempty"`
	// The directory where data will be collected. Environment variables and templating are supported.
	Path string `json:"path"`
	// A JavaScript filter expression to be evaluated against the provided path
	Filter *string `default:"true" json:"filter"`
}

func (e EdgeDataset) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EdgeDataset) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *EdgeDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *EdgeDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *EdgeDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *EdgeDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *EdgeDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *EdgeDataset) GetFleets() []string {
	if o == nil {
		return nil
	}
	return o.Fleets
}

func (o *EdgeDataset) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *EdgeDataset) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

type MetaDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// IDs of the datasets that are searched by default
	Datasets []string `json:"datasets"`
}

func (o *MetaDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *MetaDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *MetaDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *MetaDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *MetaDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *MetaDataset) GetDatasets() []string {
	if o == nil {
		return []string{}
	}
	return o.Datasets
}

type CriblLeaderDatasetExtraPath struct {
	// The directory from which to collect data
	Path string `json:"path"`
	// A JavaScript filter expression to be evaluated against the provided path
	Filter *string `default:"true" json:"filter"`
}

func (c CriblLeaderDatasetExtraPath) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CriblLeaderDatasetExtraPath) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CriblLeaderDatasetExtraPath) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CriblLeaderDatasetExtraPath) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

type CriblLeaderDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// The directory from which to collect data. Environment variables are supported. Supports templating.
	Path string `json:"path"`
	// A JavaScript filter expression to be evaluated against the provided path
	Filter *string `default:"true" json:"filter"`
	// Additional paths that are included in this dataset
	ExtraPaths []CriblLeaderDatasetExtraPath `json:"extraPaths,omitempty"`
}

func (c CriblLeaderDataset) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CriblLeaderDataset) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CriblLeaderDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CriblLeaderDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CriblLeaderDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *CriblLeaderDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CriblLeaderDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CriblLeaderDataset) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CriblLeaderDataset) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *CriblLeaderDataset) GetExtraPaths() []CriblLeaderDatasetExtraPath {
	if o == nil {
		return nil
	}
	return o.ExtraPaths
}

type S3DatasetExtraPath struct {
	// S3 bucket name
	Bucket string `json:"bucket"`
	// The templated path under which to look for data
	Path *string `json:"path,omitempty"`
	// A JavaScript filter expression to be evaluated against the provided path
	Filter *string `default:"true" json:"filter"`
	// AWS region where the bucket is located
	Region *string `json:"region,omitempty"`
	// Whether to automatically detect the region
	AutoDetectRegion *bool `json:"autoDetectRegion,omitempty"`
}

func (s S3DatasetExtraPath) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *S3DatasetExtraPath) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *S3DatasetExtraPath) GetBucket() string {
	if o == nil {
		return ""
	}
	return o.Bucket
}

func (o *S3DatasetExtraPath) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *S3DatasetExtraPath) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *S3DatasetExtraPath) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *S3DatasetExtraPath) GetAutoDetectRegion() *bool {
	if o == nil {
		return nil
	}
	return o.AutoDetectRegion
}

type S3Dataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// S3 bucket name
	Bucket string `json:"bucket"`
	// The templated path under which to look for data
	Path *string `json:"path,omitempty"`
	// A JavaScript filter expression to be evaluated against the provided path
	Filter *string `default:"true" json:"filter"`
	// AWS region where the bucket is located
	Region *string `json:"region,omitempty"`
	// Whether to automatically detect the region
	AutoDetectRegion *bool `json:"autoDetectRegion,omitempty"`
	// Additional bucket paths that are included in this dataset
	ExtraPaths []S3DatasetExtraPath `json:"extraPaths,omitempty"`
	// Storage classes to include in the search
	StorageClasses []string `json:"storageClasses,omitempty"`
	// Whether to skip event time filtering
	SkipEventTimeFilter *bool `json:"skipEventTimeFilter,omitempty"`
}

func (s S3Dataset) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *S3Dataset) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *S3Dataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *S3Dataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *S3Dataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *S3Dataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *S3Dataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *S3Dataset) GetBucket() string {
	if o == nil {
		return ""
	}
	return o.Bucket
}

func (o *S3Dataset) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *S3Dataset) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *S3Dataset) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *S3Dataset) GetAutoDetectRegion() *bool {
	if o == nil {
		return nil
	}
	return o.AutoDetectRegion
}

func (o *S3Dataset) GetExtraPaths() []S3DatasetExtraPath {
	if o == nil {
		return nil
	}
	return o.ExtraPaths
}

func (o *S3Dataset) GetStorageClasses() []string {
	if o == nil {
		return nil
	}
	return o.StorageClasses
}

func (o *S3Dataset) GetSkipEventTimeFilter() *bool {
	if o == nil {
		return nil
	}
	return o.SkipEventTimeFilter
}

type APIElasticSearchDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// Name of the Elasticsearch index to search
	Index string `json:"index"`
	// Name of the field holding the timestamp of the event
	TimestampField string `json:"timestampField"`
}

func (o *APIElasticSearchDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIElasticSearchDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIElasticSearchDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *APIElasticSearchDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIElasticSearchDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *APIElasticSearchDataset) GetIndex() string {
	if o == nil {
		return ""
	}
	return o.Index
}

func (o *APIElasticSearchDataset) GetTimestampField() string {
	if o == nil {
		return ""
	}
	return o.TimestampField
}

type APIOpenSearchDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// Name of the OpenSearch index to search
	Index string `json:"index"`
	// Name of the field holding the timestamp of the event
	TimestampField *string `default:"@timestamp" json:"timestampField"`
}

func (a APIOpenSearchDataset) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *APIOpenSearchDataset) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *APIOpenSearchDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIOpenSearchDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIOpenSearchDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *APIOpenSearchDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIOpenSearchDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *APIOpenSearchDataset) GetIndex() string {
	if o == nil {
		return ""
	}
	return o.Index
}

func (o *APIOpenSearchDataset) GetTimestampField() *string {
	if o == nil {
		return nil
	}
	return o.TimestampField
}

// StepMode - How to calculate the "step," or time range increment per data point, for the Prometheus query request
type StepMode string

const (
	StepModeExact       StepMode = "exact"
	StepModeNearestUnit StepMode = "nearest_unit"
)

func (e StepMode) ToPointer() *StepMode {
	return &e
}
func (e *StepMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "exact":
		fallthrough
	case "nearest_unit":
		*e = StepMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StepMode: %v", v)
	}
}

type PrometheusDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// Number of data points you want in each result set. Defaults to 250. Can be overridden on the query with a "step" predicate.
	DesiredNumDataPoints *float64 `default:"250" json:"desiredNumDataPoints"`
	// How to calculate the "step," or time range increment per data point, for the Prometheus query request
	StepMode *StepMode `default:"exact" json:"stepMode"`
	// Optional regular expression used to filter metric names. When defined, only metrics whose name matches this pattern will be searched.
	MetricNamePattern *string `json:"metricNamePattern,omitempty"`
}

func (p PrometheusDataset) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PrometheusDataset) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *PrometheusDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PrometheusDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PrometheusDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *PrometheusDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *PrometheusDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *PrometheusDataset) GetDesiredNumDataPoints() *float64 {
	if o == nil {
		return nil
	}
	return o.DesiredNumDataPoints
}

func (o *PrometheusDataset) GetStepMode() *StepMode {
	if o == nil {
		return nil
	}
	return o.StepMode
}

func (o *PrometheusDataset) GetMetricNamePattern() *string {
	if o == nil {
		return nil
	}
	return o.MetricNamePattern
}

type ClickHouseDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	Database *string          `json:"database,omitempty"`
	// May be a simple name (Example: logs) or a SQL query (Example: select * from logs). Results will be limited to 100K for tables without sorting keys and queries.
	Table string `json:"table"`
	// Optional name of the column holding the timestamp of the event to query
	TimestampField *string `json:"timestampField,omitempty"`
}

func (o *ClickHouseDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ClickHouseDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ClickHouseDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *ClickHouseDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *ClickHouseDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *ClickHouseDataset) GetDatabase() *string {
	if o == nil {
		return nil
	}
	return o.Database
}

func (o *ClickHouseDataset) GetTable() string {
	if o == nil {
		return ""
	}
	return o.Table
}

func (o *ClickHouseDataset) GetTimestampField() *string {
	if o == nil {
		return nil
	}
	return o.TimestampField
}

type SnowflakeDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// If not set, uses DEFAULT_WAREHOUSE
	Warehouse *string `json:"warehouse,omitempty"`
	Database  *string `json:"database,omitempty"`
	// The schema in the database that contains the table(s) to query
	Schema *string `json:"schema,omitempty"`
	// May be a simple name (Example: logs) or a SQL query (Example: select * from logs)
	Table string `json:"table"`
	// Optional name of the column holding the timestamp of the event to query
	TimestampField *string `json:"timestampField,omitempty"`
	// Optional Snowflake role to use when executing the statement
	Role *string `json:"role,omitempty"`
}

func (o *SnowflakeDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *SnowflakeDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *SnowflakeDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *SnowflakeDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *SnowflakeDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *SnowflakeDataset) GetWarehouse() *string {
	if o == nil {
		return nil
	}
	return o.Warehouse
}

func (o *SnowflakeDataset) GetDatabase() *string {
	if o == nil {
		return nil
	}
	return o.Database
}

func (o *SnowflakeDataset) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *SnowflakeDataset) GetTable() string {
	if o == nil {
		return ""
	}
	return o.Table
}

func (o *SnowflakeDataset) GetTimestampField() *string {
	if o == nil {
		return nil
	}
	return o.TimestampField
}

func (o *SnowflakeDataset) GetRole() *string {
	if o == nil {
		return nil
	}
	return o.Role
}

type APIAzureDataExplorerDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// Azure Data Explorer cluster name
	Cluster string `json:"cluster"`
	// Location (region) of the Azure Data Explorer cluster
	Location string `json:"location"`
	// Azure Data Explorer database name
	Database string `json:"database"`
	// Name of the table to query. May be a simple name (Example: logs) or a Kusto query
	Table string `json:"table"`
	// Optional name of the field holding the timestamp of the event
	TimestampField *string `json:"timestampField,omitempty"`
	// Type of the data stored in the timestamp field
	TimestampFieldContents *string `default:"kusto_datetime" json:"timestampFieldContents"`
}

func (a APIAzureDataExplorerDataset) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *APIAzureDataExplorerDataset) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *APIAzureDataExplorerDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIAzureDataExplorerDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIAzureDataExplorerDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *APIAzureDataExplorerDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIAzureDataExplorerDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *APIAzureDataExplorerDataset) GetCluster() string {
	if o == nil {
		return ""
	}
	return o.Cluster
}

func (o *APIAzureDataExplorerDataset) GetLocation() string {
	if o == nil {
		return ""
	}
	return o.Location
}

func (o *APIAzureDataExplorerDataset) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *APIAzureDataExplorerDataset) GetTable() string {
	if o == nil {
		return ""
	}
	return o.Table
}

func (o *APIAzureDataExplorerDataset) GetTimestampField() *string {
	if o == nil {
		return nil
	}
	return o.TimestampField
}

func (o *APIAzureDataExplorerDataset) GetTimestampFieldContents() *string {
	if o == nil {
		return nil
	}
	return o.TimestampFieldContents
}

type APIZoomDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// A list of the endpoints that are enabled in this dataset
	EnabledEndpoints []string `json:"enabledEndpoints"`
}

func (o *APIZoomDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIZoomDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIZoomDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *APIZoomDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIZoomDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *APIZoomDataset) GetEnabledEndpoints() []string {
	if o == nil {
		return []string{}
	}
	return o.EnabledEndpoints
}

type APITailscaleDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// A list of the endpoints that are enabled in this dataset
	EnabledEndpoints []string `json:"enabledEndpoints"`
}

func (o *APITailscaleDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APITailscaleDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APITailscaleDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *APITailscaleDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APITailscaleDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *APITailscaleDataset) GetEnabledEndpoints() []string {
	if o == nil {
		return []string{}
	}
	return o.EnabledEndpoints
}

type APIOktaDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// A list of the endpoints that are enabled in this dataset
	EnabledEndpoints []string `json:"enabledEndpoints"`
}

func (o *APIOktaDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIOktaDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIOktaDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *APIOktaDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIOktaDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *APIOktaDataset) GetEnabledEndpoints() []string {
	if o == nil {
		return []string{}
	}
	return o.EnabledEndpoints
}

type APIMsGraphDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// A list of the endpoints that are enabled in this dataset
	EnabledEndpoints []string `json:"enabledEndpoints"`
}

func (o *APIMsGraphDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIMsGraphDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIMsGraphDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *APIMsGraphDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIMsGraphDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *APIMsGraphDataset) GetEnabledEndpoints() []string {
	if o == nil {
		return []string{}
	}
	return o.EnabledEndpoints
}

type APIGoogleWorkspaceDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// A list of the endpoints that are enabled in this dataset
	EnabledEndpoints []string `json:"enabledEndpoints"`
}

func (o *APIGoogleWorkspaceDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIGoogleWorkspaceDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIGoogleWorkspaceDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *APIGoogleWorkspaceDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIGoogleWorkspaceDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *APIGoogleWorkspaceDataset) GetEnabledEndpoints() []string {
	if o == nil {
		return []string{}
	}
	return o.EnabledEndpoints
}

type APIGcpDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// A list of the endpoint configurations that are enabled in this dataset
	EndpointConfigs []GcpEndpointConfig `json:"endpointConfigs"`
}

func (o *APIGcpDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIGcpDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIGcpDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *APIGcpDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIGcpDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *APIGcpDataset) GetEndpointConfigs() []GcpEndpointConfig {
	if o == nil {
		return []GcpEndpointConfig{}
	}
	return o.EndpointConfigs
}

type APIAzureDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// A list of the endpoints that are enabled in this dataset
	EnabledEndpoints []string `json:"enabledEndpoints"`
	// A list of the subscription ids within the tenant to query with this dataset
	SubscriptionIds []string `json:"subscriptionIds"`
}

func (o *APIAzureDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIAzureDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIAzureDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *APIAzureDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIAzureDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *APIAzureDataset) GetEnabledEndpoints() []string {
	if o == nil {
		return []string{}
	}
	return o.EnabledEndpoints
}

func (o *APIAzureDataset) GetSubscriptionIds() []string {
	if o == nil {
		return []string{}
	}
	return o.SubscriptionIds
}

type APIAwsDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// A list of the endpoints that are enabled in this dataset
	EnabledEndpoints []string `json:"enabledEndpoints"`
	// A list of the AWS regions to query for this endpoint
	Regions []string `json:"regions"`
}

func (o *APIAwsDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIAwsDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIAwsDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *APIAwsDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIAwsDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *APIAwsDataset) GetEnabledEndpoints() []string {
	if o == nil {
		return []string{}
	}
	return o.EnabledEndpoints
}

func (o *APIAwsDataset) GetRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.Regions
}

type APIHTTPDataset struct {
	// Unique identifier for the dataset
	ID string `json:"id"`
	// Description of the dataset
	Description *string `json:"description,omitempty"`
	// Dataset provider ID
	ProviderID string `json:"provider"`
	// Dataset provider type, set automatically from the dataset provider
	Type     string           `json:"type"`
	Metadata *DatasetMetadata `json:"metadata,omitempty"`
	// A list of the endpoints that are enabled in this dataset
	EnabledEndpoints []string `json:"enabledEndpoints"`
}

func (o *APIHTTPDataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIHTTPDataset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIHTTPDataset) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *APIHTTPDataset) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *APIHTTPDataset) GetMetadata() *DatasetMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *APIHTTPDataset) GetEnabledEndpoints() []string {
	if o == nil {
		return []string{}
	}
	return o.EnabledEndpoints
}

type GenericDatasetType string

const (
	GenericDatasetTypeAPIHTTPDataset              GenericDatasetType = "ApiHttpDataset"
	GenericDatasetTypeAPIAwsDataset               GenericDatasetType = "ApiAwsDataset"
	GenericDatasetTypeAPIAzureDataset             GenericDatasetType = "ApiAzureDataset"
	GenericDatasetTypeAPIGcpDataset               GenericDatasetType = "ApiGcpDataset"
	GenericDatasetTypeAPIGoogleWorkspaceDataset   GenericDatasetType = "ApiGoogleWorkspaceDataset"
	GenericDatasetTypeAPIMsGraphDataset           GenericDatasetType = "ApiMsGraphDataset"
	GenericDatasetTypeAPIOktaDataset              GenericDatasetType = "ApiOktaDataset"
	GenericDatasetTypeAPITailscaleDataset         GenericDatasetType = "ApiTailscaleDataset"
	GenericDatasetTypeAPIZoomDataset              GenericDatasetType = "ApiZoomDataset"
	GenericDatasetTypeAPIAzureDataExplorerDataset GenericDatasetType = "ApiAzureDataExplorerDataset"
	GenericDatasetTypeSnowflakeDataset            GenericDatasetType = "SnowflakeDataset"
	GenericDatasetTypeClickHouseDataset           GenericDatasetType = "ClickHouseDataset"
	GenericDatasetTypePrometheusDataset           GenericDatasetType = "PrometheusDataset"
	GenericDatasetTypeAPIOpenSearchDataset        GenericDatasetType = "ApiOpenSearchDataset"
	GenericDatasetTypeAPIElasticSearchDataset     GenericDatasetType = "ApiElasticSearchDataset"
	GenericDatasetTypeS3Dataset                   GenericDatasetType = "S3Dataset"
	GenericDatasetTypeCriblLeaderDataset          GenericDatasetType = "CriblLeaderDataset"
	GenericDatasetTypeMetaDataset                 GenericDatasetType = "MetaDataset"
	GenericDatasetTypeEdgeDataset                 GenericDatasetType = "EdgeDataset"
	GenericDatasetTypeAzureBlobDataset            GenericDatasetType = "AzureBlobDataset"
	GenericDatasetTypeGcsDataset                  GenericDatasetType = "GcsDataset"
	GenericDatasetTypeAwsSecurityLakeDataset      GenericDatasetType = "AwsSecurityLakeDataset"
)

type GenericDataset struct {
	APIHTTPDataset              *APIHTTPDataset              `queryParam:"inline"`
	APIAwsDataset               *APIAwsDataset               `queryParam:"inline"`
	APIAzureDataset             *APIAzureDataset             `queryParam:"inline"`
	APIGcpDataset               *APIGcpDataset               `queryParam:"inline"`
	APIGoogleWorkspaceDataset   *APIGoogleWorkspaceDataset   `queryParam:"inline"`
	APIMsGraphDataset           *APIMsGraphDataset           `queryParam:"inline"`
	APIOktaDataset              *APIOktaDataset              `queryParam:"inline"`
	APITailscaleDataset         *APITailscaleDataset         `queryParam:"inline"`
	APIZoomDataset              *APIZoomDataset              `queryParam:"inline"`
	APIAzureDataExplorerDataset *APIAzureDataExplorerDataset `queryParam:"inline"`
	SnowflakeDataset            *SnowflakeDataset            `queryParam:"inline"`
	ClickHouseDataset           *ClickHouseDataset           `queryParam:"inline"`
	PrometheusDataset           *PrometheusDataset           `queryParam:"inline"`
	APIOpenSearchDataset        *APIOpenSearchDataset        `queryParam:"inline"`
	APIElasticSearchDataset     *APIElasticSearchDataset     `queryParam:"inline"`
	S3Dataset                   *S3Dataset                   `queryParam:"inline"`
	CriblLeaderDataset          *CriblLeaderDataset          `queryParam:"inline"`
	MetaDataset                 *MetaDataset                 `queryParam:"inline"`
	EdgeDataset                 *EdgeDataset                 `queryParam:"inline"`
	AzureBlobDataset            *AzureBlobDataset            `queryParam:"inline"`
	GcsDataset                  *GcsDataset                  `queryParam:"inline"`
	AwsSecurityLakeDataset      *AwsSecurityLakeDataset      `queryParam:"inline"`

	Type GenericDatasetType
}

func CreateGenericDatasetAPIHTTPDataset(apiHTTPDataset APIHTTPDataset) GenericDataset {
	typ := GenericDatasetTypeAPIHTTPDataset

	return GenericDataset{
		APIHTTPDataset: &apiHTTPDataset,
		Type:           typ,
	}
}

func CreateGenericDatasetAPIAwsDataset(apiAwsDataset APIAwsDataset) GenericDataset {
	typ := GenericDatasetTypeAPIAwsDataset

	return GenericDataset{
		APIAwsDataset: &apiAwsDataset,
		Type:          typ,
	}
}

func CreateGenericDatasetAPIAzureDataset(apiAzureDataset APIAzureDataset) GenericDataset {
	typ := GenericDatasetTypeAPIAzureDataset

	return GenericDataset{
		APIAzureDataset: &apiAzureDataset,
		Type:            typ,
	}
}

func CreateGenericDatasetAPIGcpDataset(apiGcpDataset APIGcpDataset) GenericDataset {
	typ := GenericDatasetTypeAPIGcpDataset

	return GenericDataset{
		APIGcpDataset: &apiGcpDataset,
		Type:          typ,
	}
}

func CreateGenericDatasetAPIGoogleWorkspaceDataset(apiGoogleWorkspaceDataset APIGoogleWorkspaceDataset) GenericDataset {
	typ := GenericDatasetTypeAPIGoogleWorkspaceDataset

	return GenericDataset{
		APIGoogleWorkspaceDataset: &apiGoogleWorkspaceDataset,
		Type:                      typ,
	}
}

func CreateGenericDatasetAPIMsGraphDataset(apiMsGraphDataset APIMsGraphDataset) GenericDataset {
	typ := GenericDatasetTypeAPIMsGraphDataset

	return GenericDataset{
		APIMsGraphDataset: &apiMsGraphDataset,
		Type:              typ,
	}
}

func CreateGenericDatasetAPIOktaDataset(apiOktaDataset APIOktaDataset) GenericDataset {
	typ := GenericDatasetTypeAPIOktaDataset

	return GenericDataset{
		APIOktaDataset: &apiOktaDataset,
		Type:           typ,
	}
}

func CreateGenericDatasetAPITailscaleDataset(apiTailscaleDataset APITailscaleDataset) GenericDataset {
	typ := GenericDatasetTypeAPITailscaleDataset

	return GenericDataset{
		APITailscaleDataset: &apiTailscaleDataset,
		Type:                typ,
	}
}

func CreateGenericDatasetAPIZoomDataset(apiZoomDataset APIZoomDataset) GenericDataset {
	typ := GenericDatasetTypeAPIZoomDataset

	return GenericDataset{
		APIZoomDataset: &apiZoomDataset,
		Type:           typ,
	}
}

func CreateGenericDatasetAPIAzureDataExplorerDataset(apiAzureDataExplorerDataset APIAzureDataExplorerDataset) GenericDataset {
	typ := GenericDatasetTypeAPIAzureDataExplorerDataset

	return GenericDataset{
		APIAzureDataExplorerDataset: &apiAzureDataExplorerDataset,
		Type:                        typ,
	}
}

func CreateGenericDatasetSnowflakeDataset(snowflakeDataset SnowflakeDataset) GenericDataset {
	typ := GenericDatasetTypeSnowflakeDataset

	return GenericDataset{
		SnowflakeDataset: &snowflakeDataset,
		Type:             typ,
	}
}

func CreateGenericDatasetClickHouseDataset(clickHouseDataset ClickHouseDataset) GenericDataset {
	typ := GenericDatasetTypeClickHouseDataset

	return GenericDataset{
		ClickHouseDataset: &clickHouseDataset,
		Type:              typ,
	}
}

func CreateGenericDatasetPrometheusDataset(prometheusDataset PrometheusDataset) GenericDataset {
	typ := GenericDatasetTypePrometheusDataset

	return GenericDataset{
		PrometheusDataset: &prometheusDataset,
		Type:              typ,
	}
}

func CreateGenericDatasetAPIOpenSearchDataset(apiOpenSearchDataset APIOpenSearchDataset) GenericDataset {
	typ := GenericDatasetTypeAPIOpenSearchDataset

	return GenericDataset{
		APIOpenSearchDataset: &apiOpenSearchDataset,
		Type:                 typ,
	}
}

func CreateGenericDatasetAPIElasticSearchDataset(apiElasticSearchDataset APIElasticSearchDataset) GenericDataset {
	typ := GenericDatasetTypeAPIElasticSearchDataset

	return GenericDataset{
		APIElasticSearchDataset: &apiElasticSearchDataset,
		Type:                    typ,
	}
}

func CreateGenericDatasetS3Dataset(s3Dataset S3Dataset) GenericDataset {
	typ := GenericDatasetTypeS3Dataset

	return GenericDataset{
		S3Dataset: &s3Dataset,
		Type:      typ,
	}
}

func CreateGenericDatasetCriblLeaderDataset(criblLeaderDataset CriblLeaderDataset) GenericDataset {
	typ := GenericDatasetTypeCriblLeaderDataset

	return GenericDataset{
		CriblLeaderDataset: &criblLeaderDataset,
		Type:               typ,
	}
}

func CreateGenericDatasetMetaDataset(metaDataset MetaDataset) GenericDataset {
	typ := GenericDatasetTypeMetaDataset

	return GenericDataset{
		MetaDataset: &metaDataset,
		Type:        typ,
	}
}

func CreateGenericDatasetEdgeDataset(edgeDataset EdgeDataset) GenericDataset {
	typ := GenericDatasetTypeEdgeDataset

	return GenericDataset{
		EdgeDataset: &edgeDataset,
		Type:        typ,
	}
}

func CreateGenericDatasetAzureBlobDataset(azureBlobDataset AzureBlobDataset) GenericDataset {
	typ := GenericDatasetTypeAzureBlobDataset

	return GenericDataset{
		AzureBlobDataset: &azureBlobDataset,
		Type:             typ,
	}
}

func CreateGenericDatasetGcsDataset(gcsDataset GcsDataset) GenericDataset {
	typ := GenericDatasetTypeGcsDataset

	return GenericDataset{
		GcsDataset: &gcsDataset,
		Type:       typ,
	}
}

func CreateGenericDatasetAwsSecurityLakeDataset(awsSecurityLakeDataset AwsSecurityLakeDataset) GenericDataset {
	typ := GenericDatasetTypeAwsSecurityLakeDataset

	return GenericDataset{
		AwsSecurityLakeDataset: &awsSecurityLakeDataset,
		Type:                   typ,
	}
}

func (u *GenericDataset) UnmarshalJSON(data []byte) error {

	var apiZoomDataset APIZoomDataset = APIZoomDataset{}
	if err := utils.UnmarshalJSON(data, &apiZoomDataset, "", true, true); err == nil {
		u.APIZoomDataset = &apiZoomDataset
		u.Type = GenericDatasetTypeAPIZoomDataset
		return nil
	}

	var metaDataset MetaDataset = MetaDataset{}
	if err := utils.UnmarshalJSON(data, &metaDataset, "", true, true); err == nil {
		u.MetaDataset = &metaDataset
		u.Type = GenericDatasetTypeMetaDataset
		return nil
	}

	var apiHTTPDataset APIHTTPDataset = APIHTTPDataset{}
	if err := utils.UnmarshalJSON(data, &apiHTTPDataset, "", true, true); err == nil {
		u.APIHTTPDataset = &apiHTTPDataset
		u.Type = GenericDatasetTypeAPIHTTPDataset
		return nil
	}

	var apiGcpDataset APIGcpDataset = APIGcpDataset{}
	if err := utils.UnmarshalJSON(data, &apiGcpDataset, "", true, true); err == nil {
		u.APIGcpDataset = &apiGcpDataset
		u.Type = GenericDatasetTypeAPIGcpDataset
		return nil
	}

	var apiGoogleWorkspaceDataset APIGoogleWorkspaceDataset = APIGoogleWorkspaceDataset{}
	if err := utils.UnmarshalJSON(data, &apiGoogleWorkspaceDataset, "", true, true); err == nil {
		u.APIGoogleWorkspaceDataset = &apiGoogleWorkspaceDataset
		u.Type = GenericDatasetTypeAPIGoogleWorkspaceDataset
		return nil
	}

	var apiMsGraphDataset APIMsGraphDataset = APIMsGraphDataset{}
	if err := utils.UnmarshalJSON(data, &apiMsGraphDataset, "", true, true); err == nil {
		u.APIMsGraphDataset = &apiMsGraphDataset
		u.Type = GenericDatasetTypeAPIMsGraphDataset
		return nil
	}

	var apiOktaDataset APIOktaDataset = APIOktaDataset{}
	if err := utils.UnmarshalJSON(data, &apiOktaDataset, "", true, true); err == nil {
		u.APIOktaDataset = &apiOktaDataset
		u.Type = GenericDatasetTypeAPIOktaDataset
		return nil
	}

	var apiTailscaleDataset APITailscaleDataset = APITailscaleDataset{}
	if err := utils.UnmarshalJSON(data, &apiTailscaleDataset, "", true, true); err == nil {
		u.APITailscaleDataset = &apiTailscaleDataset
		u.Type = GenericDatasetTypeAPITailscaleDataset
		return nil
	}

	var apiOpenSearchDataset APIOpenSearchDataset = APIOpenSearchDataset{}
	if err := utils.UnmarshalJSON(data, &apiOpenSearchDataset, "", true, true); err == nil {
		u.APIOpenSearchDataset = &apiOpenSearchDataset
		u.Type = GenericDatasetTypeAPIOpenSearchDataset
		return nil
	}

	var apiAwsDataset APIAwsDataset = APIAwsDataset{}
	if err := utils.UnmarshalJSON(data, &apiAwsDataset, "", true, true); err == nil {
		u.APIAwsDataset = &apiAwsDataset
		u.Type = GenericDatasetTypeAPIAwsDataset
		return nil
	}

	var apiAzureDataset APIAzureDataset = APIAzureDataset{}
	if err := utils.UnmarshalJSON(data, &apiAzureDataset, "", true, true); err == nil {
		u.APIAzureDataset = &apiAzureDataset
		u.Type = GenericDatasetTypeAPIAzureDataset
		return nil
	}

	var apiElasticSearchDataset APIElasticSearchDataset = APIElasticSearchDataset{}
	if err := utils.UnmarshalJSON(data, &apiElasticSearchDataset, "", true, true); err == nil {
		u.APIElasticSearchDataset = &apiElasticSearchDataset
		u.Type = GenericDatasetTypeAPIElasticSearchDataset
		return nil
	}

	var awsSecurityLakeDataset AwsSecurityLakeDataset = AwsSecurityLakeDataset{}
	if err := utils.UnmarshalJSON(data, &awsSecurityLakeDataset, "", true, true); err == nil {
		u.AwsSecurityLakeDataset = &awsSecurityLakeDataset
		u.Type = GenericDatasetTypeAwsSecurityLakeDataset
		return nil
	}

	var clickHouseDataset ClickHouseDataset = ClickHouseDataset{}
	if err := utils.UnmarshalJSON(data, &clickHouseDataset, "", true, true); err == nil {
		u.ClickHouseDataset = &clickHouseDataset
		u.Type = GenericDatasetTypeClickHouseDataset
		return nil
	}

	var prometheusDataset PrometheusDataset = PrometheusDataset{}
	if err := utils.UnmarshalJSON(data, &prometheusDataset, "", true, true); err == nil {
		u.PrometheusDataset = &prometheusDataset
		u.Type = GenericDatasetTypePrometheusDataset
		return nil
	}

	var edgeDataset EdgeDataset = EdgeDataset{}
	if err := utils.UnmarshalJSON(data, &edgeDataset, "", true, true); err == nil {
		u.EdgeDataset = &edgeDataset
		u.Type = GenericDatasetTypeEdgeDataset
		return nil
	}

	var criblLeaderDataset CriblLeaderDataset = CriblLeaderDataset{}
	if err := utils.UnmarshalJSON(data, &criblLeaderDataset, "", true, true); err == nil {
		u.CriblLeaderDataset = &criblLeaderDataset
		u.Type = GenericDatasetTypeCriblLeaderDataset
		return nil
	}

	var snowflakeDataset SnowflakeDataset = SnowflakeDataset{}
	if err := utils.UnmarshalJSON(data, &snowflakeDataset, "", true, true); err == nil {
		u.SnowflakeDataset = &snowflakeDataset
		u.Type = GenericDatasetTypeSnowflakeDataset
		return nil
	}

	var azureBlobDataset AzureBlobDataset = AzureBlobDataset{}
	if err := utils.UnmarshalJSON(data, &azureBlobDataset, "", true, true); err == nil {
		u.AzureBlobDataset = &azureBlobDataset
		u.Type = GenericDatasetTypeAzureBlobDataset
		return nil
	}

	var gcsDataset GcsDataset = GcsDataset{}
	if err := utils.UnmarshalJSON(data, &gcsDataset, "", true, true); err == nil {
		u.GcsDataset = &gcsDataset
		u.Type = GenericDatasetTypeGcsDataset
		return nil
	}

	var apiAzureDataExplorerDataset APIAzureDataExplorerDataset = APIAzureDataExplorerDataset{}
	if err := utils.UnmarshalJSON(data, &apiAzureDataExplorerDataset, "", true, true); err == nil {
		u.APIAzureDataExplorerDataset = &apiAzureDataExplorerDataset
		u.Type = GenericDatasetTypeAPIAzureDataExplorerDataset
		return nil
	}

	var s3Dataset S3Dataset = S3Dataset{}
	if err := utils.UnmarshalJSON(data, &s3Dataset, "", true, true); err == nil {
		u.S3Dataset = &s3Dataset
		u.Type = GenericDatasetTypeS3Dataset
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GenericDataset", string(data))
}

func (u GenericDataset) MarshalJSON() ([]byte, error) {
	if u.APIHTTPDataset != nil {
		return utils.MarshalJSON(u.APIHTTPDataset, "", true)
	}

	if u.APIAwsDataset != nil {
		return utils.MarshalJSON(u.APIAwsDataset, "", true)
	}

	if u.APIAzureDataset != nil {
		return utils.MarshalJSON(u.APIAzureDataset, "", true)
	}

	if u.APIGcpDataset != nil {
		return utils.MarshalJSON(u.APIGcpDataset, "", true)
	}

	if u.APIGoogleWorkspaceDataset != nil {
		return utils.MarshalJSON(u.APIGoogleWorkspaceDataset, "", true)
	}

	if u.APIMsGraphDataset != nil {
		return utils.MarshalJSON(u.APIMsGraphDataset, "", true)
	}

	if u.APIOktaDataset != nil {
		return utils.MarshalJSON(u.APIOktaDataset, "", true)
	}

	if u.APITailscaleDataset != nil {
		return utils.MarshalJSON(u.APITailscaleDataset, "", true)
	}

	if u.APIZoomDataset != nil {
		return utils.MarshalJSON(u.APIZoomDataset, "", true)
	}

	if u.APIAzureDataExplorerDataset != nil {
		return utils.MarshalJSON(u.APIAzureDataExplorerDataset, "", true)
	}

	if u.SnowflakeDataset != nil {
		return utils.MarshalJSON(u.SnowflakeDataset, "", true)
	}

	if u.ClickHouseDataset != nil {
		return utils.MarshalJSON(u.ClickHouseDataset, "", true)
	}

	if u.PrometheusDataset != nil {
		return utils.MarshalJSON(u.PrometheusDataset, "", true)
	}

	if u.APIOpenSearchDataset != nil {
		return utils.MarshalJSON(u.APIOpenSearchDataset, "", true)
	}

	if u.APIElasticSearchDataset != nil {
		return utils.MarshalJSON(u.APIElasticSearchDataset, "", true)
	}

	if u.S3Dataset != nil {
		return utils.MarshalJSON(u.S3Dataset, "", true)
	}

	if u.CriblLeaderDataset != nil {
		return utils.MarshalJSON(u.CriblLeaderDataset, "", true)
	}

	if u.MetaDataset != nil {
		return utils.MarshalJSON(u.MetaDataset, "", true)
	}

	if u.EdgeDataset != nil {
		return utils.MarshalJSON(u.EdgeDataset, "", true)
	}

	if u.AzureBlobDataset != nil {
		return utils.MarshalJSON(u.AzureBlobDataset, "", true)
	}

	if u.GcsDataset != nil {
		return utils.MarshalJSON(u.GcsDataset, "", true)
	}

	if u.AwsSecurityLakeDataset != nil {
		return utils.MarshalJSON(u.AwsSecurityLakeDataset, "", true)
	}

	return nil, errors.New("could not marshal union type GenericDataset: all fields are null")
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type OutputCriblLakeType string

const (
	OutputCriblLakeTypeCriblLake OutputCriblLakeType = "cribl_lake"
)

func (e OutputCriblLakeType) ToPointer() *OutputCriblLakeType {
	return &e
}
func (e *OutputCriblLakeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cribl_lake":
		*e = OutputCriblLakeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblLakeType: %v", v)
	}
}

type OutputCriblLake struct {
	// Unique ID for this output
	ID   string              `json:"id"`
	Type OutputCriblLakeType `json:"type"`
	// Lake dataset to send the data to.
	DestPath    *string `json:"destPath,omitempty"`
	Description *string `json:"description,omitempty"`
}

func (o *OutputCriblLake) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *OutputCriblLake) GetType() OutputCriblLakeType {
	if o == nil {
		return OutputCriblLakeType("")
	}
	return o.Type
}

func (o *OutputCriblLake) GetDestPath() *string {
	if o == nil {
		return nil
	}
	return o.DestPath
}

func (o *OutputCriblLake) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type InputWefType string

const (
	InputWefTypeWef InputWefType = "wef"
)

func (e InputWefType) ToPointer() *InputWefType {
	return &e
}
func (e *InputWefType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "wef":
		*e = InputWefType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWefType: %v", v)
	}
}

type InputWefConnection struct {
	Pipeline *string `json:"pipeline,omitempty"`
	Output   string  `json:"output"`
}

func (i InputWefConnection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputWefConnection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"output"}); err != nil {
		return err
	}
	return nil
}

func (i *InputWefConnection) GetPipeline() *string {
	if i == nil {
		return nil
	}
	return i.Pipeline
}

func (i *InputWefConnection) GetOutput() string {
	if i == nil {
		return ""
	}
	return i.Output
}

// InputWefMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputWefMode string

const (
	InputWefModeSmart  InputWefMode = "smart"
	InputWefModeAlways InputWefMode = "always"
)

func (e InputWefMode) ToPointer() *InputWefMode {
	return &e
}
func (e *InputWefMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputWefMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWefMode: %v", v)
	}
}

// InputWefCompression - Codec to use to compress the persisted data
type InputWefCompression string

const (
	InputWefCompressionNone InputWefCompression = "none"
	InputWefCompressionGzip InputWefCompression = "gzip"
)

func (e InputWefCompression) ToPointer() *InputWefCompression {
	return &e
}
func (e *InputWefCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputWefCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWefCompression: %v", v)
	}
}

type InputWefPq struct {
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputWefMode `default:"always" json:"mode"`
	// The maximum number of events to hold in memory before writing the events to disk
	MaxBufferSize *float64 `default:"1000" json:"maxBufferSize"`
	// The number of events to send downstream before committing that Stream has read them
	CommitFrequency *float64 `default:"42" json:"commitFrequency"`
	// The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
	MaxFileSize *string `default:"1 MB" json:"maxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `default:"5GB" json:"maxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
	Path *string `default:"$CRIBL_HOME/state/queues" json:"path"`
	// Codec to use to compress the persisted data
	Compress *InputWefCompression `default:"none" json:"compress"`
}

func (i InputWefPq) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputWefPq) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputWefPq) GetMode() *InputWefMode {
	if i == nil {
		return nil
	}
	return i.Mode
}

func (i *InputWefPq) GetMaxBufferSize() *float64 {
	if i == nil {
		return nil
	}
	return i.MaxBufferSize
}

func (i *InputWefPq) GetCommitFrequency() *float64 {
	if i == nil {
		return nil
	}
	return i.CommitFrequency
}

func (i *InputWefPq) GetMaxFileSize() *string {
	if i == nil {
		return nil
	}
	return i.MaxFileSize
}

func (i *InputWefPq) GetMaxSize() *string {
	if i == nil {
		return nil
	}
	return i.MaxSize
}

func (i *InputWefPq) GetPath() *string {
	if i == nil {
		return nil
	}
	return i.Path
}

func (i *InputWefPq) GetCompress() *InputWefCompression {
	if i == nil {
		return nil
	}
	return i.Compress
}

// InputWefAuthenticationMethod - How to authenticate incoming client connections
type InputWefAuthenticationMethod string

const (
	InputWefAuthenticationMethodClientCert InputWefAuthenticationMethod = "clientCert"
	InputWefAuthenticationMethodKerberos   InputWefAuthenticationMethod = "kerberos"
)

func (e InputWefAuthenticationMethod) ToPointer() *InputWefAuthenticationMethod {
	return &e
}
func (e *InputWefAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "clientCert":
		fallthrough
	case "kerberos":
		*e = InputWefAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWefAuthenticationMethod: %v", v)
	}
}

type InputWefMinimumTLSVersion string

const (
	InputWefMinimumTLSVersionTlSv1  InputWefMinimumTLSVersion = "TLSv1"
	InputWefMinimumTLSVersionTlSv11 InputWefMinimumTLSVersion = "TLSv1.1"
	InputWefMinimumTLSVersionTlSv12 InputWefMinimumTLSVersion = "TLSv1.2"
	InputWefMinimumTLSVersionTlSv13 InputWefMinimumTLSVersion = "TLSv1.3"
)

func (e InputWefMinimumTLSVersion) ToPointer() *InputWefMinimumTLSVersion {
	return &e
}
func (e *InputWefMinimumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputWefMinimumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWefMinimumTLSVersion: %v", v)
	}
}

type InputWefMaximumTLSVersion string

const (
	InputWefMaximumTLSVersionTlSv1  InputWefMaximumTLSVersion = "TLSv1"
	InputWefMaximumTLSVersionTlSv11 InputWefMaximumTLSVersion = "TLSv1.1"
	InputWefMaximumTLSVersionTlSv12 InputWefMaximumTLSVersion = "TLSv1.2"
	InputWefMaximumTLSVersionTlSv13 InputWefMaximumTLSVersion = "TLSv1.3"
)

func (e InputWefMaximumTLSVersion) ToPointer() *InputWefMaximumTLSVersion {
	return &e
}
func (e *InputWefMaximumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputWefMaximumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWefMaximumTLSVersion: %v", v)
	}
}

type MTLSSettings struct {
	// Enable TLS
	Disabled *bool `default:"false" json:"disabled"`
	// Required for WEF certificate authentication
	RejectUnauthorized *bool `default:"true" json:"rejectUnauthorized"`
	// Required for WEF certificate authentication
	RequestCert *bool `default:"true" json:"requestCert"`
	// Name of the predefined certificate
	CertificateName *string `json:"certificateName,omitempty"`
	// Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
	PrivKeyPath string `json:"privKeyPath"`
	// Passphrase to use to decrypt private key
	Passphrase *string `json:"passphrase,omitempty"`
	// Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
	CertPath string `json:"certPath"`
	// Server path containing CA certificates (in PEM format) to use. Can reference $ENV_VARS. If multiple certificates are present in a .pem, each must directly certify the one preceding it.
	CaPath string `json:"caPath"`
	// Regex matching allowable common names in peer certificates' subject attribute
	CommonNameRegex *string                    `default:"/.*/" json:"commonNameRegex"`
	MinVersion      *InputWefMinimumTLSVersion `json:"minVersion,omitempty"`
	MaxVersion      *InputWefMaximumTLSVersion `json:"maxVersion,omitempty"`
	// Enable OCSP check of certificate
	OcspCheck *bool `default:"false" json:"ocspCheck"`
	Keytab    any   `json:"keytab,omitempty"`
	Principal any   `json:"principal,omitempty"`
	// If enabled, checks will fail on any OCSP error. Otherwise, checks will fail only when a certificate is revoked, ignoring other errors.
	OcspCheckFailClose *bool `default:"false" json:"ocspCheckFailClose"`
}

func (m MTLSSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MTLSSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"privKeyPath", "certPath", "caPath"}); err != nil {
		return err
	}
	return nil
}

func (m *MTLSSettings) GetDisabled() *bool {
	if m == nil {
		return nil
	}
	return m.Disabled
}

func (m *MTLSSettings) GetRejectUnauthorized() *bool {
	if m == nil {
		return nil
	}
	return m.RejectUnauthorized
}

func (m *MTLSSettings) GetRequestCert() *bool {
	if m == nil {
		return nil
	}
	return m.RequestCert
}

func (m *MTLSSettings) GetCertificateName() *string {
	if m == nil {
		return nil
	}
	return m.CertificateName
}

func (m *MTLSSettings) GetPrivKeyPath() string {
	if m == nil {
		return ""
	}
	return m.PrivKeyPath
}

func (m *MTLSSettings) GetPassphrase() *string {
	if m == nil {
		return nil
	}
	return m.Passphrase
}

func (m *MTLSSettings) GetCertPath() string {
	if m == nil {
		return ""
	}
	return m.CertPath
}

func (m *MTLSSettings) GetCaPath() string {
	if m == nil {
		return ""
	}
	return m.CaPath
}

func (m *MTLSSettings) GetCommonNameRegex() *string {
	if m == nil {
		return nil
	}
	return m.CommonNameRegex
}

func (m *MTLSSettings) GetMinVersion() *InputWefMinimumTLSVersion {
	if m == nil {
		return nil
	}
	return m.MinVersion
}

func (m *MTLSSettings) GetMaxVersion() *InputWefMaximumTLSVersion {
	if m == nil {
		return nil
	}
	return m.MaxVersion
}

func (m *MTLSSettings) GetOcspCheck() *bool {
	if m == nil {
		return nil
	}
	return m.OcspCheck
}

func (m *MTLSSettings) GetKeytab() any {
	if m == nil {
		return nil
	}
	return m.Keytab
}

func (m *MTLSSettings) GetPrincipal() any {
	if m == nil {
		return nil
	}
	return m.Principal
}

func (m *MTLSSettings) GetOcspCheckFailClose() *bool {
	if m == nil {
		return nil
	}
	return m.OcspCheckFailClose
}

// InputWefFormat - Content format in which the endpoint should deliver events
type InputWefFormat string

const (
	InputWefFormatRaw          InputWefFormat = "Raw"
	InputWefFormatRenderedText InputWefFormat = "RenderedText"
)

func (e InputWefFormat) ToPointer() *InputWefFormat {
	return &e
}
func (e *InputWefFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Raw":
		fallthrough
	case "RenderedText":
		*e = InputWefFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWefFormat: %v", v)
	}
}

type QueryBuilderMode string

const (
	QueryBuilderModeSimple QueryBuilderMode = "simple"
	QueryBuilderModeXML    QueryBuilderMode = "xml"
)

func (e QueryBuilderMode) ToPointer() *QueryBuilderMode {
	return &e
}
func (e *QueryBuilderMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "simple":
		fallthrough
	case "xml":
		*e = QueryBuilderMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryBuilderMode: %v", v)
	}
}

type SubscriptionMetadatum struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (s SubscriptionMetadatum) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SubscriptionMetadatum) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"name", "value"}); err != nil {
		return err
	}
	return nil
}

func (s *SubscriptionMetadatum) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *SubscriptionMetadatum) GetValue() string {
	if s == nil {
		return ""
	}
	return s.Value
}

type InputWefSubscription struct {
	ID               string `json:"id"`
	SubscriptionName string `json:"subscriptionName"`
	// Version UUID for this subscription. If any subscription parameters are modified, this value will change.
	Version *string `json:"version,omitempty"`
	// Content format in which the endpoint should deliver events
	ContentFormat *InputWefFormat `default:"Raw" json:"contentFormat"`
	// Maximum time (in seconds) between endpoint checkins before considering it unavailable
	HeartbeatInterval *float64 `default:"60" json:"heartbeatInterval"`
	// Interval (in seconds) over which the endpoint should collect events before sending them to Stream
	BatchTimeout *float64 `default:"60" json:"batchTimeout"`
	// Newly subscribed endpoints will send previously existing events. Disable to receive new events only.
	ReadExistingEvents *bool `default:"false" json:"readExistingEvents"`
	// Keep track of which events have been received, resuming from that point after a re-subscription. This setting takes precedence over 'Read existing events'. See [Cribl Docs](https://docs.cribl.io/stream/sources-wef/#subscriptions) for more details.
	SendBookmarks *bool `default:"true" json:"sendBookmarks"`
	// Receive compressed events from the source
	Compress *bool `default:"true" json:"compress"`
	// The DNS names of the endpoints that should forward these events. You may use wildcards, such as *.mydomain.com
	Targets []string `json:"targets,omitempty"`
	// The RFC-3066 locale the Windows clients should use when sending events. Defaults to "en-US".
	Locale        *string           `default:"en-US" json:"locale"`
	QuerySelector *QueryBuilderMode `default:"simple" json:"querySelector"`
	// Fields to add to events ingested under this subscription
	Metadata []SubscriptionMetadatum `json:"metadata,omitempty"`
}

func (i InputWefSubscription) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputWefSubscription) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"id", "subscriptionName"}); err != nil {
		return err
	}
	return nil
}

func (i *InputWefSubscription) GetID() string {
	if i == nil {
		return ""
	}
	return i.ID
}

func (i *InputWefSubscription) GetSubscriptionName() string {
	if i == nil {
		return ""
	}
	return i.SubscriptionName
}

func (i *InputWefSubscription) GetVersion() *string {
	if i == nil {
		return nil
	}
	return i.Version
}

func (i *InputWefSubscription) GetContentFormat() *InputWefFormat {
	if i == nil {
		return nil
	}
	return i.ContentFormat
}

func (i *InputWefSubscription) GetHeartbeatInterval() *float64 {
	if i == nil {
		return nil
	}
	return i.HeartbeatInterval
}

func (i *InputWefSubscription) GetBatchTimeout() *float64 {
	if i == nil {
		return nil
	}
	return i.BatchTimeout
}

func (i *InputWefSubscription) GetReadExistingEvents() *bool {
	if i == nil {
		return nil
	}
	return i.ReadExistingEvents
}

func (i *InputWefSubscription) GetSendBookmarks() *bool {
	if i == nil {
		return nil
	}
	return i.SendBookmarks
}

func (i *InputWefSubscription) GetCompress() *bool {
	if i == nil {
		return nil
	}
	return i.Compress
}

func (i *InputWefSubscription) GetTargets() []string {
	if i == nil {
		return nil
	}
	return i.Targets
}

func (i *InputWefSubscription) GetLocale() *string {
	if i == nil {
		return nil
	}
	return i.Locale
}

func (i *InputWefSubscription) GetQuerySelector() *QueryBuilderMode {
	if i == nil {
		return nil
	}
	return i.QuerySelector
}

func (i *InputWefSubscription) GetMetadata() []SubscriptionMetadatum {
	if i == nil {
		return nil
	}
	return i.Metadata
}

type InputWefMetadatum struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (i InputWefMetadatum) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputWefMetadatum) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"name", "value"}); err != nil {
		return err
	}
	return nil
}

func (i *InputWefMetadatum) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *InputWefMetadatum) GetValue() string {
	if i == nil {
		return ""
	}
	return i.Value
}

type InputWef struct {
	// Unique ID for this input
	ID       *string       `json:"id,omitempty"`
	Type     *InputWefType `json:"type,omitempty"`
	Disabled *bool         `default:"false" json:"disabled"`
	// Pipeline to process data from this Source before sending it through the Routes
	Pipeline *string `json:"pipeline,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `default:"true" json:"sendToRoutes"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
	PqEnabled *bool `default:"false" json:"pqEnabled"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Direct connections to Destinations, and optionally via a Pipeline or a Pack
	Connections []InputWefConnection `json:"connections,omitempty"`
	Pq          *InputWefPq          `json:"pq,omitempty"`
	// Address to bind on. Defaults to 0.0.0.0 (all addresses).
	Host *string `default:"0.0.0.0" json:"host"`
	// Port to listen on
	Port *float64 `default:"5986" json:"port"`
	// How to authenticate incoming client connections
	AuthMethod *InputWefAuthenticationMethod `default:"clientCert" json:"authMethod"`
	TLS        *MTLSSettings                 `json:"tls,omitempty"`
	// Maximum number of active requests allowed per Worker Process. Set to 0 for unlimited. Caution: Increasing the limit above the default value, or setting it to unlimited, may degrade performance and reduce throughput.
	MaxActiveReq *float64 `default:"256" json:"maxActiveReq"`
	// Maximum number of requests per socket before @{product} instructs the client to close the connection. Default is 0 (unlimited).
	MaxRequestsPerSocket *int64 `default:"0" json:"maxRequestsPerSocket"`
	// Preserve the client’s original IP address in the __srcIpPort field when connecting through an HTTP proxy that supports the X-Forwarded-For header. This does not apply to TCP-layer Proxy Protocol v1/v2.
	EnableProxyHeader *bool `default:"false" json:"enableProxyHeader"`
	// Add request headers to events in the __headers field
	CaptureHeaders *bool `default:"false" json:"captureHeaders"`
	// After the last response is sent, @{product} will wait this long for additional data before closing the socket connection. Minimum 1 second, maximum 600 seconds (10 minutes).
	KeepAliveTimeout *float64 `default:"90" json:"keepAliveTimeout"`
	// Expose the /cribl_health endpoint, which returns 200 OK when this Source is healthy
	EnableHealthCheck *bool `default:"false" json:"enableHealthCheck"`
	// Messages from matched IP addresses will be processed, unless also matched by the denylist
	IPAllowlistRegex *string `default:"/.*/" json:"ipAllowlistRegex"`
	// Messages from matched IP addresses will be ignored. This takes precedence over the allowlist.
	IPDenylistRegex *string `default:"/^\\$/" json:"ipDenylistRegex"`
	// How long @{product} should wait before assuming that an inactive socket has timed out. To wait forever, set to 0.
	SocketTimeout *float64 `default:"0" json:"socketTimeout"`
	// SHA1 fingerprint expected by the client, if it does not match the first certificate in the configured CA chain
	CaFingerprint *string `json:"caFingerprint,omitempty"`
	// Path to the keytab file containing the service principal credentials. @{product} will use `/etc/krb5.keytab` if not provided.
	Keytab *string `json:"keytab,omitempty"`
	// Kerberos principal used for authentication, typically in the form HTTP/<hostname>@<REALM>
	Principal *string `json:"principal,omitempty"`
	// Allow events to be ingested even if their MachineID does not match the client certificate CN
	AllowMachineIDMismatch *bool `default:"false" json:"allowMachineIdMismatch"`
	// Subscriptions to events on forwarding endpoints
	Subscriptions []InputWefSubscription `json:"subscriptions"`
	// Fields to add to events from this input
	Metadata    []InputWefMetadatum `json:"metadata,omitempty"`
	Description *string             `json:"description,omitempty"`
	// Log a warning if the client certificate authority (CA) fingerprint does not match the expected value. A mismatch prevents Cribl from receiving events from the Windows Event Forwarder.
	LogFingerprintMismatch *bool `default:"false" json:"logFingerprintMismatch"`
}

func (i InputWef) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputWef) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"subscriptions"}); err != nil {
		return err
	}
	return nil
}

func (i *InputWef) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *InputWef) GetType() *InputWefType {
	if i == nil {
		return nil
	}
	return i.Type
}

func (i *InputWef) GetDisabled() *bool {
	if i == nil {
		return nil
	}
	return i.Disabled
}

func (i *InputWef) GetPipeline() *string {
	if i == nil {
		return nil
	}
	return i.Pipeline
}

func (i *InputWef) GetSendToRoutes() *bool {
	if i == nil {
		return nil
	}
	return i.SendToRoutes
}

func (i *InputWef) GetEnvironment() *string {
	if i == nil {
		return nil
	}
	return i.Environment
}

func (i *InputWef) GetPqEnabled() *bool {
	if i == nil {
		return nil
	}
	return i.PqEnabled
}

func (i *InputWef) GetStreamtags() []string {
	if i == nil {
		return nil
	}
	return i.Streamtags
}

func (i *InputWef) GetConnections() []InputWefConnection {
	if i == nil {
		return nil
	}
	return i.Connections
}

func (i *InputWef) GetPq() *InputWefPq {
	if i == nil {
		return nil
	}
	return i.Pq
}

func (i *InputWef) GetHost() *string {
	if i == nil {
		return nil
	}
	return i.Host
}

func (i *InputWef) GetPort() *float64 {
	if i == nil {
		return nil
	}
	return i.Port
}

func (i *InputWef) GetAuthMethod() *InputWefAuthenticationMethod {
	if i == nil {
		return nil
	}
	return i.AuthMethod
}

func (i *InputWef) GetTLS() *MTLSSettings {
	if i == nil {
		return nil
	}
	return i.TLS
}

func (i *InputWef) GetMaxActiveReq() *float64 {
	if i == nil {
		return nil
	}
	return i.MaxActiveReq
}

func (i *InputWef) GetMaxRequestsPerSocket() *int64 {
	if i == nil {
		return nil
	}
	return i.MaxRequestsPerSocket
}

func (i *InputWef) GetEnableProxyHeader() *bool {
	if i == nil {
		return nil
	}
	return i.EnableProxyHeader
}

func (i *InputWef) GetCaptureHeaders() *bool {
	if i == nil {
		return nil
	}
	return i.CaptureHeaders
}

func (i *InputWef) GetKeepAliveTimeout() *float64 {
	if i == nil {
		return nil
	}
	return i.KeepAliveTimeout
}

func (i *InputWef) GetEnableHealthCheck() *bool {
	if i == nil {
		return nil
	}
	return i.EnableHealthCheck
}

func (i *InputWef) GetIPAllowlistRegex() *string {
	if i == nil {
		return nil
	}
	return i.IPAllowlistRegex
}

func (i *InputWef) GetIPDenylistRegex() *string {
	if i == nil {
		return nil
	}
	return i.IPDenylistRegex
}

func (i *InputWef) GetSocketTimeout() *float64 {
	if i == nil {
		return nil
	}
	return i.SocketTimeout
}

func (i *InputWef) GetCaFingerprint() *string {
	if i == nil {
		return nil
	}
	return i.CaFingerprint
}

func (i *InputWef) GetKeytab() *string {
	if i == nil {
		return nil
	}
	return i.Keytab
}

func (i *InputWef) GetPrincipal() *string {
	if i == nil {
		return nil
	}
	return i.Principal
}

func (i *InputWef) GetAllowMachineIDMismatch() *bool {
	if i == nil {
		return nil
	}
	return i.AllowMachineIDMismatch
}

func (i *InputWef) GetSubscriptions() []InputWefSubscription {
	if i == nil {
		return []InputWefSubscription{}
	}
	return i.Subscriptions
}

func (i *InputWef) GetMetadata() []InputWefMetadatum {
	if i == nil {
		return nil
	}
	return i.Metadata
}

func (i *InputWef) GetDescription() *string {
	if i == nil {
		return nil
	}
	return i.Description
}

func (i *InputWef) GetLogFingerprintMismatch() *bool {
	if i == nil {
		return nil
	}
	return i.LogFingerprintMismatch
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type PipelineGroups struct {
	Name string `json:"name"`
	// Short description of this group
	Description *string `json:"description,omitempty"`
	// Whether this group is disabled
	Disabled *bool `json:"disabled,omitempty"`
}

func (o *PipelineGroups) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PipelineGroups) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PipelineGroups) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

type PipelineConf struct {
	// Time (in ms) to wait for an async function to complete processing of a data item
	AsyncFuncTimeout *int64 `json:"asyncFuncTimeout,omitempty"`
	// The output destination for events processed by this Pipeline
	Output      *string `default:"default" json:"output"`
	Description *string `json:"description,omitempty"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// List of Functions to pass data through
	Functions []PipelineFunctionConf    `json:"functions,omitempty"`
	Groups    map[string]PipelineGroups `json:"groups,omitempty"`
}

func (p PipelineConf) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PipelineConf) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PipelineConf) GetAsyncFuncTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.AsyncFuncTimeout
}

func (o *PipelineConf) GetOutput() *string {
	if o == nil {
		return nil
	}
	return o.Output
}

func (o *PipelineConf) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PipelineConf) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *PipelineConf) GetFunctions() []PipelineFunctionConf {
	if o == nil {
		return nil
	}
	return o.Functions
}

func (o *PipelineConf) GetGroups() map[string]PipelineGroups {
	if o == nil {
		return nil
	}
	return o.Groups
}

type Pipeline struct {
	ID   string       `json:"id"`
	Conf PipelineConf `json:"conf"`
}

func (o *Pipeline) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Pipeline) GetConf() PipelineConf {
	if o == nil {
		return PipelineConf{}
	}
	return o.Conf
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type File struct {
	Index      string `json:"index"`
	Path       string `json:"path"`
	WorkingDir string `json:"working_dir"`
}

func (f *File) GetIndex() string {
	if f == nil {
		return ""
	}
	return f.Index
}

func (f *File) GetPath() string {
	if f == nil {
		return ""
	}
	return f.Path
}

func (f *File) GetWorkingDir() string {
	if f == nil {
		return ""
	}
	return f.WorkingDir
}

type Renamed struct {
	From string `json:"from"`
	To   string `json:"to"`
}

func (r *Renamed) GetFrom() string {
	if r == nil {
		return ""
	}
	return r.From
}

func (r *Renamed) GetTo() string {
	if r == nil {
		return ""
	}
	return r.To
}

type GitStatusResult struct {
	Ahead      float64   `json:"ahead"`
	Behind     float64   `json:"behind"`
	Conflicted []string  `json:"conflicted"`
	Created    []string  `json:"created"`
	Current    string    `json:"current"`
	Deleted    []string  `json:"deleted"`
	Files      []File    `json:"files"`
	Modified   []string  `json:"modified"`
	NotAdded   []string  `json:"not_added"`
	Renamed    []Renamed `json:"renamed"`
	Staged     []string  `json:"staged"`
	Tracking   string    `json:"tracking"`
}

func (g *GitStatusResult) GetAhead() float64 {
	if g == nil {
		return 0.0
	}
	return g.Ahead
}

func (g *GitStatusResult) GetBehind() float64 {
	if g == nil {
		return 0.0
	}
	return g.Behind
}

func (g *GitStatusResult) GetConflicted() []string {
	if g == nil {
		return []string{}
	}
	return g.Conflicted
}

func (g *GitStatusResult) GetCreated() []string {
	if g == nil {
		return []string{}
	}
	return g.Created
}

func (g *GitStatusResult) GetCurrent() string {
	if g == nil {
		return ""
	}
	return g.Current
}

func (g *GitStatusResult) GetDeleted() []string {
	if g == nil {
		return []string{}
	}
	return g.Deleted
}

func (g *GitStatusResult) GetFiles() []File {
	if g == nil {
		return []File{}
	}
	return g.Files
}

func (g *GitStatusResult) GetModified() []string {
	if g == nil {
		return []string{}
	}
	return g.Modified
}

func (g *GitStatusResult) GetNotAdded() []string {
	if g == nil {
		return []string{}
	}
	return g.NotAdded
}

func (g *GitStatusResult) GetRenamed() []Renamed {
	if g == nil {
		return []Renamed{}
	}
	return g.Renamed
}

func (g *GitStatusResult) GetStaged() []string {
	if g == nil {
		return []string{}
	}
	return g.Staged
}

func (g *GitStatusResult) GetTracking() string {
	if g == nil {
		return ""
	}
	return g.Tracking
}

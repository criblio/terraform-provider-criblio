// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SystemSettingsConfHeaders struct {
}

type SystemSettingsConfSsl struct {
	CaPath      *string `json:"caPath,omitempty"`
	CertPath    string  `json:"certPath"`
	Disabled    bool    `json:"disabled"`
	Passphrase  string  `json:"passphrase"`
	PrivKeyPath string  `json:"privKeyPath"`
}

func (o *SystemSettingsConfSsl) GetCaPath() *string {
	if o == nil {
		return nil
	}
	return o.CaPath
}

func (o *SystemSettingsConfSsl) GetCertPath() string {
	if o == nil {
		return ""
	}
	return o.CertPath
}

func (o *SystemSettingsConfSsl) GetDisabled() bool {
	if o == nil {
		return false
	}
	return o.Disabled
}

func (o *SystemSettingsConfSsl) GetPassphrase() string {
	if o == nil {
		return ""
	}
	return o.Passphrase
}

func (o *SystemSettingsConfSsl) GetPrivKeyPath() string {
	if o == nil {
		return ""
	}
	return o.PrivKeyPath
}

type SystemSettingsConfAPI struct {
	BaseURL            *string                    `json:"baseUrl,omitempty"`
	DisableAPICache    *bool                      `json:"disableApiCache,omitempty"`
	Disabled           bool                       `json:"disabled"`
	Headers            *SystemSettingsConfHeaders `json:"headers,omitempty"`
	Host               string                     `json:"host"`
	IdleSessionTTL     *float64                   `json:"idleSessionTTL,omitempty"`
	ListenOnPort       *bool                      `json:"listenOnPort,omitempty"`
	LoginRateLimit     *string                    `json:"loginRateLimit,omitempty"`
	Port               float64                    `json:"port"`
	Protocol           string                     `json:"protocol"`
	Scripts            *bool                      `json:"scripts,omitempty"`
	SensitiveFields    []string                   `json:"sensitiveFields,omitempty"`
	Ssl                SystemSettingsConfSsl      `json:"ssl"`
	SsoRateLimit       *string                    `json:"ssoRateLimit,omitempty"`
	WorkerRemoteAccess bool                       `json:"workerRemoteAccess"`
}

func (o *SystemSettingsConfAPI) GetBaseURL() *string {
	if o == nil {
		return nil
	}
	return o.BaseURL
}

func (o *SystemSettingsConfAPI) GetDisableAPICache() *bool {
	if o == nil {
		return nil
	}
	return o.DisableAPICache
}

func (o *SystemSettingsConfAPI) GetDisabled() bool {
	if o == nil {
		return false
	}
	return o.Disabled
}

func (o *SystemSettingsConfAPI) GetHeaders() *SystemSettingsConfHeaders {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *SystemSettingsConfAPI) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *SystemSettingsConfAPI) GetIdleSessionTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.IdleSessionTTL
}

func (o *SystemSettingsConfAPI) GetListenOnPort() *bool {
	if o == nil {
		return nil
	}
	return o.ListenOnPort
}

func (o *SystemSettingsConfAPI) GetLoginRateLimit() *string {
	if o == nil {
		return nil
	}
	return o.LoginRateLimit
}

func (o *SystemSettingsConfAPI) GetPort() float64 {
	if o == nil {
		return 0.0
	}
	return o.Port
}

func (o *SystemSettingsConfAPI) GetProtocol() string {
	if o == nil {
		return ""
	}
	return o.Protocol
}

func (o *SystemSettingsConfAPI) GetScripts() *bool {
	if o == nil {
		return nil
	}
	return o.Scripts
}

func (o *SystemSettingsConfAPI) GetSensitiveFields() []string {
	if o == nil {
		return nil
	}
	return o.SensitiveFields
}

func (o *SystemSettingsConfAPI) GetSsl() SystemSettingsConfSsl {
	if o == nil {
		return SystemSettingsConfSsl{}
	}
	return o.Ssl
}

func (o *SystemSettingsConfAPI) GetSsoRateLimit() *string {
	if o == nil {
		return nil
	}
	return o.SsoRateLimit
}

func (o *SystemSettingsConfAPI) GetWorkerRemoteAccess() bool {
	if o == nil {
		return false
	}
	return o.WorkerRemoteAccess
}

type SystemSettingsConfBackups struct {
	BackupPersistence string `json:"backupPersistence"`
	BackupsDirectory  string `json:"backupsDirectory"`
}

func (o *SystemSettingsConfBackups) GetBackupPersistence() string {
	if o == nil {
		return ""
	}
	return o.BackupPersistence
}

func (o *SystemSettingsConfBackups) GetBackupsDirectory() string {
	if o == nil {
		return ""
	}
	return o.BackupsDirectory
}

type SystemSettingsConfCustomLogo struct {
	Enabled         bool   `json:"enabled"`
	LogoDescription string `json:"logoDescription"`
	LogoImage       string `json:"logoImage"`
}

func (o *SystemSettingsConfCustomLogo) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *SystemSettingsConfCustomLogo) GetLogoDescription() string {
	if o == nil {
		return ""
	}
	return o.LogoDescription
}

func (o *SystemSettingsConfCustomLogo) GetLogoImage() string {
	if o == nil {
		return ""
	}
	return o.LogoImage
}

type SystemSettingsConfPii struct {
	EnablePiiDetection bool `json:"enablePiiDetection"`
}

func (o *SystemSettingsConfPii) GetEnablePiiDetection() bool {
	if o == nil {
		return false
	}
	return o.EnablePiiDetection
}

type SystemSettingsConfProxy struct {
	UseEnvVars bool `json:"useEnvVars"`
}

func (o *SystemSettingsConfProxy) GetUseEnvVars() bool {
	if o == nil {
		return false
	}
	return o.UseEnvVars
}

type SystemSettingsConfRollback struct {
	RollbackEnabled bool     `json:"rollbackEnabled"`
	RollbackRetries *float64 `json:"rollbackRetries,omitempty"`
	RollbackTimeout *float64 `json:"rollbackTimeout,omitempty"`
}

func (o *SystemSettingsConfRollback) GetRollbackEnabled() bool {
	if o == nil {
		return false
	}
	return o.RollbackEnabled
}

func (o *SystemSettingsConfRollback) GetRollbackRetries() *float64 {
	if o == nil {
		return nil
	}
	return o.RollbackRetries
}

func (o *SystemSettingsConfRollback) GetRollbackTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.RollbackTimeout
}

type SystemSettingsConfShutdown struct {
	DrainTimeout float64 `json:"drainTimeout"`
}

func (o *SystemSettingsConfShutdown) GetDrainTimeout() float64 {
	if o == nil {
		return 0.0
	}
	return o.DrainTimeout
}

type SystemSettingsConfSni struct {
	DisableSNIRouting bool `json:"disableSNIRouting"`
}

func (o *SystemSettingsConfSni) GetDisableSNIRouting() bool {
	if o == nil {
		return false
	}
	return o.DisableSNIRouting
}

type SystemSettingsConfSockets struct {
	Directory *string `json:"directory,omitempty"`
}

func (o *SystemSettingsConfSockets) GetDirectory() *string {
	if o == nil {
		return nil
	}
	return o.Directory
}

type SystemSettingsConfUpgrade string

const (
	SystemSettingsConfUpgradeFalse SystemSettingsConfUpgrade = "false"
	SystemSettingsConfUpgradeAPI   SystemSettingsConfUpgrade = "api"
)

func (e SystemSettingsConfUpgrade) ToPointer() *SystemSettingsConfUpgrade {
	return &e
}
func (e *SystemSettingsConfUpgrade) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "false":
		fallthrough
	case "api":
		*e = SystemSettingsConfUpgrade(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SystemSettingsConfUpgrade: %v", v)
	}
}

type SystemSettingsConfSystem struct {
	Intercom bool                      `json:"intercom"`
	Upgrade  SystemSettingsConfUpgrade `json:"upgrade"`
}

func (o *SystemSettingsConfSystem) GetIntercom() bool {
	if o == nil {
		return false
	}
	return o.Intercom
}

func (o *SystemSettingsConfSystem) GetUpgrade() SystemSettingsConfUpgrade {
	if o == nil {
		return SystemSettingsConfUpgrade("")
	}
	return o.Upgrade
}

type SystemSettingsConfTLS struct {
	DefaultCipherList  string `json:"defaultCipherList"`
	DefaultEcdhCurve   string `json:"defaultEcdhCurve"`
	MaxVersion         string `json:"maxVersion"`
	MinVersion         string `json:"minVersion"`
	RejectUnauthorized bool   `json:"rejectUnauthorized"`
}

func (o *SystemSettingsConfTLS) GetDefaultCipherList() string {
	if o == nil {
		return ""
	}
	return o.DefaultCipherList
}

func (o *SystemSettingsConfTLS) GetDefaultEcdhCurve() string {
	if o == nil {
		return ""
	}
	return o.DefaultEcdhCurve
}

func (o *SystemSettingsConfTLS) GetMaxVersion() string {
	if o == nil {
		return ""
	}
	return o.MaxVersion
}

func (o *SystemSettingsConfTLS) GetMinVersion() string {
	if o == nil {
		return ""
	}
	return o.MinVersion
}

func (o *SystemSettingsConfTLS) GetRejectUnauthorized() bool {
	if o == nil {
		return false
	}
	return o.RejectUnauthorized
}

type SystemSettingsConfWorkers struct {
	Count                  float64  `json:"count"`
	EnableHeapSnapshots    *bool    `json:"enableHeapSnapshots,omitempty"`
	LoadThrottlePerc       *float64 `json:"loadThrottlePerc,omitempty"`
	Memory                 float64  `json:"memory"`
	Minimum                float64  `json:"minimum"`
	StartupMaxConns        *float64 `json:"startupMaxConns,omitempty"`
	StartupThrottleTimeout *float64 `json:"startupThrottleTimeout,omitempty"`
	V8SingleThread         *bool    `json:"v8SingleThread,omitempty"`
}

func (o *SystemSettingsConfWorkers) GetCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Count
}

func (o *SystemSettingsConfWorkers) GetEnableHeapSnapshots() *bool {
	if o == nil {
		return nil
	}
	return o.EnableHeapSnapshots
}

func (o *SystemSettingsConfWorkers) GetLoadThrottlePerc() *float64 {
	if o == nil {
		return nil
	}
	return o.LoadThrottlePerc
}

func (o *SystemSettingsConfWorkers) GetMemory() float64 {
	if o == nil {
		return 0.0
	}
	return o.Memory
}

func (o *SystemSettingsConfWorkers) GetMinimum() float64 {
	if o == nil {
		return 0.0
	}
	return o.Minimum
}

func (o *SystemSettingsConfWorkers) GetStartupMaxConns() *float64 {
	if o == nil {
		return nil
	}
	return o.StartupMaxConns
}

func (o *SystemSettingsConfWorkers) GetStartupThrottleTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.StartupThrottleTimeout
}

func (o *SystemSettingsConfWorkers) GetV8SingleThread() *bool {
	if o == nil {
		return nil
	}
	return o.V8SingleThread
}

type SystemSettingsConf struct {
	API                  SystemSettingsConfAPI        `json:"api"`
	Backups              SystemSettingsConfBackups    `json:"backups"`
	CustomLogo           SystemSettingsConfCustomLogo `json:"customLogo"`
	Pii                  SystemSettingsConfPii        `json:"pii"`
	Proxy                SystemSettingsConfProxy      `json:"proxy"`
	Rollback             SystemSettingsConfRollback   `json:"rollback"`
	Shutdown             SystemSettingsConfShutdown   `json:"shutdown"`
	Sni                  SystemSettingsConfSni        `json:"sni"`
	Sockets              *SystemSettingsConfSockets   `json:"sockets,omitempty"`
	System               SystemSettingsConfSystem     `json:"system"`
	TLS                  SystemSettingsConfTLS        `json:"tls"`
	UpgradeGroupSettings UpgradeGroupSettings         `json:"upgradeGroupSettings"`
	UpgradeSettings      UpgradeSettings              `json:"upgradeSettings"`
	Workers              SystemSettingsConfWorkers    `json:"workers"`
}

func (o *SystemSettingsConf) GetAPI() SystemSettingsConfAPI {
	if o == nil {
		return SystemSettingsConfAPI{}
	}
	return o.API
}

func (o *SystemSettingsConf) GetBackups() SystemSettingsConfBackups {
	if o == nil {
		return SystemSettingsConfBackups{}
	}
	return o.Backups
}

func (o *SystemSettingsConf) GetCustomLogo() SystemSettingsConfCustomLogo {
	if o == nil {
		return SystemSettingsConfCustomLogo{}
	}
	return o.CustomLogo
}

func (o *SystemSettingsConf) GetPii() SystemSettingsConfPii {
	if o == nil {
		return SystemSettingsConfPii{}
	}
	return o.Pii
}

func (o *SystemSettingsConf) GetProxy() SystemSettingsConfProxy {
	if o == nil {
		return SystemSettingsConfProxy{}
	}
	return o.Proxy
}

func (o *SystemSettingsConf) GetRollback() SystemSettingsConfRollback {
	if o == nil {
		return SystemSettingsConfRollback{}
	}
	return o.Rollback
}

func (o *SystemSettingsConf) GetShutdown() SystemSettingsConfShutdown {
	if o == nil {
		return SystemSettingsConfShutdown{}
	}
	return o.Shutdown
}

func (o *SystemSettingsConf) GetSni() SystemSettingsConfSni {
	if o == nil {
		return SystemSettingsConfSni{}
	}
	return o.Sni
}

func (o *SystemSettingsConf) GetSockets() *SystemSettingsConfSockets {
	if o == nil {
		return nil
	}
	return o.Sockets
}

func (o *SystemSettingsConf) GetSystem() SystemSettingsConfSystem {
	if o == nil {
		return SystemSettingsConfSystem{}
	}
	return o.System
}

func (o *SystemSettingsConf) GetTLS() SystemSettingsConfTLS {
	if o == nil {
		return SystemSettingsConfTLS{}
	}
	return o.TLS
}

func (o *SystemSettingsConf) GetUpgradeGroupSettings() UpgradeGroupSettings {
	if o == nil {
		return UpgradeGroupSettings{}
	}
	return o.UpgradeGroupSettings
}

func (o *SystemSettingsConf) GetUpgradeSettings() UpgradeSettings {
	if o == nil {
		return UpgradeSettings{}
	}
	return o.UpgradeSettings
}

func (o *SystemSettingsConf) GetWorkers() SystemSettingsConfWorkers {
	if o == nil {
		return SystemSettingsConfWorkers{}
	}
	return o.Workers
}

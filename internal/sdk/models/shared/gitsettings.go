// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type GitSettings struct {
	AuthType                     *string     `json:"authType,omitempty"`
	AutoAction                   *string     `json:"autoAction,omitempty"`
	AutoActionMessage            *string     `json:"autoActionMessage,omitempty"`
	AutoActionSchedule           *string     `json:"autoActionSchedule,omitempty"`
	Branch                       *string     `json:"branch,omitempty"`
	CommitDeploySingleAction     *bool       `json:"commitDeploySingleAction,omitempty"`
	CopilotAutoGitCommitMessages *bool       `json:"copilotAutoGitCommitMessages,omitempty"`
	DefaultCommitMessage         *string     `json:"defaultCommitMessage,omitempty"`
	GitOps                       *GitOpsType `json:"gitOps,omitempty"`
	Password                     *string     `json:"password,omitempty"`
	Remote                       *string     `json:"remote,omitempty"`
	SSHKey                       *string     `json:"sshKey,omitempty"`
	StrictHostKeyChecking        *bool       `json:"strictHostKeyChecking,omitempty"`
	Timeout                      *float64    `json:"timeout,omitempty"`
	User                         *string     `json:"user,omitempty"`
}

func (g *GitSettings) GetAuthType() *string {
	if g == nil {
		return nil
	}
	return g.AuthType
}

func (g *GitSettings) GetAutoAction() *string {
	if g == nil {
		return nil
	}
	return g.AutoAction
}

func (g *GitSettings) GetAutoActionMessage() *string {
	if g == nil {
		return nil
	}
	return g.AutoActionMessage
}

func (g *GitSettings) GetAutoActionSchedule() *string {
	if g == nil {
		return nil
	}
	return g.AutoActionSchedule
}

func (g *GitSettings) GetBranch() *string {
	if g == nil {
		return nil
	}
	return g.Branch
}

func (g *GitSettings) GetCommitDeploySingleAction() *bool {
	if g == nil {
		return nil
	}
	return g.CommitDeploySingleAction
}

func (g *GitSettings) GetCopilotAutoGitCommitMessages() *bool {
	if g == nil {
		return nil
	}
	return g.CopilotAutoGitCommitMessages
}

func (g *GitSettings) GetDefaultCommitMessage() *string {
	if g == nil {
		return nil
	}
	return g.DefaultCommitMessage
}

func (g *GitSettings) GetGitOps() *GitOpsType {
	if g == nil {
		return nil
	}
	return g.GitOps
}

func (g *GitSettings) GetPassword() *string {
	if g == nil {
		return nil
	}
	return g.Password
}

func (g *GitSettings) GetRemote() *string {
	if g == nil {
		return nil
	}
	return g.Remote
}

func (g *GitSettings) GetSSHKey() *string {
	if g == nil {
		return nil
	}
	return g.SSHKey
}

func (g *GitSettings) GetStrictHostKeyChecking() *bool {
	if g == nil {
		return nil
	}
	return g.StrictHostKeyChecking
}

func (g *GitSettings) GetTimeout() *float64 {
	if g == nil {
		return nil
	}
	return g.Timeout
}

func (g *GitSettings) GetUser() *string {
	if g == nil {
		return nil
	}
	return g.User
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type InputCriblTCPType string

const (
	InputCriblTCPTypeCriblTCP InputCriblTCPType = "cribl_tcp"
)

func (e InputCriblTCPType) ToPointer() *InputCriblTCPType {
	return &e
}
func (e *InputCriblTCPType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cribl_tcp":
		*e = InputCriblTCPType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCriblTCPType: %v", v)
	}
}

type InputCriblTCPConnection struct {
	Pipeline *string `json:"pipeline,omitempty"`
	Output   string  `json:"output"`
}

func (i InputCriblTCPConnection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCriblTCPConnection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"output"}); err != nil {
		return err
	}
	return nil
}

func (i *InputCriblTCPConnection) GetPipeline() *string {
	if i == nil {
		return nil
	}
	return i.Pipeline
}

func (i *InputCriblTCPConnection) GetOutput() string {
	if i == nil {
		return ""
	}
	return i.Output
}

// InputCriblTCPMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputCriblTCPMode string

const (
	InputCriblTCPModeSmart  InputCriblTCPMode = "smart"
	InputCriblTCPModeAlways InputCriblTCPMode = "always"
)

func (e InputCriblTCPMode) ToPointer() *InputCriblTCPMode {
	return &e
}
func (e *InputCriblTCPMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputCriblTCPMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCriblTCPMode: %v", v)
	}
}

// InputCriblTCPCompression - Codec to use to compress the persisted data
type InputCriblTCPCompression string

const (
	InputCriblTCPCompressionNone InputCriblTCPCompression = "none"
	InputCriblTCPCompressionGzip InputCriblTCPCompression = "gzip"
)

func (e InputCriblTCPCompression) ToPointer() *InputCriblTCPCompression {
	return &e
}
func (e *InputCriblTCPCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputCriblTCPCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCriblTCPCompression: %v", v)
	}
}

type InputCriblTCPPq struct {
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputCriblTCPMode `default:"always" json:"mode"`
	// The maximum number of events to hold in memory before writing the events to disk
	MaxBufferSize *float64 `default:"1000" json:"maxBufferSize"`
	// The number of events to send downstream before committing that Stream has read them
	CommitFrequency *float64 `default:"42" json:"commitFrequency"`
	// The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
	MaxFileSize *string `default:"1 MB" json:"maxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `default:"5GB" json:"maxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
	Path *string `default:"$CRIBL_HOME/state/queues" json:"path"`
	// Codec to use to compress the persisted data
	Compress *InputCriblTCPCompression `default:"none" json:"compress"`
}

func (i InputCriblTCPPq) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCriblTCPPq) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputCriblTCPPq) GetMode() *InputCriblTCPMode {
	if i == nil {
		return nil
	}
	return i.Mode
}

func (i *InputCriblTCPPq) GetMaxBufferSize() *float64 {
	if i == nil {
		return nil
	}
	return i.MaxBufferSize
}

func (i *InputCriblTCPPq) GetCommitFrequency() *float64 {
	if i == nil {
		return nil
	}
	return i.CommitFrequency
}

func (i *InputCriblTCPPq) GetMaxFileSize() *string {
	if i == nil {
		return nil
	}
	return i.MaxFileSize
}

func (i *InputCriblTCPPq) GetMaxSize() *string {
	if i == nil {
		return nil
	}
	return i.MaxSize
}

func (i *InputCriblTCPPq) GetPath() *string {
	if i == nil {
		return nil
	}
	return i.Path
}

func (i *InputCriblTCPPq) GetCompress() *InputCriblTCPCompression {
	if i == nil {
		return nil
	}
	return i.Compress
}

type InputCriblTCPMinimumTLSVersion string

const (
	InputCriblTCPMinimumTLSVersionTlSv1  InputCriblTCPMinimumTLSVersion = "TLSv1"
	InputCriblTCPMinimumTLSVersionTlSv11 InputCriblTCPMinimumTLSVersion = "TLSv1.1"
	InputCriblTCPMinimumTLSVersionTlSv12 InputCriblTCPMinimumTLSVersion = "TLSv1.2"
	InputCriblTCPMinimumTLSVersionTlSv13 InputCriblTCPMinimumTLSVersion = "TLSv1.3"
)

func (e InputCriblTCPMinimumTLSVersion) ToPointer() *InputCriblTCPMinimumTLSVersion {
	return &e
}
func (e *InputCriblTCPMinimumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputCriblTCPMinimumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCriblTCPMinimumTLSVersion: %v", v)
	}
}

type InputCriblTCPMaximumTLSVersion string

const (
	InputCriblTCPMaximumTLSVersionTlSv1  InputCriblTCPMaximumTLSVersion = "TLSv1"
	InputCriblTCPMaximumTLSVersionTlSv11 InputCriblTCPMaximumTLSVersion = "TLSv1.1"
	InputCriblTCPMaximumTLSVersionTlSv12 InputCriblTCPMaximumTLSVersion = "TLSv1.2"
	InputCriblTCPMaximumTLSVersionTlSv13 InputCriblTCPMaximumTLSVersion = "TLSv1.3"
)

func (e InputCriblTCPMaximumTLSVersion) ToPointer() *InputCriblTCPMaximumTLSVersion {
	return &e
}
func (e *InputCriblTCPMaximumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputCriblTCPMaximumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCriblTCPMaximumTLSVersion: %v", v)
	}
}

type InputCriblTCPTLSSettingsServerSide struct {
	Disabled *bool `default:"true" json:"disabled"`
	// The name of the predefined certificate
	CertificateName *string `json:"certificateName,omitempty"`
	// Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
	PrivKeyPath *string `json:"privKeyPath,omitempty"`
	// Passphrase to use to decrypt private key
	Passphrase *string `json:"passphrase,omitempty"`
	// Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
	CertPath *string `json:"certPath,omitempty"`
	// Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
	CaPath *string `json:"caPath,omitempty"`
	// Require clients to present their certificates. Used to perform client authentication using SSL certs.
	RequestCert        *bool                           `default:"false" json:"requestCert"`
	RejectUnauthorized any                             `json:"rejectUnauthorized,omitempty"`
	CommonNameRegex    any                             `json:"commonNameRegex,omitempty"`
	MinVersion         *InputCriblTCPMinimumTLSVersion `json:"minVersion,omitempty"`
	MaxVersion         *InputCriblTCPMaximumTLSVersion `json:"maxVersion,omitempty"`
}

func (i InputCriblTCPTLSSettingsServerSide) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCriblTCPTLSSettingsServerSide) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputCriblTCPTLSSettingsServerSide) GetDisabled() *bool {
	if i == nil {
		return nil
	}
	return i.Disabled
}

func (i *InputCriblTCPTLSSettingsServerSide) GetCertificateName() *string {
	if i == nil {
		return nil
	}
	return i.CertificateName
}

func (i *InputCriblTCPTLSSettingsServerSide) GetPrivKeyPath() *string {
	if i == nil {
		return nil
	}
	return i.PrivKeyPath
}

func (i *InputCriblTCPTLSSettingsServerSide) GetPassphrase() *string {
	if i == nil {
		return nil
	}
	return i.Passphrase
}

func (i *InputCriblTCPTLSSettingsServerSide) GetCertPath() *string {
	if i == nil {
		return nil
	}
	return i.CertPath
}

func (i *InputCriblTCPTLSSettingsServerSide) GetCaPath() *string {
	if i == nil {
		return nil
	}
	return i.CaPath
}

func (i *InputCriblTCPTLSSettingsServerSide) GetRequestCert() *bool {
	if i == nil {
		return nil
	}
	return i.RequestCert
}

func (i *InputCriblTCPTLSSettingsServerSide) GetRejectUnauthorized() any {
	if i == nil {
		return nil
	}
	return i.RejectUnauthorized
}

func (i *InputCriblTCPTLSSettingsServerSide) GetCommonNameRegex() any {
	if i == nil {
		return nil
	}
	return i.CommonNameRegex
}

func (i *InputCriblTCPTLSSettingsServerSide) GetMinVersion() *InputCriblTCPMinimumTLSVersion {
	if i == nil {
		return nil
	}
	return i.MinVersion
}

func (i *InputCriblTCPTLSSettingsServerSide) GetMaxVersion() *InputCriblTCPMaximumTLSVersion {
	if i == nil {
		return nil
	}
	return i.MaxVersion
}

type InputCriblTCPMetadatum struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (i InputCriblTCPMetadatum) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCriblTCPMetadatum) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"name", "value"}); err != nil {
		return err
	}
	return nil
}

func (i *InputCriblTCPMetadatum) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *InputCriblTCPMetadatum) GetValue() string {
	if i == nil {
		return ""
	}
	return i.Value
}

type InputCriblTCP struct {
	// Unique ID for this input
	ID       *string            `json:"id,omitempty"`
	Type     *InputCriblTCPType `json:"type,omitempty"`
	Disabled *bool              `default:"false" json:"disabled"`
	// Pipeline to process data from this Source before sending it through the Routes
	Pipeline *string `json:"pipeline,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `default:"true" json:"sendToRoutes"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
	PqEnabled *bool `default:"false" json:"pqEnabled"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Direct connections to Destinations, and optionally via a Pipeline or a Pack
	Connections []InputCriblTCPConnection `json:"connections,omitempty"`
	Pq          *InputCriblTCPPq          `json:"pq,omitempty"`
	// Address to bind on. Defaults to 0.0.0.0 (all addresses).
	Host *string `default:"0.0.0.0" json:"host"`
	// Port to listen on
	Port float64                             `json:"port"`
	TLS  *InputCriblTCPTLSSettingsServerSide `json:"tls,omitempty"`
	// Maximum number of active connections allowed per Worker Process. Use 0 for unlimited.
	MaxActiveCxn *float64 `default:"1000" json:"maxActiveCxn"`
	// How long @{product} should wait before assuming that an inactive socket has timed out. After this time, the connection will be closed. Leave at 0 for no inactive socket monitoring.
	SocketIdleTimeout *float64 `default:"0" json:"socketIdleTimeout"`
	// How long the server will wait after initiating a closure for a client to close its end of the connection. If the client doesn't close the connection within this time, the server will forcefully terminate the socket to prevent resource leaks and ensure efficient connection cleanup and system stability. Leave at 0 for no inactive socket monitoring.
	SocketEndingMaxWait *float64 `default:"30" json:"socketEndingMaxWait"`
	// The maximum duration a socket can remain open, even if active. This helps manage resources and mitigate issues caused by TCP pinning. Set to 0 to disable.
	SocketMaxLifespan *float64 `default:"0" json:"socketMaxLifespan"`
	// Enable if the connection is proxied by a device that supports proxy protocol v1 or v2
	EnableProxyHeader *bool `default:"false" json:"enableProxyHeader"`
	// Fields to add to events from this input
	Metadata []InputCriblTCPMetadatum `json:"metadata,omitempty"`
	// Load balance traffic across all Worker Processes
	EnableLoadBalancing *bool   `default:"false" json:"enableLoadBalancing"`
	Description         *string `json:"description,omitempty"`
}

func (i InputCriblTCP) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCriblTCP) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"port"}); err != nil {
		return err
	}
	return nil
}

func (i *InputCriblTCP) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *InputCriblTCP) GetType() *InputCriblTCPType {
	if i == nil {
		return nil
	}
	return i.Type
}

func (i *InputCriblTCP) GetDisabled() *bool {
	if i == nil {
		return nil
	}
	return i.Disabled
}

func (i *InputCriblTCP) GetPipeline() *string {
	if i == nil {
		return nil
	}
	return i.Pipeline
}

func (i *InputCriblTCP) GetSendToRoutes() *bool {
	if i == nil {
		return nil
	}
	return i.SendToRoutes
}

func (i *InputCriblTCP) GetEnvironment() *string {
	if i == nil {
		return nil
	}
	return i.Environment
}

func (i *InputCriblTCP) GetPqEnabled() *bool {
	if i == nil {
		return nil
	}
	return i.PqEnabled
}

func (i *InputCriblTCP) GetStreamtags() []string {
	if i == nil {
		return nil
	}
	return i.Streamtags
}

func (i *InputCriblTCP) GetConnections() []InputCriblTCPConnection {
	if i == nil {
		return nil
	}
	return i.Connections
}

func (i *InputCriblTCP) GetPq() *InputCriblTCPPq {
	if i == nil {
		return nil
	}
	return i.Pq
}

func (i *InputCriblTCP) GetHost() *string {
	if i == nil {
		return nil
	}
	return i.Host
}

func (i *InputCriblTCP) GetPort() float64 {
	if i == nil {
		return 0.0
	}
	return i.Port
}

func (i *InputCriblTCP) GetTLS() *InputCriblTCPTLSSettingsServerSide {
	if i == nil {
		return nil
	}
	return i.TLS
}

func (i *InputCriblTCP) GetMaxActiveCxn() *float64 {
	if i == nil {
		return nil
	}
	return i.MaxActiveCxn
}

func (i *InputCriblTCP) GetSocketIdleTimeout() *float64 {
	if i == nil {
		return nil
	}
	return i.SocketIdleTimeout
}

func (i *InputCriblTCP) GetSocketEndingMaxWait() *float64 {
	if i == nil {
		return nil
	}
	return i.SocketEndingMaxWait
}

func (i *InputCriblTCP) GetSocketMaxLifespan() *float64 {
	if i == nil {
		return nil
	}
	return i.SocketMaxLifespan
}

func (i *InputCriblTCP) GetEnableProxyHeader() *bool {
	if i == nil {
		return nil
	}
	return i.EnableProxyHeader
}

func (i *InputCriblTCP) GetMetadata() []InputCriblTCPMetadatum {
	if i == nil {
		return nil
	}
	return i.Metadata
}

func (i *InputCriblTCP) GetEnableLoadBalancing() *bool {
	if i == nil {
		return nil
	}
	return i.EnableLoadBalancing
}

func (i *InputCriblTCP) GetDescription() *string {
	if i == nil {
		return nil
	}
	return i.Description
}

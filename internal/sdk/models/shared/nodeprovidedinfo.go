// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type NodeProvidedInfoTags struct {
}

type NodeProvidedInfoAws struct {
	Enabled bool                  `json:"enabled"`
	Region  string                `json:"region"`
	Tags    *NodeProvidedInfoTags `json:"tags,omitempty"`
	Type    string                `json:"type"`
	Zone    string                `json:"zone"`
}

func (o *NodeProvidedInfoAws) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *NodeProvidedInfoAws) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *NodeProvidedInfoAws) GetTags() *NodeProvidedInfoTags {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *NodeProvidedInfoAws) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *NodeProvidedInfoAws) GetZone() string {
	if o == nil {
		return ""
	}
	return o.Zone
}

type NodeProvidedInfoHostOs struct {
	Addresses []string `json:"addresses"`
	Enabled   bool     `json:"enabled"`
	ID        string   `json:"id"`
	Version   string   `json:"version"`
}

func (o *NodeProvidedInfoHostOs) GetAddresses() []string {
	if o == nil {
		return []string{}
	}
	return o.Addresses
}

func (o *NodeProvidedInfoHostOs) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *NodeProvidedInfoHostOs) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *NodeProvidedInfoHostOs) GetVersion() string {
	if o == nil {
		return ""
	}
	return o.Version
}

type NodeProvidedInfoOwner struct {
	Kind string `json:"kind"`
	Name string `json:"name"`
}

func (o *NodeProvidedInfoOwner) GetKind() string {
	if o == nil {
		return ""
	}
	return o.Kind
}

func (o *NodeProvidedInfoOwner) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type NodeProvidedInfoKube struct {
	Enabled   bool                   `json:"enabled"`
	Namespace string                 `json:"namespace"`
	Node      string                 `json:"node"`
	Owner     *NodeProvidedInfoOwner `json:"owner,omitempty"`
	Pod       string                 `json:"pod"`
	Source    string                 `json:"source"`
}

func (o *NodeProvidedInfoKube) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *NodeProvidedInfoKube) GetNamespace() string {
	if o == nil {
		return ""
	}
	return o.Namespace
}

func (o *NodeProvidedInfoKube) GetNode() string {
	if o == nil {
		return ""
	}
	return o.Node
}

func (o *NodeProvidedInfoKube) GetOwner() *NodeProvidedInfoOwner {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *NodeProvidedInfoKube) GetPod() string {
	if o == nil {
		return ""
	}
	return o.Pod
}

func (o *NodeProvidedInfoKube) GetSource() string {
	if o == nil {
		return ""
	}
	return o.Source
}

type NodeProvidedInfoOs2 struct {
	Addresses []string `json:"addresses"`
}

func (o *NodeProvidedInfoOs2) GetAddresses() []string {
	if o == nil {
		return []string{}
	}
	return o.Addresses
}

type NodeProvidedInfoOs1 struct {
	Addresses []string `json:"addresses"`
	Enabled   bool     `json:"enabled"`
	ID        string   `json:"id"`
	Version   string   `json:"version"`
}

func (o *NodeProvidedInfoOs1) GetAddresses() []string {
	if o == nil {
		return []string{}
	}
	return o.Addresses
}

func (o *NodeProvidedInfoOs1) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *NodeProvidedInfoOs1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *NodeProvidedInfoOs1) GetVersion() string {
	if o == nil {
		return ""
	}
	return o.Version
}

type OsType string

const (
	OsTypeNodeProvidedInfoOs1 OsType = "NodeProvidedInfo_os_1"
	OsTypeNodeProvidedInfoOs2 OsType = "NodeProvidedInfo_os_2"
)

type Os struct {
	NodeProvidedInfoOs1 *NodeProvidedInfoOs1 `queryParam:"inline"`
	NodeProvidedInfoOs2 *NodeProvidedInfoOs2 `queryParam:"inline"`

	Type OsType
}

func CreateOsNodeProvidedInfoOs1(nodeProvidedInfoOs1 NodeProvidedInfoOs1) Os {
	typ := OsTypeNodeProvidedInfoOs1

	return Os{
		NodeProvidedInfoOs1: &nodeProvidedInfoOs1,
		Type:                typ,
	}
}

func CreateOsNodeProvidedInfoOs2(nodeProvidedInfoOs2 NodeProvidedInfoOs2) Os {
	typ := OsTypeNodeProvidedInfoOs2

	return Os{
		NodeProvidedInfoOs2: &nodeProvidedInfoOs2,
		Type:                typ,
	}
}

func (u *Os) UnmarshalJSON(data []byte) error {

	var nodeProvidedInfoOs2 NodeProvidedInfoOs2 = NodeProvidedInfoOs2{}
	if err := utils.UnmarshalJSON(data, &nodeProvidedInfoOs2, "", true, true); err == nil {
		u.NodeProvidedInfoOs2 = &nodeProvidedInfoOs2
		u.Type = OsTypeNodeProvidedInfoOs2
		return nil
	}

	var nodeProvidedInfoOs1 NodeProvidedInfoOs1 = NodeProvidedInfoOs1{}
	if err := utils.UnmarshalJSON(data, &nodeProvidedInfoOs1, "", true, true); err == nil {
		u.NodeProvidedInfoOs1 = &nodeProvidedInfoOs1
		u.Type = OsTypeNodeProvidedInfoOs1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Os", string(data))
}

func (u Os) MarshalJSON() ([]byte, error) {
	if u.NodeProvidedInfoOs1 != nil {
		return utils.MarshalJSON(u.NodeProvidedInfoOs1, "", true)
	}

	if u.NodeProvidedInfoOs2 != nil {
		return utils.MarshalJSON(u.NodeProvidedInfoOs2, "", true)
	}

	return nil, errors.New("could not marshal union type Os: all fields are null")
}

type NodeProvidedInfo struct {
	Architecture   string                  `json:"architecture"`
	Aws            *NodeProvidedInfoAws    `json:"aws,omitempty"`
	ConnIP         *string                 `json:"conn_ip,omitempty"`
	Cpus           float64                 `json:"cpus"`
	Cribl          HBCriblInfo             `json:"cribl"`
	FreeDiskSpace  float64                 `json:"freeDiskSpace"`
	HostOs         *NodeProvidedInfoHostOs `json:"hostOs,omitempty"`
	Hostname       string                  `json:"hostname"`
	IsSaasWorker   *bool                   `json:"isSaasWorker,omitempty"`
	Kube           *NodeProvidedInfoKube   `json:"kube,omitempty"`
	LocalTime      *float64                `json:"localTime,omitempty"`
	Metadata       *HeartbeatMetadata      `json:"metadata,omitempty"`
	Node           string                  `json:"node"`
	Os             *Os                     `json:"os,omitempty"`
	Platform       string                  `json:"platform"`
	Release        string                  `json:"release"`
	TotalDiskSpace float64                 `json:"totalDiskSpace"`
	Totalmem       float64                 `json:"totalmem"`
}

func (o *NodeProvidedInfo) GetArchitecture() string {
	if o == nil {
		return ""
	}
	return o.Architecture
}

func (o *NodeProvidedInfo) GetAws() *NodeProvidedInfoAws {
	if o == nil {
		return nil
	}
	return o.Aws
}

func (o *NodeProvidedInfo) GetConnIP() *string {
	if o == nil {
		return nil
	}
	return o.ConnIP
}

func (o *NodeProvidedInfo) GetCpus() float64 {
	if o == nil {
		return 0.0
	}
	return o.Cpus
}

func (o *NodeProvidedInfo) GetCribl() HBCriblInfo {
	if o == nil {
		return HBCriblInfo{}
	}
	return o.Cribl
}

func (o *NodeProvidedInfo) GetFreeDiskSpace() float64 {
	if o == nil {
		return 0.0
	}
	return o.FreeDiskSpace
}

func (o *NodeProvidedInfo) GetHostOs() *NodeProvidedInfoHostOs {
	if o == nil {
		return nil
	}
	return o.HostOs
}

func (o *NodeProvidedInfo) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *NodeProvidedInfo) GetIsSaasWorker() *bool {
	if o == nil {
		return nil
	}
	return o.IsSaasWorker
}

func (o *NodeProvidedInfo) GetKube() *NodeProvidedInfoKube {
	if o == nil {
		return nil
	}
	return o.Kube
}

func (o *NodeProvidedInfo) GetLocalTime() *float64 {
	if o == nil {
		return nil
	}
	return o.LocalTime
}

func (o *NodeProvidedInfo) GetMetadata() *HeartbeatMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *NodeProvidedInfo) GetNode() string {
	if o == nil {
		return ""
	}
	return o.Node
}

func (o *NodeProvidedInfo) GetOs() *Os {
	if o == nil {
		return nil
	}
	return o.Os
}

func (o *NodeProvidedInfo) GetPlatform() string {
	if o == nil {
		return ""
	}
	return o.Platform
}

func (o *NodeProvidedInfo) GetRelease() string {
	if o == nil {
		return ""
	}
	return o.Release
}

func (o *NodeProvidedInfo) GetTotalDiskSpace() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalDiskSpace
}

func (o *NodeProvidedInfo) GetTotalmem() float64 {
	if o == nil {
		return 0.0
	}
	return o.Totalmem
}

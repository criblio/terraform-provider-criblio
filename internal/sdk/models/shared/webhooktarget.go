// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type WebhookTargetType string

const (
	WebhookTargetTypeWebhook WebhookTargetType = "webhook"
)

func (e WebhookTargetType) ToPointer() *WebhookTargetType {
	return &e
}
func (e *WebhookTargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "webhook":
		*e = WebhookTargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookTargetType: %v", v)
	}
}

// WebhookTargetFormat - Format of the webhook payload
type WebhookTargetFormat string

const (
	WebhookTargetFormatNdjson    WebhookTargetFormat = "ndjson"
	WebhookTargetFormatJSONArray WebhookTargetFormat = "json_array"
	WebhookTargetFormatCustom    WebhookTargetFormat = "custom"
)

func (e WebhookTargetFormat) ToPointer() *WebhookTargetFormat {
	return &e
}
func (e *WebhookTargetFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ndjson":
		fallthrough
	case "json_array":
		fallthrough
	case "custom":
		*e = WebhookTargetFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookTargetFormat: %v", v)
	}
}

// HTTPMethod - HTTP method to use for the webhook
type HTTPMethod string

const (
	HTTPMethodPost  HTTPMethod = "POST"
	HTTPMethodPatch HTTPMethod = "PATCH"
	HTTPMethodPut   HTTPMethod = "PUT"
)

func (e HTTPMethod) ToPointer() *HTTPMethod {
	return &e
}
func (e *HTTPMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		*e = HTTPMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HTTPMethod: %v", v)
	}
}

// WebhookTargetAuthenticationType - Authentication method for the webhook
type WebhookTargetAuthenticationType string

const (
	WebhookTargetAuthenticationTypeNone  WebhookTargetAuthenticationType = "none"
	WebhookTargetAuthenticationTypeToken WebhookTargetAuthenticationType = "token"
	WebhookTargetAuthenticationTypeBasic WebhookTargetAuthenticationType = "basic"
)

func (e WebhookTargetAuthenticationType) ToPointer() *WebhookTargetAuthenticationType {
	return &e
}
func (e *WebhookTargetAuthenticationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "token":
		fallthrough
	case "basic":
		*e = WebhookTargetAuthenticationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookTargetAuthenticationType: %v", v)
	}
}

type WebhookTarget struct {
	// Unique ID for this notification target
	ID   string            `json:"id"`
	Type WebhookTargetType `json:"type"`
	// Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
	SystemFields []string `json:"systemFields,omitempty"`
	// URL to send the webhook to
	URL string `json:"url"`
	// Format of the webhook payload
	Format WebhookTargetFormat `json:"format"`
	// HTTP method to use for the webhook
	Method HTTPMethod `json:"method"`
	// Authentication method for the webhook
	AuthType *WebhookTargetAuthenticationType `default:"none" json:"authType"`
	// Authentication token
	Token *string `json:"token,omitempty"`
	// Basic authentication username
	Username *string `json:"username,omitempty"`
	// Basic authentication password
	Password *string `json:"password,omitempty"`
}

func (w WebhookTarget) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WebhookTarget) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, []string{"id", "type", "url", "format", "method"}); err != nil {
		return err
	}
	return nil
}

func (o *WebhookTarget) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *WebhookTarget) GetType() WebhookTargetType {
	if o == nil {
		return WebhookTargetType("")
	}
	return o.Type
}

func (o *WebhookTarget) GetSystemFields() []string {
	if o == nil {
		return nil
	}
	return o.SystemFields
}

func (o *WebhookTarget) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *WebhookTarget) GetFormat() WebhookTargetFormat {
	if o == nil {
		return WebhookTargetFormat("")
	}
	return o.Format
}

func (o *WebhookTarget) GetMethod() HTTPMethod {
	if o == nil {
		return HTTPMethod("")
	}
	return o.Method
}

func (o *WebhookTarget) GetAuthType() *WebhookTargetAuthenticationType {
	if o == nil {
		return nil
	}
	return o.AuthType
}

func (o *WebhookTarget) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *WebhookTarget) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *WebhookTarget) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type Author struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

func (a *Author) GetEmail() string {
	if a == nil {
		return ""
	}
	return a.Email
}

func (a *Author) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

type GitCommitSummaryFiles struct {
	Created  []string `json:"created,omitempty"`
	Deleted  []string `json:"deleted,omitempty"`
	Modified []string `json:"modified,omitempty"`
	Renamed  []string `json:"renamed,omitempty"`
}

func (g *GitCommitSummaryFiles) GetCreated() []string {
	if g == nil {
		return nil
	}
	return g.Created
}

func (g *GitCommitSummaryFiles) GetDeleted() []string {
	if g == nil {
		return nil
	}
	return g.Deleted
}

func (g *GitCommitSummaryFiles) GetModified() []string {
	if g == nil {
		return nil
	}
	return g.Modified
}

func (g *GitCommitSummaryFiles) GetRenamed() []string {
	if g == nil {
		return nil
	}
	return g.Renamed
}

type Summary struct {
	Changes    float64 `json:"changes"`
	Deletions  float64 `json:"deletions"`
	Insertions float64 `json:"insertions"`
}

func (s *Summary) GetChanges() float64 {
	if s == nil {
		return 0.0
	}
	return s.Changes
}

func (s *Summary) GetDeletions() float64 {
	if s == nil {
		return 0.0
	}
	return s.Deletions
}

func (s *Summary) GetInsertions() float64 {
	if s == nil {
		return 0.0
	}
	return s.Insertions
}

type GitCommitSummary struct {
	Author  Author                `json:"author"`
	Branch  string                `json:"branch"`
	Commit  string                `json:"commit"`
	Files   GitCommitSummaryFiles `json:"files"`
	Summary Summary               `json:"summary"`
}

func (g *GitCommitSummary) GetAuthor() Author {
	if g == nil {
		return Author{}
	}
	return g.Author
}

func (g *GitCommitSummary) GetBranch() string {
	if g == nil {
		return ""
	}
	return g.Branch
}

func (g *GitCommitSummary) GetCommit() string {
	if g == nil {
		return ""
	}
	return g.Commit
}

func (g *GitCommitSummary) GetFiles() GitCommitSummaryFiles {
	if g == nil {
		return GitCommitSummaryFiles{}
	}
	return g.Files
}

func (g *GitCommitSummary) GetSummary() Summary {
	if g == nil {
		return Summary{}
	}
	return g.Summary
}

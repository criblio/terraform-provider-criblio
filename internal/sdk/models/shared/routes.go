// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type RoutesGroups struct {
	Name string `json:"name"`
	// Short description of this group
	Description *string `json:"description,omitempty"`
	// Whether this group is disabled
	Disabled *bool `json:"disabled,omitempty"`
}

func (r *RoutesGroups) GetName() string {
	if r == nil {
		return ""
	}
	return r.Name
}

func (r *RoutesGroups) GetDescription() *string {
	if r == nil {
		return nil
	}
	return r.Description
}

func (r *RoutesGroups) GetDisabled() *bool {
	if r == nil {
		return nil
	}
	return r.Disabled
}

type Comment struct {
	// Optional, short description of this Route's purpose
	Comment              *string `json:"comment,omitempty"`
	AdditionalProperties any     `additionalProperties:"true" json:"-"`
}

func (c Comment) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Comment) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *Comment) GetComment() *string {
	if c == nil {
		return nil
	}
	return c.Comment
}

func (c *Comment) GetAdditionalProperties() any {
	if c == nil {
		return nil
	}
	return c.AdditionalProperties
}

type Routes struct {
	// Routes ID
	ID *string `json:"id,omitempty"`
	// Pipeline routing rules
	Routes []RoutesRoute           `json:"routes"`
	Groups map[string]RoutesGroups `json:"groups,omitempty"`
	// Comments
	Comments []Comment `json:"comments,omitempty"`
}

func (r *Routes) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

func (r *Routes) GetRoutes() []RoutesRoute {
	if r == nil {
		return []RoutesRoute{}
	}
	return r.Routes
}

func (r *Routes) GetGroups() map[string]RoutesGroups {
	if r == nil {
		return nil
	}
	return r.Groups
}

func (r *Routes) GetComments() []Comment {
	if r == nil {
		return nil
	}
	return r.Comments
}

type RoutesInput struct {
	// Routes ID
	ID *string `json:"id,omitempty"`
	// Pipeline routing rules
	Routes []RoutesRouteInput      `json:"routes"`
	Groups map[string]RoutesGroups `json:"groups,omitempty"`
	// Comments
	Comments []Comment `json:"comments,omitempty"`
}

func (r *RoutesInput) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

func (r *RoutesInput) GetRoutes() []RoutesRouteInput {
	if r == nil {
		return []RoutesRouteInput{}
	}
	return r.Routes
}

func (r *RoutesInput) GetGroups() map[string]RoutesGroups {
	if r == nil {
		return nil
	}
	return r.Groups
}

func (r *RoutesInput) GetComments() []Comment {
	if r == nil {
		return nil
	}
	return r.Comments
}

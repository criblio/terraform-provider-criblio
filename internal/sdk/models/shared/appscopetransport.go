// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Buffer string

const (
	BufferLine Buffer = "line"
	BufferFull Buffer = "full"
)

func (e Buffer) ToPointer() *Buffer {
	return &e
}
func (e *Buffer) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "line":
		fallthrough
	case "full":
		*e = Buffer(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Buffer: %v", v)
	}
}

type AppscopeTransportTLS struct {
	Cacertpath     *string `json:"cacertpath,omitempty"`
	Enable         *bool   `json:"enable,omitempty"`
	Validateserver *bool   `json:"validateserver,omitempty"`
}

func (a *AppscopeTransportTLS) GetCacertpath() *string {
	if a == nil {
		return nil
	}
	return a.Cacertpath
}

func (a *AppscopeTransportTLS) GetEnable() *bool {
	if a == nil {
		return nil
	}
	return a.Enable
}

func (a *AppscopeTransportTLS) GetValidateserver() *bool {
	if a == nil {
		return nil
	}
	return a.Validateserver
}

type AppscopeTransport struct {
	Buffer *Buffer               `json:"buffer,omitempty"`
	Host   *string               `json:"host,omitempty"`
	Path   *string               `json:"path,omitempty"`
	Port   *float64              `json:"port,omitempty"`
	TLS    *AppscopeTransportTLS `json:"tls,omitempty"`
	Type   *string               `json:"type,omitempty"`
}

func (a *AppscopeTransport) GetBuffer() *Buffer {
	if a == nil {
		return nil
	}
	return a.Buffer
}

func (a *AppscopeTransport) GetHost() *string {
	if a == nil {
		return nil
	}
	return a.Host
}

func (a *AppscopeTransport) GetPath() *string {
	if a == nil {
		return nil
	}
	return a.Path
}

func (a *AppscopeTransport) GetPort() *float64 {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AppscopeTransport) GetTLS() *AppscopeTransportTLS {
	if a == nil {
		return nil
	}
	return a.TLS
}

func (a *AppscopeTransport) GetType() *string {
	if a == nil {
		return nil
	}
	return a.Type
}

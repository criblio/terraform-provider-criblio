// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type SnsTargetType string

const (
	SnsTargetTypeSns SnsTargetType = "sns"
)

func (e SnsTargetType) ToPointer() *SnsTargetType {
	return &e
}
func (e *SnsTargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sns":
		*e = SnsTargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SnsTargetType: %v", v)
	}
}

// SnsTargetAuthenticationMethod - AWS authentication method
type SnsTargetAuthenticationMethod string

const (
	SnsTargetAuthenticationMethodAuto   SnsTargetAuthenticationMethod = "auto"
	SnsTargetAuthenticationMethodManual SnsTargetAuthenticationMethod = "manual"
	SnsTargetAuthenticationMethodSecret SnsTargetAuthenticationMethod = "secret"
)

func (e SnsTargetAuthenticationMethod) ToPointer() *SnsTargetAuthenticationMethod {
	return &e
}
func (e *SnsTargetAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		fallthrough
	case "manual":
		fallthrough
	case "secret":
		*e = SnsTargetAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SnsTargetAuthenticationMethod: %v", v)
	}
}

// DestinationType - The type of destination to send notifications to
type DestinationType string

const (
	DestinationTypePhoneNumber DestinationType = "phoneNumber"
	DestinationTypeTopic       DestinationType = "topic"
)

func (e DestinationType) ToPointer() *DestinationType {
	return &e
}
func (e *DestinationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "phoneNumber":
		fallthrough
	case "topic":
		*e = DestinationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationType: %v", v)
	}
}

// TopicType - Type of the topic selected in AWS SNS
type TopicType string

const (
	TopicTypeStandard TopicType = "standard"
	TopicTypeFifo     TopicType = "fifo"
)

func (e TopicType) ToPointer() *TopicType {
	return &e
}
func (e *TopicType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "fifo":
		*e = TopicType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopicType: %v", v)
	}
}

type SnsTarget struct {
	// Unique ID for this notification target
	ID   string        `json:"id"`
	Type SnsTargetType `json:"type"`
	// Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
	SystemFields []string `json:"systemFields,omitempty"`
	// AWS authentication method
	AwsAuthenticationMethod *SnsTargetAuthenticationMethod `json:"awsAuthenticationMethod,omitempty"`
	// ARN of the role to assume
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`
	// External ID for role assumption
	AssumeRoleExternalID *string `json:"assumeRoleExternalId,omitempty"`
	// AWS access key
	AwsAPIKey *string `json:"awsApiKey,omitempty"`
	// AWS secret key
	AwsSecretKey *string `json:"awsSecretKey,omitempty"`
	// AWS region
	Region string `json:"region"`
	// SNS endpoint URL
	Endpoint *string `json:"endpoint,omitempty"`
	// Wildcard list of allowed phone numbers. This is not enforced if the notification is sent to topic.
	Allowlist []string `json:"allowlist,omitempty"`
	// The type of destination to send notifications to
	DestinationType *DestinationType `default:"topic" json:"destinationType"`
	// The default phone number to send the notification to. This value can be overridden by the notification event __phoneNumber field.
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	// The default ARN of the SNS topic to send notifications to
	TopicArn *string `json:"topicArn,omitempty"`
	// Type of the topic selected in AWS SNS
	TopicType *TopicType `default:"fifo" json:"topicType"`
	// Message group ID for FIFO topics
	MessageGroupID *string `json:"messageGroupId,omitempty"`
}

func (s SnsTarget) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SnsTarget) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"id", "type", "region"}); err != nil {
		return err
	}
	return nil
}

func (o *SnsTarget) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *SnsTarget) GetType() SnsTargetType {
	if o == nil {
		return SnsTargetType("")
	}
	return o.Type
}

func (o *SnsTarget) GetSystemFields() []string {
	if o == nil {
		return nil
	}
	return o.SystemFields
}

func (o *SnsTarget) GetAwsAuthenticationMethod() *SnsTargetAuthenticationMethod {
	if o == nil {
		return nil
	}
	return o.AwsAuthenticationMethod
}

func (o *SnsTarget) GetAssumeRoleArn() *string {
	if o == nil {
		return nil
	}
	return o.AssumeRoleArn
}

func (o *SnsTarget) GetAssumeRoleExternalID() *string {
	if o == nil {
		return nil
	}
	return o.AssumeRoleExternalID
}

func (o *SnsTarget) GetAwsAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsAPIKey
}

func (o *SnsTarget) GetAwsSecretKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsSecretKey
}

func (o *SnsTarget) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *SnsTarget) GetEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.Endpoint
}

func (o *SnsTarget) GetAllowlist() []string {
	if o == nil {
		return nil
	}
	return o.Allowlist
}

func (o *SnsTarget) GetDestinationType() *DestinationType {
	if o == nil {
		return nil
	}
	return o.DestinationType
}

func (o *SnsTarget) GetPhoneNumber() *string {
	if o == nil {
		return nil
	}
	return o.PhoneNumber
}

func (o *SnsTarget) GetTopicArn() *string {
	if o == nil {
		return nil
	}
	return o.TopicArn
}

func (o *SnsTarget) GetTopicType() *TopicType {
	if o == nil {
		return nil
	}
	return o.TopicType
}

func (o *SnsTarget) GetMessageGroupID() *string {
	if o == nil {
		return nil
	}
	return o.MessageGroupID
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type InputCollectorHealthCheckTypeCollection1 string

const (
	InputCollectorHealthCheckTypeCollection1Collection InputCollectorHealthCheckTypeCollection1 = "collection"
)

func (e InputCollectorHealthCheckTypeCollection1) ToPointer() *InputCollectorHealthCheckTypeCollection1 {
	return &e
}
func (e *InputCollectorHealthCheckTypeCollection1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "collection":
		*e = InputCollectorHealthCheckTypeCollection1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCollectorHealthCheckTypeCollection1: %v", v)
	}
}

// InputCollectorHealthCheckSavedState - Saved state for the collector
type InputCollectorHealthCheckSavedState struct {
}

func (i InputCollectorHealthCheckSavedState) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorHealthCheckSavedState) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

// InputCollectorHealthCheckLogLevel - Level at which to set task logging
type InputCollectorHealthCheckLogLevel string

const (
	InputCollectorHealthCheckLogLevelError InputCollectorHealthCheckLogLevel = "error"
	InputCollectorHealthCheckLogLevelWarn  InputCollectorHealthCheckLogLevel = "warn"
	InputCollectorHealthCheckLogLevelInfo  InputCollectorHealthCheckLogLevel = "info"
	InputCollectorHealthCheckLogLevelDebug InputCollectorHealthCheckLogLevel = "debug"
	InputCollectorHealthCheckLogLevelSilly InputCollectorHealthCheckLogLevel = "silly"
)

func (e InputCollectorHealthCheckLogLevel) ToPointer() *InputCollectorHealthCheckLogLevel {
	return &e
}
func (e *InputCollectorHealthCheckLogLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "warn":
		fallthrough
	case "info":
		fallthrough
	case "debug":
		fallthrough
	case "silly":
		*e = InputCollectorHealthCheckLogLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCollectorHealthCheckLogLevel: %v", v)
	}
}

// InputCollectorHealthCheckMode - Job run mode. Preview will either return up to N matching results, or will run until capture time T is reached. Discovery will gather the list of files to turn into streaming tasks, without running the data collection job. Full Run will run the collection job.
type InputCollectorHealthCheckMode string

const (
	InputCollectorHealthCheckModeList    InputCollectorHealthCheckMode = "list"
	InputCollectorHealthCheckModePreview InputCollectorHealthCheckMode = "preview"
	InputCollectorHealthCheckModeRun     InputCollectorHealthCheckMode = "run"
)

func (e InputCollectorHealthCheckMode) ToPointer() *InputCollectorHealthCheckMode {
	return &e
}
func (e *InputCollectorHealthCheckMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "list":
		fallthrough
	case "preview":
		fallthrough
	case "run":
		*e = InputCollectorHealthCheckMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCollectorHealthCheckMode: %v", v)
	}
}

type InputCollectorHealthCheckTimeRange string

const (
	InputCollectorHealthCheckTimeRangeRelative InputCollectorHealthCheckTimeRange = "relative"
	InputCollectorHealthCheckTimeRangeAbsolute InputCollectorHealthCheckTimeRange = "absolute"
)

func (e InputCollectorHealthCheckTimeRange) ToPointer() *InputCollectorHealthCheckTimeRange {
	return &e
}
func (e *InputCollectorHealthCheckTimeRange) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relative":
		fallthrough
	case "absolute":
		*e = InputCollectorHealthCheckTimeRange(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCollectorHealthCheckTimeRange: %v", v)
	}
}

// InputCollectorHealthCheckTimeWarning - Time warning configuration
type InputCollectorHealthCheckTimeWarning struct {
}

func (i InputCollectorHealthCheckTimeWarning) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorHealthCheckTimeWarning) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

// InputCollectorHealthCheckStateTracking - State tracking configuration
type InputCollectorHealthCheckStateTracking struct {
	StateUpdateExpression *string `json:"stateUpdateExpression,omitempty"`
	StateMergeExpression  *string `json:"stateMergeExpression,omitempty"`
	Enabled               *bool   `default:"false" json:"enabled"`
}

func (i InputCollectorHealthCheckStateTracking) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorHealthCheckStateTracking) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputCollectorHealthCheckStateTracking) GetStateUpdateExpression() *string {
	if i == nil {
		return nil
	}
	return i.StateUpdateExpression
}

func (i *InputCollectorHealthCheckStateTracking) GetStateMergeExpression() *string {
	if i == nil {
		return nil
	}
	return i.StateMergeExpression
}

func (i *InputCollectorHealthCheckStateTracking) GetEnabled() *bool {
	if i == nil {
		return nil
	}
	return i.Enabled
}

type InputCollectorHealthCheckRunSettings struct {
	// Reschedule tasks that failed with non-fatal errors
	RescheduleDroppedTasks *bool `default:"true" json:"rescheduleDroppedTasks"`
	// Maximum number of times a task can be rescheduled
	MaxTaskReschedule *float64 `default:"1" json:"maxTaskReschedule"`
	// Level at which to set task logging
	LogLevel *InputCollectorHealthCheckLogLevel `default:"info" json:"logLevel"`
	// Maximum time the job is allowed to run. Time unit defaults to seconds if not specified (examples: 30, 45s, 15m). Enter 0 for unlimited time.
	JobTimeout *string `default:"0" json:"jobTimeout"`
	// Job run mode. Preview will either return up to N matching results, or will run until capture time T is reached. Discovery will gather the list of files to turn into streaming tasks, without running the data collection job. Full Run will run the collection job.
	Mode          *InputCollectorHealthCheckMode      `default:"list" json:"mode"`
	TimeRangeType *InputCollectorHealthCheckTimeRange `default:"relative" json:"timeRangeType"`
	// Earliest time to collect data for the selected timezone
	Earliest *float64 `default:"0" json:"earliest"`
	// Latest time to collect data for the selected timezone
	Latest *float64 `default:"1" json:"latest"`
	// A filter for tokens in the provided collect path and/or the events being collected
	Expression *string `default:"true" json:"expression"`
	// Limits the bundle size for small tasks. For example, if your lower bundle size is 1MB, you can bundle up to five 200KB files into one task.
	MinTaskSize *string `default:"1MB" json:"minTaskSize"`
	// Limits the bundle size for files above the lower task bundle size. For example, if your upper bundle size is 10MB, you can bundle up to five 2MB files into one task. Files greater than this size will be assigned to individual tasks.
	MaxTaskSize *string `default:"10MB" json:"maxTaskSize"`
	// Time warning configuration
	TimeWarning *InputCollectorHealthCheckTimeWarning `json:"timeWarning,omitempty"`
	// State tracking configuration
	StateTracking *InputCollectorHealthCheckStateTracking `json:"stateTracking,omitempty"`
}

func (i InputCollectorHealthCheckRunSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorHealthCheckRunSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputCollectorHealthCheckRunSettings) GetRescheduleDroppedTasks() *bool {
	if i == nil {
		return nil
	}
	return i.RescheduleDroppedTasks
}

func (i *InputCollectorHealthCheckRunSettings) GetMaxTaskReschedule() *float64 {
	if i == nil {
		return nil
	}
	return i.MaxTaskReschedule
}

func (i *InputCollectorHealthCheckRunSettings) GetLogLevel() *InputCollectorHealthCheckLogLevel {
	if i == nil {
		return nil
	}
	return i.LogLevel
}

func (i *InputCollectorHealthCheckRunSettings) GetJobTimeout() *string {
	if i == nil {
		return nil
	}
	return i.JobTimeout
}

func (i *InputCollectorHealthCheckRunSettings) GetMode() *InputCollectorHealthCheckMode {
	if i == nil {
		return nil
	}
	return i.Mode
}

func (i *InputCollectorHealthCheckRunSettings) GetTimeRangeType() *InputCollectorHealthCheckTimeRange {
	if i == nil {
		return nil
	}
	return i.TimeRangeType
}

func (i *InputCollectorHealthCheckRunSettings) GetEarliest() *float64 {
	if i == nil {
		return nil
	}
	return i.Earliest
}

func (i *InputCollectorHealthCheckRunSettings) GetLatest() *float64 {
	if i == nil {
		return nil
	}
	return i.Latest
}

func (i *InputCollectorHealthCheckRunSettings) GetExpression() *string {
	if i == nil {
		return nil
	}
	return i.Expression
}

func (i *InputCollectorHealthCheckRunSettings) GetMinTaskSize() *string {
	if i == nil {
		return nil
	}
	return i.MinTaskSize
}

func (i *InputCollectorHealthCheckRunSettings) GetMaxTaskSize() *string {
	if i == nil {
		return nil
	}
	return i.MaxTaskSize
}

func (i *InputCollectorHealthCheckRunSettings) GetTimeWarning() *InputCollectorHealthCheckTimeWarning {
	if i == nil {
		return nil
	}
	return i.TimeWarning
}

func (i *InputCollectorHealthCheckRunSettings) GetStateTracking() *InputCollectorHealthCheckStateTracking {
	if i == nil {
		return nil
	}
	return i.StateTracking
}

// InputCollectorHealthCheckSchedule - Configuration for a scheduled job
type InputCollectorHealthCheckSchedule struct {
	// Enable to configure scheduling for this Collector
	Enabled *bool `json:"enabled,omitempty"`
	// A cron schedule on which to run this job
	CronSchedule *string `default:"*/5 * * * *" json:"cronSchedule"`
	// The maximum number of instances of this scheduled job that may be running at any time
	MaxConcurrentRuns *float64 `default:"1" json:"maxConcurrentRuns"`
	// Skippable jobs can be delayed, up to their next run time, if the system is hitting concurrency limits
	Skippable *bool `default:"true" json:"skippable"`
	// Resume missed scheduled runs
	ResumeMissed *bool                                 `default:"false" json:"resumeMissed"`
	Run          *InputCollectorHealthCheckRunSettings `json:"run,omitempty"`
}

func (i InputCollectorHealthCheckSchedule) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorHealthCheckSchedule) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputCollectorHealthCheckSchedule) GetEnabled() *bool {
	if i == nil {
		return nil
	}
	return i.Enabled
}

func (i *InputCollectorHealthCheckSchedule) GetCronSchedule() *string {
	if i == nil {
		return nil
	}
	return i.CronSchedule
}

func (i *InputCollectorHealthCheckSchedule) GetMaxConcurrentRuns() *float64 {
	if i == nil {
		return nil
	}
	return i.MaxConcurrentRuns
}

func (i *InputCollectorHealthCheckSchedule) GetSkippable() *bool {
	if i == nil {
		return nil
	}
	return i.Skippable
}

func (i *InputCollectorHealthCheckSchedule) GetResumeMissed() *bool {
	if i == nil {
		return nil
	}
	return i.ResumeMissed
}

func (i *InputCollectorHealthCheckSchedule) GetRun() *InputCollectorHealthCheckRunSettings {
	if i == nil {
		return nil
	}
	return i.Run
}

type InputCollectorHealthCheckTypeCollection2 string

const (
	InputCollectorHealthCheckTypeCollection2Collection InputCollectorHealthCheckTypeCollection2 = "collection"
)

func (e InputCollectorHealthCheckTypeCollection2) ToPointer() *InputCollectorHealthCheckTypeCollection2 {
	return &e
}
func (e *InputCollectorHealthCheckTypeCollection2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "collection":
		*e = InputCollectorHealthCheckTypeCollection2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCollectorHealthCheckTypeCollection2: %v", v)
	}
}

type InputCollectorHealthCheckPreprocess struct {
	Disabled *bool `default:"true" json:"disabled"`
	// Command to feed the data through (via stdin) and process its output (stdout)
	Command *string `json:"command,omitempty"`
	// Arguments to be added to the custom command
	Args []string `json:"args,omitempty"`
}

func (i InputCollectorHealthCheckPreprocess) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorHealthCheckPreprocess) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputCollectorHealthCheckPreprocess) GetDisabled() *bool {
	if i == nil {
		return nil
	}
	return i.Disabled
}

func (i *InputCollectorHealthCheckPreprocess) GetCommand() *string {
	if i == nil {
		return nil
	}
	return i.Command
}

func (i *InputCollectorHealthCheckPreprocess) GetArgs() []string {
	if i == nil {
		return nil
	}
	return i.Args
}

type InputCollectorHealthCheckMetadatum struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (i InputCollectorHealthCheckMetadatum) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorHealthCheckMetadatum) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"name", "value"}); err != nil {
		return err
	}
	return nil
}

func (i *InputCollectorHealthCheckMetadatum) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *InputCollectorHealthCheckMetadatum) GetValue() string {
	if i == nil {
		return ""
	}
	return i.Value
}

type InputCollectorHealthCheckInput struct {
	Type *InputCollectorHealthCheckTypeCollection2 `default:"collection" json:"type"`
	// A list of event-breaking rulesets that will be applied, in order, to the input data stream
	BreakerRulesets []string `json:"breakerRulesets,omitempty"`
	// How long (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel before flushing the data stream out, as is, to the Pipelines
	StaleChannelFlushMs *float64 `default:"10000" json:"staleChannelFlushMs"`
	// Send events to normal routing and event processing. Disable to select a specific Pipeline/Destination combination.
	SendToRoutes *bool                                `default:"true" json:"sendToRoutes"`
	Preprocess   *InputCollectorHealthCheckPreprocess `json:"preprocess,omitempty"`
	// Rate (in bytes per second) to throttle while writing to an output. Accepts values with multiple-byte units, such as KB, MB, and GB. (Example: 42 MB) Default value of 0 specifies no throttling.
	ThrottleRatePerSec *string `default:"0" json:"throttleRatePerSec"`
	// Fields to add to events from this input
	Metadata []InputCollectorHealthCheckMetadatum `json:"metadata,omitempty"`
	// Pipeline to process results
	Pipeline *string `json:"pipeline,omitempty"`
	// Destination to send results to
	Output *string `json:"output,omitempty"`
}

func (i InputCollectorHealthCheckInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorHealthCheckInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputCollectorHealthCheckInput) GetType() *InputCollectorHealthCheckTypeCollection2 {
	if i == nil {
		return nil
	}
	return i.Type
}

func (i *InputCollectorHealthCheckInput) GetBreakerRulesets() []string {
	if i == nil {
		return nil
	}
	return i.BreakerRulesets
}

func (i *InputCollectorHealthCheckInput) GetStaleChannelFlushMs() *float64 {
	if i == nil {
		return nil
	}
	return i.StaleChannelFlushMs
}

func (i *InputCollectorHealthCheckInput) GetSendToRoutes() *bool {
	if i == nil {
		return nil
	}
	return i.SendToRoutes
}

func (i *InputCollectorHealthCheckInput) GetPreprocess() *InputCollectorHealthCheckPreprocess {
	if i == nil {
		return nil
	}
	return i.Preprocess
}

func (i *InputCollectorHealthCheckInput) GetThrottleRatePerSec() *string {
	if i == nil {
		return nil
	}
	return i.ThrottleRatePerSec
}

func (i *InputCollectorHealthCheckInput) GetMetadata() []InputCollectorHealthCheckMetadatum {
	if i == nil {
		return nil
	}
	return i.Metadata
}

func (i *InputCollectorHealthCheckInput) GetPipeline() *string {
	if i == nil {
		return nil
	}
	return i.Pipeline
}

func (i *InputCollectorHealthCheckInput) GetOutput() *string {
	if i == nil {
		return nil
	}
	return i.Output
}

type TypeHealthcheck string

const (
	TypeHealthcheckHealthcheck TypeHealthcheck = "healthcheck"
)

func (e TypeHealthcheck) ToPointer() *TypeHealthcheck {
	return &e
}
func (e *TypeHealthcheck) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "healthcheck":
		*e = TypeHealthcheck(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeHealthcheck: %v", v)
	}
}

type InputCollectorHealthCheckCollectMethod string

const (
	InputCollectorHealthCheckCollectMethodGet          InputCollectorHealthCheckCollectMethod = "get"
	InputCollectorHealthCheckCollectMethodPost         InputCollectorHealthCheckCollectMethod = "post"
	InputCollectorHealthCheckCollectMethodPostWithBody InputCollectorHealthCheckCollectMethod = "post_with_body"
	InputCollectorHealthCheckCollectMethodOther        InputCollectorHealthCheckCollectMethod = "other"
)

func (e InputCollectorHealthCheckCollectMethod) ToPointer() *InputCollectorHealthCheckCollectMethod {
	return &e
}
func (e *InputCollectorHealthCheckCollectMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "get":
		fallthrough
	case "post":
		fallthrough
	case "post_with_body":
		fallthrough
	case "other":
		*e = InputCollectorHealthCheckCollectMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCollectorHealthCheckCollectMethod: %v", v)
	}
}

type InputCollectorHealthCheckAuthentication string

const (
	InputCollectorHealthCheckAuthenticationNone              InputCollectorHealthCheckAuthentication = "none"
	InputCollectorHealthCheckAuthenticationBasic             InputCollectorHealthCheckAuthentication = "basic"
	InputCollectorHealthCheckAuthenticationBasicSecret       InputCollectorHealthCheckAuthentication = "basicSecret"
	InputCollectorHealthCheckAuthenticationToken             InputCollectorHealthCheckAuthentication = "token"
	InputCollectorHealthCheckAuthenticationTokenSecret       InputCollectorHealthCheckAuthentication = "tokenSecret"
	InputCollectorHealthCheckAuthenticationLogin             InputCollectorHealthCheckAuthentication = "login"
	InputCollectorHealthCheckAuthenticationLoginSecret       InputCollectorHealthCheckAuthentication = "loginSecret"
	InputCollectorHealthCheckAuthenticationOauth             InputCollectorHealthCheckAuthentication = "oauth"
	InputCollectorHealthCheckAuthenticationOauthSecret       InputCollectorHealthCheckAuthentication = "oauthSecret"
	InputCollectorHealthCheckAuthenticationGoogleOauth       InputCollectorHealthCheckAuthentication = "google_oauth"
	InputCollectorHealthCheckAuthenticationGoogleOauthSecret InputCollectorHealthCheckAuthentication = "google_oauthSecret"
	InputCollectorHealthCheckAuthenticationHmac              InputCollectorHealthCheckAuthentication = "hmac"
)

func (e InputCollectorHealthCheckAuthentication) ToPointer() *InputCollectorHealthCheckAuthentication {
	return &e
}
func (e *InputCollectorHealthCheckAuthentication) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "basic":
		fallthrough
	case "basicSecret":
		fallthrough
	case "token":
		fallthrough
	case "tokenSecret":
		fallthrough
	case "login":
		fallthrough
	case "loginSecret":
		fallthrough
	case "oauth":
		fallthrough
	case "oauthSecret":
		fallthrough
	case "google_oauth":
		fallthrough
	case "google_oauthSecret":
		fallthrough
	case "hmac":
		*e = InputCollectorHealthCheckAuthentication(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCollectorHealthCheckAuthentication: %v", v)
	}
}

type InputCollectorHealthCheckConf struct {
	// URL to use for the Collect operation
	CollectURL         *string                                  `json:"collectUrl,omitempty"`
	CollectMethod      *InputCollectorHealthCheckCollectMethod  `json:"collectMethod,omitempty"`
	Authentication     *InputCollectorHealthCheckAuthentication `json:"authentication,omitempty"`
	Timeout            *int64                                   `json:"timeout,omitempty"`
	RejectUnauthorized *bool                                    `json:"rejectUnauthorized,omitempty"`
	Username           *string                                  `json:"username,omitempty"`
	Password           *string                                  `json:"password,omitempty"`
	CredentialsSecret  *string                                  `json:"credentialsSecret,omitempty"`
}

func (i InputCollectorHealthCheckConf) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorHealthCheckConf) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputCollectorHealthCheckConf) GetCollectURL() *string {
	if i == nil {
		return nil
	}
	return i.CollectURL
}

func (i *InputCollectorHealthCheckConf) GetCollectMethod() *InputCollectorHealthCheckCollectMethod {
	if i == nil {
		return nil
	}
	return i.CollectMethod
}

func (i *InputCollectorHealthCheckConf) GetAuthentication() *InputCollectorHealthCheckAuthentication {
	if i == nil {
		return nil
	}
	return i.Authentication
}

func (i *InputCollectorHealthCheckConf) GetTimeout() *int64 {
	if i == nil {
		return nil
	}
	return i.Timeout
}

func (i *InputCollectorHealthCheckConf) GetRejectUnauthorized() *bool {
	if i == nil {
		return nil
	}
	return i.RejectUnauthorized
}

func (i *InputCollectorHealthCheckConf) GetUsername() *string {
	if i == nil {
		return nil
	}
	return i.Username
}

func (i *InputCollectorHealthCheckConf) GetPassword() *string {
	if i == nil {
		return nil
	}
	return i.Password
}

func (i *InputCollectorHealthCheckConf) GetCredentialsSecret() *string {
	if i == nil {
		return nil
	}
	return i.CredentialsSecret
}

type InputCollectorHealthCheckCollector struct {
	Type TypeHealthcheck                `json:"type"`
	Conf *InputCollectorHealthCheckConf `json:"conf,omitempty"`
}

func (i InputCollectorHealthCheckCollector) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorHealthCheckCollector) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (i *InputCollectorHealthCheckCollector) GetType() TypeHealthcheck {
	if i == nil {
		return TypeHealthcheck("")
	}
	return i.Type
}

func (i *InputCollectorHealthCheckCollector) GetConf() *InputCollectorHealthCheckConf {
	if i == nil {
		return nil
	}
	return i.Conf
}

type InputCollectorHealthCheck struct {
	ID                   *string                                   `json:"id,omitempty"`
	Type                 *InputCollectorHealthCheckTypeCollection1 `default:"collection" json:"type"`
	TTL                  *string                                   `default:"4h" json:"ttl"`
	IgnoreGroupJobsLimit *bool                                     `default:"false" json:"ignoreGroupJobsLimit"`
	RemoveFields         []string                                  `json:"removeFields,omitempty"`
	ResumeOnBoot         *bool                                     `default:"true" json:"resumeOnBoot"`
	Environment          *string                                   `json:"environment,omitempty"`
	// Saved state for the collector
	SavedState *InputCollectorHealthCheckSavedState `json:"savedState,omitempty"`
	// Configuration for a scheduled job
	Schedule *InputCollectorHealthCheckSchedule `json:"schedule,omitempty"`
	// Tags for filtering and grouping
	Streamtags []string `json:"streamtags,omitempty"`
	// If enabled, tasks are created and run by the same Worker Node
	WorkerAffinity *bool                              `default:"false" json:"workerAffinity"`
	Input          *InputCollectorHealthCheckInput    `json:"input,omitempty"`
	Collector      InputCollectorHealthCheckCollector `json:"collector"`
}

func (i InputCollectorHealthCheck) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorHealthCheck) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"collector"}); err != nil {
		return err
	}
	return nil
}

func (i *InputCollectorHealthCheck) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *InputCollectorHealthCheck) GetType() *InputCollectorHealthCheckTypeCollection1 {
	if i == nil {
		return nil
	}
	return i.Type
}

func (i *InputCollectorHealthCheck) GetTTL() *string {
	if i == nil {
		return nil
	}
	return i.TTL
}

func (i *InputCollectorHealthCheck) GetIgnoreGroupJobsLimit() *bool {
	if i == nil {
		return nil
	}
	return i.IgnoreGroupJobsLimit
}

func (i *InputCollectorHealthCheck) GetRemoveFields() []string {
	if i == nil {
		return nil
	}
	return i.RemoveFields
}

func (i *InputCollectorHealthCheck) GetResumeOnBoot() *bool {
	if i == nil {
		return nil
	}
	return i.ResumeOnBoot
}

func (i *InputCollectorHealthCheck) GetEnvironment() *string {
	if i == nil {
		return nil
	}
	return i.Environment
}

func (i *InputCollectorHealthCheck) GetSavedState() *InputCollectorHealthCheckSavedState {
	if i == nil {
		return nil
	}
	return i.SavedState
}

func (i *InputCollectorHealthCheck) GetSchedule() *InputCollectorHealthCheckSchedule {
	if i == nil {
		return nil
	}
	return i.Schedule
}

func (i *InputCollectorHealthCheck) GetStreamtags() []string {
	if i == nil {
		return nil
	}
	return i.Streamtags
}

func (i *InputCollectorHealthCheck) GetWorkerAffinity() *bool {
	if i == nil {
		return nil
	}
	return i.WorkerAffinity
}

func (i *InputCollectorHealthCheck) GetInput() *InputCollectorHealthCheckInput {
	if i == nil {
		return nil
	}
	return i.Input
}

func (i *InputCollectorHealthCheck) GetCollector() InputCollectorHealthCheckCollector {
	if i == nil {
		return InputCollectorHealthCheckCollector{}
	}
	return i.Collector
}

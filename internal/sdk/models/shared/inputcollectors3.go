// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type InputCollectorS3TypeCollection1 string

const (
	InputCollectorS3TypeCollection1Collection InputCollectorS3TypeCollection1 = "collection"
)

func (e InputCollectorS3TypeCollection1) ToPointer() *InputCollectorS3TypeCollection1 {
	return &e
}
func (e *InputCollectorS3TypeCollection1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "collection":
		*e = InputCollectorS3TypeCollection1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCollectorS3TypeCollection1: %v", v)
	}
}

// InputCollectorS3SavedState - Saved state for the collector
type InputCollectorS3SavedState struct {
}

func (i InputCollectorS3SavedState) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorS3SavedState) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

// InputCollectorS3LogLevel - Level at which to set task logging
type InputCollectorS3LogLevel string

const (
	InputCollectorS3LogLevelError InputCollectorS3LogLevel = "error"
	InputCollectorS3LogLevelWarn  InputCollectorS3LogLevel = "warn"
	InputCollectorS3LogLevelInfo  InputCollectorS3LogLevel = "info"
	InputCollectorS3LogLevelDebug InputCollectorS3LogLevel = "debug"
	InputCollectorS3LogLevelSilly InputCollectorS3LogLevel = "silly"
)

func (e InputCollectorS3LogLevel) ToPointer() *InputCollectorS3LogLevel {
	return &e
}
func (e *InputCollectorS3LogLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "warn":
		fallthrough
	case "info":
		fallthrough
	case "debug":
		fallthrough
	case "silly":
		*e = InputCollectorS3LogLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCollectorS3LogLevel: %v", v)
	}
}

// InputCollectorS3Mode - Job run mode. Preview will either return up to N matching results, or will run until capture time T is reached. Discovery will gather the list of files to turn into streaming tasks, without running the data collection job. Full Run will run the collection job.
type InputCollectorS3Mode string

const (
	InputCollectorS3ModeList    InputCollectorS3Mode = "list"
	InputCollectorS3ModePreview InputCollectorS3Mode = "preview"
	InputCollectorS3ModeRun     InputCollectorS3Mode = "run"
)

func (e InputCollectorS3Mode) ToPointer() *InputCollectorS3Mode {
	return &e
}
func (e *InputCollectorS3Mode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "list":
		fallthrough
	case "preview":
		fallthrough
	case "run":
		*e = InputCollectorS3Mode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCollectorS3Mode: %v", v)
	}
}

type InputCollectorS3TimeRange string

const (
	InputCollectorS3TimeRangeRelative InputCollectorS3TimeRange = "relative"
	InputCollectorS3TimeRangeAbsolute InputCollectorS3TimeRange = "absolute"
)

func (e InputCollectorS3TimeRange) ToPointer() *InputCollectorS3TimeRange {
	return &e
}
func (e *InputCollectorS3TimeRange) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relative":
		fallthrough
	case "absolute":
		*e = InputCollectorS3TimeRange(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCollectorS3TimeRange: %v", v)
	}
}

// InputCollectorS3TimeWarning - Time warning configuration
type InputCollectorS3TimeWarning struct {
}

func (i InputCollectorS3TimeWarning) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorS3TimeWarning) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

// InputCollectorS3StateTracking - State tracking configuration
type InputCollectorS3StateTracking struct {
	StateUpdateExpression *string `json:"stateUpdateExpression,omitempty"`
	StateMergeExpression  *string `json:"stateMergeExpression,omitempty"`
	Enabled               *bool   `default:"false" json:"enabled"`
}

func (i InputCollectorS3StateTracking) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorS3StateTracking) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputCollectorS3StateTracking) GetStateUpdateExpression() *string {
	if i == nil {
		return nil
	}
	return i.StateUpdateExpression
}

func (i *InputCollectorS3StateTracking) GetStateMergeExpression() *string {
	if i == nil {
		return nil
	}
	return i.StateMergeExpression
}

func (i *InputCollectorS3StateTracking) GetEnabled() *bool {
	if i == nil {
		return nil
	}
	return i.Enabled
}

type InputCollectorS3RunSettings struct {
	// Reschedule tasks that failed with non-fatal errors
	RescheduleDroppedTasks *bool `default:"true" json:"rescheduleDroppedTasks"`
	// Maximum number of times a task can be rescheduled
	MaxTaskReschedule *float64 `default:"1" json:"maxTaskReschedule"`
	// Level at which to set task logging
	LogLevel *InputCollectorS3LogLevel `default:"info" json:"logLevel"`
	// Maximum time the job is allowed to run. Time unit defaults to seconds if not specified (examples: 30, 45s, 15m). Enter 0 for unlimited time.
	JobTimeout *string `default:"0" json:"jobTimeout"`
	// Job run mode. Preview will either return up to N matching results, or will run until capture time T is reached. Discovery will gather the list of files to turn into streaming tasks, without running the data collection job. Full Run will run the collection job.
	Mode          *InputCollectorS3Mode      `default:"list" json:"mode"`
	TimeRangeType *InputCollectorS3TimeRange `default:"relative" json:"timeRangeType"`
	// Earliest time to collect data for the selected timezone
	Earliest *float64 `default:"0" json:"earliest"`
	// Latest time to collect data for the selected timezone
	Latest *float64 `default:"1" json:"latest"`
	// A filter for tokens in the provided collect path and/or the events being collected
	Expression *string `default:"true" json:"expression"`
	// Limits the bundle size for small tasks. For example, if your lower bundle size is 1MB, you can bundle up to five 200KB files into one task.
	MinTaskSize *string `default:"1MB" json:"minTaskSize"`
	// Limits the bundle size for files above the lower task bundle size. For example, if your upper bundle size is 10MB, you can bundle up to five 2MB files into one task. Files greater than this size will be assigned to individual tasks.
	MaxTaskSize *string `default:"10MB" json:"maxTaskSize"`
	// Time warning configuration
	TimeWarning *InputCollectorS3TimeWarning `json:"timeWarning,omitempty"`
	// State tracking configuration
	StateTracking *InputCollectorS3StateTracking `json:"stateTracking,omitempty"`
}

func (i InputCollectorS3RunSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorS3RunSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputCollectorS3RunSettings) GetRescheduleDroppedTasks() *bool {
	if i == nil {
		return nil
	}
	return i.RescheduleDroppedTasks
}

func (i *InputCollectorS3RunSettings) GetMaxTaskReschedule() *float64 {
	if i == nil {
		return nil
	}
	return i.MaxTaskReschedule
}

func (i *InputCollectorS3RunSettings) GetLogLevel() *InputCollectorS3LogLevel {
	if i == nil {
		return nil
	}
	return i.LogLevel
}

func (i *InputCollectorS3RunSettings) GetJobTimeout() *string {
	if i == nil {
		return nil
	}
	return i.JobTimeout
}

func (i *InputCollectorS3RunSettings) GetMode() *InputCollectorS3Mode {
	if i == nil {
		return nil
	}
	return i.Mode
}

func (i *InputCollectorS3RunSettings) GetTimeRangeType() *InputCollectorS3TimeRange {
	if i == nil {
		return nil
	}
	return i.TimeRangeType
}

func (i *InputCollectorS3RunSettings) GetEarliest() *float64 {
	if i == nil {
		return nil
	}
	return i.Earliest
}

func (i *InputCollectorS3RunSettings) GetLatest() *float64 {
	if i == nil {
		return nil
	}
	return i.Latest
}

func (i *InputCollectorS3RunSettings) GetExpression() *string {
	if i == nil {
		return nil
	}
	return i.Expression
}

func (i *InputCollectorS3RunSettings) GetMinTaskSize() *string {
	if i == nil {
		return nil
	}
	return i.MinTaskSize
}

func (i *InputCollectorS3RunSettings) GetMaxTaskSize() *string {
	if i == nil {
		return nil
	}
	return i.MaxTaskSize
}

func (i *InputCollectorS3RunSettings) GetTimeWarning() *InputCollectorS3TimeWarning {
	if i == nil {
		return nil
	}
	return i.TimeWarning
}

func (i *InputCollectorS3RunSettings) GetStateTracking() *InputCollectorS3StateTracking {
	if i == nil {
		return nil
	}
	return i.StateTracking
}

// InputCollectorS3Schedule - Configuration for a scheduled job
type InputCollectorS3Schedule struct {
	// Enable to configure scheduling for this Collector
	Enabled *bool `json:"enabled,omitempty"`
	// A cron schedule on which to run this job
	CronSchedule *string `default:"*/5 * * * *" json:"cronSchedule"`
	// The maximum number of instances of this scheduled job that may be running at any time
	MaxConcurrentRuns *float64 `default:"1" json:"maxConcurrentRuns"`
	// Skippable jobs can be delayed, up to their next run time, if the system is hitting concurrency limits
	Skippable *bool `default:"true" json:"skippable"`
	// Resume missed scheduled runs
	ResumeMissed *bool                        `default:"false" json:"resumeMissed"`
	Run          *InputCollectorS3RunSettings `json:"run,omitempty"`
}

func (i InputCollectorS3Schedule) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorS3Schedule) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputCollectorS3Schedule) GetEnabled() *bool {
	if i == nil {
		return nil
	}
	return i.Enabled
}

func (i *InputCollectorS3Schedule) GetCronSchedule() *string {
	if i == nil {
		return nil
	}
	return i.CronSchedule
}

func (i *InputCollectorS3Schedule) GetMaxConcurrentRuns() *float64 {
	if i == nil {
		return nil
	}
	return i.MaxConcurrentRuns
}

func (i *InputCollectorS3Schedule) GetSkippable() *bool {
	if i == nil {
		return nil
	}
	return i.Skippable
}

func (i *InputCollectorS3Schedule) GetResumeMissed() *bool {
	if i == nil {
		return nil
	}
	return i.ResumeMissed
}

func (i *InputCollectorS3Schedule) GetRun() *InputCollectorS3RunSettings {
	if i == nil {
		return nil
	}
	return i.Run
}

type InputCollectorS3TypeCollection2 string

const (
	InputCollectorS3TypeCollection2Collection InputCollectorS3TypeCollection2 = "collection"
)

func (e InputCollectorS3TypeCollection2) ToPointer() *InputCollectorS3TypeCollection2 {
	return &e
}
func (e *InputCollectorS3TypeCollection2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "collection":
		*e = InputCollectorS3TypeCollection2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCollectorS3TypeCollection2: %v", v)
	}
}

type InputCollectorS3Preprocess struct {
	Disabled *bool `default:"true" json:"disabled"`
	// Command to feed the data through (via stdin) and process its output (stdout)
	Command *string `json:"command,omitempty"`
	// Arguments to be added to the custom command
	Args []string `json:"args,omitempty"`
}

func (i InputCollectorS3Preprocess) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorS3Preprocess) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputCollectorS3Preprocess) GetDisabled() *bool {
	if i == nil {
		return nil
	}
	return i.Disabled
}

func (i *InputCollectorS3Preprocess) GetCommand() *string {
	if i == nil {
		return nil
	}
	return i.Command
}

func (i *InputCollectorS3Preprocess) GetArgs() []string {
	if i == nil {
		return nil
	}
	return i.Args
}

type InputCollectorS3Metadatum struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (i InputCollectorS3Metadatum) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorS3Metadatum) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"name", "value"}); err != nil {
		return err
	}
	return nil
}

func (i *InputCollectorS3Metadatum) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *InputCollectorS3Metadatum) GetValue() string {
	if i == nil {
		return ""
	}
	return i.Value
}

type InputCollectorS3Input struct {
	Type *InputCollectorS3TypeCollection2 `default:"collection" json:"type"`
	// A list of event-breaking rulesets that will be applied, in order, to the input data stream
	BreakerRulesets []string `json:"breakerRulesets,omitempty"`
	// How long (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel before flushing the data stream out, as is, to the Pipelines
	StaleChannelFlushMs *float64 `default:"10000" json:"staleChannelFlushMs"`
	// Send events to normal routing and event processing. Disable to select a specific Pipeline/Destination combination.
	SendToRoutes *bool                       `default:"true" json:"sendToRoutes"`
	Preprocess   *InputCollectorS3Preprocess `json:"preprocess,omitempty"`
	// Rate (in bytes per second) to throttle while writing to an output. Accepts values with multiple-byte units, such as KB, MB, and GB. (Example: 42 MB) Default value of 0 specifies no throttling.
	ThrottleRatePerSec *string `default:"0" json:"throttleRatePerSec"`
	// Fields to add to events from this input
	Metadata []InputCollectorS3Metadatum `json:"metadata,omitempty"`
	// Pipeline to process results
	Pipeline *string `json:"pipeline,omitempty"`
	// Destination to send results to
	Output *string `json:"output,omitempty"`
}

func (i InputCollectorS3Input) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorS3Input) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputCollectorS3Input) GetType() *InputCollectorS3TypeCollection2 {
	if i == nil {
		return nil
	}
	return i.Type
}

func (i *InputCollectorS3Input) GetBreakerRulesets() []string {
	if i == nil {
		return nil
	}
	return i.BreakerRulesets
}

func (i *InputCollectorS3Input) GetStaleChannelFlushMs() *float64 {
	if i == nil {
		return nil
	}
	return i.StaleChannelFlushMs
}

func (i *InputCollectorS3Input) GetSendToRoutes() *bool {
	if i == nil {
		return nil
	}
	return i.SendToRoutes
}

func (i *InputCollectorS3Input) GetPreprocess() *InputCollectorS3Preprocess {
	if i == nil {
		return nil
	}
	return i.Preprocess
}

func (i *InputCollectorS3Input) GetThrottleRatePerSec() *string {
	if i == nil {
		return nil
	}
	return i.ThrottleRatePerSec
}

func (i *InputCollectorS3Input) GetMetadata() []InputCollectorS3Metadatum {
	if i == nil {
		return nil
	}
	return i.Metadata
}

func (i *InputCollectorS3Input) GetPipeline() *string {
	if i == nil {
		return nil
	}
	return i.Pipeline
}

func (i *InputCollectorS3Input) GetOutput() *string {
	if i == nil {
		return nil
	}
	return i.Output
}

type InputCollectorS3TypeS3 string

const (
	InputCollectorS3TypeS3S3 InputCollectorS3TypeS3 = "s3"
)

func (e InputCollectorS3TypeS3) ToPointer() *InputCollectorS3TypeS3 {
	return &e
}
func (e *InputCollectorS3TypeS3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "s3":
		*e = InputCollectorS3TypeS3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCollectorS3TypeS3: %v", v)
	}
}

type InputCollectorS3AuthenticationMethod string

const (
	InputCollectorS3AuthenticationMethodAuto   InputCollectorS3AuthenticationMethod = "auto"
	InputCollectorS3AuthenticationMethodManual InputCollectorS3AuthenticationMethod = "manual"
	InputCollectorS3AuthenticationMethodSecret InputCollectorS3AuthenticationMethod = "secret"
)

func (e InputCollectorS3AuthenticationMethod) ToPointer() *InputCollectorS3AuthenticationMethod {
	return &e
}
func (e *InputCollectorS3AuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		fallthrough
	case "manual":
		fallthrough
	case "secret":
		*e = InputCollectorS3AuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCollectorS3AuthenticationMethod: %v", v)
	}
}

type InputCollectorS3Extractor struct {
}

func (i InputCollectorS3Extractor) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorS3Extractor) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

type InputCollectorS3Conf struct {
	// S3 Bucket from which to collect data
	Bucket *string `json:"bucket,omitempty"`
	// AWS region from which to retrieve data
	Region *string `json:"region,omitempty"`
	// Directory where data will be collected
	Path                    *string                               `json:"path,omitempty"`
	AwsAuthenticationMethod *InputCollectorS3AuthenticationMethod `json:"awsAuthenticationMethod,omitempty"`
	AwsAPIKey               *string                               `json:"awsApiKey,omitempty"`
	AwsSecretKey            *string                               `json:"awsSecretKey,omitempty"`
	AwsSecret               *string                               `json:"awsSecret,omitempty"`
	Recurse                 *bool                                 `json:"recurse,omitempty"`
	Extractors              []InputCollectorS3Extractor           `json:"extractors,omitempty"`
	MaxBatchSize            *int64                                `json:"maxBatchSize,omitempty"`
}

func (i InputCollectorS3Conf) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorS3Conf) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputCollectorS3Conf) GetBucket() *string {
	if i == nil {
		return nil
	}
	return i.Bucket
}

func (i *InputCollectorS3Conf) GetRegion() *string {
	if i == nil {
		return nil
	}
	return i.Region
}

func (i *InputCollectorS3Conf) GetPath() *string {
	if i == nil {
		return nil
	}
	return i.Path
}

func (i *InputCollectorS3Conf) GetAwsAuthenticationMethod() *InputCollectorS3AuthenticationMethod {
	if i == nil {
		return nil
	}
	return i.AwsAuthenticationMethod
}

func (i *InputCollectorS3Conf) GetAwsAPIKey() *string {
	if i == nil {
		return nil
	}
	return i.AwsAPIKey
}

func (i *InputCollectorS3Conf) GetAwsSecretKey() *string {
	if i == nil {
		return nil
	}
	return i.AwsSecretKey
}

func (i *InputCollectorS3Conf) GetAwsSecret() *string {
	if i == nil {
		return nil
	}
	return i.AwsSecret
}

func (i *InputCollectorS3Conf) GetRecurse() *bool {
	if i == nil {
		return nil
	}
	return i.Recurse
}

func (i *InputCollectorS3Conf) GetExtractors() []InputCollectorS3Extractor {
	if i == nil {
		return nil
	}
	return i.Extractors
}

func (i *InputCollectorS3Conf) GetMaxBatchSize() *int64 {
	if i == nil {
		return nil
	}
	return i.MaxBatchSize
}

type InputCollectorS3Collector struct {
	Type InputCollectorS3TypeS3 `json:"type"`
	Conf *InputCollectorS3Conf  `json:"conf,omitempty"`
}

func (i InputCollectorS3Collector) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorS3Collector) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (i *InputCollectorS3Collector) GetType() InputCollectorS3TypeS3 {
	if i == nil {
		return InputCollectorS3TypeS3("")
	}
	return i.Type
}

func (i *InputCollectorS3Collector) GetConf() *InputCollectorS3Conf {
	if i == nil {
		return nil
	}
	return i.Conf
}

type InputCollectorS3 struct {
	ID                   *string                          `json:"id,omitempty"`
	Type                 *InputCollectorS3TypeCollection1 `default:"collection" json:"type"`
	TTL                  *string                          `default:"4h" json:"ttl"`
	IgnoreGroupJobsLimit *bool                            `default:"false" json:"ignoreGroupJobsLimit"`
	RemoveFields         []string                         `json:"removeFields,omitempty"`
	ResumeOnBoot         *bool                            `default:"true" json:"resumeOnBoot"`
	Environment          *string                          `json:"environment,omitempty"`
	// Saved state for the collector
	SavedState *InputCollectorS3SavedState `json:"savedState,omitempty"`
	// Configuration for a scheduled job
	Schedule *InputCollectorS3Schedule `json:"schedule,omitempty"`
	// Tags for filtering and grouping
	Streamtags []string `json:"streamtags,omitempty"`
	// If enabled, tasks are created and run by the same Worker Node
	WorkerAffinity *bool                     `default:"false" json:"workerAffinity"`
	Input          *InputCollectorS3Input    `json:"input,omitempty"`
	Collector      InputCollectorS3Collector `json:"collector"`
}

func (i InputCollectorS3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCollectorS3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"collector"}); err != nil {
		return err
	}
	return nil
}

func (i *InputCollectorS3) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *InputCollectorS3) GetType() *InputCollectorS3TypeCollection1 {
	if i == nil {
		return nil
	}
	return i.Type
}

func (i *InputCollectorS3) GetTTL() *string {
	if i == nil {
		return nil
	}
	return i.TTL
}

func (i *InputCollectorS3) GetIgnoreGroupJobsLimit() *bool {
	if i == nil {
		return nil
	}
	return i.IgnoreGroupJobsLimit
}

func (i *InputCollectorS3) GetRemoveFields() []string {
	if i == nil {
		return nil
	}
	return i.RemoveFields
}

func (i *InputCollectorS3) GetResumeOnBoot() *bool {
	if i == nil {
		return nil
	}
	return i.ResumeOnBoot
}

func (i *InputCollectorS3) GetEnvironment() *string {
	if i == nil {
		return nil
	}
	return i.Environment
}

func (i *InputCollectorS3) GetSavedState() *InputCollectorS3SavedState {
	if i == nil {
		return nil
	}
	return i.SavedState
}

func (i *InputCollectorS3) GetSchedule() *InputCollectorS3Schedule {
	if i == nil {
		return nil
	}
	return i.Schedule
}

func (i *InputCollectorS3) GetStreamtags() []string {
	if i == nil {
		return nil
	}
	return i.Streamtags
}

func (i *InputCollectorS3) GetWorkerAffinity() *bool {
	if i == nil {
		return nil
	}
	return i.WorkerAffinity
}

func (i *InputCollectorS3) GetInput() *InputCollectorS3Input {
	if i == nil {
		return nil
	}
	return i.Input
}

func (i *InputCollectorS3) GetCollector() InputCollectorS3Collector {
	if i == nil {
		return InputCollectorS3Collector{}
	}
	return i.Collector
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/internal/utils"
)

type InputSplunkType string

const (
	InputSplunkTypeSplunk InputSplunkType = "splunk"
)

func (e InputSplunkType) ToPointer() *InputSplunkType {
	return &e
}
func (e *InputSplunkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "splunk":
		*e = InputSplunkType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSplunkType: %v", v)
	}
}

type InputSplunkConnection struct {
	Pipeline *string `json:"pipeline,omitempty"`
	Output   string  `json:"output"`
}

func (i InputSplunkConnection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSplunkConnection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"output"}); err != nil {
		return err
	}
	return nil
}

func (i *InputSplunkConnection) GetPipeline() *string {
	if i == nil {
		return nil
	}
	return i.Pipeline
}

func (i *InputSplunkConnection) GetOutput() string {
	if i == nil {
		return ""
	}
	return i.Output
}

// InputSplunkMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputSplunkMode string

const (
	InputSplunkModeSmart  InputSplunkMode = "smart"
	InputSplunkModeAlways InputSplunkMode = "always"
)

func (e InputSplunkMode) ToPointer() *InputSplunkMode {
	return &e
}
func (e *InputSplunkMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputSplunkMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSplunkMode: %v", v)
	}
}

// InputSplunkPqCompression - Codec to use to compress the persisted data
type InputSplunkPqCompression string

const (
	InputSplunkPqCompressionNone InputSplunkPqCompression = "none"
	InputSplunkPqCompressionGzip InputSplunkPqCompression = "gzip"
)

func (e InputSplunkPqCompression) ToPointer() *InputSplunkPqCompression {
	return &e
}
func (e *InputSplunkPqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputSplunkPqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSplunkPqCompression: %v", v)
	}
}

type InputSplunkPq struct {
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputSplunkMode `default:"always" json:"mode"`
	// The maximum number of events to hold in memory before writing the events to disk
	MaxBufferSize *float64 `default:"1000" json:"maxBufferSize"`
	// The number of events to send downstream before committing that Stream has read them
	CommitFrequency *float64 `default:"42" json:"commitFrequency"`
	// The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
	MaxFileSize *string `default:"1 MB" json:"maxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `default:"5GB" json:"maxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
	Path *string `default:"$CRIBL_HOME/state/queues" json:"path"`
	// Codec to use to compress the persisted data
	Compress *InputSplunkPqCompression `default:"none" json:"compress"`
}

func (i InputSplunkPq) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSplunkPq) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputSplunkPq) GetMode() *InputSplunkMode {
	if i == nil {
		return nil
	}
	return i.Mode
}

func (i *InputSplunkPq) GetMaxBufferSize() *float64 {
	if i == nil {
		return nil
	}
	return i.MaxBufferSize
}

func (i *InputSplunkPq) GetCommitFrequency() *float64 {
	if i == nil {
		return nil
	}
	return i.CommitFrequency
}

func (i *InputSplunkPq) GetMaxFileSize() *string {
	if i == nil {
		return nil
	}
	return i.MaxFileSize
}

func (i *InputSplunkPq) GetMaxSize() *string {
	if i == nil {
		return nil
	}
	return i.MaxSize
}

func (i *InputSplunkPq) GetPath() *string {
	if i == nil {
		return nil
	}
	return i.Path
}

func (i *InputSplunkPq) GetCompress() *InputSplunkPqCompression {
	if i == nil {
		return nil
	}
	return i.Compress
}

type InputSplunkMinimumTLSVersion string

const (
	InputSplunkMinimumTLSVersionTlSv1  InputSplunkMinimumTLSVersion = "TLSv1"
	InputSplunkMinimumTLSVersionTlSv11 InputSplunkMinimumTLSVersion = "TLSv1.1"
	InputSplunkMinimumTLSVersionTlSv12 InputSplunkMinimumTLSVersion = "TLSv1.2"
	InputSplunkMinimumTLSVersionTlSv13 InputSplunkMinimumTLSVersion = "TLSv1.3"
)

func (e InputSplunkMinimumTLSVersion) ToPointer() *InputSplunkMinimumTLSVersion {
	return &e
}
func (e *InputSplunkMinimumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputSplunkMinimumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSplunkMinimumTLSVersion: %v", v)
	}
}

type InputSplunkMaximumTLSVersion string

const (
	InputSplunkMaximumTLSVersionTlSv1  InputSplunkMaximumTLSVersion = "TLSv1"
	InputSplunkMaximumTLSVersionTlSv11 InputSplunkMaximumTLSVersion = "TLSv1.1"
	InputSplunkMaximumTLSVersionTlSv12 InputSplunkMaximumTLSVersion = "TLSv1.2"
	InputSplunkMaximumTLSVersionTlSv13 InputSplunkMaximumTLSVersion = "TLSv1.3"
)

func (e InputSplunkMaximumTLSVersion) ToPointer() *InputSplunkMaximumTLSVersion {
	return &e
}
func (e *InputSplunkMaximumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputSplunkMaximumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSplunkMaximumTLSVersion: %v", v)
	}
}

type InputSplunkTLSSettingsServerSide struct {
	Disabled *bool `default:"true" json:"disabled"`
	// The name of the predefined certificate
	CertificateName *string `json:"certificateName,omitempty"`
	// Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
	PrivKeyPath *string `json:"privKeyPath,omitempty"`
	// Passphrase to use to decrypt private key
	Passphrase *string `json:"passphrase,omitempty"`
	// Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
	CertPath *string `json:"certPath,omitempty"`
	// Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
	CaPath *string `json:"caPath,omitempty"`
	// Require clients to present their certificates. Used to perform client authentication using SSL certs.
	RequestCert        *bool                         `default:"false" json:"requestCert"`
	RejectUnauthorized any                           `json:"rejectUnauthorized,omitempty"`
	CommonNameRegex    any                           `json:"commonNameRegex,omitempty"`
	MinVersion         *InputSplunkMinimumTLSVersion `json:"minVersion,omitempty"`
	MaxVersion         *InputSplunkMaximumTLSVersion `json:"maxVersion,omitempty"`
}

func (i InputSplunkTLSSettingsServerSide) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSplunkTLSSettingsServerSide) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputSplunkTLSSettingsServerSide) GetDisabled() *bool {
	if i == nil {
		return nil
	}
	return i.Disabled
}

func (i *InputSplunkTLSSettingsServerSide) GetCertificateName() *string {
	if i == nil {
		return nil
	}
	return i.CertificateName
}

func (i *InputSplunkTLSSettingsServerSide) GetPrivKeyPath() *string {
	if i == nil {
		return nil
	}
	return i.PrivKeyPath
}

func (i *InputSplunkTLSSettingsServerSide) GetPassphrase() *string {
	if i == nil {
		return nil
	}
	return i.Passphrase
}

func (i *InputSplunkTLSSettingsServerSide) GetCertPath() *string {
	if i == nil {
		return nil
	}
	return i.CertPath
}

func (i *InputSplunkTLSSettingsServerSide) GetCaPath() *string {
	if i == nil {
		return nil
	}
	return i.CaPath
}

func (i *InputSplunkTLSSettingsServerSide) GetRequestCert() *bool {
	if i == nil {
		return nil
	}
	return i.RequestCert
}

func (i *InputSplunkTLSSettingsServerSide) GetRejectUnauthorized() any {
	if i == nil {
		return nil
	}
	return i.RejectUnauthorized
}

func (i *InputSplunkTLSSettingsServerSide) GetCommonNameRegex() any {
	if i == nil {
		return nil
	}
	return i.CommonNameRegex
}

func (i *InputSplunkTLSSettingsServerSide) GetMinVersion() *InputSplunkMinimumTLSVersion {
	if i == nil {
		return nil
	}
	return i.MinVersion
}

func (i *InputSplunkTLSSettingsServerSide) GetMaxVersion() *InputSplunkMaximumTLSVersion {
	if i == nil {
		return nil
	}
	return i.MaxVersion
}

type InputSplunkMetadatum struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (i InputSplunkMetadatum) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSplunkMetadatum) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"name", "value"}); err != nil {
		return err
	}
	return nil
}

func (i *InputSplunkMetadatum) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *InputSplunkMetadatum) GetValue() string {
	if i == nil {
		return ""
	}
	return i.Value
}

type InputSplunkAuthToken struct {
	// Shared secrets to be provided by any Splunk forwarder. If empty, unauthorized access is permitted.
	Token       string  `json:"token"`
	Description *string `json:"description,omitempty"`
}

func (i InputSplunkAuthToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSplunkAuthToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"token"}); err != nil {
		return err
	}
	return nil
}

func (i *InputSplunkAuthToken) GetToken() string {
	if i == nil {
		return ""
	}
	return i.Token
}

func (i *InputSplunkAuthToken) GetDescription() *string {
	if i == nil {
		return nil
	}
	return i.Description
}

// InputSplunkMaxS2SVersion - The highest S2S protocol version to advertise during handshake
type InputSplunkMaxS2SVersion string

const (
	InputSplunkMaxS2SVersionV3 InputSplunkMaxS2SVersion = "v3"
	InputSplunkMaxS2SVersionV4 InputSplunkMaxS2SVersion = "v4"
)

func (e InputSplunkMaxS2SVersion) ToPointer() *InputSplunkMaxS2SVersion {
	return &e
}
func (e *InputSplunkMaxS2SVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v3":
		fallthrough
	case "v4":
		*e = InputSplunkMaxS2SVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSplunkMaxS2SVersion: %v", v)
	}
}

// InputSplunkCompression - Controls whether to support reading compressed data from a forwarder. Select 'Automatic' to match the forwarder's configuration, or 'Disabled' to reject compressed connections.
type InputSplunkCompression string

const (
	InputSplunkCompressionDisabled InputSplunkCompression = "disabled"
	InputSplunkCompressionAuto     InputSplunkCompression = "auto"
	InputSplunkCompressionAlways   InputSplunkCompression = "always"
)

func (e InputSplunkCompression) ToPointer() *InputSplunkCompression {
	return &e
}
func (e *InputSplunkCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "auto":
		fallthrough
	case "always":
		*e = InputSplunkCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSplunkCompression: %v", v)
	}
}

type InputSplunk struct {
	// Unique ID for this input
	ID       *string          `json:"id,omitempty"`
	Type     *InputSplunkType `json:"type,omitempty"`
	Disabled *bool            `default:"false" json:"disabled"`
	// Pipeline to process data from this Source before sending it through the Routes
	Pipeline *string `json:"pipeline,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `default:"true" json:"sendToRoutes"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
	PqEnabled *bool `default:"false" json:"pqEnabled"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Direct connections to Destinations, and optionally via a Pipeline or a Pack
	Connections []InputSplunkConnection `json:"connections,omitempty"`
	Pq          *InputSplunkPq          `json:"pq,omitempty"`
	// Address to bind on. Defaults to 0.0.0.0 (all addresses).
	Host *string `default:"0.0.0.0" json:"host"`
	// Port to listen on
	Port float64                           `json:"port"`
	TLS  *InputSplunkTLSSettingsServerSide `json:"tls,omitempty"`
	// Regex matching IP addresses that are allowed to establish a connection
	IPWhitelistRegex *string `default:"/.*/" json:"ipWhitelistRegex"`
	// Maximum number of active connections allowed per Worker Process. Use 0 for unlimited.
	MaxActiveCxn *float64 `default:"1000" json:"maxActiveCxn"`
	// How long @{product} should wait before assuming that an inactive socket has timed out. After this time, the connection will be closed. Leave at 0 for no inactive socket monitoring.
	SocketIdleTimeout *float64 `default:"0" json:"socketIdleTimeout"`
	// How long the server will wait after initiating a closure for a client to close its end of the connection. If the client doesn't close the connection within this time, the server will forcefully terminate the socket to prevent resource leaks and ensure efficient connection cleanup and system stability. Leave at 0 for no inactive socket monitoring.
	SocketEndingMaxWait *float64 `default:"30" json:"socketEndingMaxWait"`
	// The maximum duration a socket can remain open, even if active. This helps manage resources and mitigate issues caused by TCP pinning. Set to 0 to disable.
	SocketMaxLifespan *float64 `default:"0" json:"socketMaxLifespan"`
	// Enable if the connection is proxied by a device that supports proxy protocol v1 or v2
	EnableProxyHeader *bool `default:"false" json:"enableProxyHeader"`
	// Fields to add to events from this input
	Metadata []InputSplunkMetadatum `json:"metadata,omitempty"`
	// A list of event-breaking rulesets that will be applied, in order, to the input data stream
	BreakerRulesets []string `json:"breakerRulesets,omitempty"`
	// How long (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel before flushing the data stream out, as is, to the Pipelines
	StaleChannelFlushMs *float64 `default:"10000" json:"staleChannelFlushMs"`
	// Shared secrets to be provided by any Splunk forwarder. If empty, unauthorized access is permitted.
	AuthTokens []InputSplunkAuthToken `json:"authTokens,omitempty"`
	// The highest S2S protocol version to advertise during handshake
	MaxS2Sversion *InputSplunkMaxS2SVersion `default:"v3" json:"maxS2Sversion"`
	Description   *string                   `json:"description,omitempty"`
	// Event Breakers will determine events' time zone from UF-provided metadata, when TZ can't be inferred from the raw event
	UseFwdTimezone *bool `default:"true" json:"useFwdTimezone"`
	// Drop Splunk control fields such as `crcSalt` and `_savedPort`. If disabled, control fields are stored in the internal field `__ctrlFields`.
	DropControlFields *bool `default:"true" json:"dropControlFields"`
	// Extract and process Splunk-generated metrics as Cribl metrics
	ExtractMetrics *bool `default:"false" json:"extractMetrics"`
	// Controls whether to support reading compressed data from a forwarder. Select 'Automatic' to match the forwarder's configuration, or 'Disabled' to reject compressed connections.
	Compress *InputSplunkCompression `default:"disabled" json:"compress"`
}

func (i InputSplunk) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSplunk) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"port"}); err != nil {
		return err
	}
	return nil
}

func (i *InputSplunk) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *InputSplunk) GetType() *InputSplunkType {
	if i == nil {
		return nil
	}
	return i.Type
}

func (i *InputSplunk) GetDisabled() *bool {
	if i == nil {
		return nil
	}
	return i.Disabled
}

func (i *InputSplunk) GetPipeline() *string {
	if i == nil {
		return nil
	}
	return i.Pipeline
}

func (i *InputSplunk) GetSendToRoutes() *bool {
	if i == nil {
		return nil
	}
	return i.SendToRoutes
}

func (i *InputSplunk) GetEnvironment() *string {
	if i == nil {
		return nil
	}
	return i.Environment
}

func (i *InputSplunk) GetPqEnabled() *bool {
	if i == nil {
		return nil
	}
	return i.PqEnabled
}

func (i *InputSplunk) GetStreamtags() []string {
	if i == nil {
		return nil
	}
	return i.Streamtags
}

func (i *InputSplunk) GetConnections() []InputSplunkConnection {
	if i == nil {
		return nil
	}
	return i.Connections
}

func (i *InputSplunk) GetPq() *InputSplunkPq {
	if i == nil {
		return nil
	}
	return i.Pq
}

func (i *InputSplunk) GetHost() *string {
	if i == nil {
		return nil
	}
	return i.Host
}

func (i *InputSplunk) GetPort() float64 {
	if i == nil {
		return 0.0
	}
	return i.Port
}

func (i *InputSplunk) GetTLS() *InputSplunkTLSSettingsServerSide {
	if i == nil {
		return nil
	}
	return i.TLS
}

func (i *InputSplunk) GetIPWhitelistRegex() *string {
	if i == nil {
		return nil
	}
	return i.IPWhitelistRegex
}

func (i *InputSplunk) GetMaxActiveCxn() *float64 {
	if i == nil {
		return nil
	}
	return i.MaxActiveCxn
}

func (i *InputSplunk) GetSocketIdleTimeout() *float64 {
	if i == nil {
		return nil
	}
	return i.SocketIdleTimeout
}

func (i *InputSplunk) GetSocketEndingMaxWait() *float64 {
	if i == nil {
		return nil
	}
	return i.SocketEndingMaxWait
}

func (i *InputSplunk) GetSocketMaxLifespan() *float64 {
	if i == nil {
		return nil
	}
	return i.SocketMaxLifespan
}

func (i *InputSplunk) GetEnableProxyHeader() *bool {
	if i == nil {
		return nil
	}
	return i.EnableProxyHeader
}

func (i *InputSplunk) GetMetadata() []InputSplunkMetadatum {
	if i == nil {
		return nil
	}
	return i.Metadata
}

func (i *InputSplunk) GetBreakerRulesets() []string {
	if i == nil {
		return nil
	}
	return i.BreakerRulesets
}

func (i *InputSplunk) GetStaleChannelFlushMs() *float64 {
	if i == nil {
		return nil
	}
	return i.StaleChannelFlushMs
}

func (i *InputSplunk) GetAuthTokens() []InputSplunkAuthToken {
	if i == nil {
		return nil
	}
	return i.AuthTokens
}

func (i *InputSplunk) GetMaxS2Sversion() *InputSplunkMaxS2SVersion {
	if i == nil {
		return nil
	}
	return i.MaxS2Sversion
}

func (i *InputSplunk) GetDescription() *string {
	if i == nil {
		return nil
	}
	return i.Description
}

func (i *InputSplunk) GetUseFwdTimezone() *bool {
	if i == nil {
		return nil
	}
	return i.UseFwdTimezone
}

func (i *InputSplunk) GetDropControlFields() *bool {
	if i == nil {
		return nil
	}
	return i.DropControlFields
}

func (i *InputSplunk) GetExtractMetrics() *bool {
	if i == nil {
		return nil
	}
	return i.ExtractMetrics
}

func (i *InputSplunk) GetCompress() *InputSplunkCompression {
	if i == nil {
		return nil
	}
	return i.Compress
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"net/http"
)

// UpdateCriblLakeDatasetByLakeIDAndIDLakeID - lake id that contains the Datasets
type UpdateCriblLakeDatasetByLakeIDAndIDLakeID string

const (
	UpdateCriblLakeDatasetByLakeIDAndIDLakeIDDefault UpdateCriblLakeDatasetByLakeIDAndIDLakeID = "default"
)

func (e UpdateCriblLakeDatasetByLakeIDAndIDLakeID) ToPointer() *UpdateCriblLakeDatasetByLakeIDAndIDLakeID {
	return &e
}
func (e *UpdateCriblLakeDatasetByLakeIDAndIDLakeID) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "default":
		*e = UpdateCriblLakeDatasetByLakeIDAndIDLakeID(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCriblLakeDatasetByLakeIDAndIDLakeID: %v", v)
	}
}

type UpdateCriblLakeDatasetByLakeIDAndIDRequest struct {
	// lake id that contains the Datasets
	LakeID UpdateCriblLakeDatasetByLakeIDAndIDLakeID `pathParam:"style=simple,explode=false,name=lakeId"`
	// dataset id to update
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// CriblLakeDataset object
	CriblLakeDataset shared.CriblLakeDataset `request:"mediaType=application/json"`
}

func (u *UpdateCriblLakeDatasetByLakeIDAndIDRequest) GetLakeID() UpdateCriblLakeDatasetByLakeIDAndIDLakeID {
	if u == nil {
		return UpdateCriblLakeDatasetByLakeIDAndIDLakeID("")
	}
	return u.LakeID
}

func (u *UpdateCriblLakeDatasetByLakeIDAndIDRequest) GetID() string {
	if u == nil {
		return ""
	}
	return u.ID
}

func (u *UpdateCriblLakeDatasetByLakeIDAndIDRequest) GetCriblLakeDataset() shared.CriblLakeDataset {
	if u == nil {
		return shared.CriblLakeDataset{}
	}
	return u.CriblLakeDataset
}

// UpdateCriblLakeDatasetByLakeIDAndIDResponseBody - a list of CriblLakeDataset objects
type UpdateCriblLakeDatasetByLakeIDAndIDResponseBody struct {
	Items []shared.CriblLakeDataset `json:"items,omitempty"`
}

func (u *UpdateCriblLakeDatasetByLakeIDAndIDResponseBody) GetItems() []shared.CriblLakeDataset {
	if u == nil {
		return nil
	}
	return u.Items
}

type UpdateCriblLakeDatasetByLakeIDAndIDResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// a list of CriblLakeDataset objects
	Object *UpdateCriblLakeDatasetByLakeIDAndIDResponseBody
	// Unexpected error
	Error *shared.Error
}

func (u *UpdateCriblLakeDatasetByLakeIDAndIDResponse) GetContentType() string {
	if u == nil {
		return ""
	}
	return u.ContentType
}

func (u *UpdateCriblLakeDatasetByLakeIDAndIDResponse) GetStatusCode() int {
	if u == nil {
		return 0
	}
	return u.StatusCode
}

func (u *UpdateCriblLakeDatasetByLakeIDAndIDResponse) GetRawResponse() *http.Response {
	if u == nil {
		return nil
	}
	return u.RawResponse
}

func (u *UpdateCriblLakeDatasetByLakeIDAndIDResponse) GetObject() *UpdateCriblLakeDatasetByLakeIDAndIDResponseBody {
	if u == nil {
		return nil
	}
	return u.Object
}

func (u *UpdateCriblLakeDatasetByLakeIDAndIDResponse) GetError() *shared.Error {
	if u == nil {
		return nil
	}
	return u.Error
}

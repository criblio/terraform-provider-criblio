// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SearchDashboardDataSource{}
var _ datasource.DataSourceWithConfigure = &SearchDashboardDataSource{}

func NewSearchDashboardDataSource() datasource.DataSource {
	return &SearchDashboardDataSource{}
}

// SearchDashboardDataSource is the data source implementation.
type SearchDashboardDataSource struct {
	// Provider configured SDK client.
	client *sdk.CriblIo
}

// SearchDashboardDataSourceModel describes the data model.
type SearchDashboardDataSourceModel struct {
	Items []tfTypes.SearchDashboard `tfsdk:"items"`
}

// Metadata returns the data source type name.
func (r *SearchDashboardDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_search_dashboard"
}

// Schema defines the schema for the data source.
func (r *SearchDashboardDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SearchDashboard DataSource",

		Attributes: map[string]schema.Attribute{
			"items": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"cache_ttl_seconds": schema.Float64Attribute{
							Computed: true,
						},
						"category": schema.StringAttribute{
							Computed: true,
						},
						"created": schema.Float64Attribute{
							Computed: true,
						},
						"created_by": schema.StringAttribute{
							Computed: true,
						},
						"description": schema.StringAttribute{
							Computed: true,
						},
						"display_created_by": schema.StringAttribute{
							Computed: true,
						},
						"display_modified_by": schema.StringAttribute{
							Computed: true,
						},
						"elements": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"element": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"color_palette": schema.StringAttribute{
												Computed: true,
											},
											"description": schema.StringAttribute{
												Computed: true,
											},
											"empty": schema.BoolAttribute{
												Computed: true,
											},
											"h": schema.Float64Attribute{
												Computed: true,
											},
											"hide_panel": schema.BoolAttribute{
												Computed: true,
											},
											"horizontal_chart": schema.BoolAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"h": schema.Float64Attribute{
														Computed: true,
													},
													"w": schema.Float64Attribute{
														Computed: true,
													},
													"x": schema.Float64Attribute{
														Computed: true,
													},
													"y": schema.Float64Attribute{
														Computed: true,
													},
												},
											},
											"query": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"search_query_inline": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"earliest": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"number": schema.Float64Attribute{
																		Computed: true,
																	},
																	"str": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
															"latest": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"number": schema.Float64Attribute{
																		Computed: true,
																	},
																	"str": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
															"parent_search_id": schema.StringAttribute{
																Computed: true,
															},
															"query": schema.StringAttribute{
																Computed: true,
															},
															"sample_rate": schema.Float64Attribute{
																Computed: true,
															},
															"timezone": schema.StringAttribute{
																Computed: true,
															},
															"type": schema.StringAttribute{
																Computed: true,
															},
														},
													},
													"search_query_saved": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"query": schema.StringAttribute{
																Computed: true,
															},
															"query_id": schema.StringAttribute{
																Computed: true,
															},
															"run_mode": schema.StringAttribute{
																Computed: true,
															},
															"type": schema.StringAttribute{
																Computed: true,
															},
														},
													},
													"search_query_values": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"type": schema.StringAttribute{
																Computed: true,
															},
															"values": schema.ListAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
												},
											},
											"title": schema.StringAttribute{
												Computed: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
											},
											"variant": schema.StringAttribute{
												Computed: true,
											},
											"w": schema.Float64Attribute{
												Computed: true,
											},
											"x": schema.Float64Attribute{
												Computed: true,
											},
											"x_axis": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"data_field": schema.StringAttribute{
														Computed: true,
													},
													"inverse": schema.BoolAttribute{
														Computed: true,
													},
													"label_interval": schema.StringAttribute{
														Computed: true,
													},
													"label_orientation": schema.Float64Attribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"offset": schema.Float64Attribute{
														Computed: true,
													},
													"position": schema.StringAttribute{
														Computed: true,
													},
													"type": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"y": schema.Float64Attribute{
												Computed: true,
											},
											"y_axis": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"data_field": schema.ListAttribute{
														Computed:    true,
														ElementType: types.StringType,
													},
													"interval": schema.Float64Attribute{
														Computed: true,
													},
													"max": schema.Float64Attribute{
														Computed: true,
													},
													"min": schema.Float64Attribute{
														Computed: true,
													},
													"position": schema.StringAttribute{
														Computed: true,
													},
													"scale": schema.StringAttribute{
														Computed: true,
													},
													"split_line": schema.BoolAttribute{
														Computed: true,
													},
													"type": schema.StringAttribute{
														Computed: true,
													},
												},
											},
										},
									},
								},
							},
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"modified": schema.Float64Attribute{
							Computed: true,
						},
						"modified_by": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"owner": schema.StringAttribute{
							Computed: true,
						},
						"pack_id": schema.StringAttribute{
							Computed: true,
						},
						"refresh_rate": schema.Float64Attribute{
							Computed: true,
						},
						"resolved_dataset_ids": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
						"schedule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"cron_schedule": schema.StringAttribute{
									Computed: true,
								},
								"enabled": schema.BoolAttribute{
									Computed: true,
								},
								"keep_last_n": schema.Float64Attribute{
									Computed: true,
								},
								"notifications": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"disabled": schema.BoolAttribute{
											Computed: true,
										},
									},
								},
								"tz": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"tags": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
					},
				},
			},
		},
	}
}

func (r *SearchDashboardDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.CriblIo)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.CriblIo, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SearchDashboardDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SearchDashboardDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	res, err := r.client.Dashboards.ListSearchDashboard(ctx)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromOperationsListSearchDashboardResponseBody(ctx, res.Object)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-criblio/internal/provider/types"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk/models/shared"
)

func (r *DestinationDataSourceModel) ToOperationsListOutputRequest(ctx context.Context) (*operations.ListOutputRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.ListOutputRequest{
		GroupID: groupID,
	}

	return &out, diags
}

func (r *DestinationDataSourceModel) RefreshFromSharedOutput(ctx context.Context, resp *shared.Output) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp.OutputAzureBlob != nil {
		r.OutputAzureBlob = &tfTypes.OutputAzureBlob{}
		r.OutputAzureBlob.AddIDToStagePath = types.BoolPointerValue(resp.OutputAzureBlob.AddIDToStagePath)
		if resp.OutputAzureBlob.AuthType != nil {
			r.OutputAzureBlob.AuthType = types.StringValue(string(*resp.OutputAzureBlob.AuthType))
		} else {
			r.OutputAzureBlob.AuthType = types.StringNull()
		}
		r.OutputAzureBlob.AutomaticSchema = types.BoolPointerValue(resp.OutputAzureBlob.AutomaticSchema)
		r.OutputAzureBlob.AzureCloud = types.StringPointerValue(resp.OutputAzureBlob.AzureCloud)
		r.OutputAzureBlob.BaseFileName = types.StringPointerValue(resp.OutputAzureBlob.BaseFileName)
		if resp.OutputAzureBlob.Certificate == nil {
			r.OutputAzureBlob.Certificate = nil
		} else {
			r.OutputAzureBlob.Certificate = &tfTypes.OutputAzureBlobCertificate{}
			r.OutputAzureBlob.Certificate.CertificateName = types.StringValue(resp.OutputAzureBlob.Certificate.CertificateName)
		}
		r.OutputAzureBlob.ClientID = types.StringPointerValue(resp.OutputAzureBlob.ClientID)
		r.OutputAzureBlob.ClientTextSecret = types.StringPointerValue(resp.OutputAzureBlob.ClientTextSecret)
		if resp.OutputAzureBlob.Compress != nil {
			r.OutputAzureBlob.Compress = types.StringValue(string(*resp.OutputAzureBlob.Compress))
		} else {
			r.OutputAzureBlob.Compress = types.StringNull()
		}
		if resp.OutputAzureBlob.CompressionLevel != nil {
			r.OutputAzureBlob.CompressionLevel = types.StringValue(string(*resp.OutputAzureBlob.CompressionLevel))
		} else {
			r.OutputAzureBlob.CompressionLevel = types.StringNull()
		}
		r.OutputAzureBlob.ConnectionString = types.StringPointerValue(resp.OutputAzureBlob.ConnectionString)
		r.OutputAzureBlob.ContainerName = types.StringValue(resp.OutputAzureBlob.ContainerName)
		r.OutputAzureBlob.CreateContainer = types.BoolPointerValue(resp.OutputAzureBlob.CreateContainer)
		r.OutputAzureBlob.DeadletterEnabled = types.BoolPointerValue(resp.OutputAzureBlob.DeadletterEnabled)
		r.OutputAzureBlob.DeadletterPath = types.StringPointerValue(resp.OutputAzureBlob.DeadletterPath)
		r.OutputAzureBlob.Description = types.StringPointerValue(resp.OutputAzureBlob.Description)
		r.OutputAzureBlob.DestPath = types.StringPointerValue(resp.OutputAzureBlob.DestPath)
		r.OutputAzureBlob.EmptyDirCleanupSec = types.Float64PointerValue(resp.OutputAzureBlob.EmptyDirCleanupSec)
		r.OutputAzureBlob.EnablePageChecksum = types.BoolPointerValue(resp.OutputAzureBlob.EnablePageChecksum)
		r.OutputAzureBlob.EnableStatistics = types.BoolPointerValue(resp.OutputAzureBlob.EnableStatistics)
		r.OutputAzureBlob.EnableWritePageIndex = types.BoolPointerValue(resp.OutputAzureBlob.EnableWritePageIndex)
		r.OutputAzureBlob.EndpointSuffix = types.StringPointerValue(resp.OutputAzureBlob.EndpointSuffix)
		r.OutputAzureBlob.Environment = types.StringPointerValue(resp.OutputAzureBlob.Environment)
		r.OutputAzureBlob.FileNameSuffix = types.StringPointerValue(resp.OutputAzureBlob.FileNameSuffix)
		if resp.OutputAzureBlob.Format != nil {
			r.OutputAzureBlob.Format = types.StringValue(string(*resp.OutputAzureBlob.Format))
		} else {
			r.OutputAzureBlob.Format = types.StringNull()
		}
		r.OutputAzureBlob.HeaderLine = types.StringPointerValue(resp.OutputAzureBlob.HeaderLine)
		r.OutputAzureBlob.ID = types.StringPointerValue(resp.OutputAzureBlob.ID)
		r.OutputAzureBlob.KeyValueMetadata = []tfTypes.OutputAzureBlobKeyValueMetadatum{}
		if len(r.OutputAzureBlob.KeyValueMetadata) > len(resp.OutputAzureBlob.KeyValueMetadata) {
			r.OutputAzureBlob.KeyValueMetadata = r.OutputAzureBlob.KeyValueMetadata[:len(resp.OutputAzureBlob.KeyValueMetadata)]
		}
		for keyValueMetadataCount, keyValueMetadataItem := range resp.OutputAzureBlob.KeyValueMetadata {
			var keyValueMetadata tfTypes.OutputAzureBlobKeyValueMetadatum
			keyValueMetadata.Key = types.StringPointerValue(keyValueMetadataItem.Key)
			keyValueMetadata.Value = types.StringValue(keyValueMetadataItem.Value)
			if keyValueMetadataCount+1 > len(r.OutputAzureBlob.KeyValueMetadata) {
				r.OutputAzureBlob.KeyValueMetadata = append(r.OutputAzureBlob.KeyValueMetadata, keyValueMetadata)
			} else {
				r.OutputAzureBlob.KeyValueMetadata[keyValueMetadataCount].Key = keyValueMetadata.Key
				r.OutputAzureBlob.KeyValueMetadata[keyValueMetadataCount].Value = keyValueMetadata.Value
			}
		}
		r.OutputAzureBlob.MaxConcurrentFileParts = types.Float64PointerValue(resp.OutputAzureBlob.MaxConcurrentFileParts)
		r.OutputAzureBlob.MaxFileIdleTimeSec = types.Float64PointerValue(resp.OutputAzureBlob.MaxFileIdleTimeSec)
		r.OutputAzureBlob.MaxFileOpenTimeSec = types.Float64PointerValue(resp.OutputAzureBlob.MaxFileOpenTimeSec)
		r.OutputAzureBlob.MaxFileSizeMB = types.Float64PointerValue(resp.OutputAzureBlob.MaxFileSizeMB)
		r.OutputAzureBlob.MaxOpenFiles = types.Float64PointerValue(resp.OutputAzureBlob.MaxOpenFiles)
		r.OutputAzureBlob.MaxRetryNum = types.Float64PointerValue(resp.OutputAzureBlob.MaxRetryNum)
		if resp.OutputAzureBlob.OnBackpressure != nil {
			r.OutputAzureBlob.OnBackpressure = types.StringValue(string(*resp.OutputAzureBlob.OnBackpressure))
		} else {
			r.OutputAzureBlob.OnBackpressure = types.StringNull()
		}
		if resp.OutputAzureBlob.OnDiskFullBackpressure != nil {
			r.OutputAzureBlob.OnDiskFullBackpressure = types.StringValue(string(*resp.OutputAzureBlob.OnDiskFullBackpressure))
		} else {
			r.OutputAzureBlob.OnDiskFullBackpressure = types.StringNull()
		}
		if resp.OutputAzureBlob.ParquetDataPageVersion != nil {
			r.OutputAzureBlob.ParquetDataPageVersion = types.StringValue(string(*resp.OutputAzureBlob.ParquetDataPageVersion))
		} else {
			r.OutputAzureBlob.ParquetDataPageVersion = types.StringNull()
		}
		r.OutputAzureBlob.ParquetPageSize = types.StringPointerValue(resp.OutputAzureBlob.ParquetPageSize)
		r.OutputAzureBlob.ParquetRowGroupLength = types.Float64PointerValue(resp.OutputAzureBlob.ParquetRowGroupLength)
		if resp.OutputAzureBlob.ParquetVersion != nil {
			r.OutputAzureBlob.ParquetVersion = types.StringValue(string(*resp.OutputAzureBlob.ParquetVersion))
		} else {
			r.OutputAzureBlob.ParquetVersion = types.StringNull()
		}
		r.OutputAzureBlob.PartitionExpr = types.StringPointerValue(resp.OutputAzureBlob.PartitionExpr)
		r.OutputAzureBlob.Pipeline = types.StringPointerValue(resp.OutputAzureBlob.Pipeline)
		r.OutputAzureBlob.RemoveEmptyDirs = types.BoolPointerValue(resp.OutputAzureBlob.RemoveEmptyDirs)
		r.OutputAzureBlob.ShouldLogInvalidRows = types.BoolPointerValue(resp.OutputAzureBlob.ShouldLogInvalidRows)
		r.OutputAzureBlob.StagePath = types.StringPointerValue(resp.OutputAzureBlob.StagePath)
		r.OutputAzureBlob.StorageAccountName = types.StringPointerValue(resp.OutputAzureBlob.StorageAccountName)
		if resp.OutputAzureBlob.StorageClass != nil {
			r.OutputAzureBlob.StorageClass = types.StringValue(string(*resp.OutputAzureBlob.StorageClass))
		} else {
			r.OutputAzureBlob.StorageClass = types.StringNull()
		}
		r.OutputAzureBlob.Streamtags = make([]types.String, 0, len(resp.OutputAzureBlob.Streamtags))
		for _, v := range resp.OutputAzureBlob.Streamtags {
			r.OutputAzureBlob.Streamtags = append(r.OutputAzureBlob.Streamtags, types.StringValue(v))
		}
		r.OutputAzureBlob.SystemFields = make([]types.String, 0, len(resp.OutputAzureBlob.SystemFields))
		for _, v := range resp.OutputAzureBlob.SystemFields {
			r.OutputAzureBlob.SystemFields = append(r.OutputAzureBlob.SystemFields, types.StringValue(v))
		}
		r.OutputAzureBlob.TenantID = types.StringPointerValue(resp.OutputAzureBlob.TenantID)
		r.OutputAzureBlob.TextSecret = types.StringPointerValue(resp.OutputAzureBlob.TextSecret)
		if resp.OutputAzureBlob.Type != nil {
			r.OutputAzureBlob.Type = types.StringValue(string(*resp.OutputAzureBlob.Type))
		} else {
			r.OutputAzureBlob.Type = types.StringNull()
		}
		r.OutputAzureBlob.WriteHighWaterMark = types.Float64PointerValue(resp.OutputAzureBlob.WriteHighWaterMark)
	}
	if resp.OutputAzureDataExplorer != nil {
		r.OutputAzureDataExplorer = &tfTypes.OutputAzureDataExplorer{}
		r.OutputAzureDataExplorer.AddIDToStagePath = types.BoolPointerValue(resp.OutputAzureDataExplorer.AddIDToStagePath)
		r.OutputAzureDataExplorer.AdditionalProperties = []tfTypes.AdditionalProperty{}
		if len(r.OutputAzureDataExplorer.AdditionalProperties) > len(resp.OutputAzureDataExplorer.AdditionalProperties) {
			r.OutputAzureDataExplorer.AdditionalProperties = r.OutputAzureDataExplorer.AdditionalProperties[:len(resp.OutputAzureDataExplorer.AdditionalProperties)]
		}
		for additionalPropertiesCount, additionalPropertiesItem := range resp.OutputAzureDataExplorer.AdditionalProperties {
			var additionalProperties tfTypes.AdditionalProperty
			additionalProperties.Key = types.StringValue(additionalPropertiesItem.Key)
			additionalProperties.Value = types.StringValue(additionalPropertiesItem.Value)
			if additionalPropertiesCount+1 > len(r.OutputAzureDataExplorer.AdditionalProperties) {
				r.OutputAzureDataExplorer.AdditionalProperties = append(r.OutputAzureDataExplorer.AdditionalProperties, additionalProperties)
			} else {
				r.OutputAzureDataExplorer.AdditionalProperties[additionalPropertiesCount].Key = additionalProperties.Key
				r.OutputAzureDataExplorer.AdditionalProperties[additionalPropertiesCount].Value = additionalProperties.Value
			}
		}
		if resp.OutputAzureDataExplorer.Certificate == nil {
			r.OutputAzureDataExplorer.Certificate = nil
		} else {
			r.OutputAzureDataExplorer.Certificate = &tfTypes.OutputAzureDataExplorerCertificate{}
			r.OutputAzureDataExplorer.Certificate.CertificateName = types.StringPointerValue(resp.OutputAzureDataExplorer.Certificate.CertificateName)
		}
		r.OutputAzureDataExplorer.ClientID = types.StringValue(resp.OutputAzureDataExplorer.ClientID)
		r.OutputAzureDataExplorer.ClientSecret = types.StringPointerValue(resp.OutputAzureDataExplorer.ClientSecret)
		r.OutputAzureDataExplorer.ClusterURL = types.StringValue(resp.OutputAzureDataExplorer.ClusterURL)
		if resp.OutputAzureDataExplorer.Compress != nil {
			r.OutputAzureDataExplorer.Compress = types.StringValue(string(*resp.OutputAzureDataExplorer.Compress))
		} else {
			r.OutputAzureDataExplorer.Compress = types.StringNull()
		}
		r.OutputAzureDataExplorer.Concurrency = types.Float64PointerValue(resp.OutputAzureDataExplorer.Concurrency)
		r.OutputAzureDataExplorer.Database = types.StringValue(resp.OutputAzureDataExplorer.Database)
		r.OutputAzureDataExplorer.DeadletterEnabled = types.BoolPointerValue(resp.OutputAzureDataExplorer.DeadletterEnabled)
		r.OutputAzureDataExplorer.Description = types.StringPointerValue(resp.OutputAzureDataExplorer.Description)
		r.OutputAzureDataExplorer.Environment = types.StringPointerValue(resp.OutputAzureDataExplorer.Environment)
		r.OutputAzureDataExplorer.ExtentTags = []tfTypes.ExtentTag{}
		if len(r.OutputAzureDataExplorer.ExtentTags) > len(resp.OutputAzureDataExplorer.ExtentTags) {
			r.OutputAzureDataExplorer.ExtentTags = r.OutputAzureDataExplorer.ExtentTags[:len(resp.OutputAzureDataExplorer.ExtentTags)]
		}
		for extentTagsCount, extentTagsItem := range resp.OutputAzureDataExplorer.ExtentTags {
			var extentTags tfTypes.ExtentTag
			if extentTagsItem.Prefix != nil {
				extentTags.Prefix = types.StringValue(string(*extentTagsItem.Prefix))
			} else {
				extentTags.Prefix = types.StringNull()
			}
			extentTags.Value = types.StringValue(extentTagsItem.Value)
			if extentTagsCount+1 > len(r.OutputAzureDataExplorer.ExtentTags) {
				r.OutputAzureDataExplorer.ExtentTags = append(r.OutputAzureDataExplorer.ExtentTags, extentTags)
			} else {
				r.OutputAzureDataExplorer.ExtentTags[extentTagsCount].Prefix = extentTags.Prefix
				r.OutputAzureDataExplorer.ExtentTags[extentTagsCount].Value = extentTags.Value
			}
		}
		r.OutputAzureDataExplorer.FileNameSuffix = types.StringPointerValue(resp.OutputAzureDataExplorer.FileNameSuffix)
		r.OutputAzureDataExplorer.FlushImmediately = types.BoolPointerValue(resp.OutputAzureDataExplorer.FlushImmediately)
		r.OutputAzureDataExplorer.FlushPeriodSec = types.Float64PointerValue(resp.OutputAzureDataExplorer.FlushPeriodSec)
		if resp.OutputAzureDataExplorer.Format != nil {
			r.OutputAzureDataExplorer.Format = types.StringValue(string(*resp.OutputAzureDataExplorer.Format))
		} else {
			r.OutputAzureDataExplorer.Format = types.StringNull()
		}
		r.OutputAzureDataExplorer.ID = types.StringPointerValue(resp.OutputAzureDataExplorer.ID)
		r.OutputAzureDataExplorer.IngestIfNotExists = []tfTypes.IngestIfNotExist{}
		if len(r.OutputAzureDataExplorer.IngestIfNotExists) > len(resp.OutputAzureDataExplorer.IngestIfNotExists) {
			r.OutputAzureDataExplorer.IngestIfNotExists = r.OutputAzureDataExplorer.IngestIfNotExists[:len(resp.OutputAzureDataExplorer.IngestIfNotExists)]
		}
		for ingestIfNotExistsCount, ingestIfNotExistsItem := range resp.OutputAzureDataExplorer.IngestIfNotExists {
			var ingestIfNotExists tfTypes.IngestIfNotExist
			ingestIfNotExists.Value = types.StringValue(ingestIfNotExistsItem.Value)
			if ingestIfNotExistsCount+1 > len(r.OutputAzureDataExplorer.IngestIfNotExists) {
				r.OutputAzureDataExplorer.IngestIfNotExists = append(r.OutputAzureDataExplorer.IngestIfNotExists, ingestIfNotExists)
			} else {
				r.OutputAzureDataExplorer.IngestIfNotExists[ingestIfNotExistsCount].Value = ingestIfNotExists.Value
			}
		}
		if resp.OutputAzureDataExplorer.IngestMode != nil {
			r.OutputAzureDataExplorer.IngestMode = types.StringValue(string(*resp.OutputAzureDataExplorer.IngestMode))
		} else {
			r.OutputAzureDataExplorer.IngestMode = types.StringNull()
		}
		r.OutputAzureDataExplorer.IngestURL = types.StringPointerValue(resp.OutputAzureDataExplorer.IngestURL)
		r.OutputAzureDataExplorer.IsMappingObj = types.BoolPointerValue(resp.OutputAzureDataExplorer.IsMappingObj)
		r.OutputAzureDataExplorer.KeepAlive = types.BoolPointerValue(resp.OutputAzureDataExplorer.KeepAlive)
		r.OutputAzureDataExplorer.MappingRef = types.StringPointerValue(resp.OutputAzureDataExplorer.MappingRef)
		r.OutputAzureDataExplorer.MaxConcurrentFileParts = types.Float64PointerValue(resp.OutputAzureDataExplorer.MaxConcurrentFileParts)
		r.OutputAzureDataExplorer.MaxFileIdleTimeSec = types.Float64PointerValue(resp.OutputAzureDataExplorer.MaxFileIdleTimeSec)
		r.OutputAzureDataExplorer.MaxFileOpenTimeSec = types.Float64PointerValue(resp.OutputAzureDataExplorer.MaxFileOpenTimeSec)
		r.OutputAzureDataExplorer.MaxFileSizeMB = types.Float64PointerValue(resp.OutputAzureDataExplorer.MaxFileSizeMB)
		r.OutputAzureDataExplorer.MaxOpenFiles = types.Float64PointerValue(resp.OutputAzureDataExplorer.MaxOpenFiles)
		r.OutputAzureDataExplorer.MaxPayloadEvents = types.Float64PointerValue(resp.OutputAzureDataExplorer.MaxPayloadEvents)
		r.OutputAzureDataExplorer.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputAzureDataExplorer.MaxPayloadSizeKB)
		if resp.OutputAzureDataExplorer.OauthEndpoint != nil {
			r.OutputAzureDataExplorer.OauthEndpoint = types.StringValue(string(*resp.OutputAzureDataExplorer.OauthEndpoint))
		} else {
			r.OutputAzureDataExplorer.OauthEndpoint = types.StringNull()
		}
		if resp.OutputAzureDataExplorer.OauthType != nil {
			r.OutputAzureDataExplorer.OauthType = types.StringValue(string(*resp.OutputAzureDataExplorer.OauthType))
		} else {
			r.OutputAzureDataExplorer.OauthType = types.StringNull()
		}
		if resp.OutputAzureDataExplorer.OnBackpressure != nil {
			r.OutputAzureDataExplorer.OnBackpressure = types.StringValue(string(*resp.OutputAzureDataExplorer.OnBackpressure))
		} else {
			r.OutputAzureDataExplorer.OnBackpressure = types.StringNull()
		}
		if resp.OutputAzureDataExplorer.OnDiskFullBackpressure != nil {
			r.OutputAzureDataExplorer.OnDiskFullBackpressure = types.StringValue(string(*resp.OutputAzureDataExplorer.OnDiskFullBackpressure))
		} else {
			r.OutputAzureDataExplorer.OnDiskFullBackpressure = types.StringNull()
		}
		r.OutputAzureDataExplorer.Pipeline = types.StringPointerValue(resp.OutputAzureDataExplorer.Pipeline)
		if resp.OutputAzureDataExplorer.PqCompress != nil {
			r.OutputAzureDataExplorer.PqCompress = types.StringValue(string(*resp.OutputAzureDataExplorer.PqCompress))
		} else {
			r.OutputAzureDataExplorer.PqCompress = types.StringNull()
		}
		if resp.OutputAzureDataExplorer.PqControls == nil {
			r.OutputAzureDataExplorer.PqControls = nil
		} else {
			r.OutputAzureDataExplorer.PqControls = &tfTypes.OutputAzureDataExplorerPqControls{}
		}
		r.OutputAzureDataExplorer.PqMaxFileSize = types.StringPointerValue(resp.OutputAzureDataExplorer.PqMaxFileSize)
		r.OutputAzureDataExplorer.PqMaxSize = types.StringPointerValue(resp.OutputAzureDataExplorer.PqMaxSize)
		if resp.OutputAzureDataExplorer.PqMode != nil {
			r.OutputAzureDataExplorer.PqMode = types.StringValue(string(*resp.OutputAzureDataExplorer.PqMode))
		} else {
			r.OutputAzureDataExplorer.PqMode = types.StringNull()
		}
		if resp.OutputAzureDataExplorer.PqOnBackpressure != nil {
			r.OutputAzureDataExplorer.PqOnBackpressure = types.StringValue(string(*resp.OutputAzureDataExplorer.PqOnBackpressure))
		} else {
			r.OutputAzureDataExplorer.PqOnBackpressure = types.StringNull()
		}
		r.OutputAzureDataExplorer.PqPath = types.StringPointerValue(resp.OutputAzureDataExplorer.PqPath)
		r.OutputAzureDataExplorer.RejectUnauthorized = types.BoolPointerValue(resp.OutputAzureDataExplorer.RejectUnauthorized)
		r.OutputAzureDataExplorer.RemoveEmptyDirs = types.BoolPointerValue(resp.OutputAzureDataExplorer.RemoveEmptyDirs)
		if resp.OutputAzureDataExplorer.ReportLevel != nil {
			r.OutputAzureDataExplorer.ReportLevel = types.StringValue(string(*resp.OutputAzureDataExplorer.ReportLevel))
		} else {
			r.OutputAzureDataExplorer.ReportLevel = types.StringNull()
		}
		if resp.OutputAzureDataExplorer.ReportMethod != nil {
			r.OutputAzureDataExplorer.ReportMethod = types.StringValue(string(*resp.OutputAzureDataExplorer.ReportMethod))
		} else {
			r.OutputAzureDataExplorer.ReportMethod = types.StringNull()
		}
		r.OutputAzureDataExplorer.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputAzureDataExplorer.ResponseHonorRetryAfterHeader)
		r.OutputAzureDataExplorer.ResponseRetrySettings = []tfTypes.OutputAzureDataExplorerResponseRetrySetting{}
		if len(r.OutputAzureDataExplorer.ResponseRetrySettings) > len(resp.OutputAzureDataExplorer.ResponseRetrySettings) {
			r.OutputAzureDataExplorer.ResponseRetrySettings = r.OutputAzureDataExplorer.ResponseRetrySettings[:len(resp.OutputAzureDataExplorer.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount, responseRetrySettingsItem := range resp.OutputAzureDataExplorer.ResponseRetrySettings {
			var responseRetrySettings tfTypes.OutputAzureDataExplorerResponseRetrySetting
			responseRetrySettings.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem.BackoffRate)
			responseRetrySettings.HTTPStatus = types.Float64Value(responseRetrySettingsItem.HTTPStatus)
			responseRetrySettings.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem.InitialBackoff)
			responseRetrySettings.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem.MaxBackoff)
			if responseRetrySettingsCount+1 > len(r.OutputAzureDataExplorer.ResponseRetrySettings) {
				r.OutputAzureDataExplorer.ResponseRetrySettings = append(r.OutputAzureDataExplorer.ResponseRetrySettings, responseRetrySettings)
			} else {
				r.OutputAzureDataExplorer.ResponseRetrySettings[responseRetrySettingsCount].BackoffRate = responseRetrySettings.BackoffRate
				r.OutputAzureDataExplorer.ResponseRetrySettings[responseRetrySettingsCount].HTTPStatus = responseRetrySettings.HTTPStatus
				r.OutputAzureDataExplorer.ResponseRetrySettings[responseRetrySettingsCount].InitialBackoff = responseRetrySettings.InitialBackoff
				r.OutputAzureDataExplorer.ResponseRetrySettings[responseRetrySettingsCount].MaxBackoff = responseRetrySettings.MaxBackoff
			}
		}
		r.OutputAzureDataExplorer.RetainBlobOnSuccess = types.BoolPointerValue(resp.OutputAzureDataExplorer.RetainBlobOnSuccess)
		r.OutputAzureDataExplorer.Scope = types.StringValue(resp.OutputAzureDataExplorer.Scope)
		r.OutputAzureDataExplorer.StagePath = types.StringPointerValue(resp.OutputAzureDataExplorer.StagePath)
		r.OutputAzureDataExplorer.Streamtags = make([]types.String, 0, len(resp.OutputAzureDataExplorer.Streamtags))
		for _, v := range resp.OutputAzureDataExplorer.Streamtags {
			r.OutputAzureDataExplorer.Streamtags = append(r.OutputAzureDataExplorer.Streamtags, types.StringValue(v))
		}
		r.OutputAzureDataExplorer.SystemFields = make([]types.String, 0, len(resp.OutputAzureDataExplorer.SystemFields))
		for _, v := range resp.OutputAzureDataExplorer.SystemFields {
			r.OutputAzureDataExplorer.SystemFields = append(r.OutputAzureDataExplorer.SystemFields, types.StringValue(v))
		}
		r.OutputAzureDataExplorer.Table = types.StringValue(resp.OutputAzureDataExplorer.Table)
		r.OutputAzureDataExplorer.TenantID = types.StringValue(resp.OutputAzureDataExplorer.TenantID)
		r.OutputAzureDataExplorer.TextSecret = types.StringPointerValue(resp.OutputAzureDataExplorer.TextSecret)
		if resp.OutputAzureDataExplorer.TimeoutRetrySettings == nil {
			r.OutputAzureDataExplorer.TimeoutRetrySettings = nil
		} else {
			r.OutputAzureDataExplorer.TimeoutRetrySettings = &tfTypes.OutputAzureDataExplorerTimeoutRetrySettings{}
			r.OutputAzureDataExplorer.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputAzureDataExplorer.TimeoutRetrySettings.BackoffRate)
			r.OutputAzureDataExplorer.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputAzureDataExplorer.TimeoutRetrySettings.InitialBackoff)
			r.OutputAzureDataExplorer.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputAzureDataExplorer.TimeoutRetrySettings.MaxBackoff)
			r.OutputAzureDataExplorer.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputAzureDataExplorer.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputAzureDataExplorer.TimeoutSec = types.Float64PointerValue(resp.OutputAzureDataExplorer.TimeoutSec)
		if resp.OutputAzureDataExplorer.Type != nil {
			r.OutputAzureDataExplorer.Type = types.StringValue(string(*resp.OutputAzureDataExplorer.Type))
		} else {
			r.OutputAzureDataExplorer.Type = types.StringNull()
		}
		r.OutputAzureDataExplorer.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputAzureDataExplorer.UseRoundRobinDNS)
		r.OutputAzureDataExplorer.ValidateDatabaseSettings = types.BoolPointerValue(resp.OutputAzureDataExplorer.ValidateDatabaseSettings)
	}
	if resp.OutputAzureEventhub != nil {
		r.OutputAzureEventhub = &tfTypes.OutputAzureEventhub{}
		if resp.OutputAzureEventhub.Ack != nil {
			r.OutputAzureEventhub.Ack = types.Int64Value(int64(*resp.OutputAzureEventhub.Ack))
		} else {
			r.OutputAzureEventhub.Ack = types.Int64Null()
		}
		r.OutputAzureEventhub.AuthenticationTimeout = types.Float64PointerValue(resp.OutputAzureEventhub.AuthenticationTimeout)
		r.OutputAzureEventhub.BackoffRate = types.Float64PointerValue(resp.OutputAzureEventhub.BackoffRate)
		r.OutputAzureEventhub.Brokers = make([]types.String, 0, len(resp.OutputAzureEventhub.Brokers))
		for _, v := range resp.OutputAzureEventhub.Brokers {
			r.OutputAzureEventhub.Brokers = append(r.OutputAzureEventhub.Brokers, types.StringValue(v))
		}
		r.OutputAzureEventhub.ConnectionTimeout = types.Float64PointerValue(resp.OutputAzureEventhub.ConnectionTimeout)
		r.OutputAzureEventhub.Description = types.StringPointerValue(resp.OutputAzureEventhub.Description)
		r.OutputAzureEventhub.Environment = types.StringPointerValue(resp.OutputAzureEventhub.Environment)
		r.OutputAzureEventhub.FlushEventCount = types.Float64PointerValue(resp.OutputAzureEventhub.FlushEventCount)
		r.OutputAzureEventhub.FlushPeriodSec = types.Float64PointerValue(resp.OutputAzureEventhub.FlushPeriodSec)
		if resp.OutputAzureEventhub.Format != nil {
			r.OutputAzureEventhub.Format = types.StringValue(string(*resp.OutputAzureEventhub.Format))
		} else {
			r.OutputAzureEventhub.Format = types.StringNull()
		}
		r.OutputAzureEventhub.ID = types.StringPointerValue(resp.OutputAzureEventhub.ID)
		r.OutputAzureEventhub.InitialBackoff = types.Float64PointerValue(resp.OutputAzureEventhub.InitialBackoff)
		r.OutputAzureEventhub.MaxBackOff = types.Float64PointerValue(resp.OutputAzureEventhub.MaxBackOff)
		r.OutputAzureEventhub.MaxRecordSizeKB = types.Float64PointerValue(resp.OutputAzureEventhub.MaxRecordSizeKB)
		r.OutputAzureEventhub.MaxRetries = types.Float64PointerValue(resp.OutputAzureEventhub.MaxRetries)
		if resp.OutputAzureEventhub.OnBackpressure != nil {
			r.OutputAzureEventhub.OnBackpressure = types.StringValue(string(*resp.OutputAzureEventhub.OnBackpressure))
		} else {
			r.OutputAzureEventhub.OnBackpressure = types.StringNull()
		}
		r.OutputAzureEventhub.Pipeline = types.StringPointerValue(resp.OutputAzureEventhub.Pipeline)
		if resp.OutputAzureEventhub.PqCompress != nil {
			r.OutputAzureEventhub.PqCompress = types.StringValue(string(*resp.OutputAzureEventhub.PqCompress))
		} else {
			r.OutputAzureEventhub.PqCompress = types.StringNull()
		}
		if resp.OutputAzureEventhub.PqControls == nil {
			r.OutputAzureEventhub.PqControls = nil
		} else {
			r.OutputAzureEventhub.PqControls = &tfTypes.OutputAzureEventhubPqControls{}
		}
		r.OutputAzureEventhub.PqMaxFileSize = types.StringPointerValue(resp.OutputAzureEventhub.PqMaxFileSize)
		r.OutputAzureEventhub.PqMaxSize = types.StringPointerValue(resp.OutputAzureEventhub.PqMaxSize)
		if resp.OutputAzureEventhub.PqMode != nil {
			r.OutputAzureEventhub.PqMode = types.StringValue(string(*resp.OutputAzureEventhub.PqMode))
		} else {
			r.OutputAzureEventhub.PqMode = types.StringNull()
		}
		if resp.OutputAzureEventhub.PqOnBackpressure != nil {
			r.OutputAzureEventhub.PqOnBackpressure = types.StringValue(string(*resp.OutputAzureEventhub.PqOnBackpressure))
		} else {
			r.OutputAzureEventhub.PqOnBackpressure = types.StringNull()
		}
		r.OutputAzureEventhub.PqPath = types.StringPointerValue(resp.OutputAzureEventhub.PqPath)
		r.OutputAzureEventhub.ReauthenticationThreshold = types.Float64PointerValue(resp.OutputAzureEventhub.ReauthenticationThreshold)
		r.OutputAzureEventhub.RequestTimeout = types.Float64PointerValue(resp.OutputAzureEventhub.RequestTimeout)
		if resp.OutputAzureEventhub.Sasl == nil {
			r.OutputAzureEventhub.Sasl = nil
		} else {
			r.OutputAzureEventhub.Sasl = &tfTypes.OutputAzureEventhubAuthentication{}
			r.OutputAzureEventhub.Sasl.Disabled = types.BoolPointerValue(resp.OutputAzureEventhub.Sasl.Disabled)
			if resp.OutputAzureEventhub.Sasl.Mechanism != nil {
				r.OutputAzureEventhub.Sasl.Mechanism = types.StringValue(string(*resp.OutputAzureEventhub.Sasl.Mechanism))
			} else {
				r.OutputAzureEventhub.Sasl.Mechanism = types.StringNull()
			}
		}
		r.OutputAzureEventhub.Streamtags = make([]types.String, 0, len(resp.OutputAzureEventhub.Streamtags))
		for _, v := range resp.OutputAzureEventhub.Streamtags {
			r.OutputAzureEventhub.Streamtags = append(r.OutputAzureEventhub.Streamtags, types.StringValue(v))
		}
		r.OutputAzureEventhub.SystemFields = make([]types.String, 0, len(resp.OutputAzureEventhub.SystemFields))
		for _, v := range resp.OutputAzureEventhub.SystemFields {
			r.OutputAzureEventhub.SystemFields = append(r.OutputAzureEventhub.SystemFields, types.StringValue(v))
		}
		if resp.OutputAzureEventhub.TLS == nil {
			r.OutputAzureEventhub.TLS = nil
		} else {
			r.OutputAzureEventhub.TLS = &tfTypes.OutputAzureEventhubTLSSettingsClientSide{}
			r.OutputAzureEventhub.TLS.Disabled = types.BoolPointerValue(resp.OutputAzureEventhub.TLS.Disabled)
			r.OutputAzureEventhub.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputAzureEventhub.TLS.RejectUnauthorized)
		}
		r.OutputAzureEventhub.Topic = types.StringValue(resp.OutputAzureEventhub.Topic)
		if resp.OutputAzureEventhub.Type != nil {
			r.OutputAzureEventhub.Type = types.StringValue(string(*resp.OutputAzureEventhub.Type))
		} else {
			r.OutputAzureEventhub.Type = types.StringNull()
		}
	}
	if resp.OutputAzureLogs != nil {
		r.OutputAzureLogs = &tfTypes.OutputAzureLogs{}
		r.OutputAzureLogs.APIURL = types.StringPointerValue(resp.OutputAzureLogs.APIURL)
		if resp.OutputAzureLogs.AuthType != nil {
			r.OutputAzureLogs.AuthType = types.StringValue(string(*resp.OutputAzureLogs.AuthType))
		} else {
			r.OutputAzureLogs.AuthType = types.StringNull()
		}
		r.OutputAzureLogs.Compress = types.BoolPointerValue(resp.OutputAzureLogs.Compress)
		r.OutputAzureLogs.Concurrency = types.Float64PointerValue(resp.OutputAzureLogs.Concurrency)
		r.OutputAzureLogs.Description = types.StringPointerValue(resp.OutputAzureLogs.Description)
		r.OutputAzureLogs.Environment = types.StringPointerValue(resp.OutputAzureLogs.Environment)
		r.OutputAzureLogs.ExtraHTTPHeaders = []tfTypes.OutputAzureLogsExtraHTTPHeader{}
		if len(r.OutputAzureLogs.ExtraHTTPHeaders) > len(resp.OutputAzureLogs.ExtraHTTPHeaders) {
			r.OutputAzureLogs.ExtraHTTPHeaders = r.OutputAzureLogs.ExtraHTTPHeaders[:len(resp.OutputAzureLogs.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount, extraHTTPHeadersItem := range resp.OutputAzureLogs.ExtraHTTPHeaders {
			var extraHTTPHeaders tfTypes.OutputAzureLogsExtraHTTPHeader
			extraHTTPHeaders.Name = types.StringPointerValue(extraHTTPHeadersItem.Name)
			extraHTTPHeaders.Value = types.StringValue(extraHTTPHeadersItem.Value)
			if extraHTTPHeadersCount+1 > len(r.OutputAzureLogs.ExtraHTTPHeaders) {
				r.OutputAzureLogs.ExtraHTTPHeaders = append(r.OutputAzureLogs.ExtraHTTPHeaders, extraHTTPHeaders)
			} else {
				r.OutputAzureLogs.ExtraHTTPHeaders[extraHTTPHeadersCount].Name = extraHTTPHeaders.Name
				r.OutputAzureLogs.ExtraHTTPHeaders[extraHTTPHeadersCount].Value = extraHTTPHeaders.Value
			}
		}
		if resp.OutputAzureLogs.FailedRequestLoggingMode != nil {
			r.OutputAzureLogs.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputAzureLogs.FailedRequestLoggingMode))
		} else {
			r.OutputAzureLogs.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputAzureLogs.FlushPeriodSec = types.Float64PointerValue(resp.OutputAzureLogs.FlushPeriodSec)
		r.OutputAzureLogs.ID = types.StringPointerValue(resp.OutputAzureLogs.ID)
		r.OutputAzureLogs.KeypairSecret = types.StringPointerValue(resp.OutputAzureLogs.KeypairSecret)
		r.OutputAzureLogs.LogType = types.StringPointerValue(resp.OutputAzureLogs.LogType)
		r.OutputAzureLogs.MaxPayloadEvents = types.Float64PointerValue(resp.OutputAzureLogs.MaxPayloadEvents)
		r.OutputAzureLogs.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputAzureLogs.MaxPayloadSizeKB)
		if resp.OutputAzureLogs.OnBackpressure != nil {
			r.OutputAzureLogs.OnBackpressure = types.StringValue(string(*resp.OutputAzureLogs.OnBackpressure))
		} else {
			r.OutputAzureLogs.OnBackpressure = types.StringNull()
		}
		r.OutputAzureLogs.Pipeline = types.StringPointerValue(resp.OutputAzureLogs.Pipeline)
		if resp.OutputAzureLogs.PqCompress != nil {
			r.OutputAzureLogs.PqCompress = types.StringValue(string(*resp.OutputAzureLogs.PqCompress))
		} else {
			r.OutputAzureLogs.PqCompress = types.StringNull()
		}
		if resp.OutputAzureLogs.PqControls == nil {
			r.OutputAzureLogs.PqControls = nil
		} else {
			r.OutputAzureLogs.PqControls = &tfTypes.OutputAzureLogsPqControls{}
		}
		r.OutputAzureLogs.PqMaxFileSize = types.StringPointerValue(resp.OutputAzureLogs.PqMaxFileSize)
		r.OutputAzureLogs.PqMaxSize = types.StringPointerValue(resp.OutputAzureLogs.PqMaxSize)
		if resp.OutputAzureLogs.PqMode != nil {
			r.OutputAzureLogs.PqMode = types.StringValue(string(*resp.OutputAzureLogs.PqMode))
		} else {
			r.OutputAzureLogs.PqMode = types.StringNull()
		}
		if resp.OutputAzureLogs.PqOnBackpressure != nil {
			r.OutputAzureLogs.PqOnBackpressure = types.StringValue(string(*resp.OutputAzureLogs.PqOnBackpressure))
		} else {
			r.OutputAzureLogs.PqOnBackpressure = types.StringNull()
		}
		r.OutputAzureLogs.PqPath = types.StringPointerValue(resp.OutputAzureLogs.PqPath)
		r.OutputAzureLogs.RejectUnauthorized = types.BoolPointerValue(resp.OutputAzureLogs.RejectUnauthorized)
		r.OutputAzureLogs.ResourceID = types.StringPointerValue(resp.OutputAzureLogs.ResourceID)
		r.OutputAzureLogs.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputAzureLogs.ResponseHonorRetryAfterHeader)
		r.OutputAzureLogs.ResponseRetrySettings = []tfTypes.OutputAzureLogsResponseRetrySetting{}
		if len(r.OutputAzureLogs.ResponseRetrySettings) > len(resp.OutputAzureLogs.ResponseRetrySettings) {
			r.OutputAzureLogs.ResponseRetrySettings = r.OutputAzureLogs.ResponseRetrySettings[:len(resp.OutputAzureLogs.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount1, responseRetrySettingsItem1 := range resp.OutputAzureLogs.ResponseRetrySettings {
			var responseRetrySettings1 tfTypes.OutputAzureLogsResponseRetrySetting
			responseRetrySettings1.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem1.BackoffRate)
			responseRetrySettings1.HTTPStatus = types.Float64Value(responseRetrySettingsItem1.HTTPStatus)
			responseRetrySettings1.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem1.InitialBackoff)
			responseRetrySettings1.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem1.MaxBackoff)
			if responseRetrySettingsCount1+1 > len(r.OutputAzureLogs.ResponseRetrySettings) {
				r.OutputAzureLogs.ResponseRetrySettings = append(r.OutputAzureLogs.ResponseRetrySettings, responseRetrySettings1)
			} else {
				r.OutputAzureLogs.ResponseRetrySettings[responseRetrySettingsCount1].BackoffRate = responseRetrySettings1.BackoffRate
				r.OutputAzureLogs.ResponseRetrySettings[responseRetrySettingsCount1].HTTPStatus = responseRetrySettings1.HTTPStatus
				r.OutputAzureLogs.ResponseRetrySettings[responseRetrySettingsCount1].InitialBackoff = responseRetrySettings1.InitialBackoff
				r.OutputAzureLogs.ResponseRetrySettings[responseRetrySettingsCount1].MaxBackoff = responseRetrySettings1.MaxBackoff
			}
		}
		r.OutputAzureLogs.SafeHeaders = make([]types.String, 0, len(resp.OutputAzureLogs.SafeHeaders))
		for _, v := range resp.OutputAzureLogs.SafeHeaders {
			r.OutputAzureLogs.SafeHeaders = append(r.OutputAzureLogs.SafeHeaders, types.StringValue(v))
		}
		r.OutputAzureLogs.Streamtags = make([]types.String, 0, len(resp.OutputAzureLogs.Streamtags))
		for _, v := range resp.OutputAzureLogs.Streamtags {
			r.OutputAzureLogs.Streamtags = append(r.OutputAzureLogs.Streamtags, types.StringValue(v))
		}
		r.OutputAzureLogs.SystemFields = make([]types.String, 0, len(resp.OutputAzureLogs.SystemFields))
		for _, v := range resp.OutputAzureLogs.SystemFields {
			r.OutputAzureLogs.SystemFields = append(r.OutputAzureLogs.SystemFields, types.StringValue(v))
		}
		if resp.OutputAzureLogs.TimeoutRetrySettings == nil {
			r.OutputAzureLogs.TimeoutRetrySettings = nil
		} else {
			r.OutputAzureLogs.TimeoutRetrySettings = &tfTypes.OutputAzureLogsTimeoutRetrySettings{}
			r.OutputAzureLogs.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputAzureLogs.TimeoutRetrySettings.BackoffRate)
			r.OutputAzureLogs.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputAzureLogs.TimeoutRetrySettings.InitialBackoff)
			r.OutputAzureLogs.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputAzureLogs.TimeoutRetrySettings.MaxBackoff)
			r.OutputAzureLogs.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputAzureLogs.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputAzureLogs.TimeoutSec = types.Float64PointerValue(resp.OutputAzureLogs.TimeoutSec)
		r.OutputAzureLogs.Type = types.StringValue(string(resp.OutputAzureLogs.Type))
		r.OutputAzureLogs.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputAzureLogs.UseRoundRobinDNS)
		r.OutputAzureLogs.WorkspaceID = types.StringPointerValue(resp.OutputAzureLogs.WorkspaceID)
		r.OutputAzureLogs.WorkspaceKey = types.StringPointerValue(resp.OutputAzureLogs.WorkspaceKey)
	}
	if resp.OutputClickHouse != nil {
		r.OutputClickHouse = &tfTypes.OutputClickHouse{}
		r.OutputClickHouse.AsyncInserts = types.BoolPointerValue(resp.OutputClickHouse.AsyncInserts)
		r.OutputClickHouse.AuthHeaderExpr = types.StringPointerValue(resp.OutputClickHouse.AuthHeaderExpr)
		if resp.OutputClickHouse.AuthType != nil {
			r.OutputClickHouse.AuthType = types.StringValue(string(*resp.OutputClickHouse.AuthType))
		} else {
			r.OutputClickHouse.AuthType = types.StringNull()
		}
		r.OutputClickHouse.ColumnMappings = []tfTypes.OutputClickHouseColumnMapping{}
		if len(r.OutputClickHouse.ColumnMappings) > len(resp.OutputClickHouse.ColumnMappings) {
			r.OutputClickHouse.ColumnMappings = r.OutputClickHouse.ColumnMappings[:len(resp.OutputClickHouse.ColumnMappings)]
		}
		for columnMappingsCount, columnMappingsItem := range resp.OutputClickHouse.ColumnMappings {
			var columnMappings tfTypes.OutputClickHouseColumnMapping
			columnMappings.ColumnName = types.StringValue(columnMappingsItem.ColumnName)
			columnMappings.ColumnType = types.StringPointerValue(columnMappingsItem.ColumnType)
			columnMappings.ColumnValueExpression = types.StringValue(columnMappingsItem.ColumnValueExpression)
			if columnMappingsCount+1 > len(r.OutputClickHouse.ColumnMappings) {
				r.OutputClickHouse.ColumnMappings = append(r.OutputClickHouse.ColumnMappings, columnMappings)
			} else {
				r.OutputClickHouse.ColumnMappings[columnMappingsCount].ColumnName = columnMappings.ColumnName
				r.OutputClickHouse.ColumnMappings[columnMappingsCount].ColumnType = columnMappings.ColumnType
				r.OutputClickHouse.ColumnMappings[columnMappingsCount].ColumnValueExpression = columnMappings.ColumnValueExpression
			}
		}
		r.OutputClickHouse.Compress = types.BoolPointerValue(resp.OutputClickHouse.Compress)
		r.OutputClickHouse.Concurrency = types.Float64PointerValue(resp.OutputClickHouse.Concurrency)
		r.OutputClickHouse.CredentialsSecret = types.StringPointerValue(resp.OutputClickHouse.CredentialsSecret)
		r.OutputClickHouse.Database = types.StringValue(resp.OutputClickHouse.Database)
		r.OutputClickHouse.DescribeTable = types.StringPointerValue(resp.OutputClickHouse.DescribeTable)
		r.OutputClickHouse.Description = types.StringPointerValue(resp.OutputClickHouse.Description)
		r.OutputClickHouse.DumpFormatErrorsToDisk = types.BoolPointerValue(resp.OutputClickHouse.DumpFormatErrorsToDisk)
		r.OutputClickHouse.Environment = types.StringPointerValue(resp.OutputClickHouse.Environment)
		r.OutputClickHouse.ExcludeMappingFields = make([]types.String, 0, len(resp.OutputClickHouse.ExcludeMappingFields))
		for _, v := range resp.OutputClickHouse.ExcludeMappingFields {
			r.OutputClickHouse.ExcludeMappingFields = append(r.OutputClickHouse.ExcludeMappingFields, types.StringValue(v))
		}
		r.OutputClickHouse.ExtraHTTPHeaders = []tfTypes.OutputClickHouseExtraHTTPHeader{}
		if len(r.OutputClickHouse.ExtraHTTPHeaders) > len(resp.OutputClickHouse.ExtraHTTPHeaders) {
			r.OutputClickHouse.ExtraHTTPHeaders = r.OutputClickHouse.ExtraHTTPHeaders[:len(resp.OutputClickHouse.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount1, extraHTTPHeadersItem1 := range resp.OutputClickHouse.ExtraHTTPHeaders {
			var extraHTTPHeaders1 tfTypes.OutputClickHouseExtraHTTPHeader
			extraHTTPHeaders1.Name = types.StringPointerValue(extraHTTPHeadersItem1.Name)
			extraHTTPHeaders1.Value = types.StringValue(extraHTTPHeadersItem1.Value)
			if extraHTTPHeadersCount1+1 > len(r.OutputClickHouse.ExtraHTTPHeaders) {
				r.OutputClickHouse.ExtraHTTPHeaders = append(r.OutputClickHouse.ExtraHTTPHeaders, extraHTTPHeaders1)
			} else {
				r.OutputClickHouse.ExtraHTTPHeaders[extraHTTPHeadersCount1].Name = extraHTTPHeaders1.Name
				r.OutputClickHouse.ExtraHTTPHeaders[extraHTTPHeadersCount1].Value = extraHTTPHeaders1.Value
			}
		}
		if resp.OutputClickHouse.FailedRequestLoggingMode != nil {
			r.OutputClickHouse.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputClickHouse.FailedRequestLoggingMode))
		} else {
			r.OutputClickHouse.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputClickHouse.FlushPeriodSec = types.Float64PointerValue(resp.OutputClickHouse.FlushPeriodSec)
		if resp.OutputClickHouse.Format != nil {
			r.OutputClickHouse.Format = types.StringValue(string(*resp.OutputClickHouse.Format))
		} else {
			r.OutputClickHouse.Format = types.StringNull()
		}
		r.OutputClickHouse.ID = types.StringPointerValue(resp.OutputClickHouse.ID)
		r.OutputClickHouse.LoginURL = types.StringPointerValue(resp.OutputClickHouse.LoginURL)
		if resp.OutputClickHouse.MappingType != nil {
			r.OutputClickHouse.MappingType = types.StringValue(string(*resp.OutputClickHouse.MappingType))
		} else {
			r.OutputClickHouse.MappingType = types.StringNull()
		}
		r.OutputClickHouse.MaxPayloadEvents = types.Float64PointerValue(resp.OutputClickHouse.MaxPayloadEvents)
		r.OutputClickHouse.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputClickHouse.MaxPayloadSizeKB)
		r.OutputClickHouse.OauthHeaders = []tfTypes.OutputClickHouseOauthHeader{}
		if len(r.OutputClickHouse.OauthHeaders) > len(resp.OutputClickHouse.OauthHeaders) {
			r.OutputClickHouse.OauthHeaders = r.OutputClickHouse.OauthHeaders[:len(resp.OutputClickHouse.OauthHeaders)]
		}
		for oauthHeadersCount, oauthHeadersItem := range resp.OutputClickHouse.OauthHeaders {
			var oauthHeaders tfTypes.OutputClickHouseOauthHeader
			oauthHeaders.Name = types.StringValue(oauthHeadersItem.Name)
			oauthHeaders.Value = types.StringValue(oauthHeadersItem.Value)
			if oauthHeadersCount+1 > len(r.OutputClickHouse.OauthHeaders) {
				r.OutputClickHouse.OauthHeaders = append(r.OutputClickHouse.OauthHeaders, oauthHeaders)
			} else {
				r.OutputClickHouse.OauthHeaders[oauthHeadersCount].Name = oauthHeaders.Name
				r.OutputClickHouse.OauthHeaders[oauthHeadersCount].Value = oauthHeaders.Value
			}
		}
		r.OutputClickHouse.OauthParams = []tfTypes.OutputClickHouseOauthParam{}
		if len(r.OutputClickHouse.OauthParams) > len(resp.OutputClickHouse.OauthParams) {
			r.OutputClickHouse.OauthParams = r.OutputClickHouse.OauthParams[:len(resp.OutputClickHouse.OauthParams)]
		}
		for oauthParamsCount, oauthParamsItem := range resp.OutputClickHouse.OauthParams {
			var oauthParams tfTypes.OutputClickHouseOauthParam
			oauthParams.Name = types.StringValue(oauthParamsItem.Name)
			oauthParams.Value = types.StringValue(oauthParamsItem.Value)
			if oauthParamsCount+1 > len(r.OutputClickHouse.OauthParams) {
				r.OutputClickHouse.OauthParams = append(r.OutputClickHouse.OauthParams, oauthParams)
			} else {
				r.OutputClickHouse.OauthParams[oauthParamsCount].Name = oauthParams.Name
				r.OutputClickHouse.OauthParams[oauthParamsCount].Value = oauthParams.Value
			}
		}
		if resp.OutputClickHouse.OnBackpressure != nil {
			r.OutputClickHouse.OnBackpressure = types.StringValue(string(*resp.OutputClickHouse.OnBackpressure))
		} else {
			r.OutputClickHouse.OnBackpressure = types.StringNull()
		}
		r.OutputClickHouse.Password = types.StringPointerValue(resp.OutputClickHouse.Password)
		r.OutputClickHouse.Pipeline = types.StringPointerValue(resp.OutputClickHouse.Pipeline)
		if resp.OutputClickHouse.PqCompress != nil {
			r.OutputClickHouse.PqCompress = types.StringValue(string(*resp.OutputClickHouse.PqCompress))
		} else {
			r.OutputClickHouse.PqCompress = types.StringNull()
		}
		if resp.OutputClickHouse.PqControls == nil {
			r.OutputClickHouse.PqControls = nil
		} else {
			r.OutputClickHouse.PqControls = &tfTypes.OutputClickHousePqControls{}
		}
		r.OutputClickHouse.PqMaxFileSize = types.StringPointerValue(resp.OutputClickHouse.PqMaxFileSize)
		r.OutputClickHouse.PqMaxSize = types.StringPointerValue(resp.OutputClickHouse.PqMaxSize)
		if resp.OutputClickHouse.PqMode != nil {
			r.OutputClickHouse.PqMode = types.StringValue(string(*resp.OutputClickHouse.PqMode))
		} else {
			r.OutputClickHouse.PqMode = types.StringNull()
		}
		if resp.OutputClickHouse.PqOnBackpressure != nil {
			r.OutputClickHouse.PqOnBackpressure = types.StringValue(string(*resp.OutputClickHouse.PqOnBackpressure))
		} else {
			r.OutputClickHouse.PqOnBackpressure = types.StringNull()
		}
		r.OutputClickHouse.PqPath = types.StringPointerValue(resp.OutputClickHouse.PqPath)
		r.OutputClickHouse.RejectUnauthorized = types.BoolPointerValue(resp.OutputClickHouse.RejectUnauthorized)
		r.OutputClickHouse.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputClickHouse.ResponseHonorRetryAfterHeader)
		r.OutputClickHouse.ResponseRetrySettings = []tfTypes.OutputClickHouseResponseRetrySetting{}
		if len(r.OutputClickHouse.ResponseRetrySettings) > len(resp.OutputClickHouse.ResponseRetrySettings) {
			r.OutputClickHouse.ResponseRetrySettings = r.OutputClickHouse.ResponseRetrySettings[:len(resp.OutputClickHouse.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount2, responseRetrySettingsItem2 := range resp.OutputClickHouse.ResponseRetrySettings {
			var responseRetrySettings2 tfTypes.OutputClickHouseResponseRetrySetting
			responseRetrySettings2.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem2.BackoffRate)
			responseRetrySettings2.HTTPStatus = types.Float64Value(responseRetrySettingsItem2.HTTPStatus)
			responseRetrySettings2.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem2.InitialBackoff)
			responseRetrySettings2.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem2.MaxBackoff)
			if responseRetrySettingsCount2+1 > len(r.OutputClickHouse.ResponseRetrySettings) {
				r.OutputClickHouse.ResponseRetrySettings = append(r.OutputClickHouse.ResponseRetrySettings, responseRetrySettings2)
			} else {
				r.OutputClickHouse.ResponseRetrySettings[responseRetrySettingsCount2].BackoffRate = responseRetrySettings2.BackoffRate
				r.OutputClickHouse.ResponseRetrySettings[responseRetrySettingsCount2].HTTPStatus = responseRetrySettings2.HTTPStatus
				r.OutputClickHouse.ResponseRetrySettings[responseRetrySettingsCount2].InitialBackoff = responseRetrySettings2.InitialBackoff
				r.OutputClickHouse.ResponseRetrySettings[responseRetrySettingsCount2].MaxBackoff = responseRetrySettings2.MaxBackoff
			}
		}
		r.OutputClickHouse.SafeHeaders = make([]types.String, 0, len(resp.OutputClickHouse.SafeHeaders))
		for _, v := range resp.OutputClickHouse.SafeHeaders {
			r.OutputClickHouse.SafeHeaders = append(r.OutputClickHouse.SafeHeaders, types.StringValue(v))
		}
		r.OutputClickHouse.Secret = types.StringPointerValue(resp.OutputClickHouse.Secret)
		r.OutputClickHouse.SecretParamName = types.StringPointerValue(resp.OutputClickHouse.SecretParamName)
		r.OutputClickHouse.SQLUsername = types.StringPointerValue(resp.OutputClickHouse.SQLUsername)
		r.OutputClickHouse.Streamtags = make([]types.String, 0, len(resp.OutputClickHouse.Streamtags))
		for _, v := range resp.OutputClickHouse.Streamtags {
			r.OutputClickHouse.Streamtags = append(r.OutputClickHouse.Streamtags, types.StringValue(v))
		}
		r.OutputClickHouse.SystemFields = make([]types.String, 0, len(resp.OutputClickHouse.SystemFields))
		for _, v := range resp.OutputClickHouse.SystemFields {
			r.OutputClickHouse.SystemFields = append(r.OutputClickHouse.SystemFields, types.StringValue(v))
		}
		r.OutputClickHouse.TableName = types.StringValue(resp.OutputClickHouse.TableName)
		r.OutputClickHouse.TextSecret = types.StringPointerValue(resp.OutputClickHouse.TextSecret)
		if resp.OutputClickHouse.TimeoutRetrySettings == nil {
			r.OutputClickHouse.TimeoutRetrySettings = nil
		} else {
			r.OutputClickHouse.TimeoutRetrySettings = &tfTypes.OutputClickHouseTimeoutRetrySettings{}
			r.OutputClickHouse.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputClickHouse.TimeoutRetrySettings.BackoffRate)
			r.OutputClickHouse.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputClickHouse.TimeoutRetrySettings.InitialBackoff)
			r.OutputClickHouse.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputClickHouse.TimeoutRetrySettings.MaxBackoff)
			r.OutputClickHouse.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputClickHouse.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputClickHouse.TimeoutSec = types.Float64PointerValue(resp.OutputClickHouse.TimeoutSec)
		if resp.OutputClickHouse.TLS == nil {
			r.OutputClickHouse.TLS = nil
		} else {
			r.OutputClickHouse.TLS = &tfTypes.OutputClickHouseTLSSettingsClientSide{}
			r.OutputClickHouse.TLS.CaPath = types.StringPointerValue(resp.OutputClickHouse.TLS.CaPath)
			r.OutputClickHouse.TLS.CertificateName = types.StringPointerValue(resp.OutputClickHouse.TLS.CertificateName)
			r.OutputClickHouse.TLS.CertPath = types.StringPointerValue(resp.OutputClickHouse.TLS.CertPath)
			r.OutputClickHouse.TLS.Disabled = types.BoolPointerValue(resp.OutputClickHouse.TLS.Disabled)
			if resp.OutputClickHouse.TLS.MaxVersion != nil {
				r.OutputClickHouse.TLS.MaxVersion = types.StringValue(string(*resp.OutputClickHouse.TLS.MaxVersion))
			} else {
				r.OutputClickHouse.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputClickHouse.TLS.MinVersion != nil {
				r.OutputClickHouse.TLS.MinVersion = types.StringValue(string(*resp.OutputClickHouse.TLS.MinVersion))
			} else {
				r.OutputClickHouse.TLS.MinVersion = types.StringNull()
			}
			r.OutputClickHouse.TLS.Passphrase = types.StringPointerValue(resp.OutputClickHouse.TLS.Passphrase)
			r.OutputClickHouse.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputClickHouse.TLS.PrivKeyPath)
			r.OutputClickHouse.TLS.Servername = types.StringPointerValue(resp.OutputClickHouse.TLS.Servername)
		}
		r.OutputClickHouse.Token = types.StringPointerValue(resp.OutputClickHouse.Token)
		r.OutputClickHouse.TokenAttributeName = types.StringPointerValue(resp.OutputClickHouse.TokenAttributeName)
		r.OutputClickHouse.TokenTimeoutSecs = types.Float64PointerValue(resp.OutputClickHouse.TokenTimeoutSecs)
		if resp.OutputClickHouse.Type != nil {
			r.OutputClickHouse.Type = types.StringValue(string(*resp.OutputClickHouse.Type))
		} else {
			r.OutputClickHouse.Type = types.StringNull()
		}
		r.OutputClickHouse.URL = types.StringValue(resp.OutputClickHouse.URL)
		r.OutputClickHouse.Username = types.StringPointerValue(resp.OutputClickHouse.Username)
		r.OutputClickHouse.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputClickHouse.UseRoundRobinDNS)
		r.OutputClickHouse.WaitForAsyncInserts = types.BoolPointerValue(resp.OutputClickHouse.WaitForAsyncInserts)
	}
	if resp.OutputCloudwatch != nil {
		r.OutputCloudwatch = &tfTypes.OutputCloudwatch{}
		r.OutputCloudwatch.AssumeRoleArn = types.StringPointerValue(resp.OutputCloudwatch.AssumeRoleArn)
		r.OutputCloudwatch.AssumeRoleExternalID = types.StringPointerValue(resp.OutputCloudwatch.AssumeRoleExternalID)
		r.OutputCloudwatch.AwsAPIKey = types.StringPointerValue(resp.OutputCloudwatch.AwsAPIKey)
		if resp.OutputCloudwatch.AwsAuthenticationMethod != nil {
			r.OutputCloudwatch.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputCloudwatch.AwsAuthenticationMethod))
		} else {
			r.OutputCloudwatch.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputCloudwatch.AwsSecret = types.StringPointerValue(resp.OutputCloudwatch.AwsSecret)
		r.OutputCloudwatch.AwsSecretKey = types.StringPointerValue(resp.OutputCloudwatch.AwsSecretKey)
		r.OutputCloudwatch.Description = types.StringPointerValue(resp.OutputCloudwatch.Description)
		r.OutputCloudwatch.DurationSeconds = types.Float64PointerValue(resp.OutputCloudwatch.DurationSeconds)
		r.OutputCloudwatch.EnableAssumeRole = types.BoolPointerValue(resp.OutputCloudwatch.EnableAssumeRole)
		r.OutputCloudwatch.Endpoint = types.StringPointerValue(resp.OutputCloudwatch.Endpoint)
		r.OutputCloudwatch.Environment = types.StringPointerValue(resp.OutputCloudwatch.Environment)
		r.OutputCloudwatch.FlushPeriodSec = types.Float64PointerValue(resp.OutputCloudwatch.FlushPeriodSec)
		r.OutputCloudwatch.ID = types.StringPointerValue(resp.OutputCloudwatch.ID)
		r.OutputCloudwatch.LogGroupName = types.StringValue(resp.OutputCloudwatch.LogGroupName)
		r.OutputCloudwatch.LogStreamName = types.StringValue(resp.OutputCloudwatch.LogStreamName)
		r.OutputCloudwatch.MaxQueueSize = types.Float64PointerValue(resp.OutputCloudwatch.MaxQueueSize)
		r.OutputCloudwatch.MaxRecordSizeKB = types.Float64PointerValue(resp.OutputCloudwatch.MaxRecordSizeKB)
		if resp.OutputCloudwatch.OnBackpressure != nil {
			r.OutputCloudwatch.OnBackpressure = types.StringValue(string(*resp.OutputCloudwatch.OnBackpressure))
		} else {
			r.OutputCloudwatch.OnBackpressure = types.StringNull()
		}
		r.OutputCloudwatch.Pipeline = types.StringPointerValue(resp.OutputCloudwatch.Pipeline)
		if resp.OutputCloudwatch.PqCompress != nil {
			r.OutputCloudwatch.PqCompress = types.StringValue(string(*resp.OutputCloudwatch.PqCompress))
		} else {
			r.OutputCloudwatch.PqCompress = types.StringNull()
		}
		if resp.OutputCloudwatch.PqControls == nil {
			r.OutputCloudwatch.PqControls = nil
		} else {
			r.OutputCloudwatch.PqControls = &tfTypes.OutputCloudwatchPqControls{}
		}
		r.OutputCloudwatch.PqMaxFileSize = types.StringPointerValue(resp.OutputCloudwatch.PqMaxFileSize)
		r.OutputCloudwatch.PqMaxSize = types.StringPointerValue(resp.OutputCloudwatch.PqMaxSize)
		if resp.OutputCloudwatch.PqMode != nil {
			r.OutputCloudwatch.PqMode = types.StringValue(string(*resp.OutputCloudwatch.PqMode))
		} else {
			r.OutputCloudwatch.PqMode = types.StringNull()
		}
		if resp.OutputCloudwatch.PqOnBackpressure != nil {
			r.OutputCloudwatch.PqOnBackpressure = types.StringValue(string(*resp.OutputCloudwatch.PqOnBackpressure))
		} else {
			r.OutputCloudwatch.PqOnBackpressure = types.StringNull()
		}
		r.OutputCloudwatch.PqPath = types.StringPointerValue(resp.OutputCloudwatch.PqPath)
		r.OutputCloudwatch.Region = types.StringValue(resp.OutputCloudwatch.Region)
		r.OutputCloudwatch.RejectUnauthorized = types.BoolPointerValue(resp.OutputCloudwatch.RejectUnauthorized)
		r.OutputCloudwatch.ReuseConnections = types.BoolPointerValue(resp.OutputCloudwatch.ReuseConnections)
		r.OutputCloudwatch.Streamtags = make([]types.String, 0, len(resp.OutputCloudwatch.Streamtags))
		for _, v := range resp.OutputCloudwatch.Streamtags {
			r.OutputCloudwatch.Streamtags = append(r.OutputCloudwatch.Streamtags, types.StringValue(v))
		}
		r.OutputCloudwatch.SystemFields = make([]types.String, 0, len(resp.OutputCloudwatch.SystemFields))
		for _, v := range resp.OutputCloudwatch.SystemFields {
			r.OutputCloudwatch.SystemFields = append(r.OutputCloudwatch.SystemFields, types.StringValue(v))
		}
		if resp.OutputCloudwatch.Type != nil {
			r.OutputCloudwatch.Type = types.StringValue(string(*resp.OutputCloudwatch.Type))
		} else {
			r.OutputCloudwatch.Type = types.StringNull()
		}
	}
	if resp.OutputConfluentCloud != nil {
		r.OutputConfluentCloud = &tfTypes.OutputConfluentCloud{}
		if resp.OutputConfluentCloud.Ack != nil {
			r.OutputConfluentCloud.Ack = types.Int64Value(int64(*resp.OutputConfluentCloud.Ack))
		} else {
			r.OutputConfluentCloud.Ack = types.Int64Null()
		}
		r.OutputConfluentCloud.AuthenticationTimeout = types.Float64PointerValue(resp.OutputConfluentCloud.AuthenticationTimeout)
		r.OutputConfluentCloud.BackoffRate = types.Float64PointerValue(resp.OutputConfluentCloud.BackoffRate)
		r.OutputConfluentCloud.Brokers = make([]types.String, 0, len(resp.OutputConfluentCloud.Brokers))
		for _, v := range resp.OutputConfluentCloud.Brokers {
			r.OutputConfluentCloud.Brokers = append(r.OutputConfluentCloud.Brokers, types.StringValue(v))
		}
		if resp.OutputConfluentCloud.Compression != nil {
			r.OutputConfluentCloud.Compression = types.StringValue(string(*resp.OutputConfluentCloud.Compression))
		} else {
			r.OutputConfluentCloud.Compression = types.StringNull()
		}
		r.OutputConfluentCloud.ConnectionTimeout = types.Float64PointerValue(resp.OutputConfluentCloud.ConnectionTimeout)
		r.OutputConfluentCloud.Description = types.StringPointerValue(resp.OutputConfluentCloud.Description)
		r.OutputConfluentCloud.Environment = types.StringPointerValue(resp.OutputConfluentCloud.Environment)
		r.OutputConfluentCloud.FlushEventCount = types.Float64PointerValue(resp.OutputConfluentCloud.FlushEventCount)
		r.OutputConfluentCloud.FlushPeriodSec = types.Float64PointerValue(resp.OutputConfluentCloud.FlushPeriodSec)
		if resp.OutputConfluentCloud.Format != nil {
			r.OutputConfluentCloud.Format = types.StringValue(string(*resp.OutputConfluentCloud.Format))
		} else {
			r.OutputConfluentCloud.Format = types.StringNull()
		}
		r.OutputConfluentCloud.ID = types.StringPointerValue(resp.OutputConfluentCloud.ID)
		r.OutputConfluentCloud.InitialBackoff = types.Float64PointerValue(resp.OutputConfluentCloud.InitialBackoff)
		if resp.OutputConfluentCloud.KafkaSchemaRegistry == nil {
			r.OutputConfluentCloud.KafkaSchemaRegistry = nil
		} else {
			r.OutputConfluentCloud.KafkaSchemaRegistry = &tfTypes.OutputConfluentCloudKafkaSchemaRegistryAuthentication{}
			if resp.OutputConfluentCloud.KafkaSchemaRegistry.Auth == nil {
				r.OutputConfluentCloud.KafkaSchemaRegistry.Auth = nil
			} else {
				r.OutputConfluentCloud.KafkaSchemaRegistry.Auth = &tfTypes.OutputConfluentCloudAuth{}
				r.OutputConfluentCloud.KafkaSchemaRegistry.Auth.CredentialsSecret = types.StringPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.Auth.CredentialsSecret)
				r.OutputConfluentCloud.KafkaSchemaRegistry.Auth.Disabled = types.BoolPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.Auth.Disabled)
			}
			r.OutputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout = types.Float64PointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout)
			r.OutputConfluentCloud.KafkaSchemaRegistry.DefaultKeySchemaID = types.Float64PointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.DefaultKeySchemaID)
			r.OutputConfluentCloud.KafkaSchemaRegistry.DefaultValueSchemaID = types.Float64PointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.DefaultValueSchemaID)
			r.OutputConfluentCloud.KafkaSchemaRegistry.Disabled = types.BoolPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.Disabled)
			r.OutputConfluentCloud.KafkaSchemaRegistry.MaxRetries = types.Float64PointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.MaxRetries)
			r.OutputConfluentCloud.KafkaSchemaRegistry.RequestTimeout = types.Float64PointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.RequestTimeout)
			r.OutputConfluentCloud.KafkaSchemaRegistry.SchemaRegistryURL = types.StringPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.SchemaRegistryURL)
			if resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS == nil {
				r.OutputConfluentCloud.KafkaSchemaRegistry.TLS = nil
			} else {
				r.OutputConfluentCloud.KafkaSchemaRegistry.TLS = &tfTypes.OutputConfluentCloudKafkaSchemaRegistryTLSSettingsClientSide{}
				r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CaPath = types.StringPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CaPath)
				r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CertificateName = types.StringPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CertificateName)
				r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CertPath = types.StringPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CertPath)
				r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Disabled = types.BoolPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Disabled)
				if resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion != nil {
					r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion = types.StringValue(string(*resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion))
				} else {
					r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion = types.StringNull()
				}
				if resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion != nil {
					r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion = types.StringValue(string(*resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion))
				} else {
					r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion = types.StringNull()
				}
				r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Passphrase = types.StringPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Passphrase)
				r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.PrivKeyPath)
				r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.RejectUnauthorized)
				r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Servername = types.StringPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Servername)
			}
		}
		r.OutputConfluentCloud.MaxBackOff = types.Float64PointerValue(resp.OutputConfluentCloud.MaxBackOff)
		r.OutputConfluentCloud.MaxRecordSizeKB = types.Float64PointerValue(resp.OutputConfluentCloud.MaxRecordSizeKB)
		r.OutputConfluentCloud.MaxRetries = types.Float64PointerValue(resp.OutputConfluentCloud.MaxRetries)
		if resp.OutputConfluentCloud.OnBackpressure != nil {
			r.OutputConfluentCloud.OnBackpressure = types.StringValue(string(*resp.OutputConfluentCloud.OnBackpressure))
		} else {
			r.OutputConfluentCloud.OnBackpressure = types.StringNull()
		}
		r.OutputConfluentCloud.Pipeline = types.StringPointerValue(resp.OutputConfluentCloud.Pipeline)
		if resp.OutputConfluentCloud.PqCompress != nil {
			r.OutputConfluentCloud.PqCompress = types.StringValue(string(*resp.OutputConfluentCloud.PqCompress))
		} else {
			r.OutputConfluentCloud.PqCompress = types.StringNull()
		}
		if resp.OutputConfluentCloud.PqControls == nil {
			r.OutputConfluentCloud.PqControls = nil
		} else {
			r.OutputConfluentCloud.PqControls = &tfTypes.OutputConfluentCloudPqControls{}
		}
		r.OutputConfluentCloud.PqMaxFileSize = types.StringPointerValue(resp.OutputConfluentCloud.PqMaxFileSize)
		r.OutputConfluentCloud.PqMaxSize = types.StringPointerValue(resp.OutputConfluentCloud.PqMaxSize)
		if resp.OutputConfluentCloud.PqMode != nil {
			r.OutputConfluentCloud.PqMode = types.StringValue(string(*resp.OutputConfluentCloud.PqMode))
		} else {
			r.OutputConfluentCloud.PqMode = types.StringNull()
		}
		if resp.OutputConfluentCloud.PqOnBackpressure != nil {
			r.OutputConfluentCloud.PqOnBackpressure = types.StringValue(string(*resp.OutputConfluentCloud.PqOnBackpressure))
		} else {
			r.OutputConfluentCloud.PqOnBackpressure = types.StringNull()
		}
		r.OutputConfluentCloud.PqPath = types.StringPointerValue(resp.OutputConfluentCloud.PqPath)
		r.OutputConfluentCloud.ProtobufLibraryID = types.StringPointerValue(resp.OutputConfluentCloud.ProtobufLibraryID)
		r.OutputConfluentCloud.ReauthenticationThreshold = types.Float64PointerValue(resp.OutputConfluentCloud.ReauthenticationThreshold)
		r.OutputConfluentCloud.RequestTimeout = types.Float64PointerValue(resp.OutputConfluentCloud.RequestTimeout)
		if resp.OutputConfluentCloud.Sasl == nil {
			r.OutputConfluentCloud.Sasl = nil
		} else {
			r.OutputConfluentCloud.Sasl = &tfTypes.OutputConfluentCloudAuthentication{}
			r.OutputConfluentCloud.Sasl.Disabled = types.BoolPointerValue(resp.OutputConfluentCloud.Sasl.Disabled)
			if resp.OutputConfluentCloud.Sasl.Mechanism != nil {
				r.OutputConfluentCloud.Sasl.Mechanism = types.StringValue(string(*resp.OutputConfluentCloud.Sasl.Mechanism))
			} else {
				r.OutputConfluentCloud.Sasl.Mechanism = types.StringNull()
			}
		}
		r.OutputConfluentCloud.Streamtags = make([]types.String, 0, len(resp.OutputConfluentCloud.Streamtags))
		for _, v := range resp.OutputConfluentCloud.Streamtags {
			r.OutputConfluentCloud.Streamtags = append(r.OutputConfluentCloud.Streamtags, types.StringValue(v))
		}
		r.OutputConfluentCloud.SystemFields = make([]types.String, 0, len(resp.OutputConfluentCloud.SystemFields))
		for _, v := range resp.OutputConfluentCloud.SystemFields {
			r.OutputConfluentCloud.SystemFields = append(r.OutputConfluentCloud.SystemFields, types.StringValue(v))
		}
		if resp.OutputConfluentCloud.TLS == nil {
			r.OutputConfluentCloud.TLS = nil
		} else {
			r.OutputConfluentCloud.TLS = &tfTypes.OutputConfluentCloudTLSSettingsClientSide{}
			r.OutputConfluentCloud.TLS.CaPath = types.StringPointerValue(resp.OutputConfluentCloud.TLS.CaPath)
			r.OutputConfluentCloud.TLS.CertificateName = types.StringPointerValue(resp.OutputConfluentCloud.TLS.CertificateName)
			r.OutputConfluentCloud.TLS.CertPath = types.StringPointerValue(resp.OutputConfluentCloud.TLS.CertPath)
			r.OutputConfluentCloud.TLS.Disabled = types.BoolPointerValue(resp.OutputConfluentCloud.TLS.Disabled)
			if resp.OutputConfluentCloud.TLS.MaxVersion != nil {
				r.OutputConfluentCloud.TLS.MaxVersion = types.StringValue(string(*resp.OutputConfluentCloud.TLS.MaxVersion))
			} else {
				r.OutputConfluentCloud.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputConfluentCloud.TLS.MinVersion != nil {
				r.OutputConfluentCloud.TLS.MinVersion = types.StringValue(string(*resp.OutputConfluentCloud.TLS.MinVersion))
			} else {
				r.OutputConfluentCloud.TLS.MinVersion = types.StringNull()
			}
			r.OutputConfluentCloud.TLS.Passphrase = types.StringPointerValue(resp.OutputConfluentCloud.TLS.Passphrase)
			r.OutputConfluentCloud.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputConfluentCloud.TLS.PrivKeyPath)
			r.OutputConfluentCloud.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputConfluentCloud.TLS.RejectUnauthorized)
			r.OutputConfluentCloud.TLS.Servername = types.StringPointerValue(resp.OutputConfluentCloud.TLS.Servername)
		}
		r.OutputConfluentCloud.Topic = types.StringValue(resp.OutputConfluentCloud.Topic)
		if resp.OutputConfluentCloud.Type != nil {
			r.OutputConfluentCloud.Type = types.StringValue(string(*resp.OutputConfluentCloud.Type))
		} else {
			r.OutputConfluentCloud.Type = types.StringNull()
		}
	}
	if resp.OutputCriblHTTP != nil {
		r.OutputCriblHTTP = &tfTypes.OutputCriblHTTP{}
		if resp.OutputCriblHTTP.Compression != nil {
			r.OutputCriblHTTP.Compression = types.StringValue(string(*resp.OutputCriblHTTP.Compression))
		} else {
			r.OutputCriblHTTP.Compression = types.StringNull()
		}
		r.OutputCriblHTTP.Concurrency = types.Float64PointerValue(resp.OutputCriblHTTP.Concurrency)
		r.OutputCriblHTTP.Description = types.StringPointerValue(resp.OutputCriblHTTP.Description)
		r.OutputCriblHTTP.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputCriblHTTP.DNSResolvePeriodSec)
		r.OutputCriblHTTP.Environment = types.StringPointerValue(resp.OutputCriblHTTP.Environment)
		r.OutputCriblHTTP.ExcludeFields = make([]types.String, 0, len(resp.OutputCriblHTTP.ExcludeFields))
		for _, v := range resp.OutputCriblHTTP.ExcludeFields {
			r.OutputCriblHTTP.ExcludeFields = append(r.OutputCriblHTTP.ExcludeFields, types.StringValue(v))
		}
		r.OutputCriblHTTP.ExcludeSelf = types.BoolPointerValue(resp.OutputCriblHTTP.ExcludeSelf)
		r.OutputCriblHTTP.ExtraHTTPHeaders = []tfTypes.OutputCriblHTTPExtraHTTPHeader{}
		if len(r.OutputCriblHTTP.ExtraHTTPHeaders) > len(resp.OutputCriblHTTP.ExtraHTTPHeaders) {
			r.OutputCriblHTTP.ExtraHTTPHeaders = r.OutputCriblHTTP.ExtraHTTPHeaders[:len(resp.OutputCriblHTTP.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount2, extraHTTPHeadersItem2 := range resp.OutputCriblHTTP.ExtraHTTPHeaders {
			var extraHTTPHeaders2 tfTypes.OutputCriblHTTPExtraHTTPHeader
			extraHTTPHeaders2.Name = types.StringPointerValue(extraHTTPHeadersItem2.Name)
			extraHTTPHeaders2.Value = types.StringValue(extraHTTPHeadersItem2.Value)
			if extraHTTPHeadersCount2+1 > len(r.OutputCriblHTTP.ExtraHTTPHeaders) {
				r.OutputCriblHTTP.ExtraHTTPHeaders = append(r.OutputCriblHTTP.ExtraHTTPHeaders, extraHTTPHeaders2)
			} else {
				r.OutputCriblHTTP.ExtraHTTPHeaders[extraHTTPHeadersCount2].Name = extraHTTPHeaders2.Name
				r.OutputCriblHTTP.ExtraHTTPHeaders[extraHTTPHeadersCount2].Value = extraHTTPHeaders2.Value
			}
		}
		if resp.OutputCriblHTTP.FailedRequestLoggingMode != nil {
			r.OutputCriblHTTP.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputCriblHTTP.FailedRequestLoggingMode))
		} else {
			r.OutputCriblHTTP.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputCriblHTTP.FlushPeriodSec = types.Float64PointerValue(resp.OutputCriblHTTP.FlushPeriodSec)
		r.OutputCriblHTTP.ID = types.StringValue(resp.OutputCriblHTTP.ID)
		r.OutputCriblHTTP.LoadBalanced = types.BoolPointerValue(resp.OutputCriblHTTP.LoadBalanced)
		r.OutputCriblHTTP.LoadBalanceStatsPeriodSec = types.Float64PointerValue(resp.OutputCriblHTTP.LoadBalanceStatsPeriodSec)
		r.OutputCriblHTTP.MaxPayloadEvents = types.Float64PointerValue(resp.OutputCriblHTTP.MaxPayloadEvents)
		r.OutputCriblHTTP.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputCriblHTTP.MaxPayloadSizeKB)
		if resp.OutputCriblHTTP.OnBackpressure != nil {
			r.OutputCriblHTTP.OnBackpressure = types.StringValue(string(*resp.OutputCriblHTTP.OnBackpressure))
		} else {
			r.OutputCriblHTTP.OnBackpressure = types.StringNull()
		}
		r.OutputCriblHTTP.Pipeline = types.StringPointerValue(resp.OutputCriblHTTP.Pipeline)
		if resp.OutputCriblHTTP.PqCompress != nil {
			r.OutputCriblHTTP.PqCompress = types.StringValue(string(*resp.OutputCriblHTTP.PqCompress))
		} else {
			r.OutputCriblHTTP.PqCompress = types.StringNull()
		}
		if resp.OutputCriblHTTP.PqControls == nil {
			r.OutputCriblHTTP.PqControls = nil
		} else {
			r.OutputCriblHTTP.PqControls = &tfTypes.OutputCriblHTTPPqControls{}
		}
		r.OutputCriblHTTP.PqMaxFileSize = types.StringPointerValue(resp.OutputCriblHTTP.PqMaxFileSize)
		r.OutputCriblHTTP.PqMaxSize = types.StringPointerValue(resp.OutputCriblHTTP.PqMaxSize)
		if resp.OutputCriblHTTP.PqMode != nil {
			r.OutputCriblHTTP.PqMode = types.StringValue(string(*resp.OutputCriblHTTP.PqMode))
		} else {
			r.OutputCriblHTTP.PqMode = types.StringNull()
		}
		if resp.OutputCriblHTTP.PqOnBackpressure != nil {
			r.OutputCriblHTTP.PqOnBackpressure = types.StringValue(string(*resp.OutputCriblHTTP.PqOnBackpressure))
		} else {
			r.OutputCriblHTTP.PqOnBackpressure = types.StringNull()
		}
		r.OutputCriblHTTP.PqPath = types.StringPointerValue(resp.OutputCriblHTTP.PqPath)
		r.OutputCriblHTTP.RejectUnauthorized = types.BoolPointerValue(resp.OutputCriblHTTP.RejectUnauthorized)
		r.OutputCriblHTTP.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputCriblHTTP.ResponseHonorRetryAfterHeader)
		r.OutputCriblHTTP.ResponseRetrySettings = []tfTypes.OutputCriblHTTPResponseRetrySetting{}
		if len(r.OutputCriblHTTP.ResponseRetrySettings) > len(resp.OutputCriblHTTP.ResponseRetrySettings) {
			r.OutputCriblHTTP.ResponseRetrySettings = r.OutputCriblHTTP.ResponseRetrySettings[:len(resp.OutputCriblHTTP.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount3, responseRetrySettingsItem3 := range resp.OutputCriblHTTP.ResponseRetrySettings {
			var responseRetrySettings3 tfTypes.OutputCriblHTTPResponseRetrySetting
			responseRetrySettings3.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem3.BackoffRate)
			responseRetrySettings3.HTTPStatus = types.Float64Value(responseRetrySettingsItem3.HTTPStatus)
			responseRetrySettings3.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem3.InitialBackoff)
			responseRetrySettings3.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem3.MaxBackoff)
			if responseRetrySettingsCount3+1 > len(r.OutputCriblHTTP.ResponseRetrySettings) {
				r.OutputCriblHTTP.ResponseRetrySettings = append(r.OutputCriblHTTP.ResponseRetrySettings, responseRetrySettings3)
			} else {
				r.OutputCriblHTTP.ResponseRetrySettings[responseRetrySettingsCount3].BackoffRate = responseRetrySettings3.BackoffRate
				r.OutputCriblHTTP.ResponseRetrySettings[responseRetrySettingsCount3].HTTPStatus = responseRetrySettings3.HTTPStatus
				r.OutputCriblHTTP.ResponseRetrySettings[responseRetrySettingsCount3].InitialBackoff = responseRetrySettings3.InitialBackoff
				r.OutputCriblHTTP.ResponseRetrySettings[responseRetrySettingsCount3].MaxBackoff = responseRetrySettings3.MaxBackoff
			}
		}
		r.OutputCriblHTTP.SafeHeaders = make([]types.String, 0, len(resp.OutputCriblHTTP.SafeHeaders))
		for _, v := range resp.OutputCriblHTTP.SafeHeaders {
			r.OutputCriblHTTP.SafeHeaders = append(r.OutputCriblHTTP.SafeHeaders, types.StringValue(v))
		}
		r.OutputCriblHTTP.Streamtags = make([]types.String, 0, len(resp.OutputCriblHTTP.Streamtags))
		for _, v := range resp.OutputCriblHTTP.Streamtags {
			r.OutputCriblHTTP.Streamtags = append(r.OutputCriblHTTP.Streamtags, types.StringValue(v))
		}
		r.OutputCriblHTTP.SystemFields = make([]types.String, 0, len(resp.OutputCriblHTTP.SystemFields))
		for _, v := range resp.OutputCriblHTTP.SystemFields {
			r.OutputCriblHTTP.SystemFields = append(r.OutputCriblHTTP.SystemFields, types.StringValue(v))
		}
		if resp.OutputCriblHTTP.TimeoutRetrySettings == nil {
			r.OutputCriblHTTP.TimeoutRetrySettings = nil
		} else {
			r.OutputCriblHTTP.TimeoutRetrySettings = &tfTypes.OutputCriblHTTPTimeoutRetrySettings{}
			r.OutputCriblHTTP.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputCriblHTTP.TimeoutRetrySettings.BackoffRate)
			r.OutputCriblHTTP.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputCriblHTTP.TimeoutRetrySettings.InitialBackoff)
			r.OutputCriblHTTP.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputCriblHTTP.TimeoutRetrySettings.MaxBackoff)
			r.OutputCriblHTTP.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputCriblHTTP.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputCriblHTTP.TimeoutSec = types.Float64PointerValue(resp.OutputCriblHTTP.TimeoutSec)
		if resp.OutputCriblHTTP.TLS == nil {
			r.OutputCriblHTTP.TLS = nil
		} else {
			r.OutputCriblHTTP.TLS = &tfTypes.OutputCriblHTTPTLSSettingsClientSide{}
			r.OutputCriblHTTP.TLS.CaPath = types.StringPointerValue(resp.OutputCriblHTTP.TLS.CaPath)
			r.OutputCriblHTTP.TLS.CertificateName = types.StringPointerValue(resp.OutputCriblHTTP.TLS.CertificateName)
			r.OutputCriblHTTP.TLS.CertPath = types.StringPointerValue(resp.OutputCriblHTTP.TLS.CertPath)
			r.OutputCriblHTTP.TLS.Disabled = types.BoolPointerValue(resp.OutputCriblHTTP.TLS.Disabled)
			if resp.OutputCriblHTTP.TLS.MaxVersion != nil {
				r.OutputCriblHTTP.TLS.MaxVersion = types.StringValue(string(*resp.OutputCriblHTTP.TLS.MaxVersion))
			} else {
				r.OutputCriblHTTP.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputCriblHTTP.TLS.MinVersion != nil {
				r.OutputCriblHTTP.TLS.MinVersion = types.StringValue(string(*resp.OutputCriblHTTP.TLS.MinVersion))
			} else {
				r.OutputCriblHTTP.TLS.MinVersion = types.StringNull()
			}
			r.OutputCriblHTTP.TLS.Passphrase = types.StringPointerValue(resp.OutputCriblHTTP.TLS.Passphrase)
			r.OutputCriblHTTP.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputCriblHTTP.TLS.PrivKeyPath)
			r.OutputCriblHTTP.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputCriblHTTP.TLS.RejectUnauthorized)
			r.OutputCriblHTTP.TLS.Servername = types.StringPointerValue(resp.OutputCriblHTTP.TLS.Servername)
		}
		r.OutputCriblHTTP.TokenTTLMinutes = types.Float64PointerValue(resp.OutputCriblHTTP.TokenTTLMinutes)
		r.OutputCriblHTTP.Type = types.StringValue(string(resp.OutputCriblHTTP.Type))
		r.OutputCriblHTTP.URL = types.StringPointerValue(resp.OutputCriblHTTP.URL)
		r.OutputCriblHTTP.Urls = []tfTypes.OutputCriblHTTPURL{}
		if len(r.OutputCriblHTTP.Urls) > len(resp.OutputCriblHTTP.Urls) {
			r.OutputCriblHTTP.Urls = r.OutputCriblHTTP.Urls[:len(resp.OutputCriblHTTP.Urls)]
		}
		for urlsCount, urlsItem := range resp.OutputCriblHTTP.Urls {
			var urls tfTypes.OutputCriblHTTPURL
			urls.URL = types.StringValue(urlsItem.URL)
			urls.Weight = types.Float64PointerValue(urlsItem.Weight)
			if urlsCount+1 > len(r.OutputCriblHTTP.Urls) {
				r.OutputCriblHTTP.Urls = append(r.OutputCriblHTTP.Urls, urls)
			} else {
				r.OutputCriblHTTP.Urls[urlsCount].URL = urls.URL
				r.OutputCriblHTTP.Urls[urlsCount].Weight = urls.Weight
			}
		}
		r.OutputCriblHTTP.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputCriblHTTP.UseRoundRobinDNS)
	}
	if resp.OutputCriblLake != nil {
		r.OutputCriblLake = &tfTypes.OutputCriblLake{}
		r.OutputCriblLake.AddIDToStagePath = types.BoolPointerValue(resp.OutputCriblLake.AddIDToStagePath)
		r.OutputCriblLake.AssumeRoleArn = types.StringPointerValue(resp.OutputCriblLake.AssumeRoleArn)
		r.OutputCriblLake.AssumeRoleExternalID = types.StringPointerValue(resp.OutputCriblLake.AssumeRoleExternalID)
		if resp.OutputCriblLake.AwsAuthenticationMethod != nil {
			r.OutputCriblLake.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputCriblLake.AwsAuthenticationMethod))
		} else {
			r.OutputCriblLake.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputCriblLake.AwsSecretKey = types.StringPointerValue(resp.OutputCriblLake.AwsSecretKey)
		r.OutputCriblLake.BaseFileName = types.StringPointerValue(resp.OutputCriblLake.BaseFileName)
		r.OutputCriblLake.Bucket = types.StringPointerValue(resp.OutputCriblLake.Bucket)
		r.OutputCriblLake.DeadletterEnabled = types.BoolPointerValue(resp.OutputCriblLake.DeadletterEnabled)
		r.OutputCriblLake.DeadletterPath = types.StringPointerValue(resp.OutputCriblLake.DeadletterPath)
		r.OutputCriblLake.Description = types.StringPointerValue(resp.OutputCriblLake.Description)
		r.OutputCriblLake.DestPath = types.StringPointerValue(resp.OutputCriblLake.DestPath)
		r.OutputCriblLake.DurationSeconds = types.Float64PointerValue(resp.OutputCriblLake.DurationSeconds)
		r.OutputCriblLake.EmptyDirCleanupSec = types.Float64PointerValue(resp.OutputCriblLake.EmptyDirCleanupSec)
		r.OutputCriblLake.EnableAssumeRole = types.BoolPointerValue(resp.OutputCriblLake.EnableAssumeRole)
		r.OutputCriblLake.Endpoint = types.StringPointerValue(resp.OutputCriblLake.Endpoint)
		r.OutputCriblLake.Environment = types.StringPointerValue(resp.OutputCriblLake.Environment)
		r.OutputCriblLake.FileNameSuffix = types.StringPointerValue(resp.OutputCriblLake.FileNameSuffix)
		if resp.OutputCriblLake.Format != nil {
			r.OutputCriblLake.Format = types.StringValue(string(*resp.OutputCriblLake.Format))
		} else {
			r.OutputCriblLake.Format = types.StringNull()
		}
		r.OutputCriblLake.HeaderLine = types.StringPointerValue(resp.OutputCriblLake.HeaderLine)
		r.OutputCriblLake.ID = types.StringValue(resp.OutputCriblLake.ID)
		r.OutputCriblLake.KmsKeyID = types.StringPointerValue(resp.OutputCriblLake.KmsKeyID)
		r.OutputCriblLake.MaxClosingFilesToBackpressure = types.Float64PointerValue(resp.OutputCriblLake.MaxClosingFilesToBackpressure)
		r.OutputCriblLake.MaxConcurrentFileParts = types.Float64PointerValue(resp.OutputCriblLake.MaxConcurrentFileParts)
		r.OutputCriblLake.MaxFileIdleTimeSec = types.Float64PointerValue(resp.OutputCriblLake.MaxFileIdleTimeSec)
		r.OutputCriblLake.MaxFileOpenTimeSec = types.Float64PointerValue(resp.OutputCriblLake.MaxFileOpenTimeSec)
		r.OutputCriblLake.MaxFileSizeMB = types.Float64PointerValue(resp.OutputCriblLake.MaxFileSizeMB)
		r.OutputCriblLake.MaxOpenFiles = types.Float64PointerValue(resp.OutputCriblLake.MaxOpenFiles)
		r.OutputCriblLake.MaxRetryNum = types.Float64PointerValue(resp.OutputCriblLake.MaxRetryNum)
		if resp.OutputCriblLake.ObjectACL != nil {
			r.OutputCriblLake.ObjectACL = types.StringValue(string(*resp.OutputCriblLake.ObjectACL))
		} else {
			r.OutputCriblLake.ObjectACL = types.StringNull()
		}
		if resp.OutputCriblLake.OnBackpressure != nil {
			r.OutputCriblLake.OnBackpressure = types.StringValue(string(*resp.OutputCriblLake.OnBackpressure))
		} else {
			r.OutputCriblLake.OnBackpressure = types.StringNull()
		}
		if resp.OutputCriblLake.OnDiskFullBackpressure != nil {
			r.OutputCriblLake.OnDiskFullBackpressure = types.StringValue(string(*resp.OutputCriblLake.OnDiskFullBackpressure))
		} else {
			r.OutputCriblLake.OnDiskFullBackpressure = types.StringNull()
		}
		r.OutputCriblLake.Pipeline = types.StringPointerValue(resp.OutputCriblLake.Pipeline)
		r.OutputCriblLake.Region = types.StringPointerValue(resp.OutputCriblLake.Region)
		r.OutputCriblLake.RejectUnauthorized = types.BoolPointerValue(resp.OutputCriblLake.RejectUnauthorized)
		r.OutputCriblLake.RemoveEmptyDirs = types.BoolPointerValue(resp.OutputCriblLake.RemoveEmptyDirs)
		r.OutputCriblLake.ReuseConnections = types.BoolPointerValue(resp.OutputCriblLake.ReuseConnections)
		if resp.OutputCriblLake.ServerSideEncryption != nil {
			r.OutputCriblLake.ServerSideEncryption = types.StringValue(string(*resp.OutputCriblLake.ServerSideEncryption))
		} else {
			r.OutputCriblLake.ServerSideEncryption = types.StringNull()
		}
		if resp.OutputCriblLake.SignatureVersion != nil {
			r.OutputCriblLake.SignatureVersion = types.StringValue(string(*resp.OutputCriblLake.SignatureVersion))
		} else {
			r.OutputCriblLake.SignatureVersion = types.StringNull()
		}
		r.OutputCriblLake.StagePath = types.StringPointerValue(resp.OutputCriblLake.StagePath)
		if resp.OutputCriblLake.StorageClass != nil {
			r.OutputCriblLake.StorageClass = types.StringValue(string(*resp.OutputCriblLake.StorageClass))
		} else {
			r.OutputCriblLake.StorageClass = types.StringNull()
		}
		r.OutputCriblLake.Streamtags = make([]types.String, 0, len(resp.OutputCriblLake.Streamtags))
		for _, v := range resp.OutputCriblLake.Streamtags {
			r.OutputCriblLake.Streamtags = append(r.OutputCriblLake.Streamtags, types.StringValue(v))
		}
		r.OutputCriblLake.SystemFields = make([]types.String, 0, len(resp.OutputCriblLake.SystemFields))
		for _, v := range resp.OutputCriblLake.SystemFields {
			r.OutputCriblLake.SystemFields = append(r.OutputCriblLake.SystemFields, types.StringValue(v))
		}
		r.OutputCriblLake.Type = types.StringValue(string(resp.OutputCriblLake.Type))
		r.OutputCriblLake.VerifyPermissions = types.BoolPointerValue(resp.OutputCriblLake.VerifyPermissions)
		r.OutputCriblLake.WriteHighWaterMark = types.Float64PointerValue(resp.OutputCriblLake.WriteHighWaterMark)
	}
	if resp.OutputCriblTCP != nil {
		r.OutputCriblTCP = &tfTypes.OutputCriblTCP{}
		if resp.OutputCriblTCP.Compression != nil {
			r.OutputCriblTCP.Compression = types.StringValue(string(*resp.OutputCriblTCP.Compression))
		} else {
			r.OutputCriblTCP.Compression = types.StringNull()
		}
		r.OutputCriblTCP.ConnectionTimeout = types.Float64PointerValue(resp.OutputCriblTCP.ConnectionTimeout)
		r.OutputCriblTCP.Description = types.StringPointerValue(resp.OutputCriblTCP.Description)
		r.OutputCriblTCP.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputCriblTCP.DNSResolvePeriodSec)
		r.OutputCriblTCP.Environment = types.StringPointerValue(resp.OutputCriblTCP.Environment)
		r.OutputCriblTCP.ExcludeFields = make([]types.String, 0, len(resp.OutputCriblTCP.ExcludeFields))
		for _, v := range resp.OutputCriblTCP.ExcludeFields {
			r.OutputCriblTCP.ExcludeFields = append(r.OutputCriblTCP.ExcludeFields, types.StringValue(v))
		}
		r.OutputCriblTCP.ExcludeSelf = types.BoolPointerValue(resp.OutputCriblTCP.ExcludeSelf)
		r.OutputCriblTCP.Host = types.StringPointerValue(resp.OutputCriblTCP.Host)
		r.OutputCriblTCP.Hosts = []tfTypes.OutputCriblTCPHost{}
		if len(r.OutputCriblTCP.Hosts) > len(resp.OutputCriblTCP.Hosts) {
			r.OutputCriblTCP.Hosts = r.OutputCriblTCP.Hosts[:len(resp.OutputCriblTCP.Hosts)]
		}
		for hostsCount, hostsItem := range resp.OutputCriblTCP.Hosts {
			var hosts tfTypes.OutputCriblTCPHost
			hosts.Host = types.StringValue(hostsItem.Host)
			hosts.Port = types.Float64PointerValue(hostsItem.Port)
			hosts.Servername = types.StringPointerValue(hostsItem.Servername)
			if hostsItem.TLS != nil {
				hosts.TLS = types.StringValue(string(*hostsItem.TLS))
			} else {
				hosts.TLS = types.StringNull()
			}
			hosts.Weight = types.Float64PointerValue(hostsItem.Weight)
			if hostsCount+1 > len(r.OutputCriblTCP.Hosts) {
				r.OutputCriblTCP.Hosts = append(r.OutputCriblTCP.Hosts, hosts)
			} else {
				r.OutputCriblTCP.Hosts[hostsCount].Host = hosts.Host
				r.OutputCriblTCP.Hosts[hostsCount].Port = hosts.Port
				r.OutputCriblTCP.Hosts[hostsCount].Servername = hosts.Servername
				r.OutputCriblTCP.Hosts[hostsCount].TLS = hosts.TLS
				r.OutputCriblTCP.Hosts[hostsCount].Weight = hosts.Weight
			}
		}
		r.OutputCriblTCP.ID = types.StringValue(resp.OutputCriblTCP.ID)
		r.OutputCriblTCP.LoadBalanced = types.BoolPointerValue(resp.OutputCriblTCP.LoadBalanced)
		r.OutputCriblTCP.LoadBalanceStatsPeriodSec = types.Float64PointerValue(resp.OutputCriblTCP.LoadBalanceStatsPeriodSec)
		r.OutputCriblTCP.LogFailedRequests = types.BoolPointerValue(resp.OutputCriblTCP.LogFailedRequests)
		r.OutputCriblTCP.MaxConcurrentSenders = types.Float64PointerValue(resp.OutputCriblTCP.MaxConcurrentSenders)
		if resp.OutputCriblTCP.OnBackpressure != nil {
			r.OutputCriblTCP.OnBackpressure = types.StringValue(string(*resp.OutputCriblTCP.OnBackpressure))
		} else {
			r.OutputCriblTCP.OnBackpressure = types.StringNull()
		}
		r.OutputCriblTCP.Pipeline = types.StringPointerValue(resp.OutputCriblTCP.Pipeline)
		r.OutputCriblTCP.Port = types.Float64PointerValue(resp.OutputCriblTCP.Port)
		if resp.OutputCriblTCP.PqCompress != nil {
			r.OutputCriblTCP.PqCompress = types.StringValue(string(*resp.OutputCriblTCP.PqCompress))
		} else {
			r.OutputCriblTCP.PqCompress = types.StringNull()
		}
		if resp.OutputCriblTCP.PqControls == nil {
			r.OutputCriblTCP.PqControls = nil
		} else {
			r.OutputCriblTCP.PqControls = &tfTypes.OutputCriblTCPPqControls{}
		}
		r.OutputCriblTCP.PqMaxFileSize = types.StringPointerValue(resp.OutputCriblTCP.PqMaxFileSize)
		r.OutputCriblTCP.PqMaxSize = types.StringPointerValue(resp.OutputCriblTCP.PqMaxSize)
		if resp.OutputCriblTCP.PqMode != nil {
			r.OutputCriblTCP.PqMode = types.StringValue(string(*resp.OutputCriblTCP.PqMode))
		} else {
			r.OutputCriblTCP.PqMode = types.StringNull()
		}
		if resp.OutputCriblTCP.PqOnBackpressure != nil {
			r.OutputCriblTCP.PqOnBackpressure = types.StringValue(string(*resp.OutputCriblTCP.PqOnBackpressure))
		} else {
			r.OutputCriblTCP.PqOnBackpressure = types.StringNull()
		}
		r.OutputCriblTCP.PqPath = types.StringPointerValue(resp.OutputCriblTCP.PqPath)
		r.OutputCriblTCP.Streamtags = make([]types.String, 0, len(resp.OutputCriblTCP.Streamtags))
		for _, v := range resp.OutputCriblTCP.Streamtags {
			r.OutputCriblTCP.Streamtags = append(r.OutputCriblTCP.Streamtags, types.StringValue(v))
		}
		r.OutputCriblTCP.SystemFields = make([]types.String, 0, len(resp.OutputCriblTCP.SystemFields))
		for _, v := range resp.OutputCriblTCP.SystemFields {
			r.OutputCriblTCP.SystemFields = append(r.OutputCriblTCP.SystemFields, types.StringValue(v))
		}
		r.OutputCriblTCP.ThrottleRatePerSec = types.StringPointerValue(resp.OutputCriblTCP.ThrottleRatePerSec)
		if resp.OutputCriblTCP.TLS == nil {
			r.OutputCriblTCP.TLS = nil
		} else {
			r.OutputCriblTCP.TLS = &tfTypes.OutputCriblTCPTLSSettingsClientSide{}
			r.OutputCriblTCP.TLS.CaPath = types.StringPointerValue(resp.OutputCriblTCP.TLS.CaPath)
			r.OutputCriblTCP.TLS.CertificateName = types.StringPointerValue(resp.OutputCriblTCP.TLS.CertificateName)
			r.OutputCriblTCP.TLS.CertPath = types.StringPointerValue(resp.OutputCriblTCP.TLS.CertPath)
			r.OutputCriblTCP.TLS.Disabled = types.BoolPointerValue(resp.OutputCriblTCP.TLS.Disabled)
			if resp.OutputCriblTCP.TLS.MaxVersion != nil {
				r.OutputCriblTCP.TLS.MaxVersion = types.StringValue(string(*resp.OutputCriblTCP.TLS.MaxVersion))
			} else {
				r.OutputCriblTCP.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputCriblTCP.TLS.MinVersion != nil {
				r.OutputCriblTCP.TLS.MinVersion = types.StringValue(string(*resp.OutputCriblTCP.TLS.MinVersion))
			} else {
				r.OutputCriblTCP.TLS.MinVersion = types.StringNull()
			}
			r.OutputCriblTCP.TLS.Passphrase = types.StringPointerValue(resp.OutputCriblTCP.TLS.Passphrase)
			r.OutputCriblTCP.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputCriblTCP.TLS.PrivKeyPath)
			r.OutputCriblTCP.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputCriblTCP.TLS.RejectUnauthorized)
			r.OutputCriblTCP.TLS.Servername = types.StringPointerValue(resp.OutputCriblTCP.TLS.Servername)
		}
		r.OutputCriblTCP.TokenTTLMinutes = types.Float64PointerValue(resp.OutputCriblTCP.TokenTTLMinutes)
		r.OutputCriblTCP.Type = types.StringValue(string(resp.OutputCriblTCP.Type))
		r.OutputCriblTCP.WriteTimeout = types.Float64PointerValue(resp.OutputCriblTCP.WriteTimeout)
	}
	if resp.OutputCrowdstrikeNextGenSiem != nil {
		r.OutputCrowdstrikeNextGenSiem = &tfTypes.OutputCrowdstrikeNextGenSiem{}
		if resp.OutputCrowdstrikeNextGenSiem.AuthType != nil {
			r.OutputCrowdstrikeNextGenSiem.AuthType = types.StringValue(string(*resp.OutputCrowdstrikeNextGenSiem.AuthType))
		} else {
			r.OutputCrowdstrikeNextGenSiem.AuthType = types.StringNull()
		}
		r.OutputCrowdstrikeNextGenSiem.Compress = types.BoolPointerValue(resp.OutputCrowdstrikeNextGenSiem.Compress)
		r.OutputCrowdstrikeNextGenSiem.Concurrency = types.Float64PointerValue(resp.OutputCrowdstrikeNextGenSiem.Concurrency)
		r.OutputCrowdstrikeNextGenSiem.Description = types.StringPointerValue(resp.OutputCrowdstrikeNextGenSiem.Description)
		r.OutputCrowdstrikeNextGenSiem.Environment = types.StringPointerValue(resp.OutputCrowdstrikeNextGenSiem.Environment)
		r.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders = []tfTypes.OutputCrowdstrikeNextGenSiemExtraHTTPHeader{}
		if len(r.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders) > len(resp.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders) {
			r.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders = r.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders[:len(resp.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount3, extraHTTPHeadersItem3 := range resp.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders {
			var extraHTTPHeaders3 tfTypes.OutputCrowdstrikeNextGenSiemExtraHTTPHeader
			extraHTTPHeaders3.Name = types.StringPointerValue(extraHTTPHeadersItem3.Name)
			extraHTTPHeaders3.Value = types.StringValue(extraHTTPHeadersItem3.Value)
			if extraHTTPHeadersCount3+1 > len(r.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders) {
				r.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders = append(r.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders, extraHTTPHeaders3)
			} else {
				r.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders[extraHTTPHeadersCount3].Name = extraHTTPHeaders3.Name
				r.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders[extraHTTPHeadersCount3].Value = extraHTTPHeaders3.Value
			}
		}
		if resp.OutputCrowdstrikeNextGenSiem.FailedRequestLoggingMode != nil {
			r.OutputCrowdstrikeNextGenSiem.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputCrowdstrikeNextGenSiem.FailedRequestLoggingMode))
		} else {
			r.OutputCrowdstrikeNextGenSiem.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputCrowdstrikeNextGenSiem.FlushPeriodSec = types.Float64PointerValue(resp.OutputCrowdstrikeNextGenSiem.FlushPeriodSec)
		if resp.OutputCrowdstrikeNextGenSiem.Format != nil {
			r.OutputCrowdstrikeNextGenSiem.Format = types.StringValue(string(*resp.OutputCrowdstrikeNextGenSiem.Format))
		} else {
			r.OutputCrowdstrikeNextGenSiem.Format = types.StringNull()
		}
		r.OutputCrowdstrikeNextGenSiem.ID = types.StringPointerValue(resp.OutputCrowdstrikeNextGenSiem.ID)
		r.OutputCrowdstrikeNextGenSiem.MaxPayloadEvents = types.Float64PointerValue(resp.OutputCrowdstrikeNextGenSiem.MaxPayloadEvents)
		r.OutputCrowdstrikeNextGenSiem.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputCrowdstrikeNextGenSiem.MaxPayloadSizeKB)
		if resp.OutputCrowdstrikeNextGenSiem.OnBackpressure != nil {
			r.OutputCrowdstrikeNextGenSiem.OnBackpressure = types.StringValue(string(*resp.OutputCrowdstrikeNextGenSiem.OnBackpressure))
		} else {
			r.OutputCrowdstrikeNextGenSiem.OnBackpressure = types.StringNull()
		}
		r.OutputCrowdstrikeNextGenSiem.Pipeline = types.StringPointerValue(resp.OutputCrowdstrikeNextGenSiem.Pipeline)
		if resp.OutputCrowdstrikeNextGenSiem.PqCompress != nil {
			r.OutputCrowdstrikeNextGenSiem.PqCompress = types.StringValue(string(*resp.OutputCrowdstrikeNextGenSiem.PqCompress))
		} else {
			r.OutputCrowdstrikeNextGenSiem.PqCompress = types.StringNull()
		}
		if resp.OutputCrowdstrikeNextGenSiem.PqControls == nil {
			r.OutputCrowdstrikeNextGenSiem.PqControls = nil
		} else {
			r.OutputCrowdstrikeNextGenSiem.PqControls = &tfTypes.OutputCrowdstrikeNextGenSiemPqControls{}
		}
		r.OutputCrowdstrikeNextGenSiem.PqMaxFileSize = types.StringPointerValue(resp.OutputCrowdstrikeNextGenSiem.PqMaxFileSize)
		r.OutputCrowdstrikeNextGenSiem.PqMaxSize = types.StringPointerValue(resp.OutputCrowdstrikeNextGenSiem.PqMaxSize)
		if resp.OutputCrowdstrikeNextGenSiem.PqMode != nil {
			r.OutputCrowdstrikeNextGenSiem.PqMode = types.StringValue(string(*resp.OutputCrowdstrikeNextGenSiem.PqMode))
		} else {
			r.OutputCrowdstrikeNextGenSiem.PqMode = types.StringNull()
		}
		if resp.OutputCrowdstrikeNextGenSiem.PqOnBackpressure != nil {
			r.OutputCrowdstrikeNextGenSiem.PqOnBackpressure = types.StringValue(string(*resp.OutputCrowdstrikeNextGenSiem.PqOnBackpressure))
		} else {
			r.OutputCrowdstrikeNextGenSiem.PqOnBackpressure = types.StringNull()
		}
		r.OutputCrowdstrikeNextGenSiem.PqPath = types.StringPointerValue(resp.OutputCrowdstrikeNextGenSiem.PqPath)
		r.OutputCrowdstrikeNextGenSiem.RejectUnauthorized = types.BoolPointerValue(resp.OutputCrowdstrikeNextGenSiem.RejectUnauthorized)
		r.OutputCrowdstrikeNextGenSiem.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputCrowdstrikeNextGenSiem.ResponseHonorRetryAfterHeader)
		r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings = []tfTypes.OutputCrowdstrikeNextGenSiemResponseRetrySetting{}
		if len(r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings) > len(resp.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings) {
			r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings = r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings[:len(resp.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount4, responseRetrySettingsItem4 := range resp.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings {
			var responseRetrySettings4 tfTypes.OutputCrowdstrikeNextGenSiemResponseRetrySetting
			responseRetrySettings4.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem4.BackoffRate)
			responseRetrySettings4.HTTPStatus = types.Float64Value(responseRetrySettingsItem4.HTTPStatus)
			responseRetrySettings4.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem4.InitialBackoff)
			responseRetrySettings4.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem4.MaxBackoff)
			if responseRetrySettingsCount4+1 > len(r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings) {
				r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings = append(r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings, responseRetrySettings4)
			} else {
				r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings[responseRetrySettingsCount4].BackoffRate = responseRetrySettings4.BackoffRate
				r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings[responseRetrySettingsCount4].HTTPStatus = responseRetrySettings4.HTTPStatus
				r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings[responseRetrySettingsCount4].InitialBackoff = responseRetrySettings4.InitialBackoff
				r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings[responseRetrySettingsCount4].MaxBackoff = responseRetrySettings4.MaxBackoff
			}
		}
		r.OutputCrowdstrikeNextGenSiem.SafeHeaders = make([]types.String, 0, len(resp.OutputCrowdstrikeNextGenSiem.SafeHeaders))
		for _, v := range resp.OutputCrowdstrikeNextGenSiem.SafeHeaders {
			r.OutputCrowdstrikeNextGenSiem.SafeHeaders = append(r.OutputCrowdstrikeNextGenSiem.SafeHeaders, types.StringValue(v))
		}
		r.OutputCrowdstrikeNextGenSiem.Streamtags = make([]types.String, 0, len(resp.OutputCrowdstrikeNextGenSiem.Streamtags))
		for _, v := range resp.OutputCrowdstrikeNextGenSiem.Streamtags {
			r.OutputCrowdstrikeNextGenSiem.Streamtags = append(r.OutputCrowdstrikeNextGenSiem.Streamtags, types.StringValue(v))
		}
		r.OutputCrowdstrikeNextGenSiem.SystemFields = make([]types.String, 0, len(resp.OutputCrowdstrikeNextGenSiem.SystemFields))
		for _, v := range resp.OutputCrowdstrikeNextGenSiem.SystemFields {
			r.OutputCrowdstrikeNextGenSiem.SystemFields = append(r.OutputCrowdstrikeNextGenSiem.SystemFields, types.StringValue(v))
		}
		r.OutputCrowdstrikeNextGenSiem.TextSecret = types.StringPointerValue(resp.OutputCrowdstrikeNextGenSiem.TextSecret)
		if resp.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings == nil {
			r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings = nil
		} else {
			r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings = &tfTypes.OutputCrowdstrikeNextGenSiemTimeoutRetrySettings{}
			r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.BackoffRate)
			r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.InitialBackoff)
			r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.MaxBackoff)
			r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputCrowdstrikeNextGenSiem.TimeoutSec = types.Float64PointerValue(resp.OutputCrowdstrikeNextGenSiem.TimeoutSec)
		r.OutputCrowdstrikeNextGenSiem.Token = types.StringPointerValue(resp.OutputCrowdstrikeNextGenSiem.Token)
		if resp.OutputCrowdstrikeNextGenSiem.Type != nil {
			r.OutputCrowdstrikeNextGenSiem.Type = types.StringValue(string(*resp.OutputCrowdstrikeNextGenSiem.Type))
		} else {
			r.OutputCrowdstrikeNextGenSiem.Type = types.StringNull()
		}
		r.OutputCrowdstrikeNextGenSiem.URL = types.StringValue(resp.OutputCrowdstrikeNextGenSiem.URL)
		r.OutputCrowdstrikeNextGenSiem.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputCrowdstrikeNextGenSiem.UseRoundRobinDNS)
	}
	if resp.OutputDatadog != nil {
		r.OutputDatadog = &tfTypes.OutputDatadog{}
		r.OutputDatadog.AllowAPIKeyFromEvents = types.BoolPointerValue(resp.OutputDatadog.AllowAPIKeyFromEvents)
		r.OutputDatadog.APIKey = types.StringPointerValue(resp.OutputDatadog.APIKey)
		if resp.OutputDatadog.AuthType != nil {
			r.OutputDatadog.AuthType = types.StringValue(string(*resp.OutputDatadog.AuthType))
		} else {
			r.OutputDatadog.AuthType = types.StringNull()
		}
		r.OutputDatadog.BatchByTags = types.BoolPointerValue(resp.OutputDatadog.BatchByTags)
		r.OutputDatadog.Compress = types.BoolPointerValue(resp.OutputDatadog.Compress)
		r.OutputDatadog.Concurrency = types.Float64PointerValue(resp.OutputDatadog.Concurrency)
		if resp.OutputDatadog.ContentType != nil {
			r.OutputDatadog.ContentType = types.StringValue(string(*resp.OutputDatadog.ContentType))
		} else {
			r.OutputDatadog.ContentType = types.StringNull()
		}
		r.OutputDatadog.CustomURL = types.StringPointerValue(resp.OutputDatadog.CustomURL)
		r.OutputDatadog.Description = types.StringPointerValue(resp.OutputDatadog.Description)
		r.OutputDatadog.Environment = types.StringPointerValue(resp.OutputDatadog.Environment)
		r.OutputDatadog.ExtraHTTPHeaders = []tfTypes.OutputDatadogExtraHTTPHeader{}
		if len(r.OutputDatadog.ExtraHTTPHeaders) > len(resp.OutputDatadog.ExtraHTTPHeaders) {
			r.OutputDatadog.ExtraHTTPHeaders = r.OutputDatadog.ExtraHTTPHeaders[:len(resp.OutputDatadog.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount4, extraHTTPHeadersItem4 := range resp.OutputDatadog.ExtraHTTPHeaders {
			var extraHTTPHeaders4 tfTypes.OutputDatadogExtraHTTPHeader
			extraHTTPHeaders4.Name = types.StringPointerValue(extraHTTPHeadersItem4.Name)
			extraHTTPHeaders4.Value = types.StringValue(extraHTTPHeadersItem4.Value)
			if extraHTTPHeadersCount4+1 > len(r.OutputDatadog.ExtraHTTPHeaders) {
				r.OutputDatadog.ExtraHTTPHeaders = append(r.OutputDatadog.ExtraHTTPHeaders, extraHTTPHeaders4)
			} else {
				r.OutputDatadog.ExtraHTTPHeaders[extraHTTPHeadersCount4].Name = extraHTTPHeaders4.Name
				r.OutputDatadog.ExtraHTTPHeaders[extraHTTPHeadersCount4].Value = extraHTTPHeaders4.Value
			}
		}
		if resp.OutputDatadog.FailedRequestLoggingMode != nil {
			r.OutputDatadog.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputDatadog.FailedRequestLoggingMode))
		} else {
			r.OutputDatadog.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputDatadog.FlushPeriodSec = types.Float64PointerValue(resp.OutputDatadog.FlushPeriodSec)
		r.OutputDatadog.Host = types.StringPointerValue(resp.OutputDatadog.Host)
		r.OutputDatadog.ID = types.StringValue(resp.OutputDatadog.ID)
		r.OutputDatadog.MaxPayloadEvents = types.Float64PointerValue(resp.OutputDatadog.MaxPayloadEvents)
		r.OutputDatadog.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputDatadog.MaxPayloadSizeKB)
		r.OutputDatadog.Message = types.StringPointerValue(resp.OutputDatadog.Message)
		if resp.OutputDatadog.OnBackpressure != nil {
			r.OutputDatadog.OnBackpressure = types.StringValue(string(*resp.OutputDatadog.OnBackpressure))
		} else {
			r.OutputDatadog.OnBackpressure = types.StringNull()
		}
		r.OutputDatadog.Pipeline = types.StringPointerValue(resp.OutputDatadog.Pipeline)
		if resp.OutputDatadog.PqCompress != nil {
			r.OutputDatadog.PqCompress = types.StringValue(string(*resp.OutputDatadog.PqCompress))
		} else {
			r.OutputDatadog.PqCompress = types.StringNull()
		}
		if resp.OutputDatadog.PqControls == nil {
			r.OutputDatadog.PqControls = nil
		} else {
			r.OutputDatadog.PqControls = &tfTypes.OutputDatadogPqControls{}
		}
		r.OutputDatadog.PqMaxFileSize = types.StringPointerValue(resp.OutputDatadog.PqMaxFileSize)
		r.OutputDatadog.PqMaxSize = types.StringPointerValue(resp.OutputDatadog.PqMaxSize)
		if resp.OutputDatadog.PqMode != nil {
			r.OutputDatadog.PqMode = types.StringValue(string(*resp.OutputDatadog.PqMode))
		} else {
			r.OutputDatadog.PqMode = types.StringNull()
		}
		if resp.OutputDatadog.PqOnBackpressure != nil {
			r.OutputDatadog.PqOnBackpressure = types.StringValue(string(*resp.OutputDatadog.PqOnBackpressure))
		} else {
			r.OutputDatadog.PqOnBackpressure = types.StringNull()
		}
		r.OutputDatadog.PqPath = types.StringPointerValue(resp.OutputDatadog.PqPath)
		r.OutputDatadog.RejectUnauthorized = types.BoolPointerValue(resp.OutputDatadog.RejectUnauthorized)
		r.OutputDatadog.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputDatadog.ResponseHonorRetryAfterHeader)
		r.OutputDatadog.ResponseRetrySettings = []tfTypes.OutputDatadogResponseRetrySetting{}
		if len(r.OutputDatadog.ResponseRetrySettings) > len(resp.OutputDatadog.ResponseRetrySettings) {
			r.OutputDatadog.ResponseRetrySettings = r.OutputDatadog.ResponseRetrySettings[:len(resp.OutputDatadog.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount5, responseRetrySettingsItem5 := range resp.OutputDatadog.ResponseRetrySettings {
			var responseRetrySettings5 tfTypes.OutputDatadogResponseRetrySetting
			responseRetrySettings5.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem5.BackoffRate)
			responseRetrySettings5.HTTPStatus = types.Float64Value(responseRetrySettingsItem5.HTTPStatus)
			responseRetrySettings5.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem5.InitialBackoff)
			responseRetrySettings5.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem5.MaxBackoff)
			if responseRetrySettingsCount5+1 > len(r.OutputDatadog.ResponseRetrySettings) {
				r.OutputDatadog.ResponseRetrySettings = append(r.OutputDatadog.ResponseRetrySettings, responseRetrySettings5)
			} else {
				r.OutputDatadog.ResponseRetrySettings[responseRetrySettingsCount5].BackoffRate = responseRetrySettings5.BackoffRate
				r.OutputDatadog.ResponseRetrySettings[responseRetrySettingsCount5].HTTPStatus = responseRetrySettings5.HTTPStatus
				r.OutputDatadog.ResponseRetrySettings[responseRetrySettingsCount5].InitialBackoff = responseRetrySettings5.InitialBackoff
				r.OutputDatadog.ResponseRetrySettings[responseRetrySettingsCount5].MaxBackoff = responseRetrySettings5.MaxBackoff
			}
		}
		r.OutputDatadog.SafeHeaders = make([]types.String, 0, len(resp.OutputDatadog.SafeHeaders))
		for _, v := range resp.OutputDatadog.SafeHeaders {
			r.OutputDatadog.SafeHeaders = append(r.OutputDatadog.SafeHeaders, types.StringValue(v))
		}
		r.OutputDatadog.SendCountersAsCount = types.BoolPointerValue(resp.OutputDatadog.SendCountersAsCount)
		r.OutputDatadog.Service = types.StringPointerValue(resp.OutputDatadog.Service)
		if resp.OutputDatadog.Severity != nil {
			r.OutputDatadog.Severity = types.StringValue(string(*resp.OutputDatadog.Severity))
		} else {
			r.OutputDatadog.Severity = types.StringNull()
		}
		if resp.OutputDatadog.Site != nil {
			r.OutputDatadog.Site = types.StringValue(string(*resp.OutputDatadog.Site))
		} else {
			r.OutputDatadog.Site = types.StringNull()
		}
		r.OutputDatadog.Source = types.StringPointerValue(resp.OutputDatadog.Source)
		r.OutputDatadog.Streamtags = make([]types.String, 0, len(resp.OutputDatadog.Streamtags))
		for _, v := range resp.OutputDatadog.Streamtags {
			r.OutputDatadog.Streamtags = append(r.OutputDatadog.Streamtags, types.StringValue(v))
		}
		r.OutputDatadog.SystemFields = make([]types.String, 0, len(resp.OutputDatadog.SystemFields))
		for _, v := range resp.OutputDatadog.SystemFields {
			r.OutputDatadog.SystemFields = append(r.OutputDatadog.SystemFields, types.StringValue(v))
		}
		r.OutputDatadog.Tags = make([]types.String, 0, len(resp.OutputDatadog.Tags))
		for _, v := range resp.OutputDatadog.Tags {
			r.OutputDatadog.Tags = append(r.OutputDatadog.Tags, types.StringValue(v))
		}
		r.OutputDatadog.TextSecret = types.StringPointerValue(resp.OutputDatadog.TextSecret)
		if resp.OutputDatadog.TimeoutRetrySettings == nil {
			r.OutputDatadog.TimeoutRetrySettings = nil
		} else {
			r.OutputDatadog.TimeoutRetrySettings = &tfTypes.OutputDatadogTimeoutRetrySettings{}
			r.OutputDatadog.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputDatadog.TimeoutRetrySettings.BackoffRate)
			r.OutputDatadog.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputDatadog.TimeoutRetrySettings.InitialBackoff)
			r.OutputDatadog.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputDatadog.TimeoutRetrySettings.MaxBackoff)
			r.OutputDatadog.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputDatadog.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputDatadog.TimeoutSec = types.Float64PointerValue(resp.OutputDatadog.TimeoutSec)
		r.OutputDatadog.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputDatadog.TotalMemoryLimitKB)
		r.OutputDatadog.Type = types.StringValue(string(resp.OutputDatadog.Type))
		r.OutputDatadog.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputDatadog.UseRoundRobinDNS)
	}
	if resp.OutputDataset != nil {
		r.OutputDataset = &tfTypes.OutputDataset{}
		r.OutputDataset.APIKey = types.StringPointerValue(resp.OutputDataset.APIKey)
		if resp.OutputDataset.AuthType != nil {
			r.OutputDataset.AuthType = types.StringValue(string(*resp.OutputDataset.AuthType))
		} else {
			r.OutputDataset.AuthType = types.StringNull()
		}
		r.OutputDataset.Compress = types.BoolPointerValue(resp.OutputDataset.Compress)
		r.OutputDataset.Concurrency = types.Float64PointerValue(resp.OutputDataset.Concurrency)
		r.OutputDataset.CustomURL = types.StringPointerValue(resp.OutputDataset.CustomURL)
		if resp.OutputDataset.DefaultSeverity != nil {
			r.OutputDataset.DefaultSeverity = types.StringValue(string(*resp.OutputDataset.DefaultSeverity))
		} else {
			r.OutputDataset.DefaultSeverity = types.StringNull()
		}
		r.OutputDataset.Description = types.StringPointerValue(resp.OutputDataset.Description)
		r.OutputDataset.Environment = types.StringPointerValue(resp.OutputDataset.Environment)
		r.OutputDataset.ExcludeFields = make([]types.String, 0, len(resp.OutputDataset.ExcludeFields))
		for _, v := range resp.OutputDataset.ExcludeFields {
			r.OutputDataset.ExcludeFields = append(r.OutputDataset.ExcludeFields, types.StringValue(v))
		}
		r.OutputDataset.ExtraHTTPHeaders = []tfTypes.OutputDatasetExtraHTTPHeader{}
		if len(r.OutputDataset.ExtraHTTPHeaders) > len(resp.OutputDataset.ExtraHTTPHeaders) {
			r.OutputDataset.ExtraHTTPHeaders = r.OutputDataset.ExtraHTTPHeaders[:len(resp.OutputDataset.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount5, extraHTTPHeadersItem5 := range resp.OutputDataset.ExtraHTTPHeaders {
			var extraHTTPHeaders5 tfTypes.OutputDatasetExtraHTTPHeader
			extraHTTPHeaders5.Name = types.StringPointerValue(extraHTTPHeadersItem5.Name)
			extraHTTPHeaders5.Value = types.StringValue(extraHTTPHeadersItem5.Value)
			if extraHTTPHeadersCount5+1 > len(r.OutputDataset.ExtraHTTPHeaders) {
				r.OutputDataset.ExtraHTTPHeaders = append(r.OutputDataset.ExtraHTTPHeaders, extraHTTPHeaders5)
			} else {
				r.OutputDataset.ExtraHTTPHeaders[extraHTTPHeadersCount5].Name = extraHTTPHeaders5.Name
				r.OutputDataset.ExtraHTTPHeaders[extraHTTPHeadersCount5].Value = extraHTTPHeaders5.Value
			}
		}
		if resp.OutputDataset.FailedRequestLoggingMode != nil {
			r.OutputDataset.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputDataset.FailedRequestLoggingMode))
		} else {
			r.OutputDataset.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputDataset.FlushPeriodSec = types.Float64PointerValue(resp.OutputDataset.FlushPeriodSec)
		r.OutputDataset.ID = types.StringValue(resp.OutputDataset.ID)
		r.OutputDataset.MaxPayloadEvents = types.Float64PointerValue(resp.OutputDataset.MaxPayloadEvents)
		r.OutputDataset.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputDataset.MaxPayloadSizeKB)
		r.OutputDataset.MessageField = types.StringPointerValue(resp.OutputDataset.MessageField)
		if resp.OutputDataset.OnBackpressure != nil {
			r.OutputDataset.OnBackpressure = types.StringValue(string(*resp.OutputDataset.OnBackpressure))
		} else {
			r.OutputDataset.OnBackpressure = types.StringNull()
		}
		r.OutputDataset.Pipeline = types.StringPointerValue(resp.OutputDataset.Pipeline)
		if resp.OutputDataset.PqCompress != nil {
			r.OutputDataset.PqCompress = types.StringValue(string(*resp.OutputDataset.PqCompress))
		} else {
			r.OutputDataset.PqCompress = types.StringNull()
		}
		if resp.OutputDataset.PqControls == nil {
			r.OutputDataset.PqControls = nil
		} else {
			r.OutputDataset.PqControls = &tfTypes.OutputDatasetPqControls{}
		}
		r.OutputDataset.PqMaxFileSize = types.StringPointerValue(resp.OutputDataset.PqMaxFileSize)
		r.OutputDataset.PqMaxSize = types.StringPointerValue(resp.OutputDataset.PqMaxSize)
		if resp.OutputDataset.PqMode != nil {
			r.OutputDataset.PqMode = types.StringValue(string(*resp.OutputDataset.PqMode))
		} else {
			r.OutputDataset.PqMode = types.StringNull()
		}
		if resp.OutputDataset.PqOnBackpressure != nil {
			r.OutputDataset.PqOnBackpressure = types.StringValue(string(*resp.OutputDataset.PqOnBackpressure))
		} else {
			r.OutputDataset.PqOnBackpressure = types.StringNull()
		}
		r.OutputDataset.PqPath = types.StringPointerValue(resp.OutputDataset.PqPath)
		r.OutputDataset.RejectUnauthorized = types.BoolPointerValue(resp.OutputDataset.RejectUnauthorized)
		r.OutputDataset.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputDataset.ResponseHonorRetryAfterHeader)
		r.OutputDataset.ResponseRetrySettings = []tfTypes.OutputDatasetResponseRetrySetting{}
		if len(r.OutputDataset.ResponseRetrySettings) > len(resp.OutputDataset.ResponseRetrySettings) {
			r.OutputDataset.ResponseRetrySettings = r.OutputDataset.ResponseRetrySettings[:len(resp.OutputDataset.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount6, responseRetrySettingsItem6 := range resp.OutputDataset.ResponseRetrySettings {
			var responseRetrySettings6 tfTypes.OutputDatasetResponseRetrySetting
			responseRetrySettings6.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem6.BackoffRate)
			responseRetrySettings6.HTTPStatus = types.Float64Value(responseRetrySettingsItem6.HTTPStatus)
			responseRetrySettings6.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem6.InitialBackoff)
			responseRetrySettings6.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem6.MaxBackoff)
			if responseRetrySettingsCount6+1 > len(r.OutputDataset.ResponseRetrySettings) {
				r.OutputDataset.ResponseRetrySettings = append(r.OutputDataset.ResponseRetrySettings, responseRetrySettings6)
			} else {
				r.OutputDataset.ResponseRetrySettings[responseRetrySettingsCount6].BackoffRate = responseRetrySettings6.BackoffRate
				r.OutputDataset.ResponseRetrySettings[responseRetrySettingsCount6].HTTPStatus = responseRetrySettings6.HTTPStatus
				r.OutputDataset.ResponseRetrySettings[responseRetrySettingsCount6].InitialBackoff = responseRetrySettings6.InitialBackoff
				r.OutputDataset.ResponseRetrySettings[responseRetrySettingsCount6].MaxBackoff = responseRetrySettings6.MaxBackoff
			}
		}
		r.OutputDataset.SafeHeaders = make([]types.String, 0, len(resp.OutputDataset.SafeHeaders))
		for _, v := range resp.OutputDataset.SafeHeaders {
			r.OutputDataset.SafeHeaders = append(r.OutputDataset.SafeHeaders, types.StringValue(v))
		}
		r.OutputDataset.ServerHostField = types.StringPointerValue(resp.OutputDataset.ServerHostField)
		if resp.OutputDataset.Site != nil {
			r.OutputDataset.Site = types.StringValue(string(*resp.OutputDataset.Site))
		} else {
			r.OutputDataset.Site = types.StringNull()
		}
		r.OutputDataset.Streamtags = make([]types.String, 0, len(resp.OutputDataset.Streamtags))
		for _, v := range resp.OutputDataset.Streamtags {
			r.OutputDataset.Streamtags = append(r.OutputDataset.Streamtags, types.StringValue(v))
		}
		r.OutputDataset.SystemFields = make([]types.String, 0, len(resp.OutputDataset.SystemFields))
		for _, v := range resp.OutputDataset.SystemFields {
			r.OutputDataset.SystemFields = append(r.OutputDataset.SystemFields, types.StringValue(v))
		}
		r.OutputDataset.TextSecret = types.StringPointerValue(resp.OutputDataset.TextSecret)
		if resp.OutputDataset.TimeoutRetrySettings == nil {
			r.OutputDataset.TimeoutRetrySettings = nil
		} else {
			r.OutputDataset.TimeoutRetrySettings = &tfTypes.OutputDatasetTimeoutRetrySettings{}
			r.OutputDataset.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputDataset.TimeoutRetrySettings.BackoffRate)
			r.OutputDataset.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputDataset.TimeoutRetrySettings.InitialBackoff)
			r.OutputDataset.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputDataset.TimeoutRetrySettings.MaxBackoff)
			r.OutputDataset.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputDataset.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputDataset.TimeoutSec = types.Float64PointerValue(resp.OutputDataset.TimeoutSec)
		r.OutputDataset.TimestampField = types.StringPointerValue(resp.OutputDataset.TimestampField)
		r.OutputDataset.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputDataset.TotalMemoryLimitKB)
		r.OutputDataset.Type = types.StringValue(string(resp.OutputDataset.Type))
		r.OutputDataset.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputDataset.UseRoundRobinDNS)
	}
	if resp.OutputDefault != nil {
		r.OutputDefault = &tfTypes.OutputDefault{}
		r.OutputDefault.DefaultID = types.StringValue(resp.OutputDefault.DefaultID)
		r.OutputDefault.Environment = types.StringPointerValue(resp.OutputDefault.Environment)
		r.OutputDefault.ID = types.StringPointerValue(resp.OutputDefault.ID)
		r.OutputDefault.Pipeline = types.StringPointerValue(resp.OutputDefault.Pipeline)
		r.OutputDefault.Streamtags = make([]types.String, 0, len(resp.OutputDefault.Streamtags))
		for _, v := range resp.OutputDefault.Streamtags {
			r.OutputDefault.Streamtags = append(r.OutputDefault.Streamtags, types.StringValue(v))
		}
		r.OutputDefault.SystemFields = make([]types.String, 0, len(resp.OutputDefault.SystemFields))
		for _, v := range resp.OutputDefault.SystemFields {
			r.OutputDefault.SystemFields = append(r.OutputDefault.SystemFields, types.StringValue(v))
		}
		r.OutputDefault.Type = types.StringValue(string(resp.OutputDefault.Type))
	}
	if resp.OutputDevnull != nil {
		r.OutputDevnull = &tfTypes.OutputDevnull{}
		r.OutputDevnull.Environment = types.StringPointerValue(resp.OutputDevnull.Environment)
		r.OutputDevnull.ID = types.StringValue(resp.OutputDevnull.ID)
		r.OutputDevnull.Pipeline = types.StringPointerValue(resp.OutputDevnull.Pipeline)
		r.OutputDevnull.Streamtags = make([]types.String, 0, len(resp.OutputDevnull.Streamtags))
		for _, v := range resp.OutputDevnull.Streamtags {
			r.OutputDevnull.Streamtags = append(r.OutputDevnull.Streamtags, types.StringValue(v))
		}
		r.OutputDevnull.SystemFields = make([]types.String, 0, len(resp.OutputDevnull.SystemFields))
		for _, v := range resp.OutputDevnull.SystemFields {
			r.OutputDevnull.SystemFields = append(r.OutputDevnull.SystemFields, types.StringValue(v))
		}
		r.OutputDevnull.Type = types.StringValue(string(resp.OutputDevnull.Type))
	}
	if resp.OutputDiskSpool != nil {
		r.OutputDiskSpool = &tfTypes.OutputDiskSpool{}
		if resp.OutputDiskSpool.Compress != nil {
			r.OutputDiskSpool.Compress = types.StringValue(string(*resp.OutputDiskSpool.Compress))
		} else {
			r.OutputDiskSpool.Compress = types.StringNull()
		}
		r.OutputDiskSpool.Description = types.StringPointerValue(resp.OutputDiskSpool.Description)
		r.OutputDiskSpool.Environment = types.StringPointerValue(resp.OutputDiskSpool.Environment)
		r.OutputDiskSpool.ID = types.StringValue(resp.OutputDiskSpool.ID)
		r.OutputDiskSpool.MaxDataSize = types.StringPointerValue(resp.OutputDiskSpool.MaxDataSize)
		r.OutputDiskSpool.MaxDataTime = types.StringPointerValue(resp.OutputDiskSpool.MaxDataTime)
		r.OutputDiskSpool.PartitionExpr = types.StringPointerValue(resp.OutputDiskSpool.PartitionExpr)
		r.OutputDiskSpool.Pipeline = types.StringPointerValue(resp.OutputDiskSpool.Pipeline)
		r.OutputDiskSpool.Streamtags = make([]types.String, 0, len(resp.OutputDiskSpool.Streamtags))
		for _, v := range resp.OutputDiskSpool.Streamtags {
			r.OutputDiskSpool.Streamtags = append(r.OutputDiskSpool.Streamtags, types.StringValue(v))
		}
		r.OutputDiskSpool.SystemFields = make([]types.String, 0, len(resp.OutputDiskSpool.SystemFields))
		for _, v := range resp.OutputDiskSpool.SystemFields {
			r.OutputDiskSpool.SystemFields = append(r.OutputDiskSpool.SystemFields, types.StringValue(v))
		}
		r.OutputDiskSpool.TimeWindow = types.StringPointerValue(resp.OutputDiskSpool.TimeWindow)
		r.OutputDiskSpool.Type = types.StringValue(string(resp.OutputDiskSpool.Type))
	}
	if resp.OutputDlS3 != nil {
		r.OutputDlS3 = &tfTypes.OutputDlS3{}
		r.OutputDlS3.AddIDToStagePath = types.BoolPointerValue(resp.OutputDlS3.AddIDToStagePath)
		r.OutputDlS3.AssumeRoleArn = types.StringPointerValue(resp.OutputDlS3.AssumeRoleArn)
		r.OutputDlS3.AssumeRoleExternalID = types.StringPointerValue(resp.OutputDlS3.AssumeRoleExternalID)
		r.OutputDlS3.AutomaticSchema = types.BoolPointerValue(resp.OutputDlS3.AutomaticSchema)
		r.OutputDlS3.AwsAPIKey = types.StringPointerValue(resp.OutputDlS3.AwsAPIKey)
		if resp.OutputDlS3.AwsAuthenticationMethod != nil {
			r.OutputDlS3.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputDlS3.AwsAuthenticationMethod))
		} else {
			r.OutputDlS3.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputDlS3.AwsSecret = types.StringPointerValue(resp.OutputDlS3.AwsSecret)
		r.OutputDlS3.AwsSecretKey = types.StringPointerValue(resp.OutputDlS3.AwsSecretKey)
		r.OutputDlS3.BaseFileName = types.StringPointerValue(resp.OutputDlS3.BaseFileName)
		r.OutputDlS3.Bucket = types.StringValue(resp.OutputDlS3.Bucket)
		if resp.OutputDlS3.Compress != nil {
			r.OutputDlS3.Compress = types.StringValue(string(*resp.OutputDlS3.Compress))
		} else {
			r.OutputDlS3.Compress = types.StringNull()
		}
		if resp.OutputDlS3.CompressionLevel != nil {
			r.OutputDlS3.CompressionLevel = types.StringValue(string(*resp.OutputDlS3.CompressionLevel))
		} else {
			r.OutputDlS3.CompressionLevel = types.StringNull()
		}
		r.OutputDlS3.DeadletterEnabled = types.BoolPointerValue(resp.OutputDlS3.DeadletterEnabled)
		r.OutputDlS3.DeadletterPath = types.StringPointerValue(resp.OutputDlS3.DeadletterPath)
		r.OutputDlS3.Description = types.StringPointerValue(resp.OutputDlS3.Description)
		r.OutputDlS3.DestPath = types.StringPointerValue(resp.OutputDlS3.DestPath)
		r.OutputDlS3.DurationSeconds = types.Float64PointerValue(resp.OutputDlS3.DurationSeconds)
		r.OutputDlS3.EmptyDirCleanupSec = types.Float64PointerValue(resp.OutputDlS3.EmptyDirCleanupSec)
		r.OutputDlS3.EnableAssumeRole = types.BoolPointerValue(resp.OutputDlS3.EnableAssumeRole)
		r.OutputDlS3.EnablePageChecksum = types.BoolPointerValue(resp.OutputDlS3.EnablePageChecksum)
		r.OutputDlS3.EnableStatistics = types.BoolPointerValue(resp.OutputDlS3.EnableStatistics)
		r.OutputDlS3.EnableWritePageIndex = types.BoolPointerValue(resp.OutputDlS3.EnableWritePageIndex)
		r.OutputDlS3.Endpoint = types.StringPointerValue(resp.OutputDlS3.Endpoint)
		r.OutputDlS3.Environment = types.StringPointerValue(resp.OutputDlS3.Environment)
		r.OutputDlS3.FileNameSuffix = types.StringPointerValue(resp.OutputDlS3.FileNameSuffix)
		if resp.OutputDlS3.Format != nil {
			r.OutputDlS3.Format = types.StringValue(string(*resp.OutputDlS3.Format))
		} else {
			r.OutputDlS3.Format = types.StringNull()
		}
		r.OutputDlS3.HeaderLine = types.StringPointerValue(resp.OutputDlS3.HeaderLine)
		r.OutputDlS3.ID = types.StringPointerValue(resp.OutputDlS3.ID)
		r.OutputDlS3.KeyValueMetadata = []tfTypes.OutputDlS3KeyValueMetadatum{}
		if len(r.OutputDlS3.KeyValueMetadata) > len(resp.OutputDlS3.KeyValueMetadata) {
			r.OutputDlS3.KeyValueMetadata = r.OutputDlS3.KeyValueMetadata[:len(resp.OutputDlS3.KeyValueMetadata)]
		}
		for keyValueMetadataCount1, keyValueMetadataItem1 := range resp.OutputDlS3.KeyValueMetadata {
			var keyValueMetadata1 tfTypes.OutputDlS3KeyValueMetadatum
			keyValueMetadata1.Key = types.StringPointerValue(keyValueMetadataItem1.Key)
			keyValueMetadata1.Value = types.StringValue(keyValueMetadataItem1.Value)
			if keyValueMetadataCount1+1 > len(r.OutputDlS3.KeyValueMetadata) {
				r.OutputDlS3.KeyValueMetadata = append(r.OutputDlS3.KeyValueMetadata, keyValueMetadata1)
			} else {
				r.OutputDlS3.KeyValueMetadata[keyValueMetadataCount1].Key = keyValueMetadata1.Key
				r.OutputDlS3.KeyValueMetadata[keyValueMetadataCount1].Value = keyValueMetadata1.Value
			}
		}
		r.OutputDlS3.KmsKeyID = types.StringPointerValue(resp.OutputDlS3.KmsKeyID)
		r.OutputDlS3.MaxClosingFilesToBackpressure = types.Float64PointerValue(resp.OutputDlS3.MaxClosingFilesToBackpressure)
		r.OutputDlS3.MaxConcurrentFileParts = types.Float64PointerValue(resp.OutputDlS3.MaxConcurrentFileParts)
		r.OutputDlS3.MaxFileIdleTimeSec = types.Float64PointerValue(resp.OutputDlS3.MaxFileIdleTimeSec)
		r.OutputDlS3.MaxFileOpenTimeSec = types.Float64PointerValue(resp.OutputDlS3.MaxFileOpenTimeSec)
		r.OutputDlS3.MaxFileSizeMB = types.Float64PointerValue(resp.OutputDlS3.MaxFileSizeMB)
		r.OutputDlS3.MaxOpenFiles = types.Float64PointerValue(resp.OutputDlS3.MaxOpenFiles)
		r.OutputDlS3.MaxRetryNum = types.Float64PointerValue(resp.OutputDlS3.MaxRetryNum)
		if resp.OutputDlS3.ObjectACL != nil {
			r.OutputDlS3.ObjectACL = types.StringValue(string(*resp.OutputDlS3.ObjectACL))
		} else {
			r.OutputDlS3.ObjectACL = types.StringNull()
		}
		if resp.OutputDlS3.OnBackpressure != nil {
			r.OutputDlS3.OnBackpressure = types.StringValue(string(*resp.OutputDlS3.OnBackpressure))
		} else {
			r.OutputDlS3.OnBackpressure = types.StringNull()
		}
		if resp.OutputDlS3.OnDiskFullBackpressure != nil {
			r.OutputDlS3.OnDiskFullBackpressure = types.StringValue(string(*resp.OutputDlS3.OnDiskFullBackpressure))
		} else {
			r.OutputDlS3.OnDiskFullBackpressure = types.StringNull()
		}
		if resp.OutputDlS3.ParquetDataPageVersion != nil {
			r.OutputDlS3.ParquetDataPageVersion = types.StringValue(string(*resp.OutputDlS3.ParquetDataPageVersion))
		} else {
			r.OutputDlS3.ParquetDataPageVersion = types.StringNull()
		}
		r.OutputDlS3.ParquetPageSize = types.StringPointerValue(resp.OutputDlS3.ParquetPageSize)
		r.OutputDlS3.ParquetRowGroupLength = types.Float64PointerValue(resp.OutputDlS3.ParquetRowGroupLength)
		if resp.OutputDlS3.ParquetVersion != nil {
			r.OutputDlS3.ParquetVersion = types.StringValue(string(*resp.OutputDlS3.ParquetVersion))
		} else {
			r.OutputDlS3.ParquetVersion = types.StringNull()
		}
		r.OutputDlS3.PartitioningFields = make([]types.String, 0, len(resp.OutputDlS3.PartitioningFields))
		for _, v := range resp.OutputDlS3.PartitioningFields {
			r.OutputDlS3.PartitioningFields = append(r.OutputDlS3.PartitioningFields, types.StringValue(v))
		}
		r.OutputDlS3.Pipeline = types.StringPointerValue(resp.OutputDlS3.Pipeline)
		r.OutputDlS3.Region = types.StringPointerValue(resp.OutputDlS3.Region)
		r.OutputDlS3.RejectUnauthorized = types.BoolPointerValue(resp.OutputDlS3.RejectUnauthorized)
		r.OutputDlS3.RemoveEmptyDirs = types.BoolPointerValue(resp.OutputDlS3.RemoveEmptyDirs)
		r.OutputDlS3.ReuseConnections = types.BoolPointerValue(resp.OutputDlS3.ReuseConnections)
		if resp.OutputDlS3.ServerSideEncryption != nil {
			r.OutputDlS3.ServerSideEncryption = types.StringValue(string(*resp.OutputDlS3.ServerSideEncryption))
		} else {
			r.OutputDlS3.ServerSideEncryption = types.StringNull()
		}
		r.OutputDlS3.ShouldLogInvalidRows = types.BoolPointerValue(resp.OutputDlS3.ShouldLogInvalidRows)
		if resp.OutputDlS3.SignatureVersion != nil {
			r.OutputDlS3.SignatureVersion = types.StringValue(string(*resp.OutputDlS3.SignatureVersion))
		} else {
			r.OutputDlS3.SignatureVersion = types.StringNull()
		}
		r.OutputDlS3.StagePath = types.StringPointerValue(resp.OutputDlS3.StagePath)
		if resp.OutputDlS3.StorageClass != nil {
			r.OutputDlS3.StorageClass = types.StringValue(string(*resp.OutputDlS3.StorageClass))
		} else {
			r.OutputDlS3.StorageClass = types.StringNull()
		}
		r.OutputDlS3.Streamtags = make([]types.String, 0, len(resp.OutputDlS3.Streamtags))
		for _, v := range resp.OutputDlS3.Streamtags {
			r.OutputDlS3.Streamtags = append(r.OutputDlS3.Streamtags, types.StringValue(v))
		}
		r.OutputDlS3.SystemFields = make([]types.String, 0, len(resp.OutputDlS3.SystemFields))
		for _, v := range resp.OutputDlS3.SystemFields {
			r.OutputDlS3.SystemFields = append(r.OutputDlS3.SystemFields, types.StringValue(v))
		}
		if resp.OutputDlS3.Type != nil {
			r.OutputDlS3.Type = types.StringValue(string(*resp.OutputDlS3.Type))
		} else {
			r.OutputDlS3.Type = types.StringNull()
		}
		r.OutputDlS3.VerifyPermissions = types.BoolPointerValue(resp.OutputDlS3.VerifyPermissions)
		r.OutputDlS3.WriteHighWaterMark = types.Float64PointerValue(resp.OutputDlS3.WriteHighWaterMark)
	}
	if resp.OutputDynatraceHTTP != nil {
		r.OutputDynatraceHTTP = &tfTypes.OutputDynatraceHTTP{}
		r.OutputDynatraceHTTP.ActiveGateDomain = types.StringPointerValue(resp.OutputDynatraceHTTP.ActiveGateDomain)
		if resp.OutputDynatraceHTTP.AuthType != nil {
			r.OutputDynatraceHTTP.AuthType = types.StringValue(string(*resp.OutputDynatraceHTTP.AuthType))
		} else {
			r.OutputDynatraceHTTP.AuthType = types.StringNull()
		}
		r.OutputDynatraceHTTP.Compress = types.BoolPointerValue(resp.OutputDynatraceHTTP.Compress)
		r.OutputDynatraceHTTP.Concurrency = types.Float64PointerValue(resp.OutputDynatraceHTTP.Concurrency)
		r.OutputDynatraceHTTP.Description = types.StringPointerValue(resp.OutputDynatraceHTTP.Description)
		if resp.OutputDynatraceHTTP.Endpoint != nil {
			r.OutputDynatraceHTTP.Endpoint = types.StringValue(string(*resp.OutputDynatraceHTTP.Endpoint))
		} else {
			r.OutputDynatraceHTTP.Endpoint = types.StringNull()
		}
		r.OutputDynatraceHTTP.Environment = types.StringPointerValue(resp.OutputDynatraceHTTP.Environment)
		r.OutputDynatraceHTTP.EnvironmentID = types.StringPointerValue(resp.OutputDynatraceHTTP.EnvironmentID)
		r.OutputDynatraceHTTP.ExtraHTTPHeaders = []tfTypes.OutputDynatraceHTTPExtraHTTPHeader{}
		if len(r.OutputDynatraceHTTP.ExtraHTTPHeaders) > len(resp.OutputDynatraceHTTP.ExtraHTTPHeaders) {
			r.OutputDynatraceHTTP.ExtraHTTPHeaders = r.OutputDynatraceHTTP.ExtraHTTPHeaders[:len(resp.OutputDynatraceHTTP.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount6, extraHTTPHeadersItem6 := range resp.OutputDynatraceHTTP.ExtraHTTPHeaders {
			var extraHTTPHeaders6 tfTypes.OutputDynatraceHTTPExtraHTTPHeader
			extraHTTPHeaders6.Name = types.StringPointerValue(extraHTTPHeadersItem6.Name)
			extraHTTPHeaders6.Value = types.StringValue(extraHTTPHeadersItem6.Value)
			if extraHTTPHeadersCount6+1 > len(r.OutputDynatraceHTTP.ExtraHTTPHeaders) {
				r.OutputDynatraceHTTP.ExtraHTTPHeaders = append(r.OutputDynatraceHTTP.ExtraHTTPHeaders, extraHTTPHeaders6)
			} else {
				r.OutputDynatraceHTTP.ExtraHTTPHeaders[extraHTTPHeadersCount6].Name = extraHTTPHeaders6.Name
				r.OutputDynatraceHTTP.ExtraHTTPHeaders[extraHTTPHeadersCount6].Value = extraHTTPHeaders6.Value
			}
		}
		if resp.OutputDynatraceHTTP.FailedRequestLoggingMode != nil {
			r.OutputDynatraceHTTP.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputDynatraceHTTP.FailedRequestLoggingMode))
		} else {
			r.OutputDynatraceHTTP.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputDynatraceHTTP.FlushPeriodSec = types.Float64PointerValue(resp.OutputDynatraceHTTP.FlushPeriodSec)
		if resp.OutputDynatraceHTTP.Format != nil {
			r.OutputDynatraceHTTP.Format = types.StringValue(string(*resp.OutputDynatraceHTTP.Format))
		} else {
			r.OutputDynatraceHTTP.Format = types.StringNull()
		}
		r.OutputDynatraceHTTP.ID = types.StringPointerValue(resp.OutputDynatraceHTTP.ID)
		r.OutputDynatraceHTTP.KeepAlive = types.BoolPointerValue(resp.OutputDynatraceHTTP.KeepAlive)
		r.OutputDynatraceHTTP.MaxPayloadEvents = types.Float64PointerValue(resp.OutputDynatraceHTTP.MaxPayloadEvents)
		r.OutputDynatraceHTTP.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputDynatraceHTTP.MaxPayloadSizeKB)
		if resp.OutputDynatraceHTTP.Method != nil {
			r.OutputDynatraceHTTP.Method = types.StringValue(string(*resp.OutputDynatraceHTTP.Method))
		} else {
			r.OutputDynatraceHTTP.Method = types.StringNull()
		}
		if resp.OutputDynatraceHTTP.OnBackpressure != nil {
			r.OutputDynatraceHTTP.OnBackpressure = types.StringValue(string(*resp.OutputDynatraceHTTP.OnBackpressure))
		} else {
			r.OutputDynatraceHTTP.OnBackpressure = types.StringNull()
		}
		r.OutputDynatraceHTTP.Pipeline = types.StringPointerValue(resp.OutputDynatraceHTTP.Pipeline)
		if resp.OutputDynatraceHTTP.PqCompress != nil {
			r.OutputDynatraceHTTP.PqCompress = types.StringValue(string(*resp.OutputDynatraceHTTP.PqCompress))
		} else {
			r.OutputDynatraceHTTP.PqCompress = types.StringNull()
		}
		if resp.OutputDynatraceHTTP.PqControls == nil {
			r.OutputDynatraceHTTP.PqControls = nil
		} else {
			r.OutputDynatraceHTTP.PqControls = &tfTypes.OutputDynatraceHTTPPqControls{}
		}
		r.OutputDynatraceHTTP.PqMaxFileSize = types.StringPointerValue(resp.OutputDynatraceHTTP.PqMaxFileSize)
		r.OutputDynatraceHTTP.PqMaxSize = types.StringPointerValue(resp.OutputDynatraceHTTP.PqMaxSize)
		if resp.OutputDynatraceHTTP.PqMode != nil {
			r.OutputDynatraceHTTP.PqMode = types.StringValue(string(*resp.OutputDynatraceHTTP.PqMode))
		} else {
			r.OutputDynatraceHTTP.PqMode = types.StringNull()
		}
		if resp.OutputDynatraceHTTP.PqOnBackpressure != nil {
			r.OutputDynatraceHTTP.PqOnBackpressure = types.StringValue(string(*resp.OutputDynatraceHTTP.PqOnBackpressure))
		} else {
			r.OutputDynatraceHTTP.PqOnBackpressure = types.StringNull()
		}
		r.OutputDynatraceHTTP.PqPath = types.StringPointerValue(resp.OutputDynatraceHTTP.PqPath)
		r.OutputDynatraceHTTP.RejectUnauthorized = types.BoolPointerValue(resp.OutputDynatraceHTTP.RejectUnauthorized)
		r.OutputDynatraceHTTP.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputDynatraceHTTP.ResponseHonorRetryAfterHeader)
		r.OutputDynatraceHTTP.ResponseRetrySettings = []tfTypes.OutputDynatraceHTTPResponseRetrySetting{}
		if len(r.OutputDynatraceHTTP.ResponseRetrySettings) > len(resp.OutputDynatraceHTTP.ResponseRetrySettings) {
			r.OutputDynatraceHTTP.ResponseRetrySettings = r.OutputDynatraceHTTP.ResponseRetrySettings[:len(resp.OutputDynatraceHTTP.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount7, responseRetrySettingsItem7 := range resp.OutputDynatraceHTTP.ResponseRetrySettings {
			var responseRetrySettings7 tfTypes.OutputDynatraceHTTPResponseRetrySetting
			responseRetrySettings7.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem7.BackoffRate)
			responseRetrySettings7.HTTPStatus = types.Float64Value(responseRetrySettingsItem7.HTTPStatus)
			responseRetrySettings7.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem7.InitialBackoff)
			responseRetrySettings7.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem7.MaxBackoff)
			if responseRetrySettingsCount7+1 > len(r.OutputDynatraceHTTP.ResponseRetrySettings) {
				r.OutputDynatraceHTTP.ResponseRetrySettings = append(r.OutputDynatraceHTTP.ResponseRetrySettings, responseRetrySettings7)
			} else {
				r.OutputDynatraceHTTP.ResponseRetrySettings[responseRetrySettingsCount7].BackoffRate = responseRetrySettings7.BackoffRate
				r.OutputDynatraceHTTP.ResponseRetrySettings[responseRetrySettingsCount7].HTTPStatus = responseRetrySettings7.HTTPStatus
				r.OutputDynatraceHTTP.ResponseRetrySettings[responseRetrySettingsCount7].InitialBackoff = responseRetrySettings7.InitialBackoff
				r.OutputDynatraceHTTP.ResponseRetrySettings[responseRetrySettingsCount7].MaxBackoff = responseRetrySettings7.MaxBackoff
			}
		}
		r.OutputDynatraceHTTP.SafeHeaders = make([]types.String, 0, len(resp.OutputDynatraceHTTP.SafeHeaders))
		for _, v := range resp.OutputDynatraceHTTP.SafeHeaders {
			r.OutputDynatraceHTTP.SafeHeaders = append(r.OutputDynatraceHTTP.SafeHeaders, types.StringValue(v))
		}
		r.OutputDynatraceHTTP.Streamtags = make([]types.String, 0, len(resp.OutputDynatraceHTTP.Streamtags))
		for _, v := range resp.OutputDynatraceHTTP.Streamtags {
			r.OutputDynatraceHTTP.Streamtags = append(r.OutputDynatraceHTTP.Streamtags, types.StringValue(v))
		}
		r.OutputDynatraceHTTP.SystemFields = make([]types.String, 0, len(resp.OutputDynatraceHTTP.SystemFields))
		for _, v := range resp.OutputDynatraceHTTP.SystemFields {
			r.OutputDynatraceHTTP.SystemFields = append(r.OutputDynatraceHTTP.SystemFields, types.StringValue(v))
		}
		if resp.OutputDynatraceHTTP.TelemetryType != nil {
			r.OutputDynatraceHTTP.TelemetryType = types.StringValue(string(*resp.OutputDynatraceHTTP.TelemetryType))
		} else {
			r.OutputDynatraceHTTP.TelemetryType = types.StringNull()
		}
		r.OutputDynatraceHTTP.TextSecret = types.StringPointerValue(resp.OutputDynatraceHTTP.TextSecret)
		if resp.OutputDynatraceHTTP.TimeoutRetrySettings == nil {
			r.OutputDynatraceHTTP.TimeoutRetrySettings = nil
		} else {
			r.OutputDynatraceHTTP.TimeoutRetrySettings = &tfTypes.OutputDynatraceHTTPTimeoutRetrySettings{}
			r.OutputDynatraceHTTP.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputDynatraceHTTP.TimeoutRetrySettings.BackoffRate)
			r.OutputDynatraceHTTP.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputDynatraceHTTP.TimeoutRetrySettings.InitialBackoff)
			r.OutputDynatraceHTTP.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputDynatraceHTTP.TimeoutRetrySettings.MaxBackoff)
			r.OutputDynatraceHTTP.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputDynatraceHTTP.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputDynatraceHTTP.TimeoutSec = types.Float64PointerValue(resp.OutputDynatraceHTTP.TimeoutSec)
		r.OutputDynatraceHTTP.Token = types.StringPointerValue(resp.OutputDynatraceHTTP.Token)
		r.OutputDynatraceHTTP.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputDynatraceHTTP.TotalMemoryLimitKB)
		if resp.OutputDynatraceHTTP.Type != nil {
			r.OutputDynatraceHTTP.Type = types.StringValue(string(*resp.OutputDynatraceHTTP.Type))
		} else {
			r.OutputDynatraceHTTP.Type = types.StringNull()
		}
		r.OutputDynatraceHTTP.URL = types.StringPointerValue(resp.OutputDynatraceHTTP.URL)
		r.OutputDynatraceHTTP.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputDynatraceHTTP.UseRoundRobinDNS)
	}
	if resp.OutputDynatraceOtlp != nil {
		r.OutputDynatraceOtlp = &tfTypes.OutputDynatraceOtlp{}
		r.OutputDynatraceOtlp.AuthTokenName = types.StringPointerValue(resp.OutputDynatraceOtlp.AuthTokenName)
		if resp.OutputDynatraceOtlp.Compress != nil {
			r.OutputDynatraceOtlp.Compress = types.StringValue(string(*resp.OutputDynatraceOtlp.Compress))
		} else {
			r.OutputDynatraceOtlp.Compress = types.StringNull()
		}
		r.OutputDynatraceOtlp.Concurrency = types.Float64PointerValue(resp.OutputDynatraceOtlp.Concurrency)
		r.OutputDynatraceOtlp.ConnectionTimeout = types.Float64PointerValue(resp.OutputDynatraceOtlp.ConnectionTimeout)
		r.OutputDynatraceOtlp.Description = types.StringPointerValue(resp.OutputDynatraceOtlp.Description)
		r.OutputDynatraceOtlp.Endpoint = types.StringPointerValue(resp.OutputDynatraceOtlp.Endpoint)
		if resp.OutputDynatraceOtlp.EndpointType != nil {
			r.OutputDynatraceOtlp.EndpointType = types.StringValue(string(*resp.OutputDynatraceOtlp.EndpointType))
		} else {
			r.OutputDynatraceOtlp.EndpointType = types.StringNull()
		}
		r.OutputDynatraceOtlp.Environment = types.StringPointerValue(resp.OutputDynatraceOtlp.Environment)
		r.OutputDynatraceOtlp.ExtraHTTPHeaders = []tfTypes.OutputDynatraceOtlpExtraHTTPHeader{}
		if len(r.OutputDynatraceOtlp.ExtraHTTPHeaders) > len(resp.OutputDynatraceOtlp.ExtraHTTPHeaders) {
			r.OutputDynatraceOtlp.ExtraHTTPHeaders = r.OutputDynatraceOtlp.ExtraHTTPHeaders[:len(resp.OutputDynatraceOtlp.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount7, extraHTTPHeadersItem7 := range resp.OutputDynatraceOtlp.ExtraHTTPHeaders {
			var extraHTTPHeaders7 tfTypes.OutputDynatraceOtlpExtraHTTPHeader
			extraHTTPHeaders7.Name = types.StringPointerValue(extraHTTPHeadersItem7.Name)
			extraHTTPHeaders7.Value = types.StringValue(extraHTTPHeadersItem7.Value)
			if extraHTTPHeadersCount7+1 > len(r.OutputDynatraceOtlp.ExtraHTTPHeaders) {
				r.OutputDynatraceOtlp.ExtraHTTPHeaders = append(r.OutputDynatraceOtlp.ExtraHTTPHeaders, extraHTTPHeaders7)
			} else {
				r.OutputDynatraceOtlp.ExtraHTTPHeaders[extraHTTPHeadersCount7].Name = extraHTTPHeaders7.Name
				r.OutputDynatraceOtlp.ExtraHTTPHeaders[extraHTTPHeadersCount7].Value = extraHTTPHeaders7.Value
			}
		}
		if resp.OutputDynatraceOtlp.FailedRequestLoggingMode != nil {
			r.OutputDynatraceOtlp.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputDynatraceOtlp.FailedRequestLoggingMode))
		} else {
			r.OutputDynatraceOtlp.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputDynatraceOtlp.FlushPeriodSec = types.Float64PointerValue(resp.OutputDynatraceOtlp.FlushPeriodSec)
		if resp.OutputDynatraceOtlp.HTTPCompress != nil {
			r.OutputDynatraceOtlp.HTTPCompress = types.StringValue(string(*resp.OutputDynatraceOtlp.HTTPCompress))
		} else {
			r.OutputDynatraceOtlp.HTTPCompress = types.StringNull()
		}
		r.OutputDynatraceOtlp.HTTPLogsEndpointOverride = types.StringPointerValue(resp.OutputDynatraceOtlp.HTTPLogsEndpointOverride)
		r.OutputDynatraceOtlp.HTTPMetricsEndpointOverride = types.StringPointerValue(resp.OutputDynatraceOtlp.HTTPMetricsEndpointOverride)
		r.OutputDynatraceOtlp.HTTPTracesEndpointOverride = types.StringPointerValue(resp.OutputDynatraceOtlp.HTTPTracesEndpointOverride)
		r.OutputDynatraceOtlp.ID = types.StringPointerValue(resp.OutputDynatraceOtlp.ID)
		r.OutputDynatraceOtlp.KeepAlive = types.BoolPointerValue(resp.OutputDynatraceOtlp.KeepAlive)
		r.OutputDynatraceOtlp.KeepAliveTime = types.Float64PointerValue(resp.OutputDynatraceOtlp.KeepAliveTime)
		r.OutputDynatraceOtlp.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputDynatraceOtlp.MaxPayloadSizeKB)
		r.OutputDynatraceOtlp.Metadata = []tfTypes.OutputDynatraceOtlpMetadatum{}
		if len(r.OutputDynatraceOtlp.Metadata) > len(resp.OutputDynatraceOtlp.Metadata) {
			r.OutputDynatraceOtlp.Metadata = r.OutputDynatraceOtlp.Metadata[:len(resp.OutputDynatraceOtlp.Metadata)]
		}
		for metadataCount, metadataItem := range resp.OutputDynatraceOtlp.Metadata {
			var metadata tfTypes.OutputDynatraceOtlpMetadatum
			metadata.Key = types.StringPointerValue(metadataItem.Key)
			metadata.Value = types.StringValue(metadataItem.Value)
			if metadataCount+1 > len(r.OutputDynatraceOtlp.Metadata) {
				r.OutputDynatraceOtlp.Metadata = append(r.OutputDynatraceOtlp.Metadata, metadata)
			} else {
				r.OutputDynatraceOtlp.Metadata[metadataCount].Key = metadata.Key
				r.OutputDynatraceOtlp.Metadata[metadataCount].Value = metadata.Value
			}
		}
		if resp.OutputDynatraceOtlp.OnBackpressure != nil {
			r.OutputDynatraceOtlp.OnBackpressure = types.StringValue(string(*resp.OutputDynatraceOtlp.OnBackpressure))
		} else {
			r.OutputDynatraceOtlp.OnBackpressure = types.StringNull()
		}
		if resp.OutputDynatraceOtlp.OtlpVersion != nil {
			r.OutputDynatraceOtlp.OtlpVersion = types.StringValue(string(*resp.OutputDynatraceOtlp.OtlpVersion))
		} else {
			r.OutputDynatraceOtlp.OtlpVersion = types.StringNull()
		}
		r.OutputDynatraceOtlp.Pipeline = types.StringPointerValue(resp.OutputDynatraceOtlp.Pipeline)
		if resp.OutputDynatraceOtlp.PqCompress != nil {
			r.OutputDynatraceOtlp.PqCompress = types.StringValue(string(*resp.OutputDynatraceOtlp.PqCompress))
		} else {
			r.OutputDynatraceOtlp.PqCompress = types.StringNull()
		}
		if resp.OutputDynatraceOtlp.PqControls == nil {
			r.OutputDynatraceOtlp.PqControls = nil
		} else {
			r.OutputDynatraceOtlp.PqControls = &tfTypes.OutputDynatraceOtlpPqControls{}
		}
		r.OutputDynatraceOtlp.PqMaxFileSize = types.StringPointerValue(resp.OutputDynatraceOtlp.PqMaxFileSize)
		r.OutputDynatraceOtlp.PqMaxSize = types.StringPointerValue(resp.OutputDynatraceOtlp.PqMaxSize)
		if resp.OutputDynatraceOtlp.PqMode != nil {
			r.OutputDynatraceOtlp.PqMode = types.StringValue(string(*resp.OutputDynatraceOtlp.PqMode))
		} else {
			r.OutputDynatraceOtlp.PqMode = types.StringNull()
		}
		if resp.OutputDynatraceOtlp.PqOnBackpressure != nil {
			r.OutputDynatraceOtlp.PqOnBackpressure = types.StringValue(string(*resp.OutputDynatraceOtlp.PqOnBackpressure))
		} else {
			r.OutputDynatraceOtlp.PqOnBackpressure = types.StringNull()
		}
		r.OutputDynatraceOtlp.PqPath = types.StringPointerValue(resp.OutputDynatraceOtlp.PqPath)
		if resp.OutputDynatraceOtlp.Protocol != nil {
			r.OutputDynatraceOtlp.Protocol = types.StringValue(string(*resp.OutputDynatraceOtlp.Protocol))
		} else {
			r.OutputDynatraceOtlp.Protocol = types.StringNull()
		}
		r.OutputDynatraceOtlp.RejectUnauthorized = types.BoolPointerValue(resp.OutputDynatraceOtlp.RejectUnauthorized)
		r.OutputDynatraceOtlp.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputDynatraceOtlp.ResponseHonorRetryAfterHeader)
		r.OutputDynatraceOtlp.ResponseRetrySettings = []tfTypes.OutputDynatraceOtlpResponseRetrySetting{}
		if len(r.OutputDynatraceOtlp.ResponseRetrySettings) > len(resp.OutputDynatraceOtlp.ResponseRetrySettings) {
			r.OutputDynatraceOtlp.ResponseRetrySettings = r.OutputDynatraceOtlp.ResponseRetrySettings[:len(resp.OutputDynatraceOtlp.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount8, responseRetrySettingsItem8 := range resp.OutputDynatraceOtlp.ResponseRetrySettings {
			var responseRetrySettings8 tfTypes.OutputDynatraceOtlpResponseRetrySetting
			responseRetrySettings8.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem8.BackoffRate)
			responseRetrySettings8.HTTPStatus = types.Float64Value(responseRetrySettingsItem8.HTTPStatus)
			responseRetrySettings8.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem8.InitialBackoff)
			responseRetrySettings8.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem8.MaxBackoff)
			if responseRetrySettingsCount8+1 > len(r.OutputDynatraceOtlp.ResponseRetrySettings) {
				r.OutputDynatraceOtlp.ResponseRetrySettings = append(r.OutputDynatraceOtlp.ResponseRetrySettings, responseRetrySettings8)
			} else {
				r.OutputDynatraceOtlp.ResponseRetrySettings[responseRetrySettingsCount8].BackoffRate = responseRetrySettings8.BackoffRate
				r.OutputDynatraceOtlp.ResponseRetrySettings[responseRetrySettingsCount8].HTTPStatus = responseRetrySettings8.HTTPStatus
				r.OutputDynatraceOtlp.ResponseRetrySettings[responseRetrySettingsCount8].InitialBackoff = responseRetrySettings8.InitialBackoff
				r.OutputDynatraceOtlp.ResponseRetrySettings[responseRetrySettingsCount8].MaxBackoff = responseRetrySettings8.MaxBackoff
			}
		}
		r.OutputDynatraceOtlp.SafeHeaders = make([]types.String, 0, len(resp.OutputDynatraceOtlp.SafeHeaders))
		for _, v := range resp.OutputDynatraceOtlp.SafeHeaders {
			r.OutputDynatraceOtlp.SafeHeaders = append(r.OutputDynatraceOtlp.SafeHeaders, types.StringValue(v))
		}
		r.OutputDynatraceOtlp.Streamtags = make([]types.String, 0, len(resp.OutputDynatraceOtlp.Streamtags))
		for _, v := range resp.OutputDynatraceOtlp.Streamtags {
			r.OutputDynatraceOtlp.Streamtags = append(r.OutputDynatraceOtlp.Streamtags, types.StringValue(v))
		}
		r.OutputDynatraceOtlp.SystemFields = make([]types.String, 0, len(resp.OutputDynatraceOtlp.SystemFields))
		for _, v := range resp.OutputDynatraceOtlp.SystemFields {
			r.OutputDynatraceOtlp.SystemFields = append(r.OutputDynatraceOtlp.SystemFields, types.StringValue(v))
		}
		if resp.OutputDynatraceOtlp.TimeoutRetrySettings == nil {
			r.OutputDynatraceOtlp.TimeoutRetrySettings = nil
		} else {
			r.OutputDynatraceOtlp.TimeoutRetrySettings = &tfTypes.OutputDynatraceOtlpTimeoutRetrySettings{}
			r.OutputDynatraceOtlp.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputDynatraceOtlp.TimeoutRetrySettings.BackoffRate)
			r.OutputDynatraceOtlp.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputDynatraceOtlp.TimeoutRetrySettings.InitialBackoff)
			r.OutputDynatraceOtlp.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputDynatraceOtlp.TimeoutRetrySettings.MaxBackoff)
			r.OutputDynatraceOtlp.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputDynatraceOtlp.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputDynatraceOtlp.TimeoutSec = types.Float64PointerValue(resp.OutputDynatraceOtlp.TimeoutSec)
		r.OutputDynatraceOtlp.TokenSecret = types.StringValue(resp.OutputDynatraceOtlp.TokenSecret)
		if resp.OutputDynatraceOtlp.Type != nil {
			r.OutputDynatraceOtlp.Type = types.StringValue(string(*resp.OutputDynatraceOtlp.Type))
		} else {
			r.OutputDynatraceOtlp.Type = types.StringNull()
		}
		r.OutputDynatraceOtlp.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputDynatraceOtlp.UseRoundRobinDNS)
	}
	if resp.OutputElastic != nil {
		r.OutputElastic = &tfTypes.OutputElastic{}
		if resp.OutputElastic.Auth == nil {
			r.OutputElastic.Auth = nil
		} else {
			r.OutputElastic.Auth = &tfTypes.OutputElasticAuth{}
			if resp.OutputElastic.Auth.AuthType != nil {
				r.OutputElastic.Auth.AuthType = types.StringValue(string(*resp.OutputElastic.Auth.AuthType))
			} else {
				r.OutputElastic.Auth.AuthType = types.StringNull()
			}
			r.OutputElastic.Auth.Disabled = types.BoolPointerValue(resp.OutputElastic.Auth.Disabled)
		}
		r.OutputElastic.Compress = types.BoolPointerValue(resp.OutputElastic.Compress)
		r.OutputElastic.Concurrency = types.Float64PointerValue(resp.OutputElastic.Concurrency)
		r.OutputElastic.Description = types.StringPointerValue(resp.OutputElastic.Description)
		r.OutputElastic.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputElastic.DNSResolvePeriodSec)
		r.OutputElastic.DocType = types.StringPointerValue(resp.OutputElastic.DocType)
		r.OutputElastic.ElasticPipeline = types.StringPointerValue(resp.OutputElastic.ElasticPipeline)
		if resp.OutputElastic.ElasticVersion != nil {
			r.OutputElastic.ElasticVersion = types.StringValue(string(*resp.OutputElastic.ElasticVersion))
		} else {
			r.OutputElastic.ElasticVersion = types.StringNull()
		}
		r.OutputElastic.Environment = types.StringPointerValue(resp.OutputElastic.Environment)
		r.OutputElastic.ExcludeSelf = types.BoolPointerValue(resp.OutputElastic.ExcludeSelf)
		r.OutputElastic.ExtraHTTPHeaders = []tfTypes.OutputElasticExtraHTTPHeader{}
		if len(r.OutputElastic.ExtraHTTPHeaders) > len(resp.OutputElastic.ExtraHTTPHeaders) {
			r.OutputElastic.ExtraHTTPHeaders = r.OutputElastic.ExtraHTTPHeaders[:len(resp.OutputElastic.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount8, extraHTTPHeadersItem8 := range resp.OutputElastic.ExtraHTTPHeaders {
			var extraHTTPHeaders8 tfTypes.OutputElasticExtraHTTPHeader
			extraHTTPHeaders8.Name = types.StringPointerValue(extraHTTPHeadersItem8.Name)
			extraHTTPHeaders8.Value = types.StringValue(extraHTTPHeadersItem8.Value)
			if extraHTTPHeadersCount8+1 > len(r.OutputElastic.ExtraHTTPHeaders) {
				r.OutputElastic.ExtraHTTPHeaders = append(r.OutputElastic.ExtraHTTPHeaders, extraHTTPHeaders8)
			} else {
				r.OutputElastic.ExtraHTTPHeaders[extraHTTPHeadersCount8].Name = extraHTTPHeaders8.Name
				r.OutputElastic.ExtraHTTPHeaders[extraHTTPHeadersCount8].Value = extraHTTPHeaders8.Value
			}
		}
		r.OutputElastic.ExtraParams = []tfTypes.OutputElasticExtraParam{}
		if len(r.OutputElastic.ExtraParams) > len(resp.OutputElastic.ExtraParams) {
			r.OutputElastic.ExtraParams = r.OutputElastic.ExtraParams[:len(resp.OutputElastic.ExtraParams)]
		}
		for extraParamsCount, extraParamsItem := range resp.OutputElastic.ExtraParams {
			var extraParams tfTypes.OutputElasticExtraParam
			extraParams.Name = types.StringValue(extraParamsItem.Name)
			extraParams.Value = types.StringValue(extraParamsItem.Value)
			if extraParamsCount+1 > len(r.OutputElastic.ExtraParams) {
				r.OutputElastic.ExtraParams = append(r.OutputElastic.ExtraParams, extraParams)
			} else {
				r.OutputElastic.ExtraParams[extraParamsCount].Name = extraParams.Name
				r.OutputElastic.ExtraParams[extraParamsCount].Value = extraParams.Value
			}
		}
		if resp.OutputElastic.FailedRequestLoggingMode != nil {
			r.OutputElastic.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputElastic.FailedRequestLoggingMode))
		} else {
			r.OutputElastic.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputElastic.FlushPeriodSec = types.Float64PointerValue(resp.OutputElastic.FlushPeriodSec)
		r.OutputElastic.ID = types.StringPointerValue(resp.OutputElastic.ID)
		r.OutputElastic.IncludeDocID = types.BoolPointerValue(resp.OutputElastic.IncludeDocID)
		r.OutputElastic.Index = types.StringValue(resp.OutputElastic.Index)
		r.OutputElastic.LoadBalanced = types.BoolPointerValue(resp.OutputElastic.LoadBalanced)
		r.OutputElastic.LoadBalanceStatsPeriodSec = types.Float64PointerValue(resp.OutputElastic.LoadBalanceStatsPeriodSec)
		r.OutputElastic.MaxPayloadEvents = types.Float64PointerValue(resp.OutputElastic.MaxPayloadEvents)
		r.OutputElastic.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputElastic.MaxPayloadSizeKB)
		if resp.OutputElastic.OnBackpressure != nil {
			r.OutputElastic.OnBackpressure = types.StringValue(string(*resp.OutputElastic.OnBackpressure))
		} else {
			r.OutputElastic.OnBackpressure = types.StringNull()
		}
		r.OutputElastic.Pipeline = types.StringPointerValue(resp.OutputElastic.Pipeline)
		if resp.OutputElastic.PqCompress != nil {
			r.OutputElastic.PqCompress = types.StringValue(string(*resp.OutputElastic.PqCompress))
		} else {
			r.OutputElastic.PqCompress = types.StringNull()
		}
		if resp.OutputElastic.PqControls == nil {
			r.OutputElastic.PqControls = nil
		} else {
			r.OutputElastic.PqControls = &tfTypes.OutputElasticPqControls{}
		}
		r.OutputElastic.PqMaxFileSize = types.StringPointerValue(resp.OutputElastic.PqMaxFileSize)
		r.OutputElastic.PqMaxSize = types.StringPointerValue(resp.OutputElastic.PqMaxSize)
		if resp.OutputElastic.PqMode != nil {
			r.OutputElastic.PqMode = types.StringValue(string(*resp.OutputElastic.PqMode))
		} else {
			r.OutputElastic.PqMode = types.StringNull()
		}
		if resp.OutputElastic.PqOnBackpressure != nil {
			r.OutputElastic.PqOnBackpressure = types.StringValue(string(*resp.OutputElastic.PqOnBackpressure))
		} else {
			r.OutputElastic.PqOnBackpressure = types.StringNull()
		}
		r.OutputElastic.PqPath = types.StringPointerValue(resp.OutputElastic.PqPath)
		r.OutputElastic.RejectUnauthorized = types.BoolPointerValue(resp.OutputElastic.RejectUnauthorized)
		r.OutputElastic.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputElastic.ResponseHonorRetryAfterHeader)
		r.OutputElastic.ResponseRetrySettings = []tfTypes.OutputElasticResponseRetrySetting{}
		if len(r.OutputElastic.ResponseRetrySettings) > len(resp.OutputElastic.ResponseRetrySettings) {
			r.OutputElastic.ResponseRetrySettings = r.OutputElastic.ResponseRetrySettings[:len(resp.OutputElastic.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount9, responseRetrySettingsItem9 := range resp.OutputElastic.ResponseRetrySettings {
			var responseRetrySettings9 tfTypes.OutputElasticResponseRetrySetting
			responseRetrySettings9.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem9.BackoffRate)
			responseRetrySettings9.HTTPStatus = types.Float64Value(responseRetrySettingsItem9.HTTPStatus)
			responseRetrySettings9.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem9.InitialBackoff)
			responseRetrySettings9.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem9.MaxBackoff)
			if responseRetrySettingsCount9+1 > len(r.OutputElastic.ResponseRetrySettings) {
				r.OutputElastic.ResponseRetrySettings = append(r.OutputElastic.ResponseRetrySettings, responseRetrySettings9)
			} else {
				r.OutputElastic.ResponseRetrySettings[responseRetrySettingsCount9].BackoffRate = responseRetrySettings9.BackoffRate
				r.OutputElastic.ResponseRetrySettings[responseRetrySettingsCount9].HTTPStatus = responseRetrySettings9.HTTPStatus
				r.OutputElastic.ResponseRetrySettings[responseRetrySettingsCount9].InitialBackoff = responseRetrySettings9.InitialBackoff
				r.OutputElastic.ResponseRetrySettings[responseRetrySettingsCount9].MaxBackoff = responseRetrySettings9.MaxBackoff
			}
		}
		r.OutputElastic.RetryPartialErrors = types.BoolPointerValue(resp.OutputElastic.RetryPartialErrors)
		r.OutputElastic.SafeHeaders = make([]types.String, 0, len(resp.OutputElastic.SafeHeaders))
		for _, v := range resp.OutputElastic.SafeHeaders {
			r.OutputElastic.SafeHeaders = append(r.OutputElastic.SafeHeaders, types.StringValue(v))
		}
		r.OutputElastic.Streamtags = make([]types.String, 0, len(resp.OutputElastic.Streamtags))
		for _, v := range resp.OutputElastic.Streamtags {
			r.OutputElastic.Streamtags = append(r.OutputElastic.Streamtags, types.StringValue(v))
		}
		r.OutputElastic.SystemFields = make([]types.String, 0, len(resp.OutputElastic.SystemFields))
		for _, v := range resp.OutputElastic.SystemFields {
			r.OutputElastic.SystemFields = append(r.OutputElastic.SystemFields, types.StringValue(v))
		}
		if resp.OutputElastic.TimeoutRetrySettings == nil {
			r.OutputElastic.TimeoutRetrySettings = nil
		} else {
			r.OutputElastic.TimeoutRetrySettings = &tfTypes.OutputElasticTimeoutRetrySettings{}
			r.OutputElastic.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputElastic.TimeoutRetrySettings.BackoffRate)
			r.OutputElastic.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputElastic.TimeoutRetrySettings.InitialBackoff)
			r.OutputElastic.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputElastic.TimeoutRetrySettings.MaxBackoff)
			r.OutputElastic.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputElastic.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputElastic.TimeoutSec = types.Float64PointerValue(resp.OutputElastic.TimeoutSec)
		r.OutputElastic.Type = types.StringValue(string(resp.OutputElastic.Type))
		r.OutputElastic.URL = types.StringPointerValue(resp.OutputElastic.URL)
		r.OutputElastic.Urls = []tfTypes.OutputElasticURL{}
		if len(r.OutputElastic.Urls) > len(resp.OutputElastic.Urls) {
			r.OutputElastic.Urls = r.OutputElastic.Urls[:len(resp.OutputElastic.Urls)]
		}
		for urlsCount1, urlsItem1 := range resp.OutputElastic.Urls {
			var urls1 tfTypes.OutputElasticURL
			urls1.URL = types.StringValue(urlsItem1.URL)
			urls1.Weight = types.Float64PointerValue(urlsItem1.Weight)
			if urlsCount1+1 > len(r.OutputElastic.Urls) {
				r.OutputElastic.Urls = append(r.OutputElastic.Urls, urls1)
			} else {
				r.OutputElastic.Urls[urlsCount1].URL = urls1.URL
				r.OutputElastic.Urls[urlsCount1].Weight = urls1.Weight
			}
		}
		r.OutputElastic.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputElastic.UseRoundRobinDNS)
		if resp.OutputElastic.WriteAction != nil {
			r.OutputElastic.WriteAction = types.StringValue(string(*resp.OutputElastic.WriteAction))
		} else {
			r.OutputElastic.WriteAction = types.StringNull()
		}
	}
	if resp.OutputElasticCloud != nil {
		r.OutputElasticCloud = &tfTypes.OutputElasticCloud{}
		if resp.OutputElasticCloud.Auth == nil {
			r.OutputElasticCloud.Auth = nil
		} else {
			r.OutputElasticCloud.Auth = &tfTypes.OutputElasticCloudAuth{}
			if resp.OutputElasticCloud.Auth.AuthType != nil {
				r.OutputElasticCloud.Auth.AuthType = types.StringValue(string(*resp.OutputElasticCloud.Auth.AuthType))
			} else {
				r.OutputElasticCloud.Auth.AuthType = types.StringNull()
			}
			r.OutputElasticCloud.Auth.Disabled = types.BoolPointerValue(resp.OutputElasticCloud.Auth.Disabled)
		}
		r.OutputElasticCloud.Compress = types.BoolPointerValue(resp.OutputElasticCloud.Compress)
		r.OutputElasticCloud.Concurrency = types.Float64PointerValue(resp.OutputElasticCloud.Concurrency)
		r.OutputElasticCloud.Description = types.StringPointerValue(resp.OutputElasticCloud.Description)
		r.OutputElasticCloud.ElasticPipeline = types.StringPointerValue(resp.OutputElasticCloud.ElasticPipeline)
		r.OutputElasticCloud.Environment = types.StringPointerValue(resp.OutputElasticCloud.Environment)
		r.OutputElasticCloud.ExtraHTTPHeaders = []tfTypes.OutputElasticCloudExtraHTTPHeader{}
		if len(r.OutputElasticCloud.ExtraHTTPHeaders) > len(resp.OutputElasticCloud.ExtraHTTPHeaders) {
			r.OutputElasticCloud.ExtraHTTPHeaders = r.OutputElasticCloud.ExtraHTTPHeaders[:len(resp.OutputElasticCloud.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount9, extraHTTPHeadersItem9 := range resp.OutputElasticCloud.ExtraHTTPHeaders {
			var extraHTTPHeaders9 tfTypes.OutputElasticCloudExtraHTTPHeader
			extraHTTPHeaders9.Name = types.StringPointerValue(extraHTTPHeadersItem9.Name)
			extraHTTPHeaders9.Value = types.StringValue(extraHTTPHeadersItem9.Value)
			if extraHTTPHeadersCount9+1 > len(r.OutputElasticCloud.ExtraHTTPHeaders) {
				r.OutputElasticCloud.ExtraHTTPHeaders = append(r.OutputElasticCloud.ExtraHTTPHeaders, extraHTTPHeaders9)
			} else {
				r.OutputElasticCloud.ExtraHTTPHeaders[extraHTTPHeadersCount9].Name = extraHTTPHeaders9.Name
				r.OutputElasticCloud.ExtraHTTPHeaders[extraHTTPHeadersCount9].Value = extraHTTPHeaders9.Value
			}
		}
		r.OutputElasticCloud.ExtraParams = []tfTypes.OutputElasticCloudExtraParam{}
		if len(r.OutputElasticCloud.ExtraParams) > len(resp.OutputElasticCloud.ExtraParams) {
			r.OutputElasticCloud.ExtraParams = r.OutputElasticCloud.ExtraParams[:len(resp.OutputElasticCloud.ExtraParams)]
		}
		for extraParamsCount1, extraParamsItem1 := range resp.OutputElasticCloud.ExtraParams {
			var extraParams1 tfTypes.OutputElasticCloudExtraParam
			extraParams1.Name = types.StringValue(extraParamsItem1.Name)
			extraParams1.Value = types.StringValue(extraParamsItem1.Value)
			if extraParamsCount1+1 > len(r.OutputElasticCloud.ExtraParams) {
				r.OutputElasticCloud.ExtraParams = append(r.OutputElasticCloud.ExtraParams, extraParams1)
			} else {
				r.OutputElasticCloud.ExtraParams[extraParamsCount1].Name = extraParams1.Name
				r.OutputElasticCloud.ExtraParams[extraParamsCount1].Value = extraParams1.Value
			}
		}
		if resp.OutputElasticCloud.FailedRequestLoggingMode != nil {
			r.OutputElasticCloud.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputElasticCloud.FailedRequestLoggingMode))
		} else {
			r.OutputElasticCloud.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputElasticCloud.FlushPeriodSec = types.Float64PointerValue(resp.OutputElasticCloud.FlushPeriodSec)
		r.OutputElasticCloud.ID = types.StringPointerValue(resp.OutputElasticCloud.ID)
		r.OutputElasticCloud.IncludeDocID = types.BoolPointerValue(resp.OutputElasticCloud.IncludeDocID)
		r.OutputElasticCloud.Index = types.StringValue(resp.OutputElasticCloud.Index)
		r.OutputElasticCloud.MaxPayloadEvents = types.Float64PointerValue(resp.OutputElasticCloud.MaxPayloadEvents)
		r.OutputElasticCloud.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputElasticCloud.MaxPayloadSizeKB)
		if resp.OutputElasticCloud.OnBackpressure != nil {
			r.OutputElasticCloud.OnBackpressure = types.StringValue(string(*resp.OutputElasticCloud.OnBackpressure))
		} else {
			r.OutputElasticCloud.OnBackpressure = types.StringNull()
		}
		r.OutputElasticCloud.Pipeline = types.StringPointerValue(resp.OutputElasticCloud.Pipeline)
		if resp.OutputElasticCloud.PqCompress != nil {
			r.OutputElasticCloud.PqCompress = types.StringValue(string(*resp.OutputElasticCloud.PqCompress))
		} else {
			r.OutputElasticCloud.PqCompress = types.StringNull()
		}
		if resp.OutputElasticCloud.PqControls == nil {
			r.OutputElasticCloud.PqControls = nil
		} else {
			r.OutputElasticCloud.PqControls = &tfTypes.OutputElasticCloudPqControls{}
		}
		r.OutputElasticCloud.PqMaxFileSize = types.StringPointerValue(resp.OutputElasticCloud.PqMaxFileSize)
		r.OutputElasticCloud.PqMaxSize = types.StringPointerValue(resp.OutputElasticCloud.PqMaxSize)
		if resp.OutputElasticCloud.PqMode != nil {
			r.OutputElasticCloud.PqMode = types.StringValue(string(*resp.OutputElasticCloud.PqMode))
		} else {
			r.OutputElasticCloud.PqMode = types.StringNull()
		}
		if resp.OutputElasticCloud.PqOnBackpressure != nil {
			r.OutputElasticCloud.PqOnBackpressure = types.StringValue(string(*resp.OutputElasticCloud.PqOnBackpressure))
		} else {
			r.OutputElasticCloud.PqOnBackpressure = types.StringNull()
		}
		r.OutputElasticCloud.PqPath = types.StringPointerValue(resp.OutputElasticCloud.PqPath)
		r.OutputElasticCloud.RejectUnauthorized = types.BoolPointerValue(resp.OutputElasticCloud.RejectUnauthorized)
		r.OutputElasticCloud.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputElasticCloud.ResponseHonorRetryAfterHeader)
		r.OutputElasticCloud.ResponseRetrySettings = []tfTypes.OutputElasticCloudResponseRetrySetting{}
		if len(r.OutputElasticCloud.ResponseRetrySettings) > len(resp.OutputElasticCloud.ResponseRetrySettings) {
			r.OutputElasticCloud.ResponseRetrySettings = r.OutputElasticCloud.ResponseRetrySettings[:len(resp.OutputElasticCloud.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount10, responseRetrySettingsItem10 := range resp.OutputElasticCloud.ResponseRetrySettings {
			var responseRetrySettings10 tfTypes.OutputElasticCloudResponseRetrySetting
			responseRetrySettings10.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem10.BackoffRate)
			responseRetrySettings10.HTTPStatus = types.Float64Value(responseRetrySettingsItem10.HTTPStatus)
			responseRetrySettings10.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem10.InitialBackoff)
			responseRetrySettings10.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem10.MaxBackoff)
			if responseRetrySettingsCount10+1 > len(r.OutputElasticCloud.ResponseRetrySettings) {
				r.OutputElasticCloud.ResponseRetrySettings = append(r.OutputElasticCloud.ResponseRetrySettings, responseRetrySettings10)
			} else {
				r.OutputElasticCloud.ResponseRetrySettings[responseRetrySettingsCount10].BackoffRate = responseRetrySettings10.BackoffRate
				r.OutputElasticCloud.ResponseRetrySettings[responseRetrySettingsCount10].HTTPStatus = responseRetrySettings10.HTTPStatus
				r.OutputElasticCloud.ResponseRetrySettings[responseRetrySettingsCount10].InitialBackoff = responseRetrySettings10.InitialBackoff
				r.OutputElasticCloud.ResponseRetrySettings[responseRetrySettingsCount10].MaxBackoff = responseRetrySettings10.MaxBackoff
			}
		}
		r.OutputElasticCloud.SafeHeaders = make([]types.String, 0, len(resp.OutputElasticCloud.SafeHeaders))
		for _, v := range resp.OutputElasticCloud.SafeHeaders {
			r.OutputElasticCloud.SafeHeaders = append(r.OutputElasticCloud.SafeHeaders, types.StringValue(v))
		}
		r.OutputElasticCloud.Streamtags = make([]types.String, 0, len(resp.OutputElasticCloud.Streamtags))
		for _, v := range resp.OutputElasticCloud.Streamtags {
			r.OutputElasticCloud.Streamtags = append(r.OutputElasticCloud.Streamtags, types.StringValue(v))
		}
		r.OutputElasticCloud.SystemFields = make([]types.String, 0, len(resp.OutputElasticCloud.SystemFields))
		for _, v := range resp.OutputElasticCloud.SystemFields {
			r.OutputElasticCloud.SystemFields = append(r.OutputElasticCloud.SystemFields, types.StringValue(v))
		}
		if resp.OutputElasticCloud.TimeoutRetrySettings == nil {
			r.OutputElasticCloud.TimeoutRetrySettings = nil
		} else {
			r.OutputElasticCloud.TimeoutRetrySettings = &tfTypes.OutputElasticCloudTimeoutRetrySettings{}
			r.OutputElasticCloud.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputElasticCloud.TimeoutRetrySettings.BackoffRate)
			r.OutputElasticCloud.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputElasticCloud.TimeoutRetrySettings.InitialBackoff)
			r.OutputElasticCloud.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputElasticCloud.TimeoutRetrySettings.MaxBackoff)
			r.OutputElasticCloud.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputElasticCloud.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputElasticCloud.TimeoutSec = types.Float64PointerValue(resp.OutputElasticCloud.TimeoutSec)
		if resp.OutputElasticCloud.Type != nil {
			r.OutputElasticCloud.Type = types.StringValue(string(*resp.OutputElasticCloud.Type))
		} else {
			r.OutputElasticCloud.Type = types.StringNull()
		}
		r.OutputElasticCloud.URL = types.StringValue(resp.OutputElasticCloud.URL)
	}
	if resp.OutputExabeam != nil {
		r.OutputExabeam = &tfTypes.OutputExabeam{}
		r.OutputExabeam.AddIDToStagePath = types.BoolPointerValue(resp.OutputExabeam.AddIDToStagePath)
		r.OutputExabeam.AwsAPIKey = types.StringPointerValue(resp.OutputExabeam.AwsAPIKey)
		r.OutputExabeam.AwsSecretKey = types.StringPointerValue(resp.OutputExabeam.AwsSecretKey)
		r.OutputExabeam.Bucket = types.StringValue(resp.OutputExabeam.Bucket)
		r.OutputExabeam.CollectorInstanceID = types.StringValue(resp.OutputExabeam.CollectorInstanceID)
		r.OutputExabeam.DeadletterEnabled = types.BoolPointerValue(resp.OutputExabeam.DeadletterEnabled)
		r.OutputExabeam.DeadletterPath = types.StringPointerValue(resp.OutputExabeam.DeadletterPath)
		r.OutputExabeam.Description = types.StringPointerValue(resp.OutputExabeam.Description)
		r.OutputExabeam.EmptyDirCleanupSec = types.Float64PointerValue(resp.OutputExabeam.EmptyDirCleanupSec)
		r.OutputExabeam.EncodedConfiguration = types.StringPointerValue(resp.OutputExabeam.EncodedConfiguration)
		r.OutputExabeam.Endpoint = types.StringPointerValue(resp.OutputExabeam.Endpoint)
		r.OutputExabeam.Environment = types.StringPointerValue(resp.OutputExabeam.Environment)
		r.OutputExabeam.ID = types.StringPointerValue(resp.OutputExabeam.ID)
		r.OutputExabeam.MaxFileIdleTimeSec = types.Float64PointerValue(resp.OutputExabeam.MaxFileIdleTimeSec)
		r.OutputExabeam.MaxFileOpenTimeSec = types.Float64PointerValue(resp.OutputExabeam.MaxFileOpenTimeSec)
		r.OutputExabeam.MaxFileSizeMB = types.Float64PointerValue(resp.OutputExabeam.MaxFileSizeMB)
		r.OutputExabeam.MaxOpenFiles = types.Float64PointerValue(resp.OutputExabeam.MaxOpenFiles)
		r.OutputExabeam.MaxRetryNum = types.Float64PointerValue(resp.OutputExabeam.MaxRetryNum)
		if resp.OutputExabeam.ObjectACL != nil {
			r.OutputExabeam.ObjectACL = types.StringValue(string(*resp.OutputExabeam.ObjectACL))
		} else {
			r.OutputExabeam.ObjectACL = types.StringNull()
		}
		if resp.OutputExabeam.OnBackpressure != nil {
			r.OutputExabeam.OnBackpressure = types.StringValue(string(*resp.OutputExabeam.OnBackpressure))
		} else {
			r.OutputExabeam.OnBackpressure = types.StringNull()
		}
		if resp.OutputExabeam.OnDiskFullBackpressure != nil {
			r.OutputExabeam.OnDiskFullBackpressure = types.StringValue(string(*resp.OutputExabeam.OnDiskFullBackpressure))
		} else {
			r.OutputExabeam.OnDiskFullBackpressure = types.StringNull()
		}
		r.OutputExabeam.Pipeline = types.StringPointerValue(resp.OutputExabeam.Pipeline)
		r.OutputExabeam.Region = types.StringValue(resp.OutputExabeam.Region)
		r.OutputExabeam.RejectUnauthorized = types.BoolPointerValue(resp.OutputExabeam.RejectUnauthorized)
		r.OutputExabeam.RemoveEmptyDirs = types.BoolPointerValue(resp.OutputExabeam.RemoveEmptyDirs)
		r.OutputExabeam.ReuseConnections = types.BoolPointerValue(resp.OutputExabeam.ReuseConnections)
		if resp.OutputExabeam.SignatureVersion != nil {
			r.OutputExabeam.SignatureVersion = types.StringValue(string(*resp.OutputExabeam.SignatureVersion))
		} else {
			r.OutputExabeam.SignatureVersion = types.StringNull()
		}
		r.OutputExabeam.SiteID = types.StringPointerValue(resp.OutputExabeam.SiteID)
		r.OutputExabeam.SiteName = types.StringPointerValue(resp.OutputExabeam.SiteName)
		r.OutputExabeam.StagePath = types.StringPointerValue(resp.OutputExabeam.StagePath)
		if resp.OutputExabeam.StorageClass != nil {
			r.OutputExabeam.StorageClass = types.StringValue(string(*resp.OutputExabeam.StorageClass))
		} else {
			r.OutputExabeam.StorageClass = types.StringNull()
		}
		r.OutputExabeam.Streamtags = make([]types.String, 0, len(resp.OutputExabeam.Streamtags))
		for _, v := range resp.OutputExabeam.Streamtags {
			r.OutputExabeam.Streamtags = append(r.OutputExabeam.Streamtags, types.StringValue(v))
		}
		r.OutputExabeam.SystemFields = make([]types.String, 0, len(resp.OutputExabeam.SystemFields))
		for _, v := range resp.OutputExabeam.SystemFields {
			r.OutputExabeam.SystemFields = append(r.OutputExabeam.SystemFields, types.StringValue(v))
		}
		r.OutputExabeam.TimezoneOffset = types.StringPointerValue(resp.OutputExabeam.TimezoneOffset)
		if resp.OutputExabeam.Type != nil {
			r.OutputExabeam.Type = types.StringValue(string(*resp.OutputExabeam.Type))
		} else {
			r.OutputExabeam.Type = types.StringNull()
		}
	}
	if resp.OutputFilesystem != nil {
		r.OutputFilesystem = &tfTypes.OutputFilesystem{}
		r.OutputFilesystem.AddIDToStagePath = types.BoolPointerValue(resp.OutputFilesystem.AddIDToStagePath)
		r.OutputFilesystem.AutomaticSchema = types.BoolPointerValue(resp.OutputFilesystem.AutomaticSchema)
		r.OutputFilesystem.BaseFileName = types.StringPointerValue(resp.OutputFilesystem.BaseFileName)
		if resp.OutputFilesystem.Compress != nil {
			r.OutputFilesystem.Compress = types.StringValue(string(*resp.OutputFilesystem.Compress))
		} else {
			r.OutputFilesystem.Compress = types.StringNull()
		}
		if resp.OutputFilesystem.CompressionLevel != nil {
			r.OutputFilesystem.CompressionLevel = types.StringValue(string(*resp.OutputFilesystem.CompressionLevel))
		} else {
			r.OutputFilesystem.CompressionLevel = types.StringNull()
		}
		r.OutputFilesystem.DeadletterEnabled = types.BoolPointerValue(resp.OutputFilesystem.DeadletterEnabled)
		r.OutputFilesystem.DeadletterPath = types.StringPointerValue(resp.OutputFilesystem.DeadletterPath)
		r.OutputFilesystem.Description = types.StringPointerValue(resp.OutputFilesystem.Description)
		r.OutputFilesystem.DestPath = types.StringValue(resp.OutputFilesystem.DestPath)
		r.OutputFilesystem.EmptyDirCleanupSec = types.Float64PointerValue(resp.OutputFilesystem.EmptyDirCleanupSec)
		r.OutputFilesystem.EnablePageChecksum = types.BoolPointerValue(resp.OutputFilesystem.EnablePageChecksum)
		r.OutputFilesystem.EnableStatistics = types.BoolPointerValue(resp.OutputFilesystem.EnableStatistics)
		r.OutputFilesystem.EnableWritePageIndex = types.BoolPointerValue(resp.OutputFilesystem.EnableWritePageIndex)
		r.OutputFilesystem.Environment = types.StringPointerValue(resp.OutputFilesystem.Environment)
		r.OutputFilesystem.FileNameSuffix = types.StringPointerValue(resp.OutputFilesystem.FileNameSuffix)
		if resp.OutputFilesystem.Format != nil {
			r.OutputFilesystem.Format = types.StringValue(string(*resp.OutputFilesystem.Format))
		} else {
			r.OutputFilesystem.Format = types.StringNull()
		}
		r.OutputFilesystem.HeaderLine = types.StringPointerValue(resp.OutputFilesystem.HeaderLine)
		r.OutputFilesystem.ID = types.StringPointerValue(resp.OutputFilesystem.ID)
		r.OutputFilesystem.KeyValueMetadata = []tfTypes.OutputFilesystemKeyValueMetadatum{}
		if len(r.OutputFilesystem.KeyValueMetadata) > len(resp.OutputFilesystem.KeyValueMetadata) {
			r.OutputFilesystem.KeyValueMetadata = r.OutputFilesystem.KeyValueMetadata[:len(resp.OutputFilesystem.KeyValueMetadata)]
		}
		for keyValueMetadataCount2, keyValueMetadataItem2 := range resp.OutputFilesystem.KeyValueMetadata {
			var keyValueMetadata2 tfTypes.OutputFilesystemKeyValueMetadatum
			keyValueMetadata2.Key = types.StringPointerValue(keyValueMetadataItem2.Key)
			keyValueMetadata2.Value = types.StringValue(keyValueMetadataItem2.Value)
			if keyValueMetadataCount2+1 > len(r.OutputFilesystem.KeyValueMetadata) {
				r.OutputFilesystem.KeyValueMetadata = append(r.OutputFilesystem.KeyValueMetadata, keyValueMetadata2)
			} else {
				r.OutputFilesystem.KeyValueMetadata[keyValueMetadataCount2].Key = keyValueMetadata2.Key
				r.OutputFilesystem.KeyValueMetadata[keyValueMetadataCount2].Value = keyValueMetadata2.Value
			}
		}
		r.OutputFilesystem.MaxFileIdleTimeSec = types.Float64PointerValue(resp.OutputFilesystem.MaxFileIdleTimeSec)
		r.OutputFilesystem.MaxFileOpenTimeSec = types.Float64PointerValue(resp.OutputFilesystem.MaxFileOpenTimeSec)
		r.OutputFilesystem.MaxFileSizeMB = types.Float64PointerValue(resp.OutputFilesystem.MaxFileSizeMB)
		r.OutputFilesystem.MaxOpenFiles = types.Float64PointerValue(resp.OutputFilesystem.MaxOpenFiles)
		r.OutputFilesystem.MaxRetryNum = types.Float64PointerValue(resp.OutputFilesystem.MaxRetryNum)
		if resp.OutputFilesystem.OnBackpressure != nil {
			r.OutputFilesystem.OnBackpressure = types.StringValue(string(*resp.OutputFilesystem.OnBackpressure))
		} else {
			r.OutputFilesystem.OnBackpressure = types.StringNull()
		}
		if resp.OutputFilesystem.OnDiskFullBackpressure != nil {
			r.OutputFilesystem.OnDiskFullBackpressure = types.StringValue(string(*resp.OutputFilesystem.OnDiskFullBackpressure))
		} else {
			r.OutputFilesystem.OnDiskFullBackpressure = types.StringNull()
		}
		if resp.OutputFilesystem.ParquetDataPageVersion != nil {
			r.OutputFilesystem.ParquetDataPageVersion = types.StringValue(string(*resp.OutputFilesystem.ParquetDataPageVersion))
		} else {
			r.OutputFilesystem.ParquetDataPageVersion = types.StringNull()
		}
		r.OutputFilesystem.ParquetPageSize = types.StringPointerValue(resp.OutputFilesystem.ParquetPageSize)
		r.OutputFilesystem.ParquetRowGroupLength = types.Float64PointerValue(resp.OutputFilesystem.ParquetRowGroupLength)
		if resp.OutputFilesystem.ParquetVersion != nil {
			r.OutputFilesystem.ParquetVersion = types.StringValue(string(*resp.OutputFilesystem.ParquetVersion))
		} else {
			r.OutputFilesystem.ParquetVersion = types.StringNull()
		}
		r.OutputFilesystem.PartitionExpr = types.StringPointerValue(resp.OutputFilesystem.PartitionExpr)
		r.OutputFilesystem.Pipeline = types.StringPointerValue(resp.OutputFilesystem.Pipeline)
		r.OutputFilesystem.RemoveEmptyDirs = types.BoolPointerValue(resp.OutputFilesystem.RemoveEmptyDirs)
		r.OutputFilesystem.ShouldLogInvalidRows = types.BoolPointerValue(resp.OutputFilesystem.ShouldLogInvalidRows)
		r.OutputFilesystem.StagePath = types.StringPointerValue(resp.OutputFilesystem.StagePath)
		r.OutputFilesystem.Streamtags = make([]types.String, 0, len(resp.OutputFilesystem.Streamtags))
		for _, v := range resp.OutputFilesystem.Streamtags {
			r.OutputFilesystem.Streamtags = append(r.OutputFilesystem.Streamtags, types.StringValue(v))
		}
		r.OutputFilesystem.SystemFields = make([]types.String, 0, len(resp.OutputFilesystem.SystemFields))
		for _, v := range resp.OutputFilesystem.SystemFields {
			r.OutputFilesystem.SystemFields = append(r.OutputFilesystem.SystemFields, types.StringValue(v))
		}
		r.OutputFilesystem.Type = types.StringValue(string(resp.OutputFilesystem.Type))
		r.OutputFilesystem.WriteHighWaterMark = types.Float64PointerValue(resp.OutputFilesystem.WriteHighWaterMark)
	}
	if resp.OutputGoogleChronicle != nil {
		r.OutputGoogleChronicle = &tfTypes.OutputGoogleChronicle{}
		r.OutputGoogleChronicle.APIKey = types.StringPointerValue(resp.OutputGoogleChronicle.APIKey)
		r.OutputGoogleChronicle.APIKeySecret = types.StringPointerValue(resp.OutputGoogleChronicle.APIKeySecret)
		if resp.OutputGoogleChronicle.APIVersion != nil {
			r.OutputGoogleChronicle.APIVersion = types.StringValue(string(*resp.OutputGoogleChronicle.APIVersion))
		} else {
			r.OutputGoogleChronicle.APIVersion = types.StringNull()
		}
		if resp.OutputGoogleChronicle.AuthenticationMethod != nil {
			r.OutputGoogleChronicle.AuthenticationMethod = types.StringValue(string(*resp.OutputGoogleChronicle.AuthenticationMethod))
		} else {
			r.OutputGoogleChronicle.AuthenticationMethod = types.StringNull()
		}
		r.OutputGoogleChronicle.Compress = types.BoolPointerValue(resp.OutputGoogleChronicle.Compress)
		r.OutputGoogleChronicle.Concurrency = types.Float64PointerValue(resp.OutputGoogleChronicle.Concurrency)
		r.OutputGoogleChronicle.CustomerID = types.StringPointerValue(resp.OutputGoogleChronicle.CustomerID)
		r.OutputGoogleChronicle.CustomLabels = []tfTypes.CustomLabel{}
		if len(r.OutputGoogleChronicle.CustomLabels) > len(resp.OutputGoogleChronicle.CustomLabels) {
			r.OutputGoogleChronicle.CustomLabels = r.OutputGoogleChronicle.CustomLabels[:len(resp.OutputGoogleChronicle.CustomLabels)]
		}
		for customLabelsCount, customLabelsItem := range resp.OutputGoogleChronicle.CustomLabels {
			var customLabels tfTypes.CustomLabel
			customLabels.Key = types.StringValue(customLabelsItem.Key)
			customLabels.Value = types.StringValue(customLabelsItem.Value)
			if customLabelsCount+1 > len(r.OutputGoogleChronicle.CustomLabels) {
				r.OutputGoogleChronicle.CustomLabels = append(r.OutputGoogleChronicle.CustomLabels, customLabels)
			} else {
				r.OutputGoogleChronicle.CustomLabels[customLabelsCount].Key = customLabels.Key
				r.OutputGoogleChronicle.CustomLabels[customLabelsCount].Value = customLabels.Value
			}
		}
		r.OutputGoogleChronicle.Description = types.StringPointerValue(resp.OutputGoogleChronicle.Description)
		r.OutputGoogleChronicle.Environment = types.StringPointerValue(resp.OutputGoogleChronicle.Environment)
		r.OutputGoogleChronicle.ExtraHTTPHeaders = []tfTypes.OutputGoogleChronicleExtraHTTPHeader{}
		if len(r.OutputGoogleChronicle.ExtraHTTPHeaders) > len(resp.OutputGoogleChronicle.ExtraHTTPHeaders) {
			r.OutputGoogleChronicle.ExtraHTTPHeaders = r.OutputGoogleChronicle.ExtraHTTPHeaders[:len(resp.OutputGoogleChronicle.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount10, extraHTTPHeadersItem10 := range resp.OutputGoogleChronicle.ExtraHTTPHeaders {
			var extraHTTPHeaders10 tfTypes.OutputGoogleChronicleExtraHTTPHeader
			extraHTTPHeaders10.Name = types.StringPointerValue(extraHTTPHeadersItem10.Name)
			extraHTTPHeaders10.Value = types.StringValue(extraHTTPHeadersItem10.Value)
			if extraHTTPHeadersCount10+1 > len(r.OutputGoogleChronicle.ExtraHTTPHeaders) {
				r.OutputGoogleChronicle.ExtraHTTPHeaders = append(r.OutputGoogleChronicle.ExtraHTTPHeaders, extraHTTPHeaders10)
			} else {
				r.OutputGoogleChronicle.ExtraHTTPHeaders[extraHTTPHeadersCount10].Name = extraHTTPHeaders10.Name
				r.OutputGoogleChronicle.ExtraHTTPHeaders[extraHTTPHeadersCount10].Value = extraHTTPHeaders10.Value
			}
		}
		r.OutputGoogleChronicle.ExtraLogTypes = []tfTypes.ExtraLogType{}
		if len(r.OutputGoogleChronicle.ExtraLogTypes) > len(resp.OutputGoogleChronicle.ExtraLogTypes) {
			r.OutputGoogleChronicle.ExtraLogTypes = r.OutputGoogleChronicle.ExtraLogTypes[:len(resp.OutputGoogleChronicle.ExtraLogTypes)]
		}
		for extraLogTypesCount, extraLogTypesItem := range resp.OutputGoogleChronicle.ExtraLogTypes {
			var extraLogTypes tfTypes.ExtraLogType
			extraLogTypes.Description = types.StringPointerValue(extraLogTypesItem.Description)
			extraLogTypes.LogType = types.StringValue(extraLogTypesItem.LogType)
			if extraLogTypesCount+1 > len(r.OutputGoogleChronicle.ExtraLogTypes) {
				r.OutputGoogleChronicle.ExtraLogTypes = append(r.OutputGoogleChronicle.ExtraLogTypes, extraLogTypes)
			} else {
				r.OutputGoogleChronicle.ExtraLogTypes[extraLogTypesCount].Description = extraLogTypes.Description
				r.OutputGoogleChronicle.ExtraLogTypes[extraLogTypesCount].LogType = extraLogTypes.LogType
			}
		}
		if resp.OutputGoogleChronicle.FailedRequestLoggingMode != nil {
			r.OutputGoogleChronicle.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputGoogleChronicle.FailedRequestLoggingMode))
		} else {
			r.OutputGoogleChronicle.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputGoogleChronicle.FlushPeriodSec = types.Float64PointerValue(resp.OutputGoogleChronicle.FlushPeriodSec)
		r.OutputGoogleChronicle.ID = types.StringPointerValue(resp.OutputGoogleChronicle.ID)
		if resp.OutputGoogleChronicle.LogFormatType != nil {
			r.OutputGoogleChronicle.LogFormatType = types.StringValue(string(*resp.OutputGoogleChronicle.LogFormatType))
		} else {
			r.OutputGoogleChronicle.LogFormatType = types.StringNull()
		}
		r.OutputGoogleChronicle.LogTextField = types.StringPointerValue(resp.OutputGoogleChronicle.LogTextField)
		r.OutputGoogleChronicle.LogType = types.StringPointerValue(resp.OutputGoogleChronicle.LogType)
		r.OutputGoogleChronicle.MaxPayloadEvents = types.Float64PointerValue(resp.OutputGoogleChronicle.MaxPayloadEvents)
		r.OutputGoogleChronicle.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputGoogleChronicle.MaxPayloadSizeKB)
		r.OutputGoogleChronicle.Namespace = types.StringPointerValue(resp.OutputGoogleChronicle.Namespace)
		if resp.OutputGoogleChronicle.OnBackpressure != nil {
			r.OutputGoogleChronicle.OnBackpressure = types.StringValue(string(*resp.OutputGoogleChronicle.OnBackpressure))
		} else {
			r.OutputGoogleChronicle.OnBackpressure = types.StringNull()
		}
		r.OutputGoogleChronicle.Pipeline = types.StringPointerValue(resp.OutputGoogleChronicle.Pipeline)
		if resp.OutputGoogleChronicle.PqCompress != nil {
			r.OutputGoogleChronicle.PqCompress = types.StringValue(string(*resp.OutputGoogleChronicle.PqCompress))
		} else {
			r.OutputGoogleChronicle.PqCompress = types.StringNull()
		}
		if resp.OutputGoogleChronicle.PqControls == nil {
			r.OutputGoogleChronicle.PqControls = nil
		} else {
			r.OutputGoogleChronicle.PqControls = &tfTypes.OutputGoogleChroniclePqControls{}
		}
		r.OutputGoogleChronicle.PqMaxFileSize = types.StringPointerValue(resp.OutputGoogleChronicle.PqMaxFileSize)
		r.OutputGoogleChronicle.PqMaxSize = types.StringPointerValue(resp.OutputGoogleChronicle.PqMaxSize)
		if resp.OutputGoogleChronicle.PqMode != nil {
			r.OutputGoogleChronicle.PqMode = types.StringValue(string(*resp.OutputGoogleChronicle.PqMode))
		} else {
			r.OutputGoogleChronicle.PqMode = types.StringNull()
		}
		if resp.OutputGoogleChronicle.PqOnBackpressure != nil {
			r.OutputGoogleChronicle.PqOnBackpressure = types.StringValue(string(*resp.OutputGoogleChronicle.PqOnBackpressure))
		} else {
			r.OutputGoogleChronicle.PqOnBackpressure = types.StringNull()
		}
		r.OutputGoogleChronicle.PqPath = types.StringPointerValue(resp.OutputGoogleChronicle.PqPath)
		r.OutputGoogleChronicle.Region = types.StringPointerValue(resp.OutputGoogleChronicle.Region)
		r.OutputGoogleChronicle.RejectUnauthorized = types.BoolPointerValue(resp.OutputGoogleChronicle.RejectUnauthorized)
		r.OutputGoogleChronicle.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputGoogleChronicle.ResponseHonorRetryAfterHeader)
		r.OutputGoogleChronicle.ResponseRetrySettings = []tfTypes.OutputGoogleChronicleResponseRetrySetting{}
		if len(r.OutputGoogleChronicle.ResponseRetrySettings) > len(resp.OutputGoogleChronicle.ResponseRetrySettings) {
			r.OutputGoogleChronicle.ResponseRetrySettings = r.OutputGoogleChronicle.ResponseRetrySettings[:len(resp.OutputGoogleChronicle.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount11, responseRetrySettingsItem11 := range resp.OutputGoogleChronicle.ResponseRetrySettings {
			var responseRetrySettings11 tfTypes.OutputGoogleChronicleResponseRetrySetting
			responseRetrySettings11.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem11.BackoffRate)
			responseRetrySettings11.HTTPStatus = types.Float64Value(responseRetrySettingsItem11.HTTPStatus)
			responseRetrySettings11.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem11.InitialBackoff)
			responseRetrySettings11.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem11.MaxBackoff)
			if responseRetrySettingsCount11+1 > len(r.OutputGoogleChronicle.ResponseRetrySettings) {
				r.OutputGoogleChronicle.ResponseRetrySettings = append(r.OutputGoogleChronicle.ResponseRetrySettings, responseRetrySettings11)
			} else {
				r.OutputGoogleChronicle.ResponseRetrySettings[responseRetrySettingsCount11].BackoffRate = responseRetrySettings11.BackoffRate
				r.OutputGoogleChronicle.ResponseRetrySettings[responseRetrySettingsCount11].HTTPStatus = responseRetrySettings11.HTTPStatus
				r.OutputGoogleChronicle.ResponseRetrySettings[responseRetrySettingsCount11].InitialBackoff = responseRetrySettings11.InitialBackoff
				r.OutputGoogleChronicle.ResponseRetrySettings[responseRetrySettingsCount11].MaxBackoff = responseRetrySettings11.MaxBackoff
			}
		}
		r.OutputGoogleChronicle.SafeHeaders = make([]types.String, 0, len(resp.OutputGoogleChronicle.SafeHeaders))
		for _, v := range resp.OutputGoogleChronicle.SafeHeaders {
			r.OutputGoogleChronicle.SafeHeaders = append(r.OutputGoogleChronicle.SafeHeaders, types.StringValue(v))
		}
		r.OutputGoogleChronicle.ServiceAccountCredentials = types.StringPointerValue(resp.OutputGoogleChronicle.ServiceAccountCredentials)
		r.OutputGoogleChronicle.ServiceAccountCredentialsSecret = types.StringPointerValue(resp.OutputGoogleChronicle.ServiceAccountCredentialsSecret)
		r.OutputGoogleChronicle.Streamtags = make([]types.String, 0, len(resp.OutputGoogleChronicle.Streamtags))
		for _, v := range resp.OutputGoogleChronicle.Streamtags {
			r.OutputGoogleChronicle.Streamtags = append(r.OutputGoogleChronicle.Streamtags, types.StringValue(v))
		}
		r.OutputGoogleChronicle.SystemFields = make([]types.String, 0, len(resp.OutputGoogleChronicle.SystemFields))
		for _, v := range resp.OutputGoogleChronicle.SystemFields {
			r.OutputGoogleChronicle.SystemFields = append(r.OutputGoogleChronicle.SystemFields, types.StringValue(v))
		}
		if resp.OutputGoogleChronicle.TimeoutRetrySettings == nil {
			r.OutputGoogleChronicle.TimeoutRetrySettings = nil
		} else {
			r.OutputGoogleChronicle.TimeoutRetrySettings = &tfTypes.OutputGoogleChronicleTimeoutRetrySettings{}
			r.OutputGoogleChronicle.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputGoogleChronicle.TimeoutRetrySettings.BackoffRate)
			r.OutputGoogleChronicle.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputGoogleChronicle.TimeoutRetrySettings.InitialBackoff)
			r.OutputGoogleChronicle.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputGoogleChronicle.TimeoutRetrySettings.MaxBackoff)
			r.OutputGoogleChronicle.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputGoogleChronicle.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputGoogleChronicle.TimeoutSec = types.Float64PointerValue(resp.OutputGoogleChronicle.TimeoutSec)
		r.OutputGoogleChronicle.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputGoogleChronicle.TotalMemoryLimitKB)
		r.OutputGoogleChronicle.Type = types.StringValue(string(resp.OutputGoogleChronicle.Type))
		r.OutputGoogleChronicle.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputGoogleChronicle.UseRoundRobinDNS)
	}
	if resp.OutputGoogleCloudLogging != nil {
		r.OutputGoogleCloudLogging = &tfTypes.OutputGoogleCloudLogging{}
		r.OutputGoogleCloudLogging.CacheFillBytesExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.CacheFillBytesExpression)
		r.OutputGoogleCloudLogging.CacheHitExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.CacheHitExpression)
		r.OutputGoogleCloudLogging.CacheLookupExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.CacheLookupExpression)
		r.OutputGoogleCloudLogging.CacheValidatedExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.CacheValidatedExpression)
		r.OutputGoogleCloudLogging.Concurrency = types.Float64PointerValue(resp.OutputGoogleCloudLogging.Concurrency)
		r.OutputGoogleCloudLogging.ConnectionTimeout = types.Float64PointerValue(resp.OutputGoogleCloudLogging.ConnectionTimeout)
		r.OutputGoogleCloudLogging.Description = types.StringPointerValue(resp.OutputGoogleCloudLogging.Description)
		r.OutputGoogleCloudLogging.Environment = types.StringPointerValue(resp.OutputGoogleCloudLogging.Environment)
		r.OutputGoogleCloudLogging.FileExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.FileExpression)
		r.OutputGoogleCloudLogging.FirstExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.FirstExpression)
		r.OutputGoogleCloudLogging.FlushPeriodSec = types.Float64PointerValue(resp.OutputGoogleCloudLogging.FlushPeriodSec)
		r.OutputGoogleCloudLogging.FunctionExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.FunctionExpression)
		if resp.OutputGoogleCloudLogging.GoogleAuthMethod != nil {
			r.OutputGoogleCloudLogging.GoogleAuthMethod = types.StringValue(string(*resp.OutputGoogleCloudLogging.GoogleAuthMethod))
		} else {
			r.OutputGoogleCloudLogging.GoogleAuthMethod = types.StringNull()
		}
		r.OutputGoogleCloudLogging.ID = types.StringPointerValue(resp.OutputGoogleCloudLogging.ID)
		r.OutputGoogleCloudLogging.IDExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.IDExpression)
		r.OutputGoogleCloudLogging.IndexExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.IndexExpression)
		r.OutputGoogleCloudLogging.InsertIDExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.InsertIDExpression)
		r.OutputGoogleCloudLogging.LastExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.LastExpression)
		r.OutputGoogleCloudLogging.LatencyExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.LatencyExpression)
		r.OutputGoogleCloudLogging.LineExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.LineExpression)
		r.OutputGoogleCloudLogging.LogLabels = []tfTypes.LogLabel{}
		if len(r.OutputGoogleCloudLogging.LogLabels) > len(resp.OutputGoogleCloudLogging.LogLabels) {
			r.OutputGoogleCloudLogging.LogLabels = r.OutputGoogleCloudLogging.LogLabels[:len(resp.OutputGoogleCloudLogging.LogLabels)]
		}
		for logLabelsCount, logLabelsItem := range resp.OutputGoogleCloudLogging.LogLabels {
			var logLabels tfTypes.LogLabel
			logLabels.Label = types.StringValue(logLabelsItem.Label)
			logLabels.ValueExpression = types.StringValue(logLabelsItem.ValueExpression)
			if logLabelsCount+1 > len(r.OutputGoogleCloudLogging.LogLabels) {
				r.OutputGoogleCloudLogging.LogLabels = append(r.OutputGoogleCloudLogging.LogLabels, logLabels)
			} else {
				r.OutputGoogleCloudLogging.LogLabels[logLabelsCount].Label = logLabels.Label
				r.OutputGoogleCloudLogging.LogLabels[logLabelsCount].ValueExpression = logLabels.ValueExpression
			}
		}
		r.OutputGoogleCloudLogging.LogLocationExpression = types.StringValue(resp.OutputGoogleCloudLogging.LogLocationExpression)
		r.OutputGoogleCloudLogging.LogLocationType = types.StringValue(string(resp.OutputGoogleCloudLogging.LogLocationType))
		r.OutputGoogleCloudLogging.LogNameExpression = types.StringValue(resp.OutputGoogleCloudLogging.LogNameExpression)
		r.OutputGoogleCloudLogging.MaxPayloadEvents = types.Float64PointerValue(resp.OutputGoogleCloudLogging.MaxPayloadEvents)
		r.OutputGoogleCloudLogging.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputGoogleCloudLogging.MaxPayloadSizeKB)
		if resp.OutputGoogleCloudLogging.OnBackpressure != nil {
			r.OutputGoogleCloudLogging.OnBackpressure = types.StringValue(string(*resp.OutputGoogleCloudLogging.OnBackpressure))
		} else {
			r.OutputGoogleCloudLogging.OnBackpressure = types.StringNull()
		}
		r.OutputGoogleCloudLogging.PayloadExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.PayloadExpression)
		if resp.OutputGoogleCloudLogging.PayloadFormat != nil {
			r.OutputGoogleCloudLogging.PayloadFormat = types.StringValue(string(*resp.OutputGoogleCloudLogging.PayloadFormat))
		} else {
			r.OutputGoogleCloudLogging.PayloadFormat = types.StringNull()
		}
		r.OutputGoogleCloudLogging.Pipeline = types.StringPointerValue(resp.OutputGoogleCloudLogging.Pipeline)
		if resp.OutputGoogleCloudLogging.PqCompress != nil {
			r.OutputGoogleCloudLogging.PqCompress = types.StringValue(string(*resp.OutputGoogleCloudLogging.PqCompress))
		} else {
			r.OutputGoogleCloudLogging.PqCompress = types.StringNull()
		}
		if resp.OutputGoogleCloudLogging.PqControls == nil {
			r.OutputGoogleCloudLogging.PqControls = nil
		} else {
			r.OutputGoogleCloudLogging.PqControls = &tfTypes.OutputGoogleCloudLoggingPqControls{}
		}
		r.OutputGoogleCloudLogging.PqMaxFileSize = types.StringPointerValue(resp.OutputGoogleCloudLogging.PqMaxFileSize)
		r.OutputGoogleCloudLogging.PqMaxSize = types.StringPointerValue(resp.OutputGoogleCloudLogging.PqMaxSize)
		if resp.OutputGoogleCloudLogging.PqMode != nil {
			r.OutputGoogleCloudLogging.PqMode = types.StringValue(string(*resp.OutputGoogleCloudLogging.PqMode))
		} else {
			r.OutputGoogleCloudLogging.PqMode = types.StringNull()
		}
		if resp.OutputGoogleCloudLogging.PqOnBackpressure != nil {
			r.OutputGoogleCloudLogging.PqOnBackpressure = types.StringValue(string(*resp.OutputGoogleCloudLogging.PqOnBackpressure))
		} else {
			r.OutputGoogleCloudLogging.PqOnBackpressure = types.StringNull()
		}
		r.OutputGoogleCloudLogging.PqPath = types.StringPointerValue(resp.OutputGoogleCloudLogging.PqPath)
		r.OutputGoogleCloudLogging.ProducerExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.ProducerExpression)
		r.OutputGoogleCloudLogging.ProtocolExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.ProtocolExpression)
		r.OutputGoogleCloudLogging.RefererExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.RefererExpression)
		r.OutputGoogleCloudLogging.RemoteIPExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.RemoteIPExpression)
		r.OutputGoogleCloudLogging.RequestMethodExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.RequestMethodExpression)
		r.OutputGoogleCloudLogging.RequestSizeExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.RequestSizeExpression)
		r.OutputGoogleCloudLogging.RequestURLExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.RequestURLExpression)
		r.OutputGoogleCloudLogging.ResourceTypeExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.ResourceTypeExpression)
		r.OutputGoogleCloudLogging.ResourceTypeLabels = []tfTypes.ResourceTypeLabel{}
		if len(r.OutputGoogleCloudLogging.ResourceTypeLabels) > len(resp.OutputGoogleCloudLogging.ResourceTypeLabels) {
			r.OutputGoogleCloudLogging.ResourceTypeLabels = r.OutputGoogleCloudLogging.ResourceTypeLabels[:len(resp.OutputGoogleCloudLogging.ResourceTypeLabels)]
		}
		for resourceTypeLabelsCount, resourceTypeLabelsItem := range resp.OutputGoogleCloudLogging.ResourceTypeLabels {
			var resourceTypeLabels tfTypes.ResourceTypeLabel
			resourceTypeLabels.Label = types.StringValue(resourceTypeLabelsItem.Label)
			resourceTypeLabels.ValueExpression = types.StringValue(resourceTypeLabelsItem.ValueExpression)
			if resourceTypeLabelsCount+1 > len(r.OutputGoogleCloudLogging.ResourceTypeLabels) {
				r.OutputGoogleCloudLogging.ResourceTypeLabels = append(r.OutputGoogleCloudLogging.ResourceTypeLabels, resourceTypeLabels)
			} else {
				r.OutputGoogleCloudLogging.ResourceTypeLabels[resourceTypeLabelsCount].Label = resourceTypeLabels.Label
				r.OutputGoogleCloudLogging.ResourceTypeLabels[resourceTypeLabelsCount].ValueExpression = resourceTypeLabels.ValueExpression
			}
		}
		r.OutputGoogleCloudLogging.ResponseSizeExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.ResponseSizeExpression)
		r.OutputGoogleCloudLogging.Secret = types.StringPointerValue(resp.OutputGoogleCloudLogging.Secret)
		r.OutputGoogleCloudLogging.ServerIPExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.ServerIPExpression)
		r.OutputGoogleCloudLogging.ServiceAccountCredentials = types.StringPointerValue(resp.OutputGoogleCloudLogging.ServiceAccountCredentials)
		r.OutputGoogleCloudLogging.SeverityExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.SeverityExpression)
		r.OutputGoogleCloudLogging.SpanIDExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.SpanIDExpression)
		r.OutputGoogleCloudLogging.StatusExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.StatusExpression)
		r.OutputGoogleCloudLogging.Streamtags = make([]types.String, 0, len(resp.OutputGoogleCloudLogging.Streamtags))
		for _, v := range resp.OutputGoogleCloudLogging.Streamtags {
			r.OutputGoogleCloudLogging.Streamtags = append(r.OutputGoogleCloudLogging.Streamtags, types.StringValue(v))
		}
		r.OutputGoogleCloudLogging.SystemFields = make([]types.String, 0, len(resp.OutputGoogleCloudLogging.SystemFields))
		for _, v := range resp.OutputGoogleCloudLogging.SystemFields {
			r.OutputGoogleCloudLogging.SystemFields = append(r.OutputGoogleCloudLogging.SystemFields, types.StringValue(v))
		}
		r.OutputGoogleCloudLogging.ThrottleRateReqPerSec = types.Int64PointerValue(resp.OutputGoogleCloudLogging.ThrottleRateReqPerSec)
		r.OutputGoogleCloudLogging.TimeoutSec = types.Float64PointerValue(resp.OutputGoogleCloudLogging.TimeoutSec)
		r.OutputGoogleCloudLogging.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputGoogleCloudLogging.TotalMemoryLimitKB)
		r.OutputGoogleCloudLogging.TotalSplitsExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.TotalSplitsExpression)
		r.OutputGoogleCloudLogging.TraceExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.TraceExpression)
		r.OutputGoogleCloudLogging.TraceSampledExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.TraceSampledExpression)
		if resp.OutputGoogleCloudLogging.Type != nil {
			r.OutputGoogleCloudLogging.Type = types.StringValue(string(*resp.OutputGoogleCloudLogging.Type))
		} else {
			r.OutputGoogleCloudLogging.Type = types.StringNull()
		}
		r.OutputGoogleCloudLogging.UIDExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.UIDExpression)
		r.OutputGoogleCloudLogging.UserAgentExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.UserAgentExpression)
	}
	if resp.OutputGoogleCloudStorage != nil {
		r.OutputGoogleCloudStorage = &tfTypes.OutputGoogleCloudStorage{}
		r.OutputGoogleCloudStorage.AddIDToStagePath = types.BoolPointerValue(resp.OutputGoogleCloudStorage.AddIDToStagePath)
		r.OutputGoogleCloudStorage.AutomaticSchema = types.BoolPointerValue(resp.OutputGoogleCloudStorage.AutomaticSchema)
		r.OutputGoogleCloudStorage.AwsAPIKey = types.StringPointerValue(resp.OutputGoogleCloudStorage.AwsAPIKey)
		if resp.OutputGoogleCloudStorage.AwsAuthenticationMethod != nil {
			r.OutputGoogleCloudStorage.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputGoogleCloudStorage.AwsAuthenticationMethod))
		} else {
			r.OutputGoogleCloudStorage.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputGoogleCloudStorage.AwsSecret = types.StringPointerValue(resp.OutputGoogleCloudStorage.AwsSecret)
		r.OutputGoogleCloudStorage.AwsSecretKey = types.StringPointerValue(resp.OutputGoogleCloudStorage.AwsSecretKey)
		r.OutputGoogleCloudStorage.BaseFileName = types.StringPointerValue(resp.OutputGoogleCloudStorage.BaseFileName)
		r.OutputGoogleCloudStorage.Bucket = types.StringValue(resp.OutputGoogleCloudStorage.Bucket)
		if resp.OutputGoogleCloudStorage.Compress != nil {
			r.OutputGoogleCloudStorage.Compress = types.StringValue(string(*resp.OutputGoogleCloudStorage.Compress))
		} else {
			r.OutputGoogleCloudStorage.Compress = types.StringNull()
		}
		if resp.OutputGoogleCloudStorage.CompressionLevel != nil {
			r.OutputGoogleCloudStorage.CompressionLevel = types.StringValue(string(*resp.OutputGoogleCloudStorage.CompressionLevel))
		} else {
			r.OutputGoogleCloudStorage.CompressionLevel = types.StringNull()
		}
		r.OutputGoogleCloudStorage.DeadletterEnabled = types.BoolPointerValue(resp.OutputGoogleCloudStorage.DeadletterEnabled)
		r.OutputGoogleCloudStorage.DeadletterPath = types.StringPointerValue(resp.OutputGoogleCloudStorage.DeadletterPath)
		r.OutputGoogleCloudStorage.Description = types.StringPointerValue(resp.OutputGoogleCloudStorage.Description)
		r.OutputGoogleCloudStorage.DestPath = types.StringPointerValue(resp.OutputGoogleCloudStorage.DestPath)
		r.OutputGoogleCloudStorage.EmptyDirCleanupSec = types.Float64PointerValue(resp.OutputGoogleCloudStorage.EmptyDirCleanupSec)
		r.OutputGoogleCloudStorage.EnablePageChecksum = types.BoolPointerValue(resp.OutputGoogleCloudStorage.EnablePageChecksum)
		r.OutputGoogleCloudStorage.EnableStatistics = types.BoolPointerValue(resp.OutputGoogleCloudStorage.EnableStatistics)
		r.OutputGoogleCloudStorage.EnableWritePageIndex = types.BoolPointerValue(resp.OutputGoogleCloudStorage.EnableWritePageIndex)
		r.OutputGoogleCloudStorage.Endpoint = types.StringPointerValue(resp.OutputGoogleCloudStorage.Endpoint)
		r.OutputGoogleCloudStorage.Environment = types.StringPointerValue(resp.OutputGoogleCloudStorage.Environment)
		r.OutputGoogleCloudStorage.FileNameSuffix = types.StringPointerValue(resp.OutputGoogleCloudStorage.FileNameSuffix)
		if resp.OutputGoogleCloudStorage.Format != nil {
			r.OutputGoogleCloudStorage.Format = types.StringValue(string(*resp.OutputGoogleCloudStorage.Format))
		} else {
			r.OutputGoogleCloudStorage.Format = types.StringNull()
		}
		r.OutputGoogleCloudStorage.HeaderLine = types.StringPointerValue(resp.OutputGoogleCloudStorage.HeaderLine)
		r.OutputGoogleCloudStorage.ID = types.StringPointerValue(resp.OutputGoogleCloudStorage.ID)
		r.OutputGoogleCloudStorage.KeyValueMetadata = []tfTypes.OutputGoogleCloudStorageKeyValueMetadatum{}
		if len(r.OutputGoogleCloudStorage.KeyValueMetadata) > len(resp.OutputGoogleCloudStorage.KeyValueMetadata) {
			r.OutputGoogleCloudStorage.KeyValueMetadata = r.OutputGoogleCloudStorage.KeyValueMetadata[:len(resp.OutputGoogleCloudStorage.KeyValueMetadata)]
		}
		for keyValueMetadataCount3, keyValueMetadataItem3 := range resp.OutputGoogleCloudStorage.KeyValueMetadata {
			var keyValueMetadata3 tfTypes.OutputGoogleCloudStorageKeyValueMetadatum
			keyValueMetadata3.Key = types.StringPointerValue(keyValueMetadataItem3.Key)
			keyValueMetadata3.Value = types.StringValue(keyValueMetadataItem3.Value)
			if keyValueMetadataCount3+1 > len(r.OutputGoogleCloudStorage.KeyValueMetadata) {
				r.OutputGoogleCloudStorage.KeyValueMetadata = append(r.OutputGoogleCloudStorage.KeyValueMetadata, keyValueMetadata3)
			} else {
				r.OutputGoogleCloudStorage.KeyValueMetadata[keyValueMetadataCount3].Key = keyValueMetadata3.Key
				r.OutputGoogleCloudStorage.KeyValueMetadata[keyValueMetadataCount3].Value = keyValueMetadata3.Value
			}
		}
		r.OutputGoogleCloudStorage.MaxFileIdleTimeSec = types.Float64PointerValue(resp.OutputGoogleCloudStorage.MaxFileIdleTimeSec)
		r.OutputGoogleCloudStorage.MaxFileOpenTimeSec = types.Float64PointerValue(resp.OutputGoogleCloudStorage.MaxFileOpenTimeSec)
		r.OutputGoogleCloudStorage.MaxFileSizeMB = types.Float64PointerValue(resp.OutputGoogleCloudStorage.MaxFileSizeMB)
		r.OutputGoogleCloudStorage.MaxOpenFiles = types.Float64PointerValue(resp.OutputGoogleCloudStorage.MaxOpenFiles)
		r.OutputGoogleCloudStorage.MaxRetryNum = types.Float64PointerValue(resp.OutputGoogleCloudStorage.MaxRetryNum)
		if resp.OutputGoogleCloudStorage.ObjectACL != nil {
			r.OutputGoogleCloudStorage.ObjectACL = types.StringValue(string(*resp.OutputGoogleCloudStorage.ObjectACL))
		} else {
			r.OutputGoogleCloudStorage.ObjectACL = types.StringNull()
		}
		if resp.OutputGoogleCloudStorage.OnBackpressure != nil {
			r.OutputGoogleCloudStorage.OnBackpressure = types.StringValue(string(*resp.OutputGoogleCloudStorage.OnBackpressure))
		} else {
			r.OutputGoogleCloudStorage.OnBackpressure = types.StringNull()
		}
		if resp.OutputGoogleCloudStorage.OnDiskFullBackpressure != nil {
			r.OutputGoogleCloudStorage.OnDiskFullBackpressure = types.StringValue(string(*resp.OutputGoogleCloudStorage.OnDiskFullBackpressure))
		} else {
			r.OutputGoogleCloudStorage.OnDiskFullBackpressure = types.StringNull()
		}
		if resp.OutputGoogleCloudStorage.ParquetDataPageVersion != nil {
			r.OutputGoogleCloudStorage.ParquetDataPageVersion = types.StringValue(string(*resp.OutputGoogleCloudStorage.ParquetDataPageVersion))
		} else {
			r.OutputGoogleCloudStorage.ParquetDataPageVersion = types.StringNull()
		}
		r.OutputGoogleCloudStorage.ParquetPageSize = types.StringPointerValue(resp.OutputGoogleCloudStorage.ParquetPageSize)
		r.OutputGoogleCloudStorage.ParquetRowGroupLength = types.Float64PointerValue(resp.OutputGoogleCloudStorage.ParquetRowGroupLength)
		if resp.OutputGoogleCloudStorage.ParquetVersion != nil {
			r.OutputGoogleCloudStorage.ParquetVersion = types.StringValue(string(*resp.OutputGoogleCloudStorage.ParquetVersion))
		} else {
			r.OutputGoogleCloudStorage.ParquetVersion = types.StringNull()
		}
		r.OutputGoogleCloudStorage.PartitionExpr = types.StringPointerValue(resp.OutputGoogleCloudStorage.PartitionExpr)
		r.OutputGoogleCloudStorage.Pipeline = types.StringPointerValue(resp.OutputGoogleCloudStorage.Pipeline)
		r.OutputGoogleCloudStorage.Region = types.StringValue(resp.OutputGoogleCloudStorage.Region)
		r.OutputGoogleCloudStorage.RejectUnauthorized = types.BoolPointerValue(resp.OutputGoogleCloudStorage.RejectUnauthorized)
		r.OutputGoogleCloudStorage.RemoveEmptyDirs = types.BoolPointerValue(resp.OutputGoogleCloudStorage.RemoveEmptyDirs)
		r.OutputGoogleCloudStorage.ReuseConnections = types.BoolPointerValue(resp.OutputGoogleCloudStorage.ReuseConnections)
		r.OutputGoogleCloudStorage.ShouldLogInvalidRows = types.BoolPointerValue(resp.OutputGoogleCloudStorage.ShouldLogInvalidRows)
		if resp.OutputGoogleCloudStorage.SignatureVersion != nil {
			r.OutputGoogleCloudStorage.SignatureVersion = types.StringValue(string(*resp.OutputGoogleCloudStorage.SignatureVersion))
		} else {
			r.OutputGoogleCloudStorage.SignatureVersion = types.StringNull()
		}
		r.OutputGoogleCloudStorage.StagePath = types.StringPointerValue(resp.OutputGoogleCloudStorage.StagePath)
		if resp.OutputGoogleCloudStorage.StorageClass != nil {
			r.OutputGoogleCloudStorage.StorageClass = types.StringValue(string(*resp.OutputGoogleCloudStorage.StorageClass))
		} else {
			r.OutputGoogleCloudStorage.StorageClass = types.StringNull()
		}
		r.OutputGoogleCloudStorage.Streamtags = make([]types.String, 0, len(resp.OutputGoogleCloudStorage.Streamtags))
		for _, v := range resp.OutputGoogleCloudStorage.Streamtags {
			r.OutputGoogleCloudStorage.Streamtags = append(r.OutputGoogleCloudStorage.Streamtags, types.StringValue(v))
		}
		r.OutputGoogleCloudStorage.SystemFields = make([]types.String, 0, len(resp.OutputGoogleCloudStorage.SystemFields))
		for _, v := range resp.OutputGoogleCloudStorage.SystemFields {
			r.OutputGoogleCloudStorage.SystemFields = append(r.OutputGoogleCloudStorage.SystemFields, types.StringValue(v))
		}
		if resp.OutputGoogleCloudStorage.Type != nil {
			r.OutputGoogleCloudStorage.Type = types.StringValue(string(*resp.OutputGoogleCloudStorage.Type))
		} else {
			r.OutputGoogleCloudStorage.Type = types.StringNull()
		}
		r.OutputGoogleCloudStorage.VerifyPermissions = types.BoolPointerValue(resp.OutputGoogleCloudStorage.VerifyPermissions)
		r.OutputGoogleCloudStorage.WriteHighWaterMark = types.Float64PointerValue(resp.OutputGoogleCloudStorage.WriteHighWaterMark)
	}
	if resp.OutputGooglePubsub != nil {
		r.OutputGooglePubsub = &tfTypes.OutputGooglePubsub{}
		r.OutputGooglePubsub.BatchSize = types.Float64PointerValue(resp.OutputGooglePubsub.BatchSize)
		r.OutputGooglePubsub.BatchTimeout = types.Float64PointerValue(resp.OutputGooglePubsub.BatchTimeout)
		r.OutputGooglePubsub.CreateTopic = types.BoolPointerValue(resp.OutputGooglePubsub.CreateTopic)
		r.OutputGooglePubsub.Description = types.StringPointerValue(resp.OutputGooglePubsub.Description)
		r.OutputGooglePubsub.Environment = types.StringPointerValue(resp.OutputGooglePubsub.Environment)
		if resp.OutputGooglePubsub.FlushPeriodSec == nil {
			r.OutputGooglePubsub.FlushPeriodSec = types.StringNull()
		} else {
			flushPeriodSecResult, _ := json.Marshal(resp.OutputGooglePubsub.FlushPeriodSec)
			r.OutputGooglePubsub.FlushPeriodSec = types.StringValue(string(flushPeriodSecResult))
		}
		if resp.OutputGooglePubsub.GoogleAuthMethod != nil {
			r.OutputGooglePubsub.GoogleAuthMethod = types.StringValue(string(*resp.OutputGooglePubsub.GoogleAuthMethod))
		} else {
			r.OutputGooglePubsub.GoogleAuthMethod = types.StringNull()
		}
		r.OutputGooglePubsub.ID = types.StringPointerValue(resp.OutputGooglePubsub.ID)
		r.OutputGooglePubsub.MaxInProgress = types.Float64PointerValue(resp.OutputGooglePubsub.MaxInProgress)
		r.OutputGooglePubsub.MaxQueueSize = types.Float64PointerValue(resp.OutputGooglePubsub.MaxQueueSize)
		r.OutputGooglePubsub.MaxRecordSizeKB = types.Float64PointerValue(resp.OutputGooglePubsub.MaxRecordSizeKB)
		if resp.OutputGooglePubsub.OnBackpressure != nil {
			r.OutputGooglePubsub.OnBackpressure = types.StringValue(string(*resp.OutputGooglePubsub.OnBackpressure))
		} else {
			r.OutputGooglePubsub.OnBackpressure = types.StringNull()
		}
		r.OutputGooglePubsub.OrderedDelivery = types.BoolPointerValue(resp.OutputGooglePubsub.OrderedDelivery)
		r.OutputGooglePubsub.Pipeline = types.StringPointerValue(resp.OutputGooglePubsub.Pipeline)
		if resp.OutputGooglePubsub.PqCompress != nil {
			r.OutputGooglePubsub.PqCompress = types.StringValue(string(*resp.OutputGooglePubsub.PqCompress))
		} else {
			r.OutputGooglePubsub.PqCompress = types.StringNull()
		}
		if resp.OutputGooglePubsub.PqControls == nil {
			r.OutputGooglePubsub.PqControls = nil
		} else {
			r.OutputGooglePubsub.PqControls = &tfTypes.OutputGooglePubsubPqControls{}
		}
		r.OutputGooglePubsub.PqMaxFileSize = types.StringPointerValue(resp.OutputGooglePubsub.PqMaxFileSize)
		r.OutputGooglePubsub.PqMaxSize = types.StringPointerValue(resp.OutputGooglePubsub.PqMaxSize)
		if resp.OutputGooglePubsub.PqMode != nil {
			r.OutputGooglePubsub.PqMode = types.StringValue(string(*resp.OutputGooglePubsub.PqMode))
		} else {
			r.OutputGooglePubsub.PqMode = types.StringNull()
		}
		if resp.OutputGooglePubsub.PqOnBackpressure != nil {
			r.OutputGooglePubsub.PqOnBackpressure = types.StringValue(string(*resp.OutputGooglePubsub.PqOnBackpressure))
		} else {
			r.OutputGooglePubsub.PqOnBackpressure = types.StringNull()
		}
		r.OutputGooglePubsub.PqPath = types.StringPointerValue(resp.OutputGooglePubsub.PqPath)
		r.OutputGooglePubsub.Region = types.StringPointerValue(resp.OutputGooglePubsub.Region)
		r.OutputGooglePubsub.Secret = types.StringPointerValue(resp.OutputGooglePubsub.Secret)
		r.OutputGooglePubsub.ServiceAccountCredentials = types.StringPointerValue(resp.OutputGooglePubsub.ServiceAccountCredentials)
		r.OutputGooglePubsub.Streamtags = make([]types.String, 0, len(resp.OutputGooglePubsub.Streamtags))
		for _, v := range resp.OutputGooglePubsub.Streamtags {
			r.OutputGooglePubsub.Streamtags = append(r.OutputGooglePubsub.Streamtags, types.StringValue(v))
		}
		r.OutputGooglePubsub.SystemFields = make([]types.String, 0, len(resp.OutputGooglePubsub.SystemFields))
		for _, v := range resp.OutputGooglePubsub.SystemFields {
			r.OutputGooglePubsub.SystemFields = append(r.OutputGooglePubsub.SystemFields, types.StringValue(v))
		}
		r.OutputGooglePubsub.TopicName = types.StringValue(resp.OutputGooglePubsub.TopicName)
		r.OutputGooglePubsub.Type = types.StringValue(string(resp.OutputGooglePubsub.Type))
	}
	if resp.OutputGrafanaCloud != nil {
		r.OutputGrafanaCloud = &tfTypes.OutputGrafanaCloud{}
		if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1 != nil {
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1 = &tfTypes.OutputGrafanaCloudGrafanaCloud1{}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Compress = types.BoolPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Compress)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Concurrency = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Concurrency)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Description = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Description)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Environment = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Environment)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ExtraHTTPHeaders = []tfTypes.OutputGrafanaCloudExtraHTTPHeader1{}
			if len(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ExtraHTTPHeaders) > len(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ExtraHTTPHeaders) {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ExtraHTTPHeaders = r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ExtraHTTPHeaders[:len(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ExtraHTTPHeaders)]
			}
			for extraHTTPHeadersCount11, extraHTTPHeadersItem11 := range resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ExtraHTTPHeaders {
				var extraHTTPHeaders11 tfTypes.OutputGrafanaCloudExtraHTTPHeader1
				extraHTTPHeaders11.Name = types.StringPointerValue(extraHTTPHeadersItem11.Name)
				extraHTTPHeaders11.Value = types.StringValue(extraHTTPHeadersItem11.Value)
				if extraHTTPHeadersCount11+1 > len(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ExtraHTTPHeaders) {
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ExtraHTTPHeaders = append(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ExtraHTTPHeaders, extraHTTPHeaders11)
				} else {
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ExtraHTTPHeaders[extraHTTPHeadersCount11].Name = extraHTTPHeaders11.Name
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ExtraHTTPHeaders[extraHTTPHeadersCount11].Value = extraHTTPHeaders11.Value
				}
			}
			if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.FailedRequestLoggingMode != nil {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.FailedRequestLoggingMode))
			} else {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.FailedRequestLoggingMode = types.StringNull()
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.FlushPeriodSec = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.FlushPeriodSec)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ID = types.StringValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ID)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Labels = []tfTypes.OutputGrafanaCloudLabel1{}
			if len(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Labels) > len(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Labels) {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Labels = r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Labels[:len(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Labels)]
			}
			for labelsCount, labelsItem := range resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Labels {
				var labels tfTypes.OutputGrafanaCloudLabel1
				labels.Name = types.StringPointerValue(labelsItem.Name)
				labels.Value = types.StringValue(labelsItem.Value)
				if labelsCount+1 > len(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Labels) {
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Labels = append(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Labels, labels)
				} else {
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Labels[labelsCount].Name = labels.Name
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Labels[labelsCount].Value = labels.Value
				}
			}
			if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth == nil {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth = nil
			} else {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth = &tfTypes.OutputGrafanaCloudLokiAuth1{}
				if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.AuthType != nil {
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.AuthType = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.AuthType))
				} else {
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.AuthType = types.StringNull()
				}
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.CredentialsSecret = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.CredentialsSecret)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.Password = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.Password)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.TextSecret = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.TextSecret)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.Token = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.Token)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.Username = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.Username)
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiURL = types.StringValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiURL)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.MaxPayloadEvents = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.MaxPayloadEvents)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.MaxPayloadSizeKB)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Message = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Message)
			if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.MessageFormat != nil {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.MessageFormat = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.MessageFormat))
			} else {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.MessageFormat = types.StringNull()
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.MetricRenameExpr = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.MetricRenameExpr)
			if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.OnBackpressure != nil {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.OnBackpressure = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.OnBackpressure))
			} else {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.OnBackpressure = types.StringNull()
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Pipeline = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Pipeline)
			if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqCompress != nil {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqCompress = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqCompress))
			} else {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqCompress = types.StringNull()
			}
			if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqControls == nil {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqControls = nil
			} else {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqControls = &tfTypes.OutputGrafanaCloudPqControls1{}
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqMaxFileSize = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqMaxFileSize)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqMaxSize = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqMaxSize)
			if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqMode != nil {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqMode = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqMode))
			} else {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqMode = types.StringNull()
			}
			if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqOnBackpressure != nil {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqOnBackpressure = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqOnBackpressure))
			} else {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqOnBackpressure = types.StringNull()
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqPath = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqPath)
			if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth == nil {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth = nil
			} else {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth = &tfTypes.OutputGrafanaCloudPrometheusAuth1{}
				if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.AuthType != nil {
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.AuthType = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.AuthType))
				} else {
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.AuthType = types.StringNull()
				}
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.CredentialsSecret = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.CredentialsSecret)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.Password = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.Password)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.TextSecret = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.TextSecret)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.Token = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.Token)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.Username = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.Username)
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusURL = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusURL)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.RejectUnauthorized = types.BoolPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.RejectUnauthorized)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseHonorRetryAfterHeader)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseRetrySettings = []tfTypes.OutputGrafanaCloudResponseRetrySetting1{}
			if len(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseRetrySettings) > len(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseRetrySettings) {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseRetrySettings = r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseRetrySettings[:len(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseRetrySettings)]
			}
			for responseRetrySettingsCount12, responseRetrySettingsItem12 := range resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseRetrySettings {
				var responseRetrySettings12 tfTypes.OutputGrafanaCloudResponseRetrySetting1
				responseRetrySettings12.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem12.BackoffRate)
				responseRetrySettings12.HTTPStatus = types.Float64Value(responseRetrySettingsItem12.HTTPStatus)
				responseRetrySettings12.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem12.InitialBackoff)
				responseRetrySettings12.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem12.MaxBackoff)
				if responseRetrySettingsCount12+1 > len(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseRetrySettings) {
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseRetrySettings = append(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseRetrySettings, responseRetrySettings12)
				} else {
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseRetrySettings[responseRetrySettingsCount12].BackoffRate = responseRetrySettings12.BackoffRate
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseRetrySettings[responseRetrySettingsCount12].HTTPStatus = responseRetrySettings12.HTTPStatus
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseRetrySettings[responseRetrySettingsCount12].InitialBackoff = responseRetrySettings12.InitialBackoff
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseRetrySettings[responseRetrySettingsCount12].MaxBackoff = responseRetrySettings12.MaxBackoff
				}
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.SafeHeaders = make([]types.String, 0, len(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.SafeHeaders))
			for _, v := range resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.SafeHeaders {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.SafeHeaders = append(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.SafeHeaders, types.StringValue(v))
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Streamtags = make([]types.String, 0, len(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Streamtags))
			for _, v := range resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Streamtags {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Streamtags = append(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Streamtags, types.StringValue(v))
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.SystemFields = make([]types.String, 0, len(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.SystemFields))
			for _, v := range resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.SystemFields {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.SystemFields = append(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.SystemFields, types.StringValue(v))
			}
			if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings == nil {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings = nil
			} else {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings = &tfTypes.OutputGrafanaCloudTimeoutRetrySettings1{}
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings.BackoffRate)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings.InitialBackoff)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings.MaxBackoff)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings.TimeoutRetry)
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutSec = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutSec)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Type = types.StringValue(string(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Type))
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.UseRoundRobinDNS)
		}
		if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2 != nil {
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2 = &tfTypes.OutputGrafanaCloudGrafanaCloud2{}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Compress = types.BoolPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Compress)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Concurrency = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Concurrency)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Description = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Description)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Environment = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Environment)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ExtraHTTPHeaders = []tfTypes.OutputGrafanaCloudExtraHTTPHeader2{}
			if len(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ExtraHTTPHeaders) > len(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ExtraHTTPHeaders) {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ExtraHTTPHeaders = r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ExtraHTTPHeaders[:len(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ExtraHTTPHeaders)]
			}
			for extraHTTPHeadersCount12, extraHTTPHeadersItem12 := range resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ExtraHTTPHeaders {
				var extraHTTPHeaders12 tfTypes.OutputGrafanaCloudExtraHTTPHeader2
				extraHTTPHeaders12.Name = types.StringPointerValue(extraHTTPHeadersItem12.Name)
				extraHTTPHeaders12.Value = types.StringValue(extraHTTPHeadersItem12.Value)
				if extraHTTPHeadersCount12+1 > len(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ExtraHTTPHeaders) {
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ExtraHTTPHeaders = append(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ExtraHTTPHeaders, extraHTTPHeaders12)
				} else {
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ExtraHTTPHeaders[extraHTTPHeadersCount12].Name = extraHTTPHeaders12.Name
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ExtraHTTPHeaders[extraHTTPHeadersCount12].Value = extraHTTPHeaders12.Value
				}
			}
			if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.FailedRequestLoggingMode != nil {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.FailedRequestLoggingMode))
			} else {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.FailedRequestLoggingMode = types.StringNull()
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.FlushPeriodSec = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.FlushPeriodSec)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ID = types.StringValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ID)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Labels = []tfTypes.OutputGrafanaCloudLabel2{}
			if len(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Labels) > len(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Labels) {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Labels = r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Labels[:len(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Labels)]
			}
			for labelsCount1, labelsItem1 := range resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Labels {
				var labels1 tfTypes.OutputGrafanaCloudLabel2
				labels1.Name = types.StringPointerValue(labelsItem1.Name)
				labels1.Value = types.StringValue(labelsItem1.Value)
				if labelsCount1+1 > len(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Labels) {
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Labels = append(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Labels, labels1)
				} else {
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Labels[labelsCount1].Name = labels1.Name
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Labels[labelsCount1].Value = labels1.Value
				}
			}
			if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth == nil {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth = nil
			} else {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth = &tfTypes.OutputGrafanaCloudLokiAuth2{}
				if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.AuthType != nil {
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.AuthType = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.AuthType))
				} else {
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.AuthType = types.StringNull()
				}
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.CredentialsSecret = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.CredentialsSecret)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.Password = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.Password)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.TextSecret = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.TextSecret)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.Token = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.Token)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.Username = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.Username)
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiURL = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiURL)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.MaxPayloadEvents = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.MaxPayloadEvents)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.MaxPayloadSizeKB)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Message = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Message)
			if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.MessageFormat != nil {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.MessageFormat = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.MessageFormat))
			} else {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.MessageFormat = types.StringNull()
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.MetricRenameExpr = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.MetricRenameExpr)
			if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.OnBackpressure != nil {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.OnBackpressure = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.OnBackpressure))
			} else {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.OnBackpressure = types.StringNull()
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Pipeline = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Pipeline)
			if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqCompress != nil {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqCompress = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqCompress))
			} else {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqCompress = types.StringNull()
			}
			if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqControls == nil {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqControls = nil
			} else {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqControls = &tfTypes.OutputGrafanaCloudPqControls2{}
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqMaxFileSize = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqMaxFileSize)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqMaxSize = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqMaxSize)
			if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqMode != nil {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqMode = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqMode))
			} else {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqMode = types.StringNull()
			}
			if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqOnBackpressure != nil {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqOnBackpressure = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqOnBackpressure))
			} else {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqOnBackpressure = types.StringNull()
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqPath = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqPath)
			if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth == nil {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth = nil
			} else {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth = &tfTypes.OutputGrafanaCloudPrometheusAuth2{}
				if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.AuthType != nil {
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.AuthType = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.AuthType))
				} else {
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.AuthType = types.StringNull()
				}
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.CredentialsSecret = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.CredentialsSecret)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.Password = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.Password)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.TextSecret = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.TextSecret)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.Token = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.Token)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.Username = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.Username)
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusURL = types.StringValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusURL)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.RejectUnauthorized = types.BoolPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.RejectUnauthorized)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseHonorRetryAfterHeader)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseRetrySettings = []tfTypes.OutputGrafanaCloudResponseRetrySetting2{}
			if len(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseRetrySettings) > len(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseRetrySettings) {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseRetrySettings = r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseRetrySettings[:len(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseRetrySettings)]
			}
			for responseRetrySettingsCount13, responseRetrySettingsItem13 := range resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseRetrySettings {
				var responseRetrySettings13 tfTypes.OutputGrafanaCloudResponseRetrySetting2
				responseRetrySettings13.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem13.BackoffRate)
				responseRetrySettings13.HTTPStatus = types.Float64Value(responseRetrySettingsItem13.HTTPStatus)
				responseRetrySettings13.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem13.InitialBackoff)
				responseRetrySettings13.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem13.MaxBackoff)
				if responseRetrySettingsCount13+1 > len(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseRetrySettings) {
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseRetrySettings = append(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseRetrySettings, responseRetrySettings13)
				} else {
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseRetrySettings[responseRetrySettingsCount13].BackoffRate = responseRetrySettings13.BackoffRate
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseRetrySettings[responseRetrySettingsCount13].HTTPStatus = responseRetrySettings13.HTTPStatus
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseRetrySettings[responseRetrySettingsCount13].InitialBackoff = responseRetrySettings13.InitialBackoff
					r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseRetrySettings[responseRetrySettingsCount13].MaxBackoff = responseRetrySettings13.MaxBackoff
				}
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.SafeHeaders = make([]types.String, 0, len(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.SafeHeaders))
			for _, v := range resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.SafeHeaders {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.SafeHeaders = append(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.SafeHeaders, types.StringValue(v))
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Streamtags = make([]types.String, 0, len(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Streamtags))
			for _, v := range resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Streamtags {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Streamtags = append(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Streamtags, types.StringValue(v))
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.SystemFields = make([]types.String, 0, len(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.SystemFields))
			for _, v := range resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.SystemFields {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.SystemFields = append(r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.SystemFields, types.StringValue(v))
			}
			if resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings == nil {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings = nil
			} else {
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings = &tfTypes.OutputGrafanaCloudTimeoutRetrySettings2{}
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings.BackoffRate)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings.InitialBackoff)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings.MaxBackoff)
				r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings.TimeoutRetry)
			}
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutSec = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutSec)
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Type = types.StringValue(string(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Type))
			r.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.UseRoundRobinDNS)
		}
	}
	if resp.OutputGraphite != nil {
		r.OutputGraphite = &tfTypes.OutputGraphite{}
		r.OutputGraphite.ConnectionTimeout = types.Float64PointerValue(resp.OutputGraphite.ConnectionTimeout)
		r.OutputGraphite.Description = types.StringPointerValue(resp.OutputGraphite.Description)
		r.OutputGraphite.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputGraphite.DNSResolvePeriodSec)
		r.OutputGraphite.Environment = types.StringPointerValue(resp.OutputGraphite.Environment)
		r.OutputGraphite.FlushPeriodSec = types.Float64PointerValue(resp.OutputGraphite.FlushPeriodSec)
		r.OutputGraphite.Host = types.StringValue(resp.OutputGraphite.Host)
		r.OutputGraphite.ID = types.StringPointerValue(resp.OutputGraphite.ID)
		r.OutputGraphite.Mtu = types.Float64PointerValue(resp.OutputGraphite.Mtu)
		if resp.OutputGraphite.OnBackpressure != nil {
			r.OutputGraphite.OnBackpressure = types.StringValue(string(*resp.OutputGraphite.OnBackpressure))
		} else {
			r.OutputGraphite.OnBackpressure = types.StringNull()
		}
		r.OutputGraphite.Pipeline = types.StringPointerValue(resp.OutputGraphite.Pipeline)
		r.OutputGraphite.Port = types.Float64PointerValue(resp.OutputGraphite.Port)
		if resp.OutputGraphite.PqCompress != nil {
			r.OutputGraphite.PqCompress = types.StringValue(string(*resp.OutputGraphite.PqCompress))
		} else {
			r.OutputGraphite.PqCompress = types.StringNull()
		}
		if resp.OutputGraphite.PqControls == nil {
			r.OutputGraphite.PqControls = nil
		} else {
			r.OutputGraphite.PqControls = &tfTypes.OutputGraphitePqControls{}
		}
		r.OutputGraphite.PqMaxFileSize = types.StringPointerValue(resp.OutputGraphite.PqMaxFileSize)
		r.OutputGraphite.PqMaxSize = types.StringPointerValue(resp.OutputGraphite.PqMaxSize)
		if resp.OutputGraphite.PqMode != nil {
			r.OutputGraphite.PqMode = types.StringValue(string(*resp.OutputGraphite.PqMode))
		} else {
			r.OutputGraphite.PqMode = types.StringNull()
		}
		if resp.OutputGraphite.PqOnBackpressure != nil {
			r.OutputGraphite.PqOnBackpressure = types.StringValue(string(*resp.OutputGraphite.PqOnBackpressure))
		} else {
			r.OutputGraphite.PqOnBackpressure = types.StringNull()
		}
		r.OutputGraphite.PqPath = types.StringPointerValue(resp.OutputGraphite.PqPath)
		if resp.OutputGraphite.Protocol != nil {
			r.OutputGraphite.Protocol = types.StringValue(string(*resp.OutputGraphite.Protocol))
		} else {
			r.OutputGraphite.Protocol = types.StringNull()
		}
		r.OutputGraphite.Streamtags = make([]types.String, 0, len(resp.OutputGraphite.Streamtags))
		for _, v := range resp.OutputGraphite.Streamtags {
			r.OutputGraphite.Streamtags = append(r.OutputGraphite.Streamtags, types.StringValue(v))
		}
		r.OutputGraphite.SystemFields = make([]types.String, 0, len(resp.OutputGraphite.SystemFields))
		for _, v := range resp.OutputGraphite.SystemFields {
			r.OutputGraphite.SystemFields = append(r.OutputGraphite.SystemFields, types.StringValue(v))
		}
		r.OutputGraphite.ThrottleRatePerSec = types.StringPointerValue(resp.OutputGraphite.ThrottleRatePerSec)
		if resp.OutputGraphite.Type != nil {
			r.OutputGraphite.Type = types.StringValue(string(*resp.OutputGraphite.Type))
		} else {
			r.OutputGraphite.Type = types.StringNull()
		}
		r.OutputGraphite.WriteTimeout = types.Float64PointerValue(resp.OutputGraphite.WriteTimeout)
	}
	if resp.OutputHoneycomb != nil {
		r.OutputHoneycomb = &tfTypes.OutputHoneycomb{}
		if resp.OutputHoneycomb.AuthType != nil {
			r.OutputHoneycomb.AuthType = types.StringValue(string(*resp.OutputHoneycomb.AuthType))
		} else {
			r.OutputHoneycomb.AuthType = types.StringNull()
		}
		r.OutputHoneycomb.Compress = types.BoolPointerValue(resp.OutputHoneycomb.Compress)
		r.OutputHoneycomb.Concurrency = types.Float64PointerValue(resp.OutputHoneycomb.Concurrency)
		r.OutputHoneycomb.Dataset = types.StringValue(resp.OutputHoneycomb.Dataset)
		r.OutputHoneycomb.Description = types.StringPointerValue(resp.OutputHoneycomb.Description)
		r.OutputHoneycomb.Environment = types.StringPointerValue(resp.OutputHoneycomb.Environment)
		r.OutputHoneycomb.ExtraHTTPHeaders = []tfTypes.OutputHoneycombExtraHTTPHeader{}
		if len(r.OutputHoneycomb.ExtraHTTPHeaders) > len(resp.OutputHoneycomb.ExtraHTTPHeaders) {
			r.OutputHoneycomb.ExtraHTTPHeaders = r.OutputHoneycomb.ExtraHTTPHeaders[:len(resp.OutputHoneycomb.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount13, extraHTTPHeadersItem13 := range resp.OutputHoneycomb.ExtraHTTPHeaders {
			var extraHTTPHeaders13 tfTypes.OutputHoneycombExtraHTTPHeader
			extraHTTPHeaders13.Name = types.StringPointerValue(extraHTTPHeadersItem13.Name)
			extraHTTPHeaders13.Value = types.StringValue(extraHTTPHeadersItem13.Value)
			if extraHTTPHeadersCount13+1 > len(r.OutputHoneycomb.ExtraHTTPHeaders) {
				r.OutputHoneycomb.ExtraHTTPHeaders = append(r.OutputHoneycomb.ExtraHTTPHeaders, extraHTTPHeaders13)
			} else {
				r.OutputHoneycomb.ExtraHTTPHeaders[extraHTTPHeadersCount13].Name = extraHTTPHeaders13.Name
				r.OutputHoneycomb.ExtraHTTPHeaders[extraHTTPHeadersCount13].Value = extraHTTPHeaders13.Value
			}
		}
		if resp.OutputHoneycomb.FailedRequestLoggingMode != nil {
			r.OutputHoneycomb.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputHoneycomb.FailedRequestLoggingMode))
		} else {
			r.OutputHoneycomb.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputHoneycomb.FlushPeriodSec = types.Float64PointerValue(resp.OutputHoneycomb.FlushPeriodSec)
		r.OutputHoneycomb.ID = types.StringPointerValue(resp.OutputHoneycomb.ID)
		r.OutputHoneycomb.MaxPayloadEvents = types.Float64PointerValue(resp.OutputHoneycomb.MaxPayloadEvents)
		r.OutputHoneycomb.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputHoneycomb.MaxPayloadSizeKB)
		if resp.OutputHoneycomb.OnBackpressure != nil {
			r.OutputHoneycomb.OnBackpressure = types.StringValue(string(*resp.OutputHoneycomb.OnBackpressure))
		} else {
			r.OutputHoneycomb.OnBackpressure = types.StringNull()
		}
		r.OutputHoneycomb.Pipeline = types.StringPointerValue(resp.OutputHoneycomb.Pipeline)
		if resp.OutputHoneycomb.PqCompress != nil {
			r.OutputHoneycomb.PqCompress = types.StringValue(string(*resp.OutputHoneycomb.PqCompress))
		} else {
			r.OutputHoneycomb.PqCompress = types.StringNull()
		}
		if resp.OutputHoneycomb.PqControls == nil {
			r.OutputHoneycomb.PqControls = nil
		} else {
			r.OutputHoneycomb.PqControls = &tfTypes.OutputHoneycombPqControls{}
		}
		r.OutputHoneycomb.PqMaxFileSize = types.StringPointerValue(resp.OutputHoneycomb.PqMaxFileSize)
		r.OutputHoneycomb.PqMaxSize = types.StringPointerValue(resp.OutputHoneycomb.PqMaxSize)
		if resp.OutputHoneycomb.PqMode != nil {
			r.OutputHoneycomb.PqMode = types.StringValue(string(*resp.OutputHoneycomb.PqMode))
		} else {
			r.OutputHoneycomb.PqMode = types.StringNull()
		}
		if resp.OutputHoneycomb.PqOnBackpressure != nil {
			r.OutputHoneycomb.PqOnBackpressure = types.StringValue(string(*resp.OutputHoneycomb.PqOnBackpressure))
		} else {
			r.OutputHoneycomb.PqOnBackpressure = types.StringNull()
		}
		r.OutputHoneycomb.PqPath = types.StringPointerValue(resp.OutputHoneycomb.PqPath)
		r.OutputHoneycomb.RejectUnauthorized = types.BoolPointerValue(resp.OutputHoneycomb.RejectUnauthorized)
		r.OutputHoneycomb.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputHoneycomb.ResponseHonorRetryAfterHeader)
		r.OutputHoneycomb.ResponseRetrySettings = []tfTypes.OutputHoneycombResponseRetrySetting{}
		if len(r.OutputHoneycomb.ResponseRetrySettings) > len(resp.OutputHoneycomb.ResponseRetrySettings) {
			r.OutputHoneycomb.ResponseRetrySettings = r.OutputHoneycomb.ResponseRetrySettings[:len(resp.OutputHoneycomb.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount14, responseRetrySettingsItem14 := range resp.OutputHoneycomb.ResponseRetrySettings {
			var responseRetrySettings14 tfTypes.OutputHoneycombResponseRetrySetting
			responseRetrySettings14.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem14.BackoffRate)
			responseRetrySettings14.HTTPStatus = types.Float64Value(responseRetrySettingsItem14.HTTPStatus)
			responseRetrySettings14.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem14.InitialBackoff)
			responseRetrySettings14.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem14.MaxBackoff)
			if responseRetrySettingsCount14+1 > len(r.OutputHoneycomb.ResponseRetrySettings) {
				r.OutputHoneycomb.ResponseRetrySettings = append(r.OutputHoneycomb.ResponseRetrySettings, responseRetrySettings14)
			} else {
				r.OutputHoneycomb.ResponseRetrySettings[responseRetrySettingsCount14].BackoffRate = responseRetrySettings14.BackoffRate
				r.OutputHoneycomb.ResponseRetrySettings[responseRetrySettingsCount14].HTTPStatus = responseRetrySettings14.HTTPStatus
				r.OutputHoneycomb.ResponseRetrySettings[responseRetrySettingsCount14].InitialBackoff = responseRetrySettings14.InitialBackoff
				r.OutputHoneycomb.ResponseRetrySettings[responseRetrySettingsCount14].MaxBackoff = responseRetrySettings14.MaxBackoff
			}
		}
		r.OutputHoneycomb.SafeHeaders = make([]types.String, 0, len(resp.OutputHoneycomb.SafeHeaders))
		for _, v := range resp.OutputHoneycomb.SafeHeaders {
			r.OutputHoneycomb.SafeHeaders = append(r.OutputHoneycomb.SafeHeaders, types.StringValue(v))
		}
		r.OutputHoneycomb.Streamtags = make([]types.String, 0, len(resp.OutputHoneycomb.Streamtags))
		for _, v := range resp.OutputHoneycomb.Streamtags {
			r.OutputHoneycomb.Streamtags = append(r.OutputHoneycomb.Streamtags, types.StringValue(v))
		}
		r.OutputHoneycomb.SystemFields = make([]types.String, 0, len(resp.OutputHoneycomb.SystemFields))
		for _, v := range resp.OutputHoneycomb.SystemFields {
			r.OutputHoneycomb.SystemFields = append(r.OutputHoneycomb.SystemFields, types.StringValue(v))
		}
		r.OutputHoneycomb.Team = types.StringPointerValue(resp.OutputHoneycomb.Team)
		r.OutputHoneycomb.TextSecret = types.StringPointerValue(resp.OutputHoneycomb.TextSecret)
		if resp.OutputHoneycomb.TimeoutRetrySettings == nil {
			r.OutputHoneycomb.TimeoutRetrySettings = nil
		} else {
			r.OutputHoneycomb.TimeoutRetrySettings = &tfTypes.OutputHoneycombTimeoutRetrySettings{}
			r.OutputHoneycomb.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputHoneycomb.TimeoutRetrySettings.BackoffRate)
			r.OutputHoneycomb.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputHoneycomb.TimeoutRetrySettings.InitialBackoff)
			r.OutputHoneycomb.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputHoneycomb.TimeoutRetrySettings.MaxBackoff)
			r.OutputHoneycomb.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputHoneycomb.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputHoneycomb.TimeoutSec = types.Float64PointerValue(resp.OutputHoneycomb.TimeoutSec)
		r.OutputHoneycomb.Type = types.StringValue(string(resp.OutputHoneycomb.Type))
		r.OutputHoneycomb.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputHoneycomb.UseRoundRobinDNS)
	}
	if resp.OutputHumioHec != nil {
		r.OutputHumioHec = &tfTypes.OutputHumioHec{}
		if resp.OutputHumioHec.AuthType != nil {
			r.OutputHumioHec.AuthType = types.StringValue(string(*resp.OutputHumioHec.AuthType))
		} else {
			r.OutputHumioHec.AuthType = types.StringNull()
		}
		r.OutputHumioHec.Compress = types.BoolPointerValue(resp.OutputHumioHec.Compress)
		r.OutputHumioHec.Concurrency = types.Float64PointerValue(resp.OutputHumioHec.Concurrency)
		r.OutputHumioHec.Description = types.StringPointerValue(resp.OutputHumioHec.Description)
		r.OutputHumioHec.Environment = types.StringPointerValue(resp.OutputHumioHec.Environment)
		r.OutputHumioHec.ExtraHTTPHeaders = []tfTypes.OutputHumioHecExtraHTTPHeader{}
		if len(r.OutputHumioHec.ExtraHTTPHeaders) > len(resp.OutputHumioHec.ExtraHTTPHeaders) {
			r.OutputHumioHec.ExtraHTTPHeaders = r.OutputHumioHec.ExtraHTTPHeaders[:len(resp.OutputHumioHec.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount14, extraHTTPHeadersItem14 := range resp.OutputHumioHec.ExtraHTTPHeaders {
			var extraHTTPHeaders14 tfTypes.OutputHumioHecExtraHTTPHeader
			extraHTTPHeaders14.Name = types.StringPointerValue(extraHTTPHeadersItem14.Name)
			extraHTTPHeaders14.Value = types.StringValue(extraHTTPHeadersItem14.Value)
			if extraHTTPHeadersCount14+1 > len(r.OutputHumioHec.ExtraHTTPHeaders) {
				r.OutputHumioHec.ExtraHTTPHeaders = append(r.OutputHumioHec.ExtraHTTPHeaders, extraHTTPHeaders14)
			} else {
				r.OutputHumioHec.ExtraHTTPHeaders[extraHTTPHeadersCount14].Name = extraHTTPHeaders14.Name
				r.OutputHumioHec.ExtraHTTPHeaders[extraHTTPHeadersCount14].Value = extraHTTPHeaders14.Value
			}
		}
		if resp.OutputHumioHec.FailedRequestLoggingMode != nil {
			r.OutputHumioHec.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputHumioHec.FailedRequestLoggingMode))
		} else {
			r.OutputHumioHec.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputHumioHec.FlushPeriodSec = types.Float64PointerValue(resp.OutputHumioHec.FlushPeriodSec)
		if resp.OutputHumioHec.Format != nil {
			r.OutputHumioHec.Format = types.StringValue(string(*resp.OutputHumioHec.Format))
		} else {
			r.OutputHumioHec.Format = types.StringNull()
		}
		r.OutputHumioHec.ID = types.StringPointerValue(resp.OutputHumioHec.ID)
		r.OutputHumioHec.MaxPayloadEvents = types.Float64PointerValue(resp.OutputHumioHec.MaxPayloadEvents)
		r.OutputHumioHec.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputHumioHec.MaxPayloadSizeKB)
		if resp.OutputHumioHec.OnBackpressure != nil {
			r.OutputHumioHec.OnBackpressure = types.StringValue(string(*resp.OutputHumioHec.OnBackpressure))
		} else {
			r.OutputHumioHec.OnBackpressure = types.StringNull()
		}
		r.OutputHumioHec.Pipeline = types.StringPointerValue(resp.OutputHumioHec.Pipeline)
		if resp.OutputHumioHec.PqCompress != nil {
			r.OutputHumioHec.PqCompress = types.StringValue(string(*resp.OutputHumioHec.PqCompress))
		} else {
			r.OutputHumioHec.PqCompress = types.StringNull()
		}
		if resp.OutputHumioHec.PqControls == nil {
			r.OutputHumioHec.PqControls = nil
		} else {
			r.OutputHumioHec.PqControls = &tfTypes.OutputHumioHecPqControls{}
		}
		r.OutputHumioHec.PqMaxFileSize = types.StringPointerValue(resp.OutputHumioHec.PqMaxFileSize)
		r.OutputHumioHec.PqMaxSize = types.StringPointerValue(resp.OutputHumioHec.PqMaxSize)
		if resp.OutputHumioHec.PqMode != nil {
			r.OutputHumioHec.PqMode = types.StringValue(string(*resp.OutputHumioHec.PqMode))
		} else {
			r.OutputHumioHec.PqMode = types.StringNull()
		}
		if resp.OutputHumioHec.PqOnBackpressure != nil {
			r.OutputHumioHec.PqOnBackpressure = types.StringValue(string(*resp.OutputHumioHec.PqOnBackpressure))
		} else {
			r.OutputHumioHec.PqOnBackpressure = types.StringNull()
		}
		r.OutputHumioHec.PqPath = types.StringPointerValue(resp.OutputHumioHec.PqPath)
		r.OutputHumioHec.RejectUnauthorized = types.BoolPointerValue(resp.OutputHumioHec.RejectUnauthorized)
		r.OutputHumioHec.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputHumioHec.ResponseHonorRetryAfterHeader)
		r.OutputHumioHec.ResponseRetrySettings = []tfTypes.OutputHumioHecResponseRetrySetting{}
		if len(r.OutputHumioHec.ResponseRetrySettings) > len(resp.OutputHumioHec.ResponseRetrySettings) {
			r.OutputHumioHec.ResponseRetrySettings = r.OutputHumioHec.ResponseRetrySettings[:len(resp.OutputHumioHec.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount15, responseRetrySettingsItem15 := range resp.OutputHumioHec.ResponseRetrySettings {
			var responseRetrySettings15 tfTypes.OutputHumioHecResponseRetrySetting
			responseRetrySettings15.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem15.BackoffRate)
			responseRetrySettings15.HTTPStatus = types.Float64Value(responseRetrySettingsItem15.HTTPStatus)
			responseRetrySettings15.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem15.InitialBackoff)
			responseRetrySettings15.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem15.MaxBackoff)
			if responseRetrySettingsCount15+1 > len(r.OutputHumioHec.ResponseRetrySettings) {
				r.OutputHumioHec.ResponseRetrySettings = append(r.OutputHumioHec.ResponseRetrySettings, responseRetrySettings15)
			} else {
				r.OutputHumioHec.ResponseRetrySettings[responseRetrySettingsCount15].BackoffRate = responseRetrySettings15.BackoffRate
				r.OutputHumioHec.ResponseRetrySettings[responseRetrySettingsCount15].HTTPStatus = responseRetrySettings15.HTTPStatus
				r.OutputHumioHec.ResponseRetrySettings[responseRetrySettingsCount15].InitialBackoff = responseRetrySettings15.InitialBackoff
				r.OutputHumioHec.ResponseRetrySettings[responseRetrySettingsCount15].MaxBackoff = responseRetrySettings15.MaxBackoff
			}
		}
		r.OutputHumioHec.SafeHeaders = make([]types.String, 0, len(resp.OutputHumioHec.SafeHeaders))
		for _, v := range resp.OutputHumioHec.SafeHeaders {
			r.OutputHumioHec.SafeHeaders = append(r.OutputHumioHec.SafeHeaders, types.StringValue(v))
		}
		r.OutputHumioHec.Streamtags = make([]types.String, 0, len(resp.OutputHumioHec.Streamtags))
		for _, v := range resp.OutputHumioHec.Streamtags {
			r.OutputHumioHec.Streamtags = append(r.OutputHumioHec.Streamtags, types.StringValue(v))
		}
		r.OutputHumioHec.SystemFields = make([]types.String, 0, len(resp.OutputHumioHec.SystemFields))
		for _, v := range resp.OutputHumioHec.SystemFields {
			r.OutputHumioHec.SystemFields = append(r.OutputHumioHec.SystemFields, types.StringValue(v))
		}
		r.OutputHumioHec.TextSecret = types.StringPointerValue(resp.OutputHumioHec.TextSecret)
		if resp.OutputHumioHec.TimeoutRetrySettings == nil {
			r.OutputHumioHec.TimeoutRetrySettings = nil
		} else {
			r.OutputHumioHec.TimeoutRetrySettings = &tfTypes.OutputHumioHecTimeoutRetrySettings{}
			r.OutputHumioHec.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputHumioHec.TimeoutRetrySettings.BackoffRate)
			r.OutputHumioHec.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputHumioHec.TimeoutRetrySettings.InitialBackoff)
			r.OutputHumioHec.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputHumioHec.TimeoutRetrySettings.MaxBackoff)
			r.OutputHumioHec.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputHumioHec.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputHumioHec.TimeoutSec = types.Float64PointerValue(resp.OutputHumioHec.TimeoutSec)
		r.OutputHumioHec.Token = types.StringPointerValue(resp.OutputHumioHec.Token)
		if resp.OutputHumioHec.Type != nil {
			r.OutputHumioHec.Type = types.StringValue(string(*resp.OutputHumioHec.Type))
		} else {
			r.OutputHumioHec.Type = types.StringNull()
		}
		r.OutputHumioHec.URL = types.StringPointerValue(resp.OutputHumioHec.URL)
		r.OutputHumioHec.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputHumioHec.UseRoundRobinDNS)
	}
	if resp.OutputInfluxdb != nil {
		r.OutputInfluxdb = &tfTypes.OutputInfluxdb{}
		r.OutputInfluxdb.AuthHeaderExpr = types.StringPointerValue(resp.OutputInfluxdb.AuthHeaderExpr)
		if resp.OutputInfluxdb.AuthType != nil {
			r.OutputInfluxdb.AuthType = types.StringValue(string(*resp.OutputInfluxdb.AuthType))
		} else {
			r.OutputInfluxdb.AuthType = types.StringNull()
		}
		r.OutputInfluxdb.Bucket = types.StringPointerValue(resp.OutputInfluxdb.Bucket)
		r.OutputInfluxdb.Compress = types.BoolPointerValue(resp.OutputInfluxdb.Compress)
		r.OutputInfluxdb.Concurrency = types.Float64PointerValue(resp.OutputInfluxdb.Concurrency)
		r.OutputInfluxdb.CredentialsSecret = types.StringPointerValue(resp.OutputInfluxdb.CredentialsSecret)
		r.OutputInfluxdb.Database = types.StringPointerValue(resp.OutputInfluxdb.Database)
		r.OutputInfluxdb.Description = types.StringPointerValue(resp.OutputInfluxdb.Description)
		r.OutputInfluxdb.DynamicValueFieldName = types.BoolPointerValue(resp.OutputInfluxdb.DynamicValueFieldName)
		r.OutputInfluxdb.Environment = types.StringPointerValue(resp.OutputInfluxdb.Environment)
		r.OutputInfluxdb.ExtraHTTPHeaders = []tfTypes.OutputInfluxdbExtraHTTPHeader{}
		if len(r.OutputInfluxdb.ExtraHTTPHeaders) > len(resp.OutputInfluxdb.ExtraHTTPHeaders) {
			r.OutputInfluxdb.ExtraHTTPHeaders = r.OutputInfluxdb.ExtraHTTPHeaders[:len(resp.OutputInfluxdb.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount15, extraHTTPHeadersItem15 := range resp.OutputInfluxdb.ExtraHTTPHeaders {
			var extraHTTPHeaders15 tfTypes.OutputInfluxdbExtraHTTPHeader
			extraHTTPHeaders15.Name = types.StringPointerValue(extraHTTPHeadersItem15.Name)
			extraHTTPHeaders15.Value = types.StringValue(extraHTTPHeadersItem15.Value)
			if extraHTTPHeadersCount15+1 > len(r.OutputInfluxdb.ExtraHTTPHeaders) {
				r.OutputInfluxdb.ExtraHTTPHeaders = append(r.OutputInfluxdb.ExtraHTTPHeaders, extraHTTPHeaders15)
			} else {
				r.OutputInfluxdb.ExtraHTTPHeaders[extraHTTPHeadersCount15].Name = extraHTTPHeaders15.Name
				r.OutputInfluxdb.ExtraHTTPHeaders[extraHTTPHeadersCount15].Value = extraHTTPHeaders15.Value
			}
		}
		if resp.OutputInfluxdb.FailedRequestLoggingMode != nil {
			r.OutputInfluxdb.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputInfluxdb.FailedRequestLoggingMode))
		} else {
			r.OutputInfluxdb.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputInfluxdb.FlushPeriodSec = types.Float64PointerValue(resp.OutputInfluxdb.FlushPeriodSec)
		r.OutputInfluxdb.ID = types.StringPointerValue(resp.OutputInfluxdb.ID)
		r.OutputInfluxdb.LoginURL = types.StringPointerValue(resp.OutputInfluxdb.LoginURL)
		r.OutputInfluxdb.MaxPayloadEvents = types.Float64PointerValue(resp.OutputInfluxdb.MaxPayloadEvents)
		r.OutputInfluxdb.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputInfluxdb.MaxPayloadSizeKB)
		r.OutputInfluxdb.OauthHeaders = []tfTypes.OutputInfluxdbOauthHeader{}
		if len(r.OutputInfluxdb.OauthHeaders) > len(resp.OutputInfluxdb.OauthHeaders) {
			r.OutputInfluxdb.OauthHeaders = r.OutputInfluxdb.OauthHeaders[:len(resp.OutputInfluxdb.OauthHeaders)]
		}
		for oauthHeadersCount1, oauthHeadersItem1 := range resp.OutputInfluxdb.OauthHeaders {
			var oauthHeaders1 tfTypes.OutputInfluxdbOauthHeader
			oauthHeaders1.Name = types.StringValue(oauthHeadersItem1.Name)
			oauthHeaders1.Value = types.StringValue(oauthHeadersItem1.Value)
			if oauthHeadersCount1+1 > len(r.OutputInfluxdb.OauthHeaders) {
				r.OutputInfluxdb.OauthHeaders = append(r.OutputInfluxdb.OauthHeaders, oauthHeaders1)
			} else {
				r.OutputInfluxdb.OauthHeaders[oauthHeadersCount1].Name = oauthHeaders1.Name
				r.OutputInfluxdb.OauthHeaders[oauthHeadersCount1].Value = oauthHeaders1.Value
			}
		}
		r.OutputInfluxdb.OauthParams = []tfTypes.OutputInfluxdbOauthParam{}
		if len(r.OutputInfluxdb.OauthParams) > len(resp.OutputInfluxdb.OauthParams) {
			r.OutputInfluxdb.OauthParams = r.OutputInfluxdb.OauthParams[:len(resp.OutputInfluxdb.OauthParams)]
		}
		for oauthParamsCount1, oauthParamsItem1 := range resp.OutputInfluxdb.OauthParams {
			var oauthParams1 tfTypes.OutputInfluxdbOauthParam
			oauthParams1.Name = types.StringValue(oauthParamsItem1.Name)
			oauthParams1.Value = types.StringValue(oauthParamsItem1.Value)
			if oauthParamsCount1+1 > len(r.OutputInfluxdb.OauthParams) {
				r.OutputInfluxdb.OauthParams = append(r.OutputInfluxdb.OauthParams, oauthParams1)
			} else {
				r.OutputInfluxdb.OauthParams[oauthParamsCount1].Name = oauthParams1.Name
				r.OutputInfluxdb.OauthParams[oauthParamsCount1].Value = oauthParams1.Value
			}
		}
		if resp.OutputInfluxdb.OnBackpressure != nil {
			r.OutputInfluxdb.OnBackpressure = types.StringValue(string(*resp.OutputInfluxdb.OnBackpressure))
		} else {
			r.OutputInfluxdb.OnBackpressure = types.StringNull()
		}
		r.OutputInfluxdb.Org = types.StringPointerValue(resp.OutputInfluxdb.Org)
		r.OutputInfluxdb.Password = types.StringPointerValue(resp.OutputInfluxdb.Password)
		r.OutputInfluxdb.Pipeline = types.StringPointerValue(resp.OutputInfluxdb.Pipeline)
		if resp.OutputInfluxdb.PqCompress != nil {
			r.OutputInfluxdb.PqCompress = types.StringValue(string(*resp.OutputInfluxdb.PqCompress))
		} else {
			r.OutputInfluxdb.PqCompress = types.StringNull()
		}
		if resp.OutputInfluxdb.PqControls == nil {
			r.OutputInfluxdb.PqControls = nil
		} else {
			r.OutputInfluxdb.PqControls = &tfTypes.OutputInfluxdbPqControls{}
		}
		r.OutputInfluxdb.PqMaxFileSize = types.StringPointerValue(resp.OutputInfluxdb.PqMaxFileSize)
		r.OutputInfluxdb.PqMaxSize = types.StringPointerValue(resp.OutputInfluxdb.PqMaxSize)
		if resp.OutputInfluxdb.PqMode != nil {
			r.OutputInfluxdb.PqMode = types.StringValue(string(*resp.OutputInfluxdb.PqMode))
		} else {
			r.OutputInfluxdb.PqMode = types.StringNull()
		}
		if resp.OutputInfluxdb.PqOnBackpressure != nil {
			r.OutputInfluxdb.PqOnBackpressure = types.StringValue(string(*resp.OutputInfluxdb.PqOnBackpressure))
		} else {
			r.OutputInfluxdb.PqOnBackpressure = types.StringNull()
		}
		r.OutputInfluxdb.PqPath = types.StringPointerValue(resp.OutputInfluxdb.PqPath)
		r.OutputInfluxdb.RejectUnauthorized = types.BoolPointerValue(resp.OutputInfluxdb.RejectUnauthorized)
		r.OutputInfluxdb.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputInfluxdb.ResponseHonorRetryAfterHeader)
		r.OutputInfluxdb.ResponseRetrySettings = []tfTypes.OutputInfluxdbResponseRetrySetting{}
		if len(r.OutputInfluxdb.ResponseRetrySettings) > len(resp.OutputInfluxdb.ResponseRetrySettings) {
			r.OutputInfluxdb.ResponseRetrySettings = r.OutputInfluxdb.ResponseRetrySettings[:len(resp.OutputInfluxdb.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount16, responseRetrySettingsItem16 := range resp.OutputInfluxdb.ResponseRetrySettings {
			var responseRetrySettings16 tfTypes.OutputInfluxdbResponseRetrySetting
			responseRetrySettings16.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem16.BackoffRate)
			responseRetrySettings16.HTTPStatus = types.Float64Value(responseRetrySettingsItem16.HTTPStatus)
			responseRetrySettings16.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem16.InitialBackoff)
			responseRetrySettings16.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem16.MaxBackoff)
			if responseRetrySettingsCount16+1 > len(r.OutputInfluxdb.ResponseRetrySettings) {
				r.OutputInfluxdb.ResponseRetrySettings = append(r.OutputInfluxdb.ResponseRetrySettings, responseRetrySettings16)
			} else {
				r.OutputInfluxdb.ResponseRetrySettings[responseRetrySettingsCount16].BackoffRate = responseRetrySettings16.BackoffRate
				r.OutputInfluxdb.ResponseRetrySettings[responseRetrySettingsCount16].HTTPStatus = responseRetrySettings16.HTTPStatus
				r.OutputInfluxdb.ResponseRetrySettings[responseRetrySettingsCount16].InitialBackoff = responseRetrySettings16.InitialBackoff
				r.OutputInfluxdb.ResponseRetrySettings[responseRetrySettingsCount16].MaxBackoff = responseRetrySettings16.MaxBackoff
			}
		}
		r.OutputInfluxdb.SafeHeaders = make([]types.String, 0, len(resp.OutputInfluxdb.SafeHeaders))
		for _, v := range resp.OutputInfluxdb.SafeHeaders {
			r.OutputInfluxdb.SafeHeaders = append(r.OutputInfluxdb.SafeHeaders, types.StringValue(v))
		}
		r.OutputInfluxdb.Secret = types.StringPointerValue(resp.OutputInfluxdb.Secret)
		r.OutputInfluxdb.SecretParamName = types.StringPointerValue(resp.OutputInfluxdb.SecretParamName)
		r.OutputInfluxdb.Streamtags = make([]types.String, 0, len(resp.OutputInfluxdb.Streamtags))
		for _, v := range resp.OutputInfluxdb.Streamtags {
			r.OutputInfluxdb.Streamtags = append(r.OutputInfluxdb.Streamtags, types.StringValue(v))
		}
		r.OutputInfluxdb.SystemFields = make([]types.String, 0, len(resp.OutputInfluxdb.SystemFields))
		for _, v := range resp.OutputInfluxdb.SystemFields {
			r.OutputInfluxdb.SystemFields = append(r.OutputInfluxdb.SystemFields, types.StringValue(v))
		}
		r.OutputInfluxdb.TextSecret = types.StringPointerValue(resp.OutputInfluxdb.TextSecret)
		if resp.OutputInfluxdb.TimeoutRetrySettings == nil {
			r.OutputInfluxdb.TimeoutRetrySettings = nil
		} else {
			r.OutputInfluxdb.TimeoutRetrySettings = &tfTypes.OutputInfluxdbTimeoutRetrySettings{}
			r.OutputInfluxdb.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputInfluxdb.TimeoutRetrySettings.BackoffRate)
			r.OutputInfluxdb.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputInfluxdb.TimeoutRetrySettings.InitialBackoff)
			r.OutputInfluxdb.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputInfluxdb.TimeoutRetrySettings.MaxBackoff)
			r.OutputInfluxdb.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputInfluxdb.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputInfluxdb.TimeoutSec = types.Float64PointerValue(resp.OutputInfluxdb.TimeoutSec)
		if resp.OutputInfluxdb.TimestampPrecision != nil {
			r.OutputInfluxdb.TimestampPrecision = types.StringValue(string(*resp.OutputInfluxdb.TimestampPrecision))
		} else {
			r.OutputInfluxdb.TimestampPrecision = types.StringNull()
		}
		r.OutputInfluxdb.Token = types.StringPointerValue(resp.OutputInfluxdb.Token)
		r.OutputInfluxdb.TokenAttributeName = types.StringPointerValue(resp.OutputInfluxdb.TokenAttributeName)
		r.OutputInfluxdb.TokenTimeoutSecs = types.Float64PointerValue(resp.OutputInfluxdb.TokenTimeoutSecs)
		r.OutputInfluxdb.Type = types.StringValue(string(resp.OutputInfluxdb.Type))
		r.OutputInfluxdb.URL = types.StringValue(resp.OutputInfluxdb.URL)
		r.OutputInfluxdb.Username = types.StringPointerValue(resp.OutputInfluxdb.Username)
		r.OutputInfluxdb.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputInfluxdb.UseRoundRobinDNS)
		r.OutputInfluxdb.UseV2API = types.BoolPointerValue(resp.OutputInfluxdb.UseV2API)
		r.OutputInfluxdb.ValueFieldName = types.StringPointerValue(resp.OutputInfluxdb.ValueFieldName)
	}
	if resp.OutputKafka != nil {
		r.OutputKafka = &tfTypes.OutputKafka{}
		if resp.OutputKafka.Ack != nil {
			r.OutputKafka.Ack = types.Int64Value(int64(*resp.OutputKafka.Ack))
		} else {
			r.OutputKafka.Ack = types.Int64Null()
		}
		r.OutputKafka.AuthenticationTimeout = types.Float64PointerValue(resp.OutputKafka.AuthenticationTimeout)
		r.OutputKafka.BackoffRate = types.Float64PointerValue(resp.OutputKafka.BackoffRate)
		r.OutputKafka.Brokers = make([]types.String, 0, len(resp.OutputKafka.Brokers))
		for _, v := range resp.OutputKafka.Brokers {
			r.OutputKafka.Brokers = append(r.OutputKafka.Brokers, types.StringValue(v))
		}
		if resp.OutputKafka.Compression != nil {
			r.OutputKafka.Compression = types.StringValue(string(*resp.OutputKafka.Compression))
		} else {
			r.OutputKafka.Compression = types.StringNull()
		}
		r.OutputKafka.ConnectionTimeout = types.Float64PointerValue(resp.OutputKafka.ConnectionTimeout)
		r.OutputKafka.Description = types.StringPointerValue(resp.OutputKafka.Description)
		r.OutputKafka.Environment = types.StringPointerValue(resp.OutputKafka.Environment)
		r.OutputKafka.FlushEventCount = types.Float64PointerValue(resp.OutputKafka.FlushEventCount)
		r.OutputKafka.FlushPeriodSec = types.Float64PointerValue(resp.OutputKafka.FlushPeriodSec)
		if resp.OutputKafka.Format != nil {
			r.OutputKafka.Format = types.StringValue(string(*resp.OutputKafka.Format))
		} else {
			r.OutputKafka.Format = types.StringNull()
		}
		r.OutputKafka.ID = types.StringPointerValue(resp.OutputKafka.ID)
		r.OutputKafka.InitialBackoff = types.Float64PointerValue(resp.OutputKafka.InitialBackoff)
		if resp.OutputKafka.KafkaSchemaRegistry == nil {
			r.OutputKafka.KafkaSchemaRegistry = nil
		} else {
			r.OutputKafka.KafkaSchemaRegistry = &tfTypes.OutputKafkaKafkaSchemaRegistryAuthentication{}
			if resp.OutputKafka.KafkaSchemaRegistry.Auth == nil {
				r.OutputKafka.KafkaSchemaRegistry.Auth = nil
			} else {
				r.OutputKafka.KafkaSchemaRegistry.Auth = &tfTypes.OutputKafkaAuth{}
				r.OutputKafka.KafkaSchemaRegistry.Auth.CredentialsSecret = types.StringPointerValue(resp.OutputKafka.KafkaSchemaRegistry.Auth.CredentialsSecret)
				r.OutputKafka.KafkaSchemaRegistry.Auth.Disabled = types.BoolPointerValue(resp.OutputKafka.KafkaSchemaRegistry.Auth.Disabled)
			}
			r.OutputKafka.KafkaSchemaRegistry.ConnectionTimeout = types.Float64PointerValue(resp.OutputKafka.KafkaSchemaRegistry.ConnectionTimeout)
			r.OutputKafka.KafkaSchemaRegistry.DefaultKeySchemaID = types.Float64PointerValue(resp.OutputKafka.KafkaSchemaRegistry.DefaultKeySchemaID)
			r.OutputKafka.KafkaSchemaRegistry.DefaultValueSchemaID = types.Float64PointerValue(resp.OutputKafka.KafkaSchemaRegistry.DefaultValueSchemaID)
			r.OutputKafka.KafkaSchemaRegistry.Disabled = types.BoolPointerValue(resp.OutputKafka.KafkaSchemaRegistry.Disabled)
			r.OutputKafka.KafkaSchemaRegistry.MaxRetries = types.Float64PointerValue(resp.OutputKafka.KafkaSchemaRegistry.MaxRetries)
			r.OutputKafka.KafkaSchemaRegistry.RequestTimeout = types.Float64PointerValue(resp.OutputKafka.KafkaSchemaRegistry.RequestTimeout)
			r.OutputKafka.KafkaSchemaRegistry.SchemaRegistryURL = types.StringPointerValue(resp.OutputKafka.KafkaSchemaRegistry.SchemaRegistryURL)
			if resp.OutputKafka.KafkaSchemaRegistry.TLS == nil {
				r.OutputKafka.KafkaSchemaRegistry.TLS = nil
			} else {
				r.OutputKafka.KafkaSchemaRegistry.TLS = &tfTypes.OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide{}
				r.OutputKafka.KafkaSchemaRegistry.TLS.CaPath = types.StringPointerValue(resp.OutputKafka.KafkaSchemaRegistry.TLS.CaPath)
				r.OutputKafka.KafkaSchemaRegistry.TLS.CertificateName = types.StringPointerValue(resp.OutputKafka.KafkaSchemaRegistry.TLS.CertificateName)
				r.OutputKafka.KafkaSchemaRegistry.TLS.CertPath = types.StringPointerValue(resp.OutputKafka.KafkaSchemaRegistry.TLS.CertPath)
				r.OutputKafka.KafkaSchemaRegistry.TLS.Disabled = types.BoolPointerValue(resp.OutputKafka.KafkaSchemaRegistry.TLS.Disabled)
				if resp.OutputKafka.KafkaSchemaRegistry.TLS.MaxVersion != nil {
					r.OutputKafka.KafkaSchemaRegistry.TLS.MaxVersion = types.StringValue(string(*resp.OutputKafka.KafkaSchemaRegistry.TLS.MaxVersion))
				} else {
					r.OutputKafka.KafkaSchemaRegistry.TLS.MaxVersion = types.StringNull()
				}
				if resp.OutputKafka.KafkaSchemaRegistry.TLS.MinVersion != nil {
					r.OutputKafka.KafkaSchemaRegistry.TLS.MinVersion = types.StringValue(string(*resp.OutputKafka.KafkaSchemaRegistry.TLS.MinVersion))
				} else {
					r.OutputKafka.KafkaSchemaRegistry.TLS.MinVersion = types.StringNull()
				}
				r.OutputKafka.KafkaSchemaRegistry.TLS.Passphrase = types.StringPointerValue(resp.OutputKafka.KafkaSchemaRegistry.TLS.Passphrase)
				r.OutputKafka.KafkaSchemaRegistry.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputKafka.KafkaSchemaRegistry.TLS.PrivKeyPath)
				r.OutputKafka.KafkaSchemaRegistry.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputKafka.KafkaSchemaRegistry.TLS.RejectUnauthorized)
				r.OutputKafka.KafkaSchemaRegistry.TLS.Servername = types.StringPointerValue(resp.OutputKafka.KafkaSchemaRegistry.TLS.Servername)
			}
		}
		r.OutputKafka.MaxBackOff = types.Float64PointerValue(resp.OutputKafka.MaxBackOff)
		r.OutputKafka.MaxRecordSizeKB = types.Float64PointerValue(resp.OutputKafka.MaxRecordSizeKB)
		r.OutputKafka.MaxRetries = types.Float64PointerValue(resp.OutputKafka.MaxRetries)
		if resp.OutputKafka.OnBackpressure != nil {
			r.OutputKafka.OnBackpressure = types.StringValue(string(*resp.OutputKafka.OnBackpressure))
		} else {
			r.OutputKafka.OnBackpressure = types.StringNull()
		}
		r.OutputKafka.Pipeline = types.StringPointerValue(resp.OutputKafka.Pipeline)
		if resp.OutputKafka.PqCompress != nil {
			r.OutputKafka.PqCompress = types.StringValue(string(*resp.OutputKafka.PqCompress))
		} else {
			r.OutputKafka.PqCompress = types.StringNull()
		}
		if resp.OutputKafka.PqControls == nil {
			r.OutputKafka.PqControls = nil
		} else {
			r.OutputKafka.PqControls = &tfTypes.OutputKafkaPqControls{}
		}
		r.OutputKafka.PqMaxFileSize = types.StringPointerValue(resp.OutputKafka.PqMaxFileSize)
		r.OutputKafka.PqMaxSize = types.StringPointerValue(resp.OutputKafka.PqMaxSize)
		if resp.OutputKafka.PqMode != nil {
			r.OutputKafka.PqMode = types.StringValue(string(*resp.OutputKafka.PqMode))
		} else {
			r.OutputKafka.PqMode = types.StringNull()
		}
		if resp.OutputKafka.PqOnBackpressure != nil {
			r.OutputKafka.PqOnBackpressure = types.StringValue(string(*resp.OutputKafka.PqOnBackpressure))
		} else {
			r.OutputKafka.PqOnBackpressure = types.StringNull()
		}
		r.OutputKafka.PqPath = types.StringPointerValue(resp.OutputKafka.PqPath)
		r.OutputKafka.ProtobufLibraryID = types.StringPointerValue(resp.OutputKafka.ProtobufLibraryID)
		r.OutputKafka.ReauthenticationThreshold = types.Float64PointerValue(resp.OutputKafka.ReauthenticationThreshold)
		r.OutputKafka.RequestTimeout = types.Float64PointerValue(resp.OutputKafka.RequestTimeout)
		if resp.OutputKafka.Sasl == nil {
			r.OutputKafka.Sasl = nil
		} else {
			r.OutputKafka.Sasl = &tfTypes.OutputKafkaAuthentication{}
			r.OutputKafka.Sasl.Disabled = types.BoolPointerValue(resp.OutputKafka.Sasl.Disabled)
			if resp.OutputKafka.Sasl.Mechanism != nil {
				r.OutputKafka.Sasl.Mechanism = types.StringValue(string(*resp.OutputKafka.Sasl.Mechanism))
			} else {
				r.OutputKafka.Sasl.Mechanism = types.StringNull()
			}
		}
		r.OutputKafka.Streamtags = make([]types.String, 0, len(resp.OutputKafka.Streamtags))
		for _, v := range resp.OutputKafka.Streamtags {
			r.OutputKafka.Streamtags = append(r.OutputKafka.Streamtags, types.StringValue(v))
		}
		r.OutputKafka.SystemFields = make([]types.String, 0, len(resp.OutputKafka.SystemFields))
		for _, v := range resp.OutputKafka.SystemFields {
			r.OutputKafka.SystemFields = append(r.OutputKafka.SystemFields, types.StringValue(v))
		}
		if resp.OutputKafka.TLS == nil {
			r.OutputKafka.TLS = nil
		} else {
			r.OutputKafka.TLS = &tfTypes.OutputKafkaTLSSettingsClientSide{}
			r.OutputKafka.TLS.CaPath = types.StringPointerValue(resp.OutputKafka.TLS.CaPath)
			r.OutputKafka.TLS.CertificateName = types.StringPointerValue(resp.OutputKafka.TLS.CertificateName)
			r.OutputKafka.TLS.CertPath = types.StringPointerValue(resp.OutputKafka.TLS.CertPath)
			r.OutputKafka.TLS.Disabled = types.BoolPointerValue(resp.OutputKafka.TLS.Disabled)
			if resp.OutputKafka.TLS.MaxVersion != nil {
				r.OutputKafka.TLS.MaxVersion = types.StringValue(string(*resp.OutputKafka.TLS.MaxVersion))
			} else {
				r.OutputKafka.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputKafka.TLS.MinVersion != nil {
				r.OutputKafka.TLS.MinVersion = types.StringValue(string(*resp.OutputKafka.TLS.MinVersion))
			} else {
				r.OutputKafka.TLS.MinVersion = types.StringNull()
			}
			r.OutputKafka.TLS.Passphrase = types.StringPointerValue(resp.OutputKafka.TLS.Passphrase)
			r.OutputKafka.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputKafka.TLS.PrivKeyPath)
			r.OutputKafka.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputKafka.TLS.RejectUnauthorized)
			r.OutputKafka.TLS.Servername = types.StringPointerValue(resp.OutputKafka.TLS.Servername)
		}
		r.OutputKafka.Topic = types.StringValue(resp.OutputKafka.Topic)
		if resp.OutputKafka.Type != nil {
			r.OutputKafka.Type = types.StringValue(string(*resp.OutputKafka.Type))
		} else {
			r.OutputKafka.Type = types.StringNull()
		}
	}
	if resp.OutputKinesis != nil {
		r.OutputKinesis = &tfTypes.OutputKinesis{}
		r.OutputKinesis.AsNdjson = types.BoolPointerValue(resp.OutputKinesis.AsNdjson)
		r.OutputKinesis.AssumeRoleArn = types.StringPointerValue(resp.OutputKinesis.AssumeRoleArn)
		r.OutputKinesis.AssumeRoleExternalID = types.StringPointerValue(resp.OutputKinesis.AssumeRoleExternalID)
		r.OutputKinesis.AwsAPIKey = types.StringPointerValue(resp.OutputKinesis.AwsAPIKey)
		if resp.OutputKinesis.AwsAuthenticationMethod != nil {
			r.OutputKinesis.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputKinesis.AwsAuthenticationMethod))
		} else {
			r.OutputKinesis.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputKinesis.AwsSecret = types.StringPointerValue(resp.OutputKinesis.AwsSecret)
		r.OutputKinesis.AwsSecretKey = types.StringPointerValue(resp.OutputKinesis.AwsSecretKey)
		if resp.OutputKinesis.Compression != nil {
			r.OutputKinesis.Compression = types.StringValue(string(*resp.OutputKinesis.Compression))
		} else {
			r.OutputKinesis.Compression = types.StringNull()
		}
		r.OutputKinesis.Concurrency = types.Float64PointerValue(resp.OutputKinesis.Concurrency)
		r.OutputKinesis.Description = types.StringPointerValue(resp.OutputKinesis.Description)
		r.OutputKinesis.DurationSeconds = types.Float64PointerValue(resp.OutputKinesis.DurationSeconds)
		r.OutputKinesis.EnableAssumeRole = types.BoolPointerValue(resp.OutputKinesis.EnableAssumeRole)
		r.OutputKinesis.Endpoint = types.StringPointerValue(resp.OutputKinesis.Endpoint)
		r.OutputKinesis.Environment = types.StringPointerValue(resp.OutputKinesis.Environment)
		r.OutputKinesis.FlushPeriodSec = types.Float64PointerValue(resp.OutputKinesis.FlushPeriodSec)
		r.OutputKinesis.ID = types.StringPointerValue(resp.OutputKinesis.ID)
		r.OutputKinesis.MaxRecordSizeKB = types.Float64PointerValue(resp.OutputKinesis.MaxRecordSizeKB)
		if resp.OutputKinesis.OnBackpressure != nil {
			r.OutputKinesis.OnBackpressure = types.StringValue(string(*resp.OutputKinesis.OnBackpressure))
		} else {
			r.OutputKinesis.OnBackpressure = types.StringNull()
		}
		r.OutputKinesis.Pipeline = types.StringPointerValue(resp.OutputKinesis.Pipeline)
		if resp.OutputKinesis.PqCompress != nil {
			r.OutputKinesis.PqCompress = types.StringValue(string(*resp.OutputKinesis.PqCompress))
		} else {
			r.OutputKinesis.PqCompress = types.StringNull()
		}
		if resp.OutputKinesis.PqControls == nil {
			r.OutputKinesis.PqControls = nil
		} else {
			r.OutputKinesis.PqControls = &tfTypes.OutputKinesisPqControls{}
		}
		r.OutputKinesis.PqMaxFileSize = types.StringPointerValue(resp.OutputKinesis.PqMaxFileSize)
		r.OutputKinesis.PqMaxSize = types.StringPointerValue(resp.OutputKinesis.PqMaxSize)
		if resp.OutputKinesis.PqMode != nil {
			r.OutputKinesis.PqMode = types.StringValue(string(*resp.OutputKinesis.PqMode))
		} else {
			r.OutputKinesis.PqMode = types.StringNull()
		}
		if resp.OutputKinesis.PqOnBackpressure != nil {
			r.OutputKinesis.PqOnBackpressure = types.StringValue(string(*resp.OutputKinesis.PqOnBackpressure))
		} else {
			r.OutputKinesis.PqOnBackpressure = types.StringNull()
		}
		r.OutputKinesis.PqPath = types.StringPointerValue(resp.OutputKinesis.PqPath)
		r.OutputKinesis.Region = types.StringValue(resp.OutputKinesis.Region)
		r.OutputKinesis.RejectUnauthorized = types.BoolPointerValue(resp.OutputKinesis.RejectUnauthorized)
		r.OutputKinesis.ReuseConnections = types.BoolPointerValue(resp.OutputKinesis.ReuseConnections)
		if resp.OutputKinesis.SignatureVersion != nil {
			r.OutputKinesis.SignatureVersion = types.StringValue(string(*resp.OutputKinesis.SignatureVersion))
		} else {
			r.OutputKinesis.SignatureVersion = types.StringNull()
		}
		r.OutputKinesis.StreamName = types.StringValue(resp.OutputKinesis.StreamName)
		r.OutputKinesis.Streamtags = make([]types.String, 0, len(resp.OutputKinesis.Streamtags))
		for _, v := range resp.OutputKinesis.Streamtags {
			r.OutputKinesis.Streamtags = append(r.OutputKinesis.Streamtags, types.StringValue(v))
		}
		r.OutputKinesis.SystemFields = make([]types.String, 0, len(resp.OutputKinesis.SystemFields))
		for _, v := range resp.OutputKinesis.SystemFields {
			r.OutputKinesis.SystemFields = append(r.OutputKinesis.SystemFields, types.StringValue(v))
		}
		if resp.OutputKinesis.Type != nil {
			r.OutputKinesis.Type = types.StringValue(string(*resp.OutputKinesis.Type))
		} else {
			r.OutputKinesis.Type = types.StringNull()
		}
		r.OutputKinesis.UseListShards = types.BoolPointerValue(resp.OutputKinesis.UseListShards)
	}
	if resp.OutputLoki != nil {
		r.OutputLoki = &tfTypes.OutputLoki{}
		if resp.OutputLoki.AuthType != nil {
			r.OutputLoki.AuthType = types.StringValue(string(*resp.OutputLoki.AuthType))
		} else {
			r.OutputLoki.AuthType = types.StringNull()
		}
		r.OutputLoki.Compress = types.BoolPointerValue(resp.OutputLoki.Compress)
		r.OutputLoki.Concurrency = types.Float64PointerValue(resp.OutputLoki.Concurrency)
		r.OutputLoki.CredentialsSecret = types.StringPointerValue(resp.OutputLoki.CredentialsSecret)
		r.OutputLoki.Description = types.StringPointerValue(resp.OutputLoki.Description)
		r.OutputLoki.Environment = types.StringPointerValue(resp.OutputLoki.Environment)
		r.OutputLoki.ExtraHTTPHeaders = []tfTypes.OutputLokiExtraHTTPHeader{}
		if len(r.OutputLoki.ExtraHTTPHeaders) > len(resp.OutputLoki.ExtraHTTPHeaders) {
			r.OutputLoki.ExtraHTTPHeaders = r.OutputLoki.ExtraHTTPHeaders[:len(resp.OutputLoki.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount16, extraHTTPHeadersItem16 := range resp.OutputLoki.ExtraHTTPHeaders {
			var extraHTTPHeaders16 tfTypes.OutputLokiExtraHTTPHeader
			extraHTTPHeaders16.Name = types.StringPointerValue(extraHTTPHeadersItem16.Name)
			extraHTTPHeaders16.Value = types.StringValue(extraHTTPHeadersItem16.Value)
			if extraHTTPHeadersCount16+1 > len(r.OutputLoki.ExtraHTTPHeaders) {
				r.OutputLoki.ExtraHTTPHeaders = append(r.OutputLoki.ExtraHTTPHeaders, extraHTTPHeaders16)
			} else {
				r.OutputLoki.ExtraHTTPHeaders[extraHTTPHeadersCount16].Name = extraHTTPHeaders16.Name
				r.OutputLoki.ExtraHTTPHeaders[extraHTTPHeadersCount16].Value = extraHTTPHeaders16.Value
			}
		}
		if resp.OutputLoki.FailedRequestLoggingMode != nil {
			r.OutputLoki.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputLoki.FailedRequestLoggingMode))
		} else {
			r.OutputLoki.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputLoki.FlushPeriodSec = types.Float64PointerValue(resp.OutputLoki.FlushPeriodSec)
		r.OutputLoki.ID = types.StringPointerValue(resp.OutputLoki.ID)
		r.OutputLoki.Labels = []tfTypes.OutputLokiLabel{}
		if len(r.OutputLoki.Labels) > len(resp.OutputLoki.Labels) {
			r.OutputLoki.Labels = r.OutputLoki.Labels[:len(resp.OutputLoki.Labels)]
		}
		for labelsCount2, labelsItem2 := range resp.OutputLoki.Labels {
			var labels2 tfTypes.OutputLokiLabel
			labels2.Name = types.StringPointerValue(labelsItem2.Name)
			labels2.Value = types.StringValue(labelsItem2.Value)
			if labelsCount2+1 > len(r.OutputLoki.Labels) {
				r.OutputLoki.Labels = append(r.OutputLoki.Labels, labels2)
			} else {
				r.OutputLoki.Labels[labelsCount2].Name = labels2.Name
				r.OutputLoki.Labels[labelsCount2].Value = labels2.Value
			}
		}
		r.OutputLoki.MaxPayloadEvents = types.Float64PointerValue(resp.OutputLoki.MaxPayloadEvents)
		r.OutputLoki.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputLoki.MaxPayloadSizeKB)
		r.OutputLoki.Message = types.StringPointerValue(resp.OutputLoki.Message)
		if resp.OutputLoki.MessageFormat != nil {
			r.OutputLoki.MessageFormat = types.StringValue(string(*resp.OutputLoki.MessageFormat))
		} else {
			r.OutputLoki.MessageFormat = types.StringNull()
		}
		if resp.OutputLoki.OnBackpressure != nil {
			r.OutputLoki.OnBackpressure = types.StringValue(string(*resp.OutputLoki.OnBackpressure))
		} else {
			r.OutputLoki.OnBackpressure = types.StringNull()
		}
		r.OutputLoki.Password = types.StringPointerValue(resp.OutputLoki.Password)
		r.OutputLoki.Pipeline = types.StringPointerValue(resp.OutputLoki.Pipeline)
		if resp.OutputLoki.PqCompress != nil {
			r.OutputLoki.PqCompress = types.StringValue(string(*resp.OutputLoki.PqCompress))
		} else {
			r.OutputLoki.PqCompress = types.StringNull()
		}
		if resp.OutputLoki.PqControls == nil {
			r.OutputLoki.PqControls = nil
		} else {
			r.OutputLoki.PqControls = &tfTypes.OutputLokiPqControls{}
		}
		r.OutputLoki.PqMaxFileSize = types.StringPointerValue(resp.OutputLoki.PqMaxFileSize)
		r.OutputLoki.PqMaxSize = types.StringPointerValue(resp.OutputLoki.PqMaxSize)
		if resp.OutputLoki.PqMode != nil {
			r.OutputLoki.PqMode = types.StringValue(string(*resp.OutputLoki.PqMode))
		} else {
			r.OutputLoki.PqMode = types.StringNull()
		}
		if resp.OutputLoki.PqOnBackpressure != nil {
			r.OutputLoki.PqOnBackpressure = types.StringValue(string(*resp.OutputLoki.PqOnBackpressure))
		} else {
			r.OutputLoki.PqOnBackpressure = types.StringNull()
		}
		r.OutputLoki.PqPath = types.StringPointerValue(resp.OutputLoki.PqPath)
		r.OutputLoki.RejectUnauthorized = types.BoolPointerValue(resp.OutputLoki.RejectUnauthorized)
		r.OutputLoki.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputLoki.ResponseHonorRetryAfterHeader)
		r.OutputLoki.ResponseRetrySettings = []tfTypes.OutputLokiResponseRetrySetting{}
		if len(r.OutputLoki.ResponseRetrySettings) > len(resp.OutputLoki.ResponseRetrySettings) {
			r.OutputLoki.ResponseRetrySettings = r.OutputLoki.ResponseRetrySettings[:len(resp.OutputLoki.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount17, responseRetrySettingsItem17 := range resp.OutputLoki.ResponseRetrySettings {
			var responseRetrySettings17 tfTypes.OutputLokiResponseRetrySetting
			responseRetrySettings17.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem17.BackoffRate)
			responseRetrySettings17.HTTPStatus = types.Float64Value(responseRetrySettingsItem17.HTTPStatus)
			responseRetrySettings17.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem17.InitialBackoff)
			responseRetrySettings17.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem17.MaxBackoff)
			if responseRetrySettingsCount17+1 > len(r.OutputLoki.ResponseRetrySettings) {
				r.OutputLoki.ResponseRetrySettings = append(r.OutputLoki.ResponseRetrySettings, responseRetrySettings17)
			} else {
				r.OutputLoki.ResponseRetrySettings[responseRetrySettingsCount17].BackoffRate = responseRetrySettings17.BackoffRate
				r.OutputLoki.ResponseRetrySettings[responseRetrySettingsCount17].HTTPStatus = responseRetrySettings17.HTTPStatus
				r.OutputLoki.ResponseRetrySettings[responseRetrySettingsCount17].InitialBackoff = responseRetrySettings17.InitialBackoff
				r.OutputLoki.ResponseRetrySettings[responseRetrySettingsCount17].MaxBackoff = responseRetrySettings17.MaxBackoff
			}
		}
		r.OutputLoki.SafeHeaders = make([]types.String, 0, len(resp.OutputLoki.SafeHeaders))
		for _, v := range resp.OutputLoki.SafeHeaders {
			r.OutputLoki.SafeHeaders = append(r.OutputLoki.SafeHeaders, types.StringValue(v))
		}
		r.OutputLoki.Streamtags = make([]types.String, 0, len(resp.OutputLoki.Streamtags))
		for _, v := range resp.OutputLoki.Streamtags {
			r.OutputLoki.Streamtags = append(r.OutputLoki.Streamtags, types.StringValue(v))
		}
		r.OutputLoki.SystemFields = make([]types.String, 0, len(resp.OutputLoki.SystemFields))
		for _, v := range resp.OutputLoki.SystemFields {
			r.OutputLoki.SystemFields = append(r.OutputLoki.SystemFields, types.StringValue(v))
		}
		r.OutputLoki.TextSecret = types.StringPointerValue(resp.OutputLoki.TextSecret)
		if resp.OutputLoki.TimeoutRetrySettings == nil {
			r.OutputLoki.TimeoutRetrySettings = nil
		} else {
			r.OutputLoki.TimeoutRetrySettings = &tfTypes.OutputLokiTimeoutRetrySettings{}
			r.OutputLoki.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputLoki.TimeoutRetrySettings.BackoffRate)
			r.OutputLoki.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputLoki.TimeoutRetrySettings.InitialBackoff)
			r.OutputLoki.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputLoki.TimeoutRetrySettings.MaxBackoff)
			r.OutputLoki.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputLoki.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputLoki.TimeoutSec = types.Float64PointerValue(resp.OutputLoki.TimeoutSec)
		r.OutputLoki.Token = types.StringPointerValue(resp.OutputLoki.Token)
		r.OutputLoki.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputLoki.TotalMemoryLimitKB)
		r.OutputLoki.Type = types.StringValue(string(resp.OutputLoki.Type))
		r.OutputLoki.URL = types.StringValue(resp.OutputLoki.URL)
		r.OutputLoki.Username = types.StringPointerValue(resp.OutputLoki.Username)
		r.OutputLoki.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputLoki.UseRoundRobinDNS)
	}
	if resp.OutputMinio != nil {
		r.OutputMinio = &tfTypes.OutputMinio{}
		r.OutputMinio.AddIDToStagePath = types.BoolPointerValue(resp.OutputMinio.AddIDToStagePath)
		r.OutputMinio.AutomaticSchema = types.BoolPointerValue(resp.OutputMinio.AutomaticSchema)
		r.OutputMinio.AwsAPIKey = types.StringPointerValue(resp.OutputMinio.AwsAPIKey)
		if resp.OutputMinio.AwsAuthenticationMethod != nil {
			r.OutputMinio.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputMinio.AwsAuthenticationMethod))
		} else {
			r.OutputMinio.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputMinio.AwsSecret = types.StringPointerValue(resp.OutputMinio.AwsSecret)
		r.OutputMinio.AwsSecretKey = types.StringPointerValue(resp.OutputMinio.AwsSecretKey)
		r.OutputMinio.BaseFileName = types.StringPointerValue(resp.OutputMinio.BaseFileName)
		r.OutputMinio.Bucket = types.StringValue(resp.OutputMinio.Bucket)
		if resp.OutputMinio.Compress != nil {
			r.OutputMinio.Compress = types.StringValue(string(*resp.OutputMinio.Compress))
		} else {
			r.OutputMinio.Compress = types.StringNull()
		}
		if resp.OutputMinio.CompressionLevel != nil {
			r.OutputMinio.CompressionLevel = types.StringValue(string(*resp.OutputMinio.CompressionLevel))
		} else {
			r.OutputMinio.CompressionLevel = types.StringNull()
		}
		r.OutputMinio.DeadletterEnabled = types.BoolPointerValue(resp.OutputMinio.DeadletterEnabled)
		r.OutputMinio.DeadletterPath = types.StringPointerValue(resp.OutputMinio.DeadletterPath)
		r.OutputMinio.Description = types.StringPointerValue(resp.OutputMinio.Description)
		r.OutputMinio.DestPath = types.StringPointerValue(resp.OutputMinio.DestPath)
		r.OutputMinio.EmptyDirCleanupSec = types.Float64PointerValue(resp.OutputMinio.EmptyDirCleanupSec)
		r.OutputMinio.EnablePageChecksum = types.BoolPointerValue(resp.OutputMinio.EnablePageChecksum)
		r.OutputMinio.EnableStatistics = types.BoolPointerValue(resp.OutputMinio.EnableStatistics)
		r.OutputMinio.EnableWritePageIndex = types.BoolPointerValue(resp.OutputMinio.EnableWritePageIndex)
		r.OutputMinio.Endpoint = types.StringValue(resp.OutputMinio.Endpoint)
		r.OutputMinio.Environment = types.StringPointerValue(resp.OutputMinio.Environment)
		r.OutputMinio.FileNameSuffix = types.StringPointerValue(resp.OutputMinio.FileNameSuffix)
		if resp.OutputMinio.Format != nil {
			r.OutputMinio.Format = types.StringValue(string(*resp.OutputMinio.Format))
		} else {
			r.OutputMinio.Format = types.StringNull()
		}
		r.OutputMinio.HeaderLine = types.StringPointerValue(resp.OutputMinio.HeaderLine)
		r.OutputMinio.ID = types.StringPointerValue(resp.OutputMinio.ID)
		r.OutputMinio.KeyValueMetadata = []tfTypes.OutputMinioKeyValueMetadatum{}
		if len(r.OutputMinio.KeyValueMetadata) > len(resp.OutputMinio.KeyValueMetadata) {
			r.OutputMinio.KeyValueMetadata = r.OutputMinio.KeyValueMetadata[:len(resp.OutputMinio.KeyValueMetadata)]
		}
		for keyValueMetadataCount4, keyValueMetadataItem4 := range resp.OutputMinio.KeyValueMetadata {
			var keyValueMetadata4 tfTypes.OutputMinioKeyValueMetadatum
			keyValueMetadata4.Key = types.StringPointerValue(keyValueMetadataItem4.Key)
			keyValueMetadata4.Value = types.StringValue(keyValueMetadataItem4.Value)
			if keyValueMetadataCount4+1 > len(r.OutputMinio.KeyValueMetadata) {
				r.OutputMinio.KeyValueMetadata = append(r.OutputMinio.KeyValueMetadata, keyValueMetadata4)
			} else {
				r.OutputMinio.KeyValueMetadata[keyValueMetadataCount4].Key = keyValueMetadata4.Key
				r.OutputMinio.KeyValueMetadata[keyValueMetadataCount4].Value = keyValueMetadata4.Value
			}
		}
		r.OutputMinio.MaxConcurrentFileParts = types.Float64PointerValue(resp.OutputMinio.MaxConcurrentFileParts)
		r.OutputMinio.MaxFileIdleTimeSec = types.Float64PointerValue(resp.OutputMinio.MaxFileIdleTimeSec)
		r.OutputMinio.MaxFileOpenTimeSec = types.Float64PointerValue(resp.OutputMinio.MaxFileOpenTimeSec)
		r.OutputMinio.MaxFileSizeMB = types.Float64PointerValue(resp.OutputMinio.MaxFileSizeMB)
		r.OutputMinio.MaxOpenFiles = types.Float64PointerValue(resp.OutputMinio.MaxOpenFiles)
		r.OutputMinio.MaxRetryNum = types.Float64PointerValue(resp.OutputMinio.MaxRetryNum)
		if resp.OutputMinio.ObjectACL != nil {
			r.OutputMinio.ObjectACL = types.StringValue(string(*resp.OutputMinio.ObjectACL))
		} else {
			r.OutputMinio.ObjectACL = types.StringNull()
		}
		if resp.OutputMinio.OnBackpressure != nil {
			r.OutputMinio.OnBackpressure = types.StringValue(string(*resp.OutputMinio.OnBackpressure))
		} else {
			r.OutputMinio.OnBackpressure = types.StringNull()
		}
		if resp.OutputMinio.OnDiskFullBackpressure != nil {
			r.OutputMinio.OnDiskFullBackpressure = types.StringValue(string(*resp.OutputMinio.OnDiskFullBackpressure))
		} else {
			r.OutputMinio.OnDiskFullBackpressure = types.StringNull()
		}
		if resp.OutputMinio.ParquetDataPageVersion != nil {
			r.OutputMinio.ParquetDataPageVersion = types.StringValue(string(*resp.OutputMinio.ParquetDataPageVersion))
		} else {
			r.OutputMinio.ParquetDataPageVersion = types.StringNull()
		}
		r.OutputMinio.ParquetPageSize = types.StringPointerValue(resp.OutputMinio.ParquetPageSize)
		r.OutputMinio.ParquetRowGroupLength = types.Float64PointerValue(resp.OutputMinio.ParquetRowGroupLength)
		if resp.OutputMinio.ParquetVersion != nil {
			r.OutputMinio.ParquetVersion = types.StringValue(string(*resp.OutputMinio.ParquetVersion))
		} else {
			r.OutputMinio.ParquetVersion = types.StringNull()
		}
		r.OutputMinio.PartitionExpr = types.StringPointerValue(resp.OutputMinio.PartitionExpr)
		r.OutputMinio.Pipeline = types.StringPointerValue(resp.OutputMinio.Pipeline)
		r.OutputMinio.Region = types.StringPointerValue(resp.OutputMinio.Region)
		r.OutputMinio.RejectUnauthorized = types.BoolPointerValue(resp.OutputMinio.RejectUnauthorized)
		r.OutputMinio.RemoveEmptyDirs = types.BoolPointerValue(resp.OutputMinio.RemoveEmptyDirs)
		r.OutputMinio.ReuseConnections = types.BoolPointerValue(resp.OutputMinio.ReuseConnections)
		if resp.OutputMinio.ServerSideEncryption != nil {
			r.OutputMinio.ServerSideEncryption = types.StringValue(string(*resp.OutputMinio.ServerSideEncryption))
		} else {
			r.OutputMinio.ServerSideEncryption = types.StringNull()
		}
		r.OutputMinio.ShouldLogInvalidRows = types.BoolPointerValue(resp.OutputMinio.ShouldLogInvalidRows)
		if resp.OutputMinio.SignatureVersion != nil {
			r.OutputMinio.SignatureVersion = types.StringValue(string(*resp.OutputMinio.SignatureVersion))
		} else {
			r.OutputMinio.SignatureVersion = types.StringNull()
		}
		r.OutputMinio.StagePath = types.StringPointerValue(resp.OutputMinio.StagePath)
		if resp.OutputMinio.StorageClass != nil {
			r.OutputMinio.StorageClass = types.StringValue(string(*resp.OutputMinio.StorageClass))
		} else {
			r.OutputMinio.StorageClass = types.StringNull()
		}
		r.OutputMinio.Streamtags = make([]types.String, 0, len(resp.OutputMinio.Streamtags))
		for _, v := range resp.OutputMinio.Streamtags {
			r.OutputMinio.Streamtags = append(r.OutputMinio.Streamtags, types.StringValue(v))
		}
		r.OutputMinio.SystemFields = make([]types.String, 0, len(resp.OutputMinio.SystemFields))
		for _, v := range resp.OutputMinio.SystemFields {
			r.OutputMinio.SystemFields = append(r.OutputMinio.SystemFields, types.StringValue(v))
		}
		if resp.OutputMinio.Type != nil {
			r.OutputMinio.Type = types.StringValue(string(*resp.OutputMinio.Type))
		} else {
			r.OutputMinio.Type = types.StringNull()
		}
		r.OutputMinio.VerifyPermissions = types.BoolPointerValue(resp.OutputMinio.VerifyPermissions)
		r.OutputMinio.WriteHighWaterMark = types.Float64PointerValue(resp.OutputMinio.WriteHighWaterMark)
	}
	if resp.OutputMsk != nil {
		r.OutputMsk = &tfTypes.OutputMsk{}
		if resp.OutputMsk.Ack != nil {
			r.OutputMsk.Ack = types.Int64Value(int64(*resp.OutputMsk.Ack))
		} else {
			r.OutputMsk.Ack = types.Int64Null()
		}
		r.OutputMsk.AssumeRoleArn = types.StringPointerValue(resp.OutputMsk.AssumeRoleArn)
		r.OutputMsk.AssumeRoleExternalID = types.StringPointerValue(resp.OutputMsk.AssumeRoleExternalID)
		r.OutputMsk.AuthenticationTimeout = types.Float64PointerValue(resp.OutputMsk.AuthenticationTimeout)
		r.OutputMsk.AwsAPIKey = types.StringPointerValue(resp.OutputMsk.AwsAPIKey)
		if resp.OutputMsk.AwsAuthenticationMethod != nil {
			r.OutputMsk.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputMsk.AwsAuthenticationMethod))
		} else {
			r.OutputMsk.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputMsk.AwsSecret = types.StringPointerValue(resp.OutputMsk.AwsSecret)
		r.OutputMsk.AwsSecretKey = types.StringPointerValue(resp.OutputMsk.AwsSecretKey)
		r.OutputMsk.BackoffRate = types.Float64PointerValue(resp.OutputMsk.BackoffRate)
		r.OutputMsk.Brokers = make([]types.String, 0, len(resp.OutputMsk.Brokers))
		for _, v := range resp.OutputMsk.Brokers {
			r.OutputMsk.Brokers = append(r.OutputMsk.Brokers, types.StringValue(v))
		}
		if resp.OutputMsk.Compression != nil {
			r.OutputMsk.Compression = types.StringValue(string(*resp.OutputMsk.Compression))
		} else {
			r.OutputMsk.Compression = types.StringNull()
		}
		r.OutputMsk.ConnectionTimeout = types.Float64PointerValue(resp.OutputMsk.ConnectionTimeout)
		r.OutputMsk.Description = types.StringPointerValue(resp.OutputMsk.Description)
		r.OutputMsk.DurationSeconds = types.Float64PointerValue(resp.OutputMsk.DurationSeconds)
		r.OutputMsk.EnableAssumeRole = types.BoolPointerValue(resp.OutputMsk.EnableAssumeRole)
		r.OutputMsk.Endpoint = types.StringPointerValue(resp.OutputMsk.Endpoint)
		r.OutputMsk.Environment = types.StringPointerValue(resp.OutputMsk.Environment)
		r.OutputMsk.FlushEventCount = types.Float64PointerValue(resp.OutputMsk.FlushEventCount)
		r.OutputMsk.FlushPeriodSec = types.Float64PointerValue(resp.OutputMsk.FlushPeriodSec)
		if resp.OutputMsk.Format != nil {
			r.OutputMsk.Format = types.StringValue(string(*resp.OutputMsk.Format))
		} else {
			r.OutputMsk.Format = types.StringNull()
		}
		r.OutputMsk.ID = types.StringPointerValue(resp.OutputMsk.ID)
		r.OutputMsk.InitialBackoff = types.Float64PointerValue(resp.OutputMsk.InitialBackoff)
		if resp.OutputMsk.KafkaSchemaRegistry == nil {
			r.OutputMsk.KafkaSchemaRegistry = nil
		} else {
			r.OutputMsk.KafkaSchemaRegistry = &tfTypes.OutputMskKafkaSchemaRegistryAuthentication{}
			if resp.OutputMsk.KafkaSchemaRegistry.Auth == nil {
				r.OutputMsk.KafkaSchemaRegistry.Auth = nil
			} else {
				r.OutputMsk.KafkaSchemaRegistry.Auth = &tfTypes.OutputMskAuth{}
				r.OutputMsk.KafkaSchemaRegistry.Auth.CredentialsSecret = types.StringPointerValue(resp.OutputMsk.KafkaSchemaRegistry.Auth.CredentialsSecret)
				r.OutputMsk.KafkaSchemaRegistry.Auth.Disabled = types.BoolPointerValue(resp.OutputMsk.KafkaSchemaRegistry.Auth.Disabled)
			}
			r.OutputMsk.KafkaSchemaRegistry.ConnectionTimeout = types.Float64PointerValue(resp.OutputMsk.KafkaSchemaRegistry.ConnectionTimeout)
			r.OutputMsk.KafkaSchemaRegistry.DefaultKeySchemaID = types.Float64PointerValue(resp.OutputMsk.KafkaSchemaRegistry.DefaultKeySchemaID)
			r.OutputMsk.KafkaSchemaRegistry.DefaultValueSchemaID = types.Float64PointerValue(resp.OutputMsk.KafkaSchemaRegistry.DefaultValueSchemaID)
			r.OutputMsk.KafkaSchemaRegistry.Disabled = types.BoolPointerValue(resp.OutputMsk.KafkaSchemaRegistry.Disabled)
			r.OutputMsk.KafkaSchemaRegistry.MaxRetries = types.Float64PointerValue(resp.OutputMsk.KafkaSchemaRegistry.MaxRetries)
			r.OutputMsk.KafkaSchemaRegistry.RequestTimeout = types.Float64PointerValue(resp.OutputMsk.KafkaSchemaRegistry.RequestTimeout)
			r.OutputMsk.KafkaSchemaRegistry.SchemaRegistryURL = types.StringPointerValue(resp.OutputMsk.KafkaSchemaRegistry.SchemaRegistryURL)
			if resp.OutputMsk.KafkaSchemaRegistry.TLS == nil {
				r.OutputMsk.KafkaSchemaRegistry.TLS = nil
			} else {
				r.OutputMsk.KafkaSchemaRegistry.TLS = &tfTypes.OutputMskKafkaSchemaRegistryTLSSettingsClientSide{}
				r.OutputMsk.KafkaSchemaRegistry.TLS.CaPath = types.StringPointerValue(resp.OutputMsk.KafkaSchemaRegistry.TLS.CaPath)
				r.OutputMsk.KafkaSchemaRegistry.TLS.CertificateName = types.StringPointerValue(resp.OutputMsk.KafkaSchemaRegistry.TLS.CertificateName)
				r.OutputMsk.KafkaSchemaRegistry.TLS.CertPath = types.StringPointerValue(resp.OutputMsk.KafkaSchemaRegistry.TLS.CertPath)
				r.OutputMsk.KafkaSchemaRegistry.TLS.Disabled = types.BoolPointerValue(resp.OutputMsk.KafkaSchemaRegistry.TLS.Disabled)
				if resp.OutputMsk.KafkaSchemaRegistry.TLS.MaxVersion != nil {
					r.OutputMsk.KafkaSchemaRegistry.TLS.MaxVersion = types.StringValue(string(*resp.OutputMsk.KafkaSchemaRegistry.TLS.MaxVersion))
				} else {
					r.OutputMsk.KafkaSchemaRegistry.TLS.MaxVersion = types.StringNull()
				}
				if resp.OutputMsk.KafkaSchemaRegistry.TLS.MinVersion != nil {
					r.OutputMsk.KafkaSchemaRegistry.TLS.MinVersion = types.StringValue(string(*resp.OutputMsk.KafkaSchemaRegistry.TLS.MinVersion))
				} else {
					r.OutputMsk.KafkaSchemaRegistry.TLS.MinVersion = types.StringNull()
				}
				r.OutputMsk.KafkaSchemaRegistry.TLS.Passphrase = types.StringPointerValue(resp.OutputMsk.KafkaSchemaRegistry.TLS.Passphrase)
				r.OutputMsk.KafkaSchemaRegistry.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputMsk.KafkaSchemaRegistry.TLS.PrivKeyPath)
				r.OutputMsk.KafkaSchemaRegistry.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputMsk.KafkaSchemaRegistry.TLS.RejectUnauthorized)
				r.OutputMsk.KafkaSchemaRegistry.TLS.Servername = types.StringPointerValue(resp.OutputMsk.KafkaSchemaRegistry.TLS.Servername)
			}
		}
		r.OutputMsk.MaxBackOff = types.Float64PointerValue(resp.OutputMsk.MaxBackOff)
		r.OutputMsk.MaxRecordSizeKB = types.Float64PointerValue(resp.OutputMsk.MaxRecordSizeKB)
		r.OutputMsk.MaxRetries = types.Float64PointerValue(resp.OutputMsk.MaxRetries)
		if resp.OutputMsk.OnBackpressure != nil {
			r.OutputMsk.OnBackpressure = types.StringValue(string(*resp.OutputMsk.OnBackpressure))
		} else {
			r.OutputMsk.OnBackpressure = types.StringNull()
		}
		r.OutputMsk.Pipeline = types.StringPointerValue(resp.OutputMsk.Pipeline)
		if resp.OutputMsk.PqCompress != nil {
			r.OutputMsk.PqCompress = types.StringValue(string(*resp.OutputMsk.PqCompress))
		} else {
			r.OutputMsk.PqCompress = types.StringNull()
		}
		if resp.OutputMsk.PqControls == nil {
			r.OutputMsk.PqControls = nil
		} else {
			r.OutputMsk.PqControls = &tfTypes.OutputMskPqControls{}
		}
		r.OutputMsk.PqMaxFileSize = types.StringPointerValue(resp.OutputMsk.PqMaxFileSize)
		r.OutputMsk.PqMaxSize = types.StringPointerValue(resp.OutputMsk.PqMaxSize)
		if resp.OutputMsk.PqMode != nil {
			r.OutputMsk.PqMode = types.StringValue(string(*resp.OutputMsk.PqMode))
		} else {
			r.OutputMsk.PqMode = types.StringNull()
		}
		if resp.OutputMsk.PqOnBackpressure != nil {
			r.OutputMsk.PqOnBackpressure = types.StringValue(string(*resp.OutputMsk.PqOnBackpressure))
		} else {
			r.OutputMsk.PqOnBackpressure = types.StringNull()
		}
		r.OutputMsk.PqPath = types.StringPointerValue(resp.OutputMsk.PqPath)
		r.OutputMsk.ProtobufLibraryID = types.StringPointerValue(resp.OutputMsk.ProtobufLibraryID)
		r.OutputMsk.ReauthenticationThreshold = types.Float64PointerValue(resp.OutputMsk.ReauthenticationThreshold)
		r.OutputMsk.Region = types.StringValue(resp.OutputMsk.Region)
		r.OutputMsk.RejectUnauthorized = types.BoolPointerValue(resp.OutputMsk.RejectUnauthorized)
		r.OutputMsk.RequestTimeout = types.Float64PointerValue(resp.OutputMsk.RequestTimeout)
		r.OutputMsk.ReuseConnections = types.BoolPointerValue(resp.OutputMsk.ReuseConnections)
		if resp.OutputMsk.SignatureVersion != nil {
			r.OutputMsk.SignatureVersion = types.StringValue(string(*resp.OutputMsk.SignatureVersion))
		} else {
			r.OutputMsk.SignatureVersion = types.StringNull()
		}
		r.OutputMsk.Streamtags = make([]types.String, 0, len(resp.OutputMsk.Streamtags))
		for _, v := range resp.OutputMsk.Streamtags {
			r.OutputMsk.Streamtags = append(r.OutputMsk.Streamtags, types.StringValue(v))
		}
		r.OutputMsk.SystemFields = make([]types.String, 0, len(resp.OutputMsk.SystemFields))
		for _, v := range resp.OutputMsk.SystemFields {
			r.OutputMsk.SystemFields = append(r.OutputMsk.SystemFields, types.StringValue(v))
		}
		if resp.OutputMsk.TLS == nil {
			r.OutputMsk.TLS = nil
		} else {
			r.OutputMsk.TLS = &tfTypes.OutputMskTLSSettingsClientSide{}
			r.OutputMsk.TLS.CaPath = types.StringPointerValue(resp.OutputMsk.TLS.CaPath)
			r.OutputMsk.TLS.CertificateName = types.StringPointerValue(resp.OutputMsk.TLS.CertificateName)
			r.OutputMsk.TLS.CertPath = types.StringPointerValue(resp.OutputMsk.TLS.CertPath)
			r.OutputMsk.TLS.Disabled = types.BoolPointerValue(resp.OutputMsk.TLS.Disabled)
			if resp.OutputMsk.TLS.MaxVersion != nil {
				r.OutputMsk.TLS.MaxVersion = types.StringValue(string(*resp.OutputMsk.TLS.MaxVersion))
			} else {
				r.OutputMsk.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputMsk.TLS.MinVersion != nil {
				r.OutputMsk.TLS.MinVersion = types.StringValue(string(*resp.OutputMsk.TLS.MinVersion))
			} else {
				r.OutputMsk.TLS.MinVersion = types.StringNull()
			}
			r.OutputMsk.TLS.Passphrase = types.StringPointerValue(resp.OutputMsk.TLS.Passphrase)
			r.OutputMsk.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputMsk.TLS.PrivKeyPath)
			r.OutputMsk.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputMsk.TLS.RejectUnauthorized)
			r.OutputMsk.TLS.Servername = types.StringPointerValue(resp.OutputMsk.TLS.Servername)
		}
		r.OutputMsk.Topic = types.StringValue(resp.OutputMsk.Topic)
		if resp.OutputMsk.Type != nil {
			r.OutputMsk.Type = types.StringValue(string(*resp.OutputMsk.Type))
		} else {
			r.OutputMsk.Type = types.StringNull()
		}
	}
	if resp.OutputNetflow != nil {
		r.OutputNetflow = &tfTypes.OutputNetflow{}
		r.OutputNetflow.Description = types.StringPointerValue(resp.OutputNetflow.Description)
		r.OutputNetflow.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputNetflow.DNSResolvePeriodSec)
		r.OutputNetflow.Environment = types.StringPointerValue(resp.OutputNetflow.Environment)
		r.OutputNetflow.Hosts = []tfTypes.OutputNetflowHost{}
		if len(r.OutputNetflow.Hosts) > len(resp.OutputNetflow.Hosts) {
			r.OutputNetflow.Hosts = r.OutputNetflow.Hosts[:len(resp.OutputNetflow.Hosts)]
		}
		for hostsCount1, hostsItem1 := range resp.OutputNetflow.Hosts {
			var hosts1 tfTypes.OutputNetflowHost
			hosts1.Host = types.StringValue(hostsItem1.Host)
			hosts1.Port = types.Float64PointerValue(hostsItem1.Port)
			if hostsCount1+1 > len(r.OutputNetflow.Hosts) {
				r.OutputNetflow.Hosts = append(r.OutputNetflow.Hosts, hosts1)
			} else {
				r.OutputNetflow.Hosts[hostsCount1].Host = hosts1.Host
				r.OutputNetflow.Hosts[hostsCount1].Port = hosts1.Port
			}
		}
		r.OutputNetflow.ID = types.StringPointerValue(resp.OutputNetflow.ID)
		r.OutputNetflow.Pipeline = types.StringPointerValue(resp.OutputNetflow.Pipeline)
		r.OutputNetflow.Streamtags = make([]types.String, 0, len(resp.OutputNetflow.Streamtags))
		for _, v := range resp.OutputNetflow.Streamtags {
			r.OutputNetflow.Streamtags = append(r.OutputNetflow.Streamtags, types.StringValue(v))
		}
		r.OutputNetflow.SystemFields = make([]types.String, 0, len(resp.OutputNetflow.SystemFields))
		for _, v := range resp.OutputNetflow.SystemFields {
			r.OutputNetflow.SystemFields = append(r.OutputNetflow.SystemFields, types.StringValue(v))
		}
		r.OutputNetflow.Type = types.StringValue(string(resp.OutputNetflow.Type))
	}
	if resp.OutputNewrelic != nil {
		r.OutputNewrelic = &tfTypes.OutputNewrelic{}
		r.OutputNewrelic.APIKey = types.StringPointerValue(resp.OutputNewrelic.APIKey)
		if resp.OutputNewrelic.AuthType != nil {
			r.OutputNewrelic.AuthType = types.StringValue(string(*resp.OutputNewrelic.AuthType))
		} else {
			r.OutputNewrelic.AuthType = types.StringNull()
		}
		r.OutputNewrelic.Compress = types.BoolPointerValue(resp.OutputNewrelic.Compress)
		r.OutputNewrelic.Concurrency = types.Float64PointerValue(resp.OutputNewrelic.Concurrency)
		r.OutputNewrelic.CustomURL = types.StringPointerValue(resp.OutputNewrelic.CustomURL)
		r.OutputNewrelic.Description = types.StringPointerValue(resp.OutputNewrelic.Description)
		r.OutputNewrelic.Environment = types.StringPointerValue(resp.OutputNewrelic.Environment)
		r.OutputNewrelic.ExtraHTTPHeaders = []tfTypes.OutputNewrelicExtraHTTPHeader{}
		if len(r.OutputNewrelic.ExtraHTTPHeaders) > len(resp.OutputNewrelic.ExtraHTTPHeaders) {
			r.OutputNewrelic.ExtraHTTPHeaders = r.OutputNewrelic.ExtraHTTPHeaders[:len(resp.OutputNewrelic.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount17, extraHTTPHeadersItem17 := range resp.OutputNewrelic.ExtraHTTPHeaders {
			var extraHTTPHeaders17 tfTypes.OutputNewrelicExtraHTTPHeader
			extraHTTPHeaders17.Name = types.StringPointerValue(extraHTTPHeadersItem17.Name)
			extraHTTPHeaders17.Value = types.StringValue(extraHTTPHeadersItem17.Value)
			if extraHTTPHeadersCount17+1 > len(r.OutputNewrelic.ExtraHTTPHeaders) {
				r.OutputNewrelic.ExtraHTTPHeaders = append(r.OutputNewrelic.ExtraHTTPHeaders, extraHTTPHeaders17)
			} else {
				r.OutputNewrelic.ExtraHTTPHeaders[extraHTTPHeadersCount17].Name = extraHTTPHeaders17.Name
				r.OutputNewrelic.ExtraHTTPHeaders[extraHTTPHeadersCount17].Value = extraHTTPHeaders17.Value
			}
		}
		if resp.OutputNewrelic.FailedRequestLoggingMode != nil {
			r.OutputNewrelic.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputNewrelic.FailedRequestLoggingMode))
		} else {
			r.OutputNewrelic.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputNewrelic.FlushPeriodSec = types.Float64PointerValue(resp.OutputNewrelic.FlushPeriodSec)
		r.OutputNewrelic.ID = types.StringValue(resp.OutputNewrelic.ID)
		r.OutputNewrelic.LogType = types.StringPointerValue(resp.OutputNewrelic.LogType)
		r.OutputNewrelic.MaxPayloadEvents = types.Float64PointerValue(resp.OutputNewrelic.MaxPayloadEvents)
		r.OutputNewrelic.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputNewrelic.MaxPayloadSizeKB)
		r.OutputNewrelic.MessageField = types.StringPointerValue(resp.OutputNewrelic.MessageField)
		r.OutputNewrelic.Metadata = []tfTypes.OutputNewrelicMetadatum{}
		if len(r.OutputNewrelic.Metadata) > len(resp.OutputNewrelic.Metadata) {
			r.OutputNewrelic.Metadata = r.OutputNewrelic.Metadata[:len(resp.OutputNewrelic.Metadata)]
		}
		for metadataCount1, metadataItem1 := range resp.OutputNewrelic.Metadata {
			var metadata1 tfTypes.OutputNewrelicMetadatum
			metadata1.Name = types.StringValue(string(metadataItem1.Name))
			metadata1.Value = types.StringValue(metadataItem1.Value)
			if metadataCount1+1 > len(r.OutputNewrelic.Metadata) {
				r.OutputNewrelic.Metadata = append(r.OutputNewrelic.Metadata, metadata1)
			} else {
				r.OutputNewrelic.Metadata[metadataCount1].Name = metadata1.Name
				r.OutputNewrelic.Metadata[metadataCount1].Value = metadata1.Value
			}
		}
		if resp.OutputNewrelic.OnBackpressure != nil {
			r.OutputNewrelic.OnBackpressure = types.StringValue(string(*resp.OutputNewrelic.OnBackpressure))
		} else {
			r.OutputNewrelic.OnBackpressure = types.StringNull()
		}
		r.OutputNewrelic.Pipeline = types.StringPointerValue(resp.OutputNewrelic.Pipeline)
		if resp.OutputNewrelic.PqCompress != nil {
			r.OutputNewrelic.PqCompress = types.StringValue(string(*resp.OutputNewrelic.PqCompress))
		} else {
			r.OutputNewrelic.PqCompress = types.StringNull()
		}
		if resp.OutputNewrelic.PqControls == nil {
			r.OutputNewrelic.PqControls = nil
		} else {
			r.OutputNewrelic.PqControls = &tfTypes.OutputNewrelicPqControls{}
		}
		r.OutputNewrelic.PqMaxFileSize = types.StringPointerValue(resp.OutputNewrelic.PqMaxFileSize)
		r.OutputNewrelic.PqMaxSize = types.StringPointerValue(resp.OutputNewrelic.PqMaxSize)
		if resp.OutputNewrelic.PqMode != nil {
			r.OutputNewrelic.PqMode = types.StringValue(string(*resp.OutputNewrelic.PqMode))
		} else {
			r.OutputNewrelic.PqMode = types.StringNull()
		}
		if resp.OutputNewrelic.PqOnBackpressure != nil {
			r.OutputNewrelic.PqOnBackpressure = types.StringValue(string(*resp.OutputNewrelic.PqOnBackpressure))
		} else {
			r.OutputNewrelic.PqOnBackpressure = types.StringNull()
		}
		r.OutputNewrelic.PqPath = types.StringPointerValue(resp.OutputNewrelic.PqPath)
		if resp.OutputNewrelic.Region != nil {
			r.OutputNewrelic.Region = types.StringValue(string(*resp.OutputNewrelic.Region))
		} else {
			r.OutputNewrelic.Region = types.StringNull()
		}
		r.OutputNewrelic.RejectUnauthorized = types.BoolPointerValue(resp.OutputNewrelic.RejectUnauthorized)
		r.OutputNewrelic.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputNewrelic.ResponseHonorRetryAfterHeader)
		r.OutputNewrelic.ResponseRetrySettings = []tfTypes.OutputNewrelicResponseRetrySetting{}
		if len(r.OutputNewrelic.ResponseRetrySettings) > len(resp.OutputNewrelic.ResponseRetrySettings) {
			r.OutputNewrelic.ResponseRetrySettings = r.OutputNewrelic.ResponseRetrySettings[:len(resp.OutputNewrelic.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount18, responseRetrySettingsItem18 := range resp.OutputNewrelic.ResponseRetrySettings {
			var responseRetrySettings18 tfTypes.OutputNewrelicResponseRetrySetting
			responseRetrySettings18.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem18.BackoffRate)
			responseRetrySettings18.HTTPStatus = types.Float64Value(responseRetrySettingsItem18.HTTPStatus)
			responseRetrySettings18.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem18.InitialBackoff)
			responseRetrySettings18.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem18.MaxBackoff)
			if responseRetrySettingsCount18+1 > len(r.OutputNewrelic.ResponseRetrySettings) {
				r.OutputNewrelic.ResponseRetrySettings = append(r.OutputNewrelic.ResponseRetrySettings, responseRetrySettings18)
			} else {
				r.OutputNewrelic.ResponseRetrySettings[responseRetrySettingsCount18].BackoffRate = responseRetrySettings18.BackoffRate
				r.OutputNewrelic.ResponseRetrySettings[responseRetrySettingsCount18].HTTPStatus = responseRetrySettings18.HTTPStatus
				r.OutputNewrelic.ResponseRetrySettings[responseRetrySettingsCount18].InitialBackoff = responseRetrySettings18.InitialBackoff
				r.OutputNewrelic.ResponseRetrySettings[responseRetrySettingsCount18].MaxBackoff = responseRetrySettings18.MaxBackoff
			}
		}
		r.OutputNewrelic.SafeHeaders = make([]types.String, 0, len(resp.OutputNewrelic.SafeHeaders))
		for _, v := range resp.OutputNewrelic.SafeHeaders {
			r.OutputNewrelic.SafeHeaders = append(r.OutputNewrelic.SafeHeaders, types.StringValue(v))
		}
		r.OutputNewrelic.Streamtags = make([]types.String, 0, len(resp.OutputNewrelic.Streamtags))
		for _, v := range resp.OutputNewrelic.Streamtags {
			r.OutputNewrelic.Streamtags = append(r.OutputNewrelic.Streamtags, types.StringValue(v))
		}
		r.OutputNewrelic.SystemFields = make([]types.String, 0, len(resp.OutputNewrelic.SystemFields))
		for _, v := range resp.OutputNewrelic.SystemFields {
			r.OutputNewrelic.SystemFields = append(r.OutputNewrelic.SystemFields, types.StringValue(v))
		}
		r.OutputNewrelic.TextSecret = types.StringPointerValue(resp.OutputNewrelic.TextSecret)
		if resp.OutputNewrelic.TimeoutRetrySettings == nil {
			r.OutputNewrelic.TimeoutRetrySettings = nil
		} else {
			r.OutputNewrelic.TimeoutRetrySettings = &tfTypes.OutputNewrelicTimeoutRetrySettings{}
			r.OutputNewrelic.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputNewrelic.TimeoutRetrySettings.BackoffRate)
			r.OutputNewrelic.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputNewrelic.TimeoutRetrySettings.InitialBackoff)
			r.OutputNewrelic.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputNewrelic.TimeoutRetrySettings.MaxBackoff)
			r.OutputNewrelic.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputNewrelic.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputNewrelic.TimeoutSec = types.Float64PointerValue(resp.OutputNewrelic.TimeoutSec)
		r.OutputNewrelic.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputNewrelic.TotalMemoryLimitKB)
		r.OutputNewrelic.Type = types.StringValue(string(resp.OutputNewrelic.Type))
		r.OutputNewrelic.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputNewrelic.UseRoundRobinDNS)
	}
	if resp.OutputNewrelicEvents != nil {
		r.OutputNewrelicEvents = &tfTypes.OutputNewrelicEvents{}
		r.OutputNewrelicEvents.AccountID = types.StringValue(resp.OutputNewrelicEvents.AccountID)
		r.OutputNewrelicEvents.APIKey = types.StringPointerValue(resp.OutputNewrelicEvents.APIKey)
		if resp.OutputNewrelicEvents.AuthType != nil {
			r.OutputNewrelicEvents.AuthType = types.StringValue(string(*resp.OutputNewrelicEvents.AuthType))
		} else {
			r.OutputNewrelicEvents.AuthType = types.StringNull()
		}
		r.OutputNewrelicEvents.Compress = types.BoolPointerValue(resp.OutputNewrelicEvents.Compress)
		r.OutputNewrelicEvents.Concurrency = types.Float64PointerValue(resp.OutputNewrelicEvents.Concurrency)
		r.OutputNewrelicEvents.CustomURL = types.StringPointerValue(resp.OutputNewrelicEvents.CustomURL)
		r.OutputNewrelicEvents.Description = types.StringPointerValue(resp.OutputNewrelicEvents.Description)
		r.OutputNewrelicEvents.Environment = types.StringPointerValue(resp.OutputNewrelicEvents.Environment)
		r.OutputNewrelicEvents.EventType = types.StringValue(resp.OutputNewrelicEvents.EventType)
		r.OutputNewrelicEvents.ExtraHTTPHeaders = []tfTypes.OutputNewrelicEventsExtraHTTPHeader{}
		if len(r.OutputNewrelicEvents.ExtraHTTPHeaders) > len(resp.OutputNewrelicEvents.ExtraHTTPHeaders) {
			r.OutputNewrelicEvents.ExtraHTTPHeaders = r.OutputNewrelicEvents.ExtraHTTPHeaders[:len(resp.OutputNewrelicEvents.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount18, extraHTTPHeadersItem18 := range resp.OutputNewrelicEvents.ExtraHTTPHeaders {
			var extraHTTPHeaders18 tfTypes.OutputNewrelicEventsExtraHTTPHeader
			extraHTTPHeaders18.Name = types.StringPointerValue(extraHTTPHeadersItem18.Name)
			extraHTTPHeaders18.Value = types.StringValue(extraHTTPHeadersItem18.Value)
			if extraHTTPHeadersCount18+1 > len(r.OutputNewrelicEvents.ExtraHTTPHeaders) {
				r.OutputNewrelicEvents.ExtraHTTPHeaders = append(r.OutputNewrelicEvents.ExtraHTTPHeaders, extraHTTPHeaders18)
			} else {
				r.OutputNewrelicEvents.ExtraHTTPHeaders[extraHTTPHeadersCount18].Name = extraHTTPHeaders18.Name
				r.OutputNewrelicEvents.ExtraHTTPHeaders[extraHTTPHeadersCount18].Value = extraHTTPHeaders18.Value
			}
		}
		if resp.OutputNewrelicEvents.FailedRequestLoggingMode != nil {
			r.OutputNewrelicEvents.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputNewrelicEvents.FailedRequestLoggingMode))
		} else {
			r.OutputNewrelicEvents.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputNewrelicEvents.FlushPeriodSec = types.Float64PointerValue(resp.OutputNewrelicEvents.FlushPeriodSec)
		r.OutputNewrelicEvents.ID = types.StringPointerValue(resp.OutputNewrelicEvents.ID)
		r.OutputNewrelicEvents.MaxPayloadEvents = types.Float64PointerValue(resp.OutputNewrelicEvents.MaxPayloadEvents)
		r.OutputNewrelicEvents.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputNewrelicEvents.MaxPayloadSizeKB)
		if resp.OutputNewrelicEvents.OnBackpressure != nil {
			r.OutputNewrelicEvents.OnBackpressure = types.StringValue(string(*resp.OutputNewrelicEvents.OnBackpressure))
		} else {
			r.OutputNewrelicEvents.OnBackpressure = types.StringNull()
		}
		r.OutputNewrelicEvents.Pipeline = types.StringPointerValue(resp.OutputNewrelicEvents.Pipeline)
		if resp.OutputNewrelicEvents.PqCompress != nil {
			r.OutputNewrelicEvents.PqCompress = types.StringValue(string(*resp.OutputNewrelicEvents.PqCompress))
		} else {
			r.OutputNewrelicEvents.PqCompress = types.StringNull()
		}
		if resp.OutputNewrelicEvents.PqControls == nil {
			r.OutputNewrelicEvents.PqControls = nil
		} else {
			r.OutputNewrelicEvents.PqControls = &tfTypes.OutputNewrelicEventsPqControls{}
		}
		r.OutputNewrelicEvents.PqMaxFileSize = types.StringPointerValue(resp.OutputNewrelicEvents.PqMaxFileSize)
		r.OutputNewrelicEvents.PqMaxSize = types.StringPointerValue(resp.OutputNewrelicEvents.PqMaxSize)
		if resp.OutputNewrelicEvents.PqMode != nil {
			r.OutputNewrelicEvents.PqMode = types.StringValue(string(*resp.OutputNewrelicEvents.PqMode))
		} else {
			r.OutputNewrelicEvents.PqMode = types.StringNull()
		}
		if resp.OutputNewrelicEvents.PqOnBackpressure != nil {
			r.OutputNewrelicEvents.PqOnBackpressure = types.StringValue(string(*resp.OutputNewrelicEvents.PqOnBackpressure))
		} else {
			r.OutputNewrelicEvents.PqOnBackpressure = types.StringNull()
		}
		r.OutputNewrelicEvents.PqPath = types.StringPointerValue(resp.OutputNewrelicEvents.PqPath)
		if resp.OutputNewrelicEvents.Region != nil {
			r.OutputNewrelicEvents.Region = types.StringValue(string(*resp.OutputNewrelicEvents.Region))
		} else {
			r.OutputNewrelicEvents.Region = types.StringNull()
		}
		r.OutputNewrelicEvents.RejectUnauthorized = types.BoolPointerValue(resp.OutputNewrelicEvents.RejectUnauthorized)
		r.OutputNewrelicEvents.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputNewrelicEvents.ResponseHonorRetryAfterHeader)
		r.OutputNewrelicEvents.ResponseRetrySettings = []tfTypes.OutputNewrelicEventsResponseRetrySetting{}
		if len(r.OutputNewrelicEvents.ResponseRetrySettings) > len(resp.OutputNewrelicEvents.ResponseRetrySettings) {
			r.OutputNewrelicEvents.ResponseRetrySettings = r.OutputNewrelicEvents.ResponseRetrySettings[:len(resp.OutputNewrelicEvents.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount19, responseRetrySettingsItem19 := range resp.OutputNewrelicEvents.ResponseRetrySettings {
			var responseRetrySettings19 tfTypes.OutputNewrelicEventsResponseRetrySetting
			responseRetrySettings19.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem19.BackoffRate)
			responseRetrySettings19.HTTPStatus = types.Float64Value(responseRetrySettingsItem19.HTTPStatus)
			responseRetrySettings19.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem19.InitialBackoff)
			responseRetrySettings19.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem19.MaxBackoff)
			if responseRetrySettingsCount19+1 > len(r.OutputNewrelicEvents.ResponseRetrySettings) {
				r.OutputNewrelicEvents.ResponseRetrySettings = append(r.OutputNewrelicEvents.ResponseRetrySettings, responseRetrySettings19)
			} else {
				r.OutputNewrelicEvents.ResponseRetrySettings[responseRetrySettingsCount19].BackoffRate = responseRetrySettings19.BackoffRate
				r.OutputNewrelicEvents.ResponseRetrySettings[responseRetrySettingsCount19].HTTPStatus = responseRetrySettings19.HTTPStatus
				r.OutputNewrelicEvents.ResponseRetrySettings[responseRetrySettingsCount19].InitialBackoff = responseRetrySettings19.InitialBackoff
				r.OutputNewrelicEvents.ResponseRetrySettings[responseRetrySettingsCount19].MaxBackoff = responseRetrySettings19.MaxBackoff
			}
		}
		r.OutputNewrelicEvents.SafeHeaders = make([]types.String, 0, len(resp.OutputNewrelicEvents.SafeHeaders))
		for _, v := range resp.OutputNewrelicEvents.SafeHeaders {
			r.OutputNewrelicEvents.SafeHeaders = append(r.OutputNewrelicEvents.SafeHeaders, types.StringValue(v))
		}
		r.OutputNewrelicEvents.Streamtags = make([]types.String, 0, len(resp.OutputNewrelicEvents.Streamtags))
		for _, v := range resp.OutputNewrelicEvents.Streamtags {
			r.OutputNewrelicEvents.Streamtags = append(r.OutputNewrelicEvents.Streamtags, types.StringValue(v))
		}
		r.OutputNewrelicEvents.SystemFields = make([]types.String, 0, len(resp.OutputNewrelicEvents.SystemFields))
		for _, v := range resp.OutputNewrelicEvents.SystemFields {
			r.OutputNewrelicEvents.SystemFields = append(r.OutputNewrelicEvents.SystemFields, types.StringValue(v))
		}
		r.OutputNewrelicEvents.TextSecret = types.StringPointerValue(resp.OutputNewrelicEvents.TextSecret)
		if resp.OutputNewrelicEvents.TimeoutRetrySettings == nil {
			r.OutputNewrelicEvents.TimeoutRetrySettings = nil
		} else {
			r.OutputNewrelicEvents.TimeoutRetrySettings = &tfTypes.OutputNewrelicEventsTimeoutRetrySettings{}
			r.OutputNewrelicEvents.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputNewrelicEvents.TimeoutRetrySettings.BackoffRate)
			r.OutputNewrelicEvents.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputNewrelicEvents.TimeoutRetrySettings.InitialBackoff)
			r.OutputNewrelicEvents.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputNewrelicEvents.TimeoutRetrySettings.MaxBackoff)
			r.OutputNewrelicEvents.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputNewrelicEvents.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputNewrelicEvents.TimeoutSec = types.Float64PointerValue(resp.OutputNewrelicEvents.TimeoutSec)
		if resp.OutputNewrelicEvents.Type != nil {
			r.OutputNewrelicEvents.Type = types.StringValue(string(*resp.OutputNewrelicEvents.Type))
		} else {
			r.OutputNewrelicEvents.Type = types.StringNull()
		}
		r.OutputNewrelicEvents.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputNewrelicEvents.UseRoundRobinDNS)
	}
	if resp.OutputOpenTelemetry != nil {
		r.OutputOpenTelemetry = &tfTypes.OutputOpenTelemetry{}
		r.OutputOpenTelemetry.AuthHeaderExpr = types.StringPointerValue(resp.OutputOpenTelemetry.AuthHeaderExpr)
		if resp.OutputOpenTelemetry.AuthType != nil {
			r.OutputOpenTelemetry.AuthType = types.StringValue(string(*resp.OutputOpenTelemetry.AuthType))
		} else {
			r.OutputOpenTelemetry.AuthType = types.StringNull()
		}
		if resp.OutputOpenTelemetry.Compress != nil {
			r.OutputOpenTelemetry.Compress = types.StringValue(string(*resp.OutputOpenTelemetry.Compress))
		} else {
			r.OutputOpenTelemetry.Compress = types.StringNull()
		}
		r.OutputOpenTelemetry.Concurrency = types.Float64PointerValue(resp.OutputOpenTelemetry.Concurrency)
		r.OutputOpenTelemetry.ConnectionTimeout = types.Float64PointerValue(resp.OutputOpenTelemetry.ConnectionTimeout)
		r.OutputOpenTelemetry.CredentialsSecret = types.StringPointerValue(resp.OutputOpenTelemetry.CredentialsSecret)
		r.OutputOpenTelemetry.Description = types.StringPointerValue(resp.OutputOpenTelemetry.Description)
		r.OutputOpenTelemetry.Endpoint = types.StringValue(resp.OutputOpenTelemetry.Endpoint)
		r.OutputOpenTelemetry.Environment = types.StringPointerValue(resp.OutputOpenTelemetry.Environment)
		r.OutputOpenTelemetry.ExtraHTTPHeaders = []tfTypes.OutputOpenTelemetryExtraHTTPHeader{}
		if len(r.OutputOpenTelemetry.ExtraHTTPHeaders) > len(resp.OutputOpenTelemetry.ExtraHTTPHeaders) {
			r.OutputOpenTelemetry.ExtraHTTPHeaders = r.OutputOpenTelemetry.ExtraHTTPHeaders[:len(resp.OutputOpenTelemetry.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount19, extraHTTPHeadersItem19 := range resp.OutputOpenTelemetry.ExtraHTTPHeaders {
			var extraHTTPHeaders19 tfTypes.OutputOpenTelemetryExtraHTTPHeader
			extraHTTPHeaders19.Name = types.StringPointerValue(extraHTTPHeadersItem19.Name)
			extraHTTPHeaders19.Value = types.StringValue(extraHTTPHeadersItem19.Value)
			if extraHTTPHeadersCount19+1 > len(r.OutputOpenTelemetry.ExtraHTTPHeaders) {
				r.OutputOpenTelemetry.ExtraHTTPHeaders = append(r.OutputOpenTelemetry.ExtraHTTPHeaders, extraHTTPHeaders19)
			} else {
				r.OutputOpenTelemetry.ExtraHTTPHeaders[extraHTTPHeadersCount19].Name = extraHTTPHeaders19.Name
				r.OutputOpenTelemetry.ExtraHTTPHeaders[extraHTTPHeadersCount19].Value = extraHTTPHeaders19.Value
			}
		}
		if resp.OutputOpenTelemetry.FailedRequestLoggingMode != nil {
			r.OutputOpenTelemetry.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputOpenTelemetry.FailedRequestLoggingMode))
		} else {
			r.OutputOpenTelemetry.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputOpenTelemetry.FlushPeriodSec = types.Float64PointerValue(resp.OutputOpenTelemetry.FlushPeriodSec)
		if resp.OutputOpenTelemetry.HTTPCompress != nil {
			r.OutputOpenTelemetry.HTTPCompress = types.StringValue(string(*resp.OutputOpenTelemetry.HTTPCompress))
		} else {
			r.OutputOpenTelemetry.HTTPCompress = types.StringNull()
		}
		r.OutputOpenTelemetry.HTTPLogsEndpointOverride = types.StringPointerValue(resp.OutputOpenTelemetry.HTTPLogsEndpointOverride)
		r.OutputOpenTelemetry.HTTPMetricsEndpointOverride = types.StringPointerValue(resp.OutputOpenTelemetry.HTTPMetricsEndpointOverride)
		r.OutputOpenTelemetry.HTTPTracesEndpointOverride = types.StringPointerValue(resp.OutputOpenTelemetry.HTTPTracesEndpointOverride)
		r.OutputOpenTelemetry.ID = types.StringPointerValue(resp.OutputOpenTelemetry.ID)
		r.OutputOpenTelemetry.KeepAlive = types.BoolPointerValue(resp.OutputOpenTelemetry.KeepAlive)
		r.OutputOpenTelemetry.KeepAliveTime = types.Float64PointerValue(resp.OutputOpenTelemetry.KeepAliveTime)
		r.OutputOpenTelemetry.LoginURL = types.StringPointerValue(resp.OutputOpenTelemetry.LoginURL)
		r.OutputOpenTelemetry.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputOpenTelemetry.MaxPayloadSizeKB)
		r.OutputOpenTelemetry.Metadata = []tfTypes.OutputOpenTelemetryMetadatum{}
		if len(r.OutputOpenTelemetry.Metadata) > len(resp.OutputOpenTelemetry.Metadata) {
			r.OutputOpenTelemetry.Metadata = r.OutputOpenTelemetry.Metadata[:len(resp.OutputOpenTelemetry.Metadata)]
		}
		for metadataCount2, metadataItem2 := range resp.OutputOpenTelemetry.Metadata {
			var metadata2 tfTypes.OutputOpenTelemetryMetadatum
			metadata2.Key = types.StringPointerValue(metadataItem2.Key)
			metadata2.Value = types.StringValue(metadataItem2.Value)
			if metadataCount2+1 > len(r.OutputOpenTelemetry.Metadata) {
				r.OutputOpenTelemetry.Metadata = append(r.OutputOpenTelemetry.Metadata, metadata2)
			} else {
				r.OutputOpenTelemetry.Metadata[metadataCount2].Key = metadata2.Key
				r.OutputOpenTelemetry.Metadata[metadataCount2].Value = metadata2.Value
			}
		}
		r.OutputOpenTelemetry.OauthHeaders = []tfTypes.OutputOpenTelemetryOauthHeader{}
		if len(r.OutputOpenTelemetry.OauthHeaders) > len(resp.OutputOpenTelemetry.OauthHeaders) {
			r.OutputOpenTelemetry.OauthHeaders = r.OutputOpenTelemetry.OauthHeaders[:len(resp.OutputOpenTelemetry.OauthHeaders)]
		}
		for oauthHeadersCount2, oauthHeadersItem2 := range resp.OutputOpenTelemetry.OauthHeaders {
			var oauthHeaders2 tfTypes.OutputOpenTelemetryOauthHeader
			oauthHeaders2.Name = types.StringValue(oauthHeadersItem2.Name)
			oauthHeaders2.Value = types.StringValue(oauthHeadersItem2.Value)
			if oauthHeadersCount2+1 > len(r.OutputOpenTelemetry.OauthHeaders) {
				r.OutputOpenTelemetry.OauthHeaders = append(r.OutputOpenTelemetry.OauthHeaders, oauthHeaders2)
			} else {
				r.OutputOpenTelemetry.OauthHeaders[oauthHeadersCount2].Name = oauthHeaders2.Name
				r.OutputOpenTelemetry.OauthHeaders[oauthHeadersCount2].Value = oauthHeaders2.Value
			}
		}
		r.OutputOpenTelemetry.OauthParams = []tfTypes.OutputOpenTelemetryOauthParam{}
		if len(r.OutputOpenTelemetry.OauthParams) > len(resp.OutputOpenTelemetry.OauthParams) {
			r.OutputOpenTelemetry.OauthParams = r.OutputOpenTelemetry.OauthParams[:len(resp.OutputOpenTelemetry.OauthParams)]
		}
		for oauthParamsCount2, oauthParamsItem2 := range resp.OutputOpenTelemetry.OauthParams {
			var oauthParams2 tfTypes.OutputOpenTelemetryOauthParam
			oauthParams2.Name = types.StringValue(oauthParamsItem2.Name)
			oauthParams2.Value = types.StringValue(oauthParamsItem2.Value)
			if oauthParamsCount2+1 > len(r.OutputOpenTelemetry.OauthParams) {
				r.OutputOpenTelemetry.OauthParams = append(r.OutputOpenTelemetry.OauthParams, oauthParams2)
			} else {
				r.OutputOpenTelemetry.OauthParams[oauthParamsCount2].Name = oauthParams2.Name
				r.OutputOpenTelemetry.OauthParams[oauthParamsCount2].Value = oauthParams2.Value
			}
		}
		if resp.OutputOpenTelemetry.OnBackpressure != nil {
			r.OutputOpenTelemetry.OnBackpressure = types.StringValue(string(*resp.OutputOpenTelemetry.OnBackpressure))
		} else {
			r.OutputOpenTelemetry.OnBackpressure = types.StringNull()
		}
		if resp.OutputOpenTelemetry.OtlpVersion != nil {
			r.OutputOpenTelemetry.OtlpVersion = types.StringValue(string(*resp.OutputOpenTelemetry.OtlpVersion))
		} else {
			r.OutputOpenTelemetry.OtlpVersion = types.StringNull()
		}
		r.OutputOpenTelemetry.Password = types.StringPointerValue(resp.OutputOpenTelemetry.Password)
		r.OutputOpenTelemetry.Pipeline = types.StringPointerValue(resp.OutputOpenTelemetry.Pipeline)
		if resp.OutputOpenTelemetry.PqCompress != nil {
			r.OutputOpenTelemetry.PqCompress = types.StringValue(string(*resp.OutputOpenTelemetry.PqCompress))
		} else {
			r.OutputOpenTelemetry.PqCompress = types.StringNull()
		}
		if resp.OutputOpenTelemetry.PqControls == nil {
			r.OutputOpenTelemetry.PqControls = nil
		} else {
			r.OutputOpenTelemetry.PqControls = &tfTypes.OutputOpenTelemetryPqControls{}
		}
		r.OutputOpenTelemetry.PqMaxFileSize = types.StringPointerValue(resp.OutputOpenTelemetry.PqMaxFileSize)
		r.OutputOpenTelemetry.PqMaxSize = types.StringPointerValue(resp.OutputOpenTelemetry.PqMaxSize)
		if resp.OutputOpenTelemetry.PqMode != nil {
			r.OutputOpenTelemetry.PqMode = types.StringValue(string(*resp.OutputOpenTelemetry.PqMode))
		} else {
			r.OutputOpenTelemetry.PqMode = types.StringNull()
		}
		if resp.OutputOpenTelemetry.PqOnBackpressure != nil {
			r.OutputOpenTelemetry.PqOnBackpressure = types.StringValue(string(*resp.OutputOpenTelemetry.PqOnBackpressure))
		} else {
			r.OutputOpenTelemetry.PqOnBackpressure = types.StringNull()
		}
		r.OutputOpenTelemetry.PqPath = types.StringPointerValue(resp.OutputOpenTelemetry.PqPath)
		if resp.OutputOpenTelemetry.Protocol != nil {
			r.OutputOpenTelemetry.Protocol = types.StringValue(string(*resp.OutputOpenTelemetry.Protocol))
		} else {
			r.OutputOpenTelemetry.Protocol = types.StringNull()
		}
		r.OutputOpenTelemetry.RejectUnauthorized = types.BoolPointerValue(resp.OutputOpenTelemetry.RejectUnauthorized)
		r.OutputOpenTelemetry.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputOpenTelemetry.ResponseHonorRetryAfterHeader)
		r.OutputOpenTelemetry.ResponseRetrySettings = []tfTypes.OutputOpenTelemetryResponseRetrySetting{}
		if len(r.OutputOpenTelemetry.ResponseRetrySettings) > len(resp.OutputOpenTelemetry.ResponseRetrySettings) {
			r.OutputOpenTelemetry.ResponseRetrySettings = r.OutputOpenTelemetry.ResponseRetrySettings[:len(resp.OutputOpenTelemetry.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount20, responseRetrySettingsItem20 := range resp.OutputOpenTelemetry.ResponseRetrySettings {
			var responseRetrySettings20 tfTypes.OutputOpenTelemetryResponseRetrySetting
			responseRetrySettings20.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem20.BackoffRate)
			responseRetrySettings20.HTTPStatus = types.Float64Value(responseRetrySettingsItem20.HTTPStatus)
			responseRetrySettings20.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem20.InitialBackoff)
			responseRetrySettings20.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem20.MaxBackoff)
			if responseRetrySettingsCount20+1 > len(r.OutputOpenTelemetry.ResponseRetrySettings) {
				r.OutputOpenTelemetry.ResponseRetrySettings = append(r.OutputOpenTelemetry.ResponseRetrySettings, responseRetrySettings20)
			} else {
				r.OutputOpenTelemetry.ResponseRetrySettings[responseRetrySettingsCount20].BackoffRate = responseRetrySettings20.BackoffRate
				r.OutputOpenTelemetry.ResponseRetrySettings[responseRetrySettingsCount20].HTTPStatus = responseRetrySettings20.HTTPStatus
				r.OutputOpenTelemetry.ResponseRetrySettings[responseRetrySettingsCount20].InitialBackoff = responseRetrySettings20.InitialBackoff
				r.OutputOpenTelemetry.ResponseRetrySettings[responseRetrySettingsCount20].MaxBackoff = responseRetrySettings20.MaxBackoff
			}
		}
		r.OutputOpenTelemetry.SafeHeaders = make([]types.String, 0, len(resp.OutputOpenTelemetry.SafeHeaders))
		for _, v := range resp.OutputOpenTelemetry.SafeHeaders {
			r.OutputOpenTelemetry.SafeHeaders = append(r.OutputOpenTelemetry.SafeHeaders, types.StringValue(v))
		}
		r.OutputOpenTelemetry.Secret = types.StringPointerValue(resp.OutputOpenTelemetry.Secret)
		r.OutputOpenTelemetry.SecretParamName = types.StringPointerValue(resp.OutputOpenTelemetry.SecretParamName)
		r.OutputOpenTelemetry.Streamtags = make([]types.String, 0, len(resp.OutputOpenTelemetry.Streamtags))
		for _, v := range resp.OutputOpenTelemetry.Streamtags {
			r.OutputOpenTelemetry.Streamtags = append(r.OutputOpenTelemetry.Streamtags, types.StringValue(v))
		}
		r.OutputOpenTelemetry.SystemFields = make([]types.String, 0, len(resp.OutputOpenTelemetry.SystemFields))
		for _, v := range resp.OutputOpenTelemetry.SystemFields {
			r.OutputOpenTelemetry.SystemFields = append(r.OutputOpenTelemetry.SystemFields, types.StringValue(v))
		}
		r.OutputOpenTelemetry.TextSecret = types.StringPointerValue(resp.OutputOpenTelemetry.TextSecret)
		if resp.OutputOpenTelemetry.TimeoutRetrySettings == nil {
			r.OutputOpenTelemetry.TimeoutRetrySettings = nil
		} else {
			r.OutputOpenTelemetry.TimeoutRetrySettings = &tfTypes.OutputOpenTelemetryTimeoutRetrySettings{}
			r.OutputOpenTelemetry.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputOpenTelemetry.TimeoutRetrySettings.BackoffRate)
			r.OutputOpenTelemetry.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputOpenTelemetry.TimeoutRetrySettings.InitialBackoff)
			r.OutputOpenTelemetry.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputOpenTelemetry.TimeoutRetrySettings.MaxBackoff)
			r.OutputOpenTelemetry.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputOpenTelemetry.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputOpenTelemetry.TimeoutSec = types.Float64PointerValue(resp.OutputOpenTelemetry.TimeoutSec)
		if resp.OutputOpenTelemetry.TLS == nil {
			r.OutputOpenTelemetry.TLS = nil
		} else {
			r.OutputOpenTelemetry.TLS = &tfTypes.OutputOpenTelemetryTLSSettingsClientSide{}
			r.OutputOpenTelemetry.TLS.CaPath = types.StringPointerValue(resp.OutputOpenTelemetry.TLS.CaPath)
			r.OutputOpenTelemetry.TLS.CertificateName = types.StringPointerValue(resp.OutputOpenTelemetry.TLS.CertificateName)
			r.OutputOpenTelemetry.TLS.CertPath = types.StringPointerValue(resp.OutputOpenTelemetry.TLS.CertPath)
			r.OutputOpenTelemetry.TLS.Disabled = types.BoolPointerValue(resp.OutputOpenTelemetry.TLS.Disabled)
			if resp.OutputOpenTelemetry.TLS.MaxVersion != nil {
				r.OutputOpenTelemetry.TLS.MaxVersion = types.StringValue(string(*resp.OutputOpenTelemetry.TLS.MaxVersion))
			} else {
				r.OutputOpenTelemetry.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputOpenTelemetry.TLS.MinVersion != nil {
				r.OutputOpenTelemetry.TLS.MinVersion = types.StringValue(string(*resp.OutputOpenTelemetry.TLS.MinVersion))
			} else {
				r.OutputOpenTelemetry.TLS.MinVersion = types.StringNull()
			}
			r.OutputOpenTelemetry.TLS.Passphrase = types.StringPointerValue(resp.OutputOpenTelemetry.TLS.Passphrase)
			r.OutputOpenTelemetry.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputOpenTelemetry.TLS.PrivKeyPath)
			r.OutputOpenTelemetry.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputOpenTelemetry.TLS.RejectUnauthorized)
		}
		r.OutputOpenTelemetry.Token = types.StringPointerValue(resp.OutputOpenTelemetry.Token)
		r.OutputOpenTelemetry.TokenAttributeName = types.StringPointerValue(resp.OutputOpenTelemetry.TokenAttributeName)
		r.OutputOpenTelemetry.TokenTimeoutSecs = types.Float64PointerValue(resp.OutputOpenTelemetry.TokenTimeoutSecs)
		r.OutputOpenTelemetry.Type = types.StringValue(string(resp.OutputOpenTelemetry.Type))
		r.OutputOpenTelemetry.Username = types.StringPointerValue(resp.OutputOpenTelemetry.Username)
		r.OutputOpenTelemetry.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputOpenTelemetry.UseRoundRobinDNS)
	}
	if resp.OutputPrometheus != nil {
		r.OutputPrometheus = &tfTypes.OutputPrometheus{}
		r.OutputPrometheus.AuthHeaderExpr = types.StringPointerValue(resp.OutputPrometheus.AuthHeaderExpr)
		if resp.OutputPrometheus.AuthType != nil {
			r.OutputPrometheus.AuthType = types.StringValue(string(*resp.OutputPrometheus.AuthType))
		} else {
			r.OutputPrometheus.AuthType = types.StringNull()
		}
		r.OutputPrometheus.Concurrency = types.Float64PointerValue(resp.OutputPrometheus.Concurrency)
		r.OutputPrometheus.CredentialsSecret = types.StringPointerValue(resp.OutputPrometheus.CredentialsSecret)
		r.OutputPrometheus.Description = types.StringPointerValue(resp.OutputPrometheus.Description)
		r.OutputPrometheus.Environment = types.StringPointerValue(resp.OutputPrometheus.Environment)
		r.OutputPrometheus.ExtraHTTPHeaders = []tfTypes.OutputPrometheusExtraHTTPHeader{}
		if len(r.OutputPrometheus.ExtraHTTPHeaders) > len(resp.OutputPrometheus.ExtraHTTPHeaders) {
			r.OutputPrometheus.ExtraHTTPHeaders = r.OutputPrometheus.ExtraHTTPHeaders[:len(resp.OutputPrometheus.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount20, extraHTTPHeadersItem20 := range resp.OutputPrometheus.ExtraHTTPHeaders {
			var extraHTTPHeaders20 tfTypes.OutputPrometheusExtraHTTPHeader
			extraHTTPHeaders20.Name = types.StringPointerValue(extraHTTPHeadersItem20.Name)
			extraHTTPHeaders20.Value = types.StringValue(extraHTTPHeadersItem20.Value)
			if extraHTTPHeadersCount20+1 > len(r.OutputPrometheus.ExtraHTTPHeaders) {
				r.OutputPrometheus.ExtraHTTPHeaders = append(r.OutputPrometheus.ExtraHTTPHeaders, extraHTTPHeaders20)
			} else {
				r.OutputPrometheus.ExtraHTTPHeaders[extraHTTPHeadersCount20].Name = extraHTTPHeaders20.Name
				r.OutputPrometheus.ExtraHTTPHeaders[extraHTTPHeadersCount20].Value = extraHTTPHeaders20.Value
			}
		}
		if resp.OutputPrometheus.FailedRequestLoggingMode != nil {
			r.OutputPrometheus.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputPrometheus.FailedRequestLoggingMode))
		} else {
			r.OutputPrometheus.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputPrometheus.FlushPeriodSec = types.Float64PointerValue(resp.OutputPrometheus.FlushPeriodSec)
		r.OutputPrometheus.ID = types.StringPointerValue(resp.OutputPrometheus.ID)
		r.OutputPrometheus.LoginURL = types.StringPointerValue(resp.OutputPrometheus.LoginURL)
		r.OutputPrometheus.MaxPayloadEvents = types.Float64PointerValue(resp.OutputPrometheus.MaxPayloadEvents)
		r.OutputPrometheus.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputPrometheus.MaxPayloadSizeKB)
		r.OutputPrometheus.MetricRenameExpr = types.StringPointerValue(resp.OutputPrometheus.MetricRenameExpr)
		r.OutputPrometheus.MetricsFlushPeriodSec = types.Float64PointerValue(resp.OutputPrometheus.MetricsFlushPeriodSec)
		r.OutputPrometheus.OauthHeaders = []tfTypes.OutputPrometheusOauthHeader{}
		if len(r.OutputPrometheus.OauthHeaders) > len(resp.OutputPrometheus.OauthHeaders) {
			r.OutputPrometheus.OauthHeaders = r.OutputPrometheus.OauthHeaders[:len(resp.OutputPrometheus.OauthHeaders)]
		}
		for oauthHeadersCount3, oauthHeadersItem3 := range resp.OutputPrometheus.OauthHeaders {
			var oauthHeaders3 tfTypes.OutputPrometheusOauthHeader
			oauthHeaders3.Name = types.StringValue(oauthHeadersItem3.Name)
			oauthHeaders3.Value = types.StringValue(oauthHeadersItem3.Value)
			if oauthHeadersCount3+1 > len(r.OutputPrometheus.OauthHeaders) {
				r.OutputPrometheus.OauthHeaders = append(r.OutputPrometheus.OauthHeaders, oauthHeaders3)
			} else {
				r.OutputPrometheus.OauthHeaders[oauthHeadersCount3].Name = oauthHeaders3.Name
				r.OutputPrometheus.OauthHeaders[oauthHeadersCount3].Value = oauthHeaders3.Value
			}
		}
		r.OutputPrometheus.OauthParams = []tfTypes.OutputPrometheusOauthParam{}
		if len(r.OutputPrometheus.OauthParams) > len(resp.OutputPrometheus.OauthParams) {
			r.OutputPrometheus.OauthParams = r.OutputPrometheus.OauthParams[:len(resp.OutputPrometheus.OauthParams)]
		}
		for oauthParamsCount3, oauthParamsItem3 := range resp.OutputPrometheus.OauthParams {
			var oauthParams3 tfTypes.OutputPrometheusOauthParam
			oauthParams3.Name = types.StringValue(oauthParamsItem3.Name)
			oauthParams3.Value = types.StringValue(oauthParamsItem3.Value)
			if oauthParamsCount3+1 > len(r.OutputPrometheus.OauthParams) {
				r.OutputPrometheus.OauthParams = append(r.OutputPrometheus.OauthParams, oauthParams3)
			} else {
				r.OutputPrometheus.OauthParams[oauthParamsCount3].Name = oauthParams3.Name
				r.OutputPrometheus.OauthParams[oauthParamsCount3].Value = oauthParams3.Value
			}
		}
		if resp.OutputPrometheus.OnBackpressure != nil {
			r.OutputPrometheus.OnBackpressure = types.StringValue(string(*resp.OutputPrometheus.OnBackpressure))
		} else {
			r.OutputPrometheus.OnBackpressure = types.StringNull()
		}
		r.OutputPrometheus.Password = types.StringPointerValue(resp.OutputPrometheus.Password)
		r.OutputPrometheus.Pipeline = types.StringPointerValue(resp.OutputPrometheus.Pipeline)
		if resp.OutputPrometheus.PqCompress != nil {
			r.OutputPrometheus.PqCompress = types.StringValue(string(*resp.OutputPrometheus.PqCompress))
		} else {
			r.OutputPrometheus.PqCompress = types.StringNull()
		}
		if resp.OutputPrometheus.PqControls == nil {
			r.OutputPrometheus.PqControls = nil
		} else {
			r.OutputPrometheus.PqControls = &tfTypes.OutputPrometheusPqControls{}
		}
		r.OutputPrometheus.PqMaxFileSize = types.StringPointerValue(resp.OutputPrometheus.PqMaxFileSize)
		r.OutputPrometheus.PqMaxSize = types.StringPointerValue(resp.OutputPrometheus.PqMaxSize)
		if resp.OutputPrometheus.PqMode != nil {
			r.OutputPrometheus.PqMode = types.StringValue(string(*resp.OutputPrometheus.PqMode))
		} else {
			r.OutputPrometheus.PqMode = types.StringNull()
		}
		if resp.OutputPrometheus.PqOnBackpressure != nil {
			r.OutputPrometheus.PqOnBackpressure = types.StringValue(string(*resp.OutputPrometheus.PqOnBackpressure))
		} else {
			r.OutputPrometheus.PqOnBackpressure = types.StringNull()
		}
		r.OutputPrometheus.PqPath = types.StringPointerValue(resp.OutputPrometheus.PqPath)
		r.OutputPrometheus.RejectUnauthorized = types.BoolPointerValue(resp.OutputPrometheus.RejectUnauthorized)
		r.OutputPrometheus.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputPrometheus.ResponseHonorRetryAfterHeader)
		r.OutputPrometheus.ResponseRetrySettings = []tfTypes.OutputPrometheusResponseRetrySetting{}
		if len(r.OutputPrometheus.ResponseRetrySettings) > len(resp.OutputPrometheus.ResponseRetrySettings) {
			r.OutputPrometheus.ResponseRetrySettings = r.OutputPrometheus.ResponseRetrySettings[:len(resp.OutputPrometheus.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount21, responseRetrySettingsItem21 := range resp.OutputPrometheus.ResponseRetrySettings {
			var responseRetrySettings21 tfTypes.OutputPrometheusResponseRetrySetting
			responseRetrySettings21.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem21.BackoffRate)
			responseRetrySettings21.HTTPStatus = types.Float64Value(responseRetrySettingsItem21.HTTPStatus)
			responseRetrySettings21.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem21.InitialBackoff)
			responseRetrySettings21.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem21.MaxBackoff)
			if responseRetrySettingsCount21+1 > len(r.OutputPrometheus.ResponseRetrySettings) {
				r.OutputPrometheus.ResponseRetrySettings = append(r.OutputPrometheus.ResponseRetrySettings, responseRetrySettings21)
			} else {
				r.OutputPrometheus.ResponseRetrySettings[responseRetrySettingsCount21].BackoffRate = responseRetrySettings21.BackoffRate
				r.OutputPrometheus.ResponseRetrySettings[responseRetrySettingsCount21].HTTPStatus = responseRetrySettings21.HTTPStatus
				r.OutputPrometheus.ResponseRetrySettings[responseRetrySettingsCount21].InitialBackoff = responseRetrySettings21.InitialBackoff
				r.OutputPrometheus.ResponseRetrySettings[responseRetrySettingsCount21].MaxBackoff = responseRetrySettings21.MaxBackoff
			}
		}
		r.OutputPrometheus.SafeHeaders = make([]types.String, 0, len(resp.OutputPrometheus.SafeHeaders))
		for _, v := range resp.OutputPrometheus.SafeHeaders {
			r.OutputPrometheus.SafeHeaders = append(r.OutputPrometheus.SafeHeaders, types.StringValue(v))
		}
		r.OutputPrometheus.Secret = types.StringPointerValue(resp.OutputPrometheus.Secret)
		r.OutputPrometheus.SecretParamName = types.StringPointerValue(resp.OutputPrometheus.SecretParamName)
		r.OutputPrometheus.SendMetadata = types.BoolPointerValue(resp.OutputPrometheus.SendMetadata)
		r.OutputPrometheus.Streamtags = make([]types.String, 0, len(resp.OutputPrometheus.Streamtags))
		for _, v := range resp.OutputPrometheus.Streamtags {
			r.OutputPrometheus.Streamtags = append(r.OutputPrometheus.Streamtags, types.StringValue(v))
		}
		r.OutputPrometheus.SystemFields = make([]types.String, 0, len(resp.OutputPrometheus.SystemFields))
		for _, v := range resp.OutputPrometheus.SystemFields {
			r.OutputPrometheus.SystemFields = append(r.OutputPrometheus.SystemFields, types.StringValue(v))
		}
		r.OutputPrometheus.TextSecret = types.StringPointerValue(resp.OutputPrometheus.TextSecret)
		if resp.OutputPrometheus.TimeoutRetrySettings == nil {
			r.OutputPrometheus.TimeoutRetrySettings = nil
		} else {
			r.OutputPrometheus.TimeoutRetrySettings = &tfTypes.OutputPrometheusTimeoutRetrySettings{}
			r.OutputPrometheus.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputPrometheus.TimeoutRetrySettings.BackoffRate)
			r.OutputPrometheus.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputPrometheus.TimeoutRetrySettings.InitialBackoff)
			r.OutputPrometheus.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputPrometheus.TimeoutRetrySettings.MaxBackoff)
			r.OutputPrometheus.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputPrometheus.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputPrometheus.TimeoutSec = types.Float64PointerValue(resp.OutputPrometheus.TimeoutSec)
		r.OutputPrometheus.Token = types.StringPointerValue(resp.OutputPrometheus.Token)
		r.OutputPrometheus.TokenAttributeName = types.StringPointerValue(resp.OutputPrometheus.TokenAttributeName)
		r.OutputPrometheus.TokenTimeoutSecs = types.Float64PointerValue(resp.OutputPrometheus.TokenTimeoutSecs)
		r.OutputPrometheus.Type = types.StringValue(string(resp.OutputPrometheus.Type))
		r.OutputPrometheus.URL = types.StringValue(resp.OutputPrometheus.URL)
		r.OutputPrometheus.Username = types.StringPointerValue(resp.OutputPrometheus.Username)
		r.OutputPrometheus.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputPrometheus.UseRoundRobinDNS)
	}
	if resp.OutputRing != nil {
		r.OutputRing = &tfTypes.OutputRing{}
		if resp.OutputRing.Compress != nil {
			r.OutputRing.Compress = types.StringValue(string(*resp.OutputRing.Compress))
		} else {
			r.OutputRing.Compress = types.StringNull()
		}
		r.OutputRing.Description = types.StringPointerValue(resp.OutputRing.Description)
		r.OutputRing.DestPath = types.StringPointerValue(resp.OutputRing.DestPath)
		r.OutputRing.Environment = types.StringPointerValue(resp.OutputRing.Environment)
		if resp.OutputRing.Format != nil {
			r.OutputRing.Format = types.StringValue(string(*resp.OutputRing.Format))
		} else {
			r.OutputRing.Format = types.StringNull()
		}
		r.OutputRing.ID = types.StringValue(resp.OutputRing.ID)
		r.OutputRing.MaxDataSize = types.StringPointerValue(resp.OutputRing.MaxDataSize)
		r.OutputRing.MaxDataTime = types.StringPointerValue(resp.OutputRing.MaxDataTime)
		if resp.OutputRing.OnBackpressure != nil {
			r.OutputRing.OnBackpressure = types.StringValue(string(*resp.OutputRing.OnBackpressure))
		} else {
			r.OutputRing.OnBackpressure = types.StringNull()
		}
		r.OutputRing.PartitionExpr = types.StringPointerValue(resp.OutputRing.PartitionExpr)
		r.OutputRing.Pipeline = types.StringPointerValue(resp.OutputRing.Pipeline)
		r.OutputRing.Streamtags = make([]types.String, 0, len(resp.OutputRing.Streamtags))
		for _, v := range resp.OutputRing.Streamtags {
			r.OutputRing.Streamtags = append(r.OutputRing.Streamtags, types.StringValue(v))
		}
		r.OutputRing.SystemFields = make([]types.String, 0, len(resp.OutputRing.SystemFields))
		for _, v := range resp.OutputRing.SystemFields {
			r.OutputRing.SystemFields = append(r.OutputRing.SystemFields, types.StringValue(v))
		}
		r.OutputRing.Type = types.StringValue(string(resp.OutputRing.Type))
	}
	if resp.OutputRouter != nil {
		r.OutputRouter = &tfTypes.OutputRouter{}
		r.OutputRouter.Description = types.StringPointerValue(resp.OutputRouter.Description)
		r.OutputRouter.Environment = types.StringPointerValue(resp.OutputRouter.Environment)
		r.OutputRouter.ID = types.StringPointerValue(resp.OutputRouter.ID)
		r.OutputRouter.Pipeline = types.StringPointerValue(resp.OutputRouter.Pipeline)
		r.OutputRouter.Rules = []tfTypes.OutputRouterRule{}
		if len(r.OutputRouter.Rules) > len(resp.OutputRouter.Rules) {
			r.OutputRouter.Rules = r.OutputRouter.Rules[:len(resp.OutputRouter.Rules)]
		}
		for rulesCount, rulesItem := range resp.OutputRouter.Rules {
			var rules tfTypes.OutputRouterRule
			rules.Description = types.StringPointerValue(rulesItem.Description)
			rules.Filter = types.StringValue(rulesItem.Filter)
			rules.Final = types.BoolPointerValue(rulesItem.Final)
			rules.Output = types.StringValue(rulesItem.Output)
			if rulesCount+1 > len(r.OutputRouter.Rules) {
				r.OutputRouter.Rules = append(r.OutputRouter.Rules, rules)
			} else {
				r.OutputRouter.Rules[rulesCount].Description = rules.Description
				r.OutputRouter.Rules[rulesCount].Filter = rules.Filter
				r.OutputRouter.Rules[rulesCount].Final = rules.Final
				r.OutputRouter.Rules[rulesCount].Output = rules.Output
			}
		}
		r.OutputRouter.Streamtags = make([]types.String, 0, len(resp.OutputRouter.Streamtags))
		for _, v := range resp.OutputRouter.Streamtags {
			r.OutputRouter.Streamtags = append(r.OutputRouter.Streamtags, types.StringValue(v))
		}
		r.OutputRouter.SystemFields = make([]types.String, 0, len(resp.OutputRouter.SystemFields))
		for _, v := range resp.OutputRouter.SystemFields {
			r.OutputRouter.SystemFields = append(r.OutputRouter.SystemFields, types.StringValue(v))
		}
		r.OutputRouter.Type = types.StringValue(string(resp.OutputRouter.Type))
	}
	if resp.OutputS3 != nil {
		r.OutputS3 = &tfTypes.OutputS3{}
		r.OutputS3.AddIDToStagePath = types.BoolPointerValue(resp.OutputS3.AddIDToStagePath)
		r.OutputS3.AssumeRoleArn = types.StringPointerValue(resp.OutputS3.AssumeRoleArn)
		r.OutputS3.AssumeRoleExternalID = types.StringPointerValue(resp.OutputS3.AssumeRoleExternalID)
		r.OutputS3.AutomaticSchema = types.BoolPointerValue(resp.OutputS3.AutomaticSchema)
		r.OutputS3.AwsAPIKey = types.StringPointerValue(resp.OutputS3.AwsAPIKey)
		if resp.OutputS3.AwsAuthenticationMethod != nil {
			r.OutputS3.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputS3.AwsAuthenticationMethod))
		} else {
			r.OutputS3.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputS3.AwsSecret = types.StringPointerValue(resp.OutputS3.AwsSecret)
		r.OutputS3.AwsSecretKey = types.StringPointerValue(resp.OutputS3.AwsSecretKey)
		r.OutputS3.BaseFileName = types.StringPointerValue(resp.OutputS3.BaseFileName)
		r.OutputS3.Bucket = types.StringValue(resp.OutputS3.Bucket)
		if resp.OutputS3.Compress != nil {
			r.OutputS3.Compress = types.StringValue(string(*resp.OutputS3.Compress))
		} else {
			r.OutputS3.Compress = types.StringNull()
		}
		if resp.OutputS3.CompressionLevel != nil {
			r.OutputS3.CompressionLevel = types.StringValue(string(*resp.OutputS3.CompressionLevel))
		} else {
			r.OutputS3.CompressionLevel = types.StringNull()
		}
		r.OutputS3.DeadletterEnabled = types.BoolPointerValue(resp.OutputS3.DeadletterEnabled)
		r.OutputS3.DeadletterPath = types.StringPointerValue(resp.OutputS3.DeadletterPath)
		r.OutputS3.Description = types.StringPointerValue(resp.OutputS3.Description)
		r.OutputS3.DestPath = types.StringPointerValue(resp.OutputS3.DestPath)
		r.OutputS3.DurationSeconds = types.Float64PointerValue(resp.OutputS3.DurationSeconds)
		r.OutputS3.EmptyDirCleanupSec = types.Float64PointerValue(resp.OutputS3.EmptyDirCleanupSec)
		r.OutputS3.EnableAssumeRole = types.BoolPointerValue(resp.OutputS3.EnableAssumeRole)
		r.OutputS3.EnablePageChecksum = types.BoolPointerValue(resp.OutputS3.EnablePageChecksum)
		r.OutputS3.EnableStatistics = types.BoolPointerValue(resp.OutputS3.EnableStatistics)
		r.OutputS3.EnableWritePageIndex = types.BoolPointerValue(resp.OutputS3.EnableWritePageIndex)
		r.OutputS3.Endpoint = types.StringPointerValue(resp.OutputS3.Endpoint)
		r.OutputS3.Environment = types.StringPointerValue(resp.OutputS3.Environment)
		r.OutputS3.FileNameSuffix = types.StringPointerValue(resp.OutputS3.FileNameSuffix)
		if resp.OutputS3.Format != nil {
			r.OutputS3.Format = types.StringValue(string(*resp.OutputS3.Format))
		} else {
			r.OutputS3.Format = types.StringNull()
		}
		r.OutputS3.HeaderLine = types.StringPointerValue(resp.OutputS3.HeaderLine)
		r.OutputS3.ID = types.StringPointerValue(resp.OutputS3.ID)
		r.OutputS3.KeyValueMetadata = []tfTypes.OutputS3KeyValueMetadatum{}
		if len(r.OutputS3.KeyValueMetadata) > len(resp.OutputS3.KeyValueMetadata) {
			r.OutputS3.KeyValueMetadata = r.OutputS3.KeyValueMetadata[:len(resp.OutputS3.KeyValueMetadata)]
		}
		for keyValueMetadataCount5, keyValueMetadataItem5 := range resp.OutputS3.KeyValueMetadata {
			var keyValueMetadata5 tfTypes.OutputS3KeyValueMetadatum
			keyValueMetadata5.Key = types.StringPointerValue(keyValueMetadataItem5.Key)
			keyValueMetadata5.Value = types.StringValue(keyValueMetadataItem5.Value)
			if keyValueMetadataCount5+1 > len(r.OutputS3.KeyValueMetadata) {
				r.OutputS3.KeyValueMetadata = append(r.OutputS3.KeyValueMetadata, keyValueMetadata5)
			} else {
				r.OutputS3.KeyValueMetadata[keyValueMetadataCount5].Key = keyValueMetadata5.Key
				r.OutputS3.KeyValueMetadata[keyValueMetadataCount5].Value = keyValueMetadata5.Value
			}
		}
		r.OutputS3.KmsKeyID = types.StringPointerValue(resp.OutputS3.KmsKeyID)
		r.OutputS3.MaxClosingFilesToBackpressure = types.Float64PointerValue(resp.OutputS3.MaxClosingFilesToBackpressure)
		r.OutputS3.MaxConcurrentFileParts = types.Float64PointerValue(resp.OutputS3.MaxConcurrentFileParts)
		r.OutputS3.MaxFileIdleTimeSec = types.Float64PointerValue(resp.OutputS3.MaxFileIdleTimeSec)
		r.OutputS3.MaxFileOpenTimeSec = types.Float64PointerValue(resp.OutputS3.MaxFileOpenTimeSec)
		r.OutputS3.MaxFileSizeMB = types.Float64PointerValue(resp.OutputS3.MaxFileSizeMB)
		r.OutputS3.MaxOpenFiles = types.Float64PointerValue(resp.OutputS3.MaxOpenFiles)
		r.OutputS3.MaxRetryNum = types.Float64PointerValue(resp.OutputS3.MaxRetryNum)
		if resp.OutputS3.ObjectACL != nil {
			r.OutputS3.ObjectACL = types.StringValue(string(*resp.OutputS3.ObjectACL))
		} else {
			r.OutputS3.ObjectACL = types.StringNull()
		}
		if resp.OutputS3.OnBackpressure != nil {
			r.OutputS3.OnBackpressure = types.StringValue(string(*resp.OutputS3.OnBackpressure))
		} else {
			r.OutputS3.OnBackpressure = types.StringNull()
		}
		if resp.OutputS3.OnDiskFullBackpressure != nil {
			r.OutputS3.OnDiskFullBackpressure = types.StringValue(string(*resp.OutputS3.OnDiskFullBackpressure))
		} else {
			r.OutputS3.OnDiskFullBackpressure = types.StringNull()
		}
		if resp.OutputS3.ParquetDataPageVersion != nil {
			r.OutputS3.ParquetDataPageVersion = types.StringValue(string(*resp.OutputS3.ParquetDataPageVersion))
		} else {
			r.OutputS3.ParquetDataPageVersion = types.StringNull()
		}
		r.OutputS3.ParquetPageSize = types.StringPointerValue(resp.OutputS3.ParquetPageSize)
		r.OutputS3.ParquetRowGroupLength = types.Float64PointerValue(resp.OutputS3.ParquetRowGroupLength)
		if resp.OutputS3.ParquetVersion != nil {
			r.OutputS3.ParquetVersion = types.StringValue(string(*resp.OutputS3.ParquetVersion))
		} else {
			r.OutputS3.ParquetVersion = types.StringNull()
		}
		r.OutputS3.PartitionExpr = types.StringPointerValue(resp.OutputS3.PartitionExpr)
		r.OutputS3.Pipeline = types.StringPointerValue(resp.OutputS3.Pipeline)
		r.OutputS3.Region = types.StringPointerValue(resp.OutputS3.Region)
		r.OutputS3.RejectUnauthorized = types.BoolPointerValue(resp.OutputS3.RejectUnauthorized)
		r.OutputS3.RemoveEmptyDirs = types.BoolPointerValue(resp.OutputS3.RemoveEmptyDirs)
		r.OutputS3.ReuseConnections = types.BoolPointerValue(resp.OutputS3.ReuseConnections)
		if resp.OutputS3.ServerSideEncryption != nil {
			r.OutputS3.ServerSideEncryption = types.StringValue(string(*resp.OutputS3.ServerSideEncryption))
		} else {
			r.OutputS3.ServerSideEncryption = types.StringNull()
		}
		r.OutputS3.ShouldLogInvalidRows = types.BoolPointerValue(resp.OutputS3.ShouldLogInvalidRows)
		if resp.OutputS3.SignatureVersion != nil {
			r.OutputS3.SignatureVersion = types.StringValue(string(*resp.OutputS3.SignatureVersion))
		} else {
			r.OutputS3.SignatureVersion = types.StringNull()
		}
		r.OutputS3.StagePath = types.StringPointerValue(resp.OutputS3.StagePath)
		if resp.OutputS3.StorageClass != nil {
			r.OutputS3.StorageClass = types.StringValue(string(*resp.OutputS3.StorageClass))
		} else {
			r.OutputS3.StorageClass = types.StringNull()
		}
		r.OutputS3.Streamtags = make([]types.String, 0, len(resp.OutputS3.Streamtags))
		for _, v := range resp.OutputS3.Streamtags {
			r.OutputS3.Streamtags = append(r.OutputS3.Streamtags, types.StringValue(v))
		}
		r.OutputS3.SystemFields = make([]types.String, 0, len(resp.OutputS3.SystemFields))
		for _, v := range resp.OutputS3.SystemFields {
			r.OutputS3.SystemFields = append(r.OutputS3.SystemFields, types.StringValue(v))
		}
		if resp.OutputS3.Type != nil {
			r.OutputS3.Type = types.StringValue(string(*resp.OutputS3.Type))
		} else {
			r.OutputS3.Type = types.StringNull()
		}
		r.OutputS3.VerifyPermissions = types.BoolPointerValue(resp.OutputS3.VerifyPermissions)
		r.OutputS3.WriteHighWaterMark = types.Float64PointerValue(resp.OutputS3.WriteHighWaterMark)
	}
	if resp.OutputSecurityLake != nil {
		r.OutputSecurityLake = &tfTypes.OutputSecurityLake{}
		r.OutputSecurityLake.AccountID = types.StringValue(resp.OutputSecurityLake.AccountID)
		r.OutputSecurityLake.AddIDToStagePath = types.BoolPointerValue(resp.OutputSecurityLake.AddIDToStagePath)
		r.OutputSecurityLake.AssumeRoleArn = types.StringValue(resp.OutputSecurityLake.AssumeRoleArn)
		r.OutputSecurityLake.AssumeRoleExternalID = types.StringPointerValue(resp.OutputSecurityLake.AssumeRoleExternalID)
		r.OutputSecurityLake.AutomaticSchema = types.BoolPointerValue(resp.OutputSecurityLake.AutomaticSchema)
		r.OutputSecurityLake.AwsAPIKey = types.StringPointerValue(resp.OutputSecurityLake.AwsAPIKey)
		if resp.OutputSecurityLake.AwsAuthenticationMethod != nil {
			r.OutputSecurityLake.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputSecurityLake.AwsAuthenticationMethod))
		} else {
			r.OutputSecurityLake.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputSecurityLake.AwsSecret = types.StringPointerValue(resp.OutputSecurityLake.AwsSecret)
		r.OutputSecurityLake.AwsSecretKey = types.StringPointerValue(resp.OutputSecurityLake.AwsSecretKey)
		r.OutputSecurityLake.BaseFileName = types.StringPointerValue(resp.OutputSecurityLake.BaseFileName)
		r.OutputSecurityLake.Bucket = types.StringValue(resp.OutputSecurityLake.Bucket)
		r.OutputSecurityLake.CustomSource = types.StringValue(resp.OutputSecurityLake.CustomSource)
		r.OutputSecurityLake.DeadletterEnabled = types.BoolPointerValue(resp.OutputSecurityLake.DeadletterEnabled)
		r.OutputSecurityLake.DeadletterPath = types.StringPointerValue(resp.OutputSecurityLake.DeadletterPath)
		r.OutputSecurityLake.Description = types.StringPointerValue(resp.OutputSecurityLake.Description)
		r.OutputSecurityLake.DurationSeconds = types.Float64PointerValue(resp.OutputSecurityLake.DurationSeconds)
		r.OutputSecurityLake.EmptyDirCleanupSec = types.Float64PointerValue(resp.OutputSecurityLake.EmptyDirCleanupSec)
		r.OutputSecurityLake.EnableAssumeRole = types.BoolPointerValue(resp.OutputSecurityLake.EnableAssumeRole)
		r.OutputSecurityLake.EnablePageChecksum = types.BoolPointerValue(resp.OutputSecurityLake.EnablePageChecksum)
		r.OutputSecurityLake.EnableStatistics = types.BoolPointerValue(resp.OutputSecurityLake.EnableStatistics)
		r.OutputSecurityLake.EnableWritePageIndex = types.BoolPointerValue(resp.OutputSecurityLake.EnableWritePageIndex)
		r.OutputSecurityLake.Endpoint = types.StringPointerValue(resp.OutputSecurityLake.Endpoint)
		r.OutputSecurityLake.Environment = types.StringPointerValue(resp.OutputSecurityLake.Environment)
		r.OutputSecurityLake.HeaderLine = types.StringPointerValue(resp.OutputSecurityLake.HeaderLine)
		r.OutputSecurityLake.ID = types.StringPointerValue(resp.OutputSecurityLake.ID)
		r.OutputSecurityLake.KeyValueMetadata = []tfTypes.OutputSecurityLakeKeyValueMetadatum{}
		if len(r.OutputSecurityLake.KeyValueMetadata) > len(resp.OutputSecurityLake.KeyValueMetadata) {
			r.OutputSecurityLake.KeyValueMetadata = r.OutputSecurityLake.KeyValueMetadata[:len(resp.OutputSecurityLake.KeyValueMetadata)]
		}
		for keyValueMetadataCount6, keyValueMetadataItem6 := range resp.OutputSecurityLake.KeyValueMetadata {
			var keyValueMetadata6 tfTypes.OutputSecurityLakeKeyValueMetadatum
			keyValueMetadata6.Key = types.StringPointerValue(keyValueMetadataItem6.Key)
			keyValueMetadata6.Value = types.StringValue(keyValueMetadataItem6.Value)
			if keyValueMetadataCount6+1 > len(r.OutputSecurityLake.KeyValueMetadata) {
				r.OutputSecurityLake.KeyValueMetadata = append(r.OutputSecurityLake.KeyValueMetadata, keyValueMetadata6)
			} else {
				r.OutputSecurityLake.KeyValueMetadata[keyValueMetadataCount6].Key = keyValueMetadata6.Key
				r.OutputSecurityLake.KeyValueMetadata[keyValueMetadataCount6].Value = keyValueMetadata6.Value
			}
		}
		r.OutputSecurityLake.KmsKeyID = types.StringPointerValue(resp.OutputSecurityLake.KmsKeyID)
		r.OutputSecurityLake.MaxClosingFilesToBackpressure = types.Float64PointerValue(resp.OutputSecurityLake.MaxClosingFilesToBackpressure)
		r.OutputSecurityLake.MaxConcurrentFileParts = types.Float64PointerValue(resp.OutputSecurityLake.MaxConcurrentFileParts)
		r.OutputSecurityLake.MaxFileIdleTimeSec = types.Float64PointerValue(resp.OutputSecurityLake.MaxFileIdleTimeSec)
		r.OutputSecurityLake.MaxFileOpenTimeSec = types.Float64PointerValue(resp.OutputSecurityLake.MaxFileOpenTimeSec)
		r.OutputSecurityLake.MaxFileSizeMB = types.Float64PointerValue(resp.OutputSecurityLake.MaxFileSizeMB)
		r.OutputSecurityLake.MaxOpenFiles = types.Float64PointerValue(resp.OutputSecurityLake.MaxOpenFiles)
		r.OutputSecurityLake.MaxRetryNum = types.Float64PointerValue(resp.OutputSecurityLake.MaxRetryNum)
		if resp.OutputSecurityLake.ObjectACL != nil {
			r.OutputSecurityLake.ObjectACL = types.StringValue(string(*resp.OutputSecurityLake.ObjectACL))
		} else {
			r.OutputSecurityLake.ObjectACL = types.StringNull()
		}
		if resp.OutputSecurityLake.OnBackpressure != nil {
			r.OutputSecurityLake.OnBackpressure = types.StringValue(string(*resp.OutputSecurityLake.OnBackpressure))
		} else {
			r.OutputSecurityLake.OnBackpressure = types.StringNull()
		}
		if resp.OutputSecurityLake.OnDiskFullBackpressure != nil {
			r.OutputSecurityLake.OnDiskFullBackpressure = types.StringValue(string(*resp.OutputSecurityLake.OnDiskFullBackpressure))
		} else {
			r.OutputSecurityLake.OnDiskFullBackpressure = types.StringNull()
		}
		if resp.OutputSecurityLake.ParquetDataPageVersion != nil {
			r.OutputSecurityLake.ParquetDataPageVersion = types.StringValue(string(*resp.OutputSecurityLake.ParquetDataPageVersion))
		} else {
			r.OutputSecurityLake.ParquetDataPageVersion = types.StringNull()
		}
		r.OutputSecurityLake.ParquetPageSize = types.StringPointerValue(resp.OutputSecurityLake.ParquetPageSize)
		r.OutputSecurityLake.ParquetRowGroupLength = types.Float64PointerValue(resp.OutputSecurityLake.ParquetRowGroupLength)
		r.OutputSecurityLake.ParquetSchema = types.StringPointerValue(resp.OutputSecurityLake.ParquetSchema)
		if resp.OutputSecurityLake.ParquetVersion != nil {
			r.OutputSecurityLake.ParquetVersion = types.StringValue(string(*resp.OutputSecurityLake.ParquetVersion))
		} else {
			r.OutputSecurityLake.ParquetVersion = types.StringNull()
		}
		r.OutputSecurityLake.Pipeline = types.StringPointerValue(resp.OutputSecurityLake.Pipeline)
		r.OutputSecurityLake.Region = types.StringValue(resp.OutputSecurityLake.Region)
		r.OutputSecurityLake.RejectUnauthorized = types.BoolPointerValue(resp.OutputSecurityLake.RejectUnauthorized)
		r.OutputSecurityLake.RemoveEmptyDirs = types.BoolPointerValue(resp.OutputSecurityLake.RemoveEmptyDirs)
		r.OutputSecurityLake.ReuseConnections = types.BoolPointerValue(resp.OutputSecurityLake.ReuseConnections)
		if resp.OutputSecurityLake.ServerSideEncryption != nil {
			r.OutputSecurityLake.ServerSideEncryption = types.StringValue(string(*resp.OutputSecurityLake.ServerSideEncryption))
		} else {
			r.OutputSecurityLake.ServerSideEncryption = types.StringNull()
		}
		r.OutputSecurityLake.ShouldLogInvalidRows = types.BoolPointerValue(resp.OutputSecurityLake.ShouldLogInvalidRows)
		if resp.OutputSecurityLake.SignatureVersion != nil {
			r.OutputSecurityLake.SignatureVersion = types.StringValue(string(*resp.OutputSecurityLake.SignatureVersion))
		} else {
			r.OutputSecurityLake.SignatureVersion = types.StringNull()
		}
		r.OutputSecurityLake.StagePath = types.StringPointerValue(resp.OutputSecurityLake.StagePath)
		if resp.OutputSecurityLake.StorageClass != nil {
			r.OutputSecurityLake.StorageClass = types.StringValue(string(*resp.OutputSecurityLake.StorageClass))
		} else {
			r.OutputSecurityLake.StorageClass = types.StringNull()
		}
		r.OutputSecurityLake.Streamtags = make([]types.String, 0, len(resp.OutputSecurityLake.Streamtags))
		for _, v := range resp.OutputSecurityLake.Streamtags {
			r.OutputSecurityLake.Streamtags = append(r.OutputSecurityLake.Streamtags, types.StringValue(v))
		}
		r.OutputSecurityLake.SystemFields = make([]types.String, 0, len(resp.OutputSecurityLake.SystemFields))
		for _, v := range resp.OutputSecurityLake.SystemFields {
			r.OutputSecurityLake.SystemFields = append(r.OutputSecurityLake.SystemFields, types.StringValue(v))
		}
		if resp.OutputSecurityLake.Type != nil {
			r.OutputSecurityLake.Type = types.StringValue(string(*resp.OutputSecurityLake.Type))
		} else {
			r.OutputSecurityLake.Type = types.StringNull()
		}
		r.OutputSecurityLake.VerifyPermissions = types.BoolPointerValue(resp.OutputSecurityLake.VerifyPermissions)
		r.OutputSecurityLake.WriteHighWaterMark = types.Float64PointerValue(resp.OutputSecurityLake.WriteHighWaterMark)
	}
	if resp.OutputSentinel != nil {
		r.OutputSentinel = &tfTypes.OutputSentinel{}
		r.OutputSentinel.AdvancedContentType = types.StringPointerValue(resp.OutputSentinel.AdvancedContentType)
		if resp.OutputSentinel.AuthType != nil {
			r.OutputSentinel.AuthType = types.StringValue(string(*resp.OutputSentinel.AuthType))
		} else {
			r.OutputSentinel.AuthType = types.StringNull()
		}
		r.OutputSentinel.ClientID = types.StringValue(resp.OutputSentinel.ClientID)
		r.OutputSentinel.Compress = types.BoolPointerValue(resp.OutputSentinel.Compress)
		r.OutputSentinel.Concurrency = types.Float64PointerValue(resp.OutputSentinel.Concurrency)
		r.OutputSentinel.CustomContentType = types.StringPointerValue(resp.OutputSentinel.CustomContentType)
		r.OutputSentinel.CustomDropWhenNull = types.BoolPointerValue(resp.OutputSentinel.CustomDropWhenNull)
		r.OutputSentinel.CustomEventDelimiter = types.StringPointerValue(resp.OutputSentinel.CustomEventDelimiter)
		r.OutputSentinel.CustomPayloadExpression = types.StringPointerValue(resp.OutputSentinel.CustomPayloadExpression)
		r.OutputSentinel.CustomSourceExpression = types.StringPointerValue(resp.OutputSentinel.CustomSourceExpression)
		r.OutputSentinel.DceEndpoint = types.StringPointerValue(resp.OutputSentinel.DceEndpoint)
		r.OutputSentinel.DcrID = types.StringPointerValue(resp.OutputSentinel.DcrID)
		r.OutputSentinel.Description = types.StringPointerValue(resp.OutputSentinel.Description)
		if resp.OutputSentinel.EndpointURLConfiguration != nil {
			r.OutputSentinel.EndpointURLConfiguration = types.StringValue(string(*resp.OutputSentinel.EndpointURLConfiguration))
		} else {
			r.OutputSentinel.EndpointURLConfiguration = types.StringNull()
		}
		r.OutputSentinel.Environment = types.StringPointerValue(resp.OutputSentinel.Environment)
		r.OutputSentinel.ExtraHTTPHeaders = []tfTypes.OutputSentinelExtraHTTPHeader{}
		if len(r.OutputSentinel.ExtraHTTPHeaders) > len(resp.OutputSentinel.ExtraHTTPHeaders) {
			r.OutputSentinel.ExtraHTTPHeaders = r.OutputSentinel.ExtraHTTPHeaders[:len(resp.OutputSentinel.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount21, extraHTTPHeadersItem21 := range resp.OutputSentinel.ExtraHTTPHeaders {
			var extraHTTPHeaders21 tfTypes.OutputSentinelExtraHTTPHeader
			extraHTTPHeaders21.Name = types.StringPointerValue(extraHTTPHeadersItem21.Name)
			extraHTTPHeaders21.Value = types.StringValue(extraHTTPHeadersItem21.Value)
			if extraHTTPHeadersCount21+1 > len(r.OutputSentinel.ExtraHTTPHeaders) {
				r.OutputSentinel.ExtraHTTPHeaders = append(r.OutputSentinel.ExtraHTTPHeaders, extraHTTPHeaders21)
			} else {
				r.OutputSentinel.ExtraHTTPHeaders[extraHTTPHeadersCount21].Name = extraHTTPHeaders21.Name
				r.OutputSentinel.ExtraHTTPHeaders[extraHTTPHeadersCount21].Value = extraHTTPHeaders21.Value
			}
		}
		if resp.OutputSentinel.FailedRequestLoggingMode != nil {
			r.OutputSentinel.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputSentinel.FailedRequestLoggingMode))
		} else {
			r.OutputSentinel.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputSentinel.FlushPeriodSec = types.Float64PointerValue(resp.OutputSentinel.FlushPeriodSec)
		if resp.OutputSentinel.Format != nil {
			r.OutputSentinel.Format = types.StringValue(string(*resp.OutputSentinel.Format))
		} else {
			r.OutputSentinel.Format = types.StringNull()
		}
		r.OutputSentinel.FormatEventCode = types.StringPointerValue(resp.OutputSentinel.FormatEventCode)
		r.OutputSentinel.FormatPayloadCode = types.StringPointerValue(resp.OutputSentinel.FormatPayloadCode)
		r.OutputSentinel.ID = types.StringPointerValue(resp.OutputSentinel.ID)
		r.OutputSentinel.KeepAlive = types.BoolPointerValue(resp.OutputSentinel.KeepAlive)
		r.OutputSentinel.LoginURL = types.StringValue(resp.OutputSentinel.LoginURL)
		r.OutputSentinel.MaxPayloadEvents = types.Float64PointerValue(resp.OutputSentinel.MaxPayloadEvents)
		r.OutputSentinel.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputSentinel.MaxPayloadSizeKB)
		if resp.OutputSentinel.OnBackpressure != nil {
			r.OutputSentinel.OnBackpressure = types.StringValue(string(*resp.OutputSentinel.OnBackpressure))
		} else {
			r.OutputSentinel.OnBackpressure = types.StringNull()
		}
		r.OutputSentinel.Pipeline = types.StringPointerValue(resp.OutputSentinel.Pipeline)
		if resp.OutputSentinel.PqCompress != nil {
			r.OutputSentinel.PqCompress = types.StringValue(string(*resp.OutputSentinel.PqCompress))
		} else {
			r.OutputSentinel.PqCompress = types.StringNull()
		}
		if resp.OutputSentinel.PqControls == nil {
			r.OutputSentinel.PqControls = nil
		} else {
			r.OutputSentinel.PqControls = &tfTypes.OutputSentinelPqControls{}
		}
		r.OutputSentinel.PqMaxFileSize = types.StringPointerValue(resp.OutputSentinel.PqMaxFileSize)
		r.OutputSentinel.PqMaxSize = types.StringPointerValue(resp.OutputSentinel.PqMaxSize)
		if resp.OutputSentinel.PqMode != nil {
			r.OutputSentinel.PqMode = types.StringValue(string(*resp.OutputSentinel.PqMode))
		} else {
			r.OutputSentinel.PqMode = types.StringNull()
		}
		if resp.OutputSentinel.PqOnBackpressure != nil {
			r.OutputSentinel.PqOnBackpressure = types.StringValue(string(*resp.OutputSentinel.PqOnBackpressure))
		} else {
			r.OutputSentinel.PqOnBackpressure = types.StringNull()
		}
		r.OutputSentinel.PqPath = types.StringPointerValue(resp.OutputSentinel.PqPath)
		r.OutputSentinel.RejectUnauthorized = types.BoolPointerValue(resp.OutputSentinel.RejectUnauthorized)
		r.OutputSentinel.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputSentinel.ResponseHonorRetryAfterHeader)
		r.OutputSentinel.ResponseRetrySettings = []tfTypes.OutputSentinelResponseRetrySetting{}
		if len(r.OutputSentinel.ResponseRetrySettings) > len(resp.OutputSentinel.ResponseRetrySettings) {
			r.OutputSentinel.ResponseRetrySettings = r.OutputSentinel.ResponseRetrySettings[:len(resp.OutputSentinel.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount22, responseRetrySettingsItem22 := range resp.OutputSentinel.ResponseRetrySettings {
			var responseRetrySettings22 tfTypes.OutputSentinelResponseRetrySetting
			responseRetrySettings22.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem22.BackoffRate)
			responseRetrySettings22.HTTPStatus = types.Float64Value(responseRetrySettingsItem22.HTTPStatus)
			responseRetrySettings22.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem22.InitialBackoff)
			responseRetrySettings22.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem22.MaxBackoff)
			if responseRetrySettingsCount22+1 > len(r.OutputSentinel.ResponseRetrySettings) {
				r.OutputSentinel.ResponseRetrySettings = append(r.OutputSentinel.ResponseRetrySettings, responseRetrySettings22)
			} else {
				r.OutputSentinel.ResponseRetrySettings[responseRetrySettingsCount22].BackoffRate = responseRetrySettings22.BackoffRate
				r.OutputSentinel.ResponseRetrySettings[responseRetrySettingsCount22].HTTPStatus = responseRetrySettings22.HTTPStatus
				r.OutputSentinel.ResponseRetrySettings[responseRetrySettingsCount22].InitialBackoff = responseRetrySettings22.InitialBackoff
				r.OutputSentinel.ResponseRetrySettings[responseRetrySettingsCount22].MaxBackoff = responseRetrySettings22.MaxBackoff
			}
		}
		r.OutputSentinel.SafeHeaders = make([]types.String, 0, len(resp.OutputSentinel.SafeHeaders))
		for _, v := range resp.OutputSentinel.SafeHeaders {
			r.OutputSentinel.SafeHeaders = append(r.OutputSentinel.SafeHeaders, types.StringValue(v))
		}
		r.OutputSentinel.Scope = types.StringPointerValue(resp.OutputSentinel.Scope)
		r.OutputSentinel.Secret = types.StringValue(resp.OutputSentinel.Secret)
		r.OutputSentinel.StreamName = types.StringPointerValue(resp.OutputSentinel.StreamName)
		r.OutputSentinel.Streamtags = make([]types.String, 0, len(resp.OutputSentinel.Streamtags))
		for _, v := range resp.OutputSentinel.Streamtags {
			r.OutputSentinel.Streamtags = append(r.OutputSentinel.Streamtags, types.StringValue(v))
		}
		r.OutputSentinel.SystemFields = make([]types.String, 0, len(resp.OutputSentinel.SystemFields))
		for _, v := range resp.OutputSentinel.SystemFields {
			r.OutputSentinel.SystemFields = append(r.OutputSentinel.SystemFields, types.StringValue(v))
		}
		if resp.OutputSentinel.TimeoutRetrySettings == nil {
			r.OutputSentinel.TimeoutRetrySettings = nil
		} else {
			r.OutputSentinel.TimeoutRetrySettings = &tfTypes.OutputSentinelTimeoutRetrySettings{}
			r.OutputSentinel.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputSentinel.TimeoutRetrySettings.BackoffRate)
			r.OutputSentinel.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputSentinel.TimeoutRetrySettings.InitialBackoff)
			r.OutputSentinel.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputSentinel.TimeoutRetrySettings.MaxBackoff)
			r.OutputSentinel.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputSentinel.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputSentinel.TimeoutSec = types.Float64PointerValue(resp.OutputSentinel.TimeoutSec)
		r.OutputSentinel.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputSentinel.TotalMemoryLimitKB)
		if resp.OutputSentinel.Type != nil {
			r.OutputSentinel.Type = types.StringValue(string(*resp.OutputSentinel.Type))
		} else {
			r.OutputSentinel.Type = types.StringNull()
		}
		r.OutputSentinel.URL = types.StringPointerValue(resp.OutputSentinel.URL)
		r.OutputSentinel.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputSentinel.UseRoundRobinDNS)
	}
	if resp.OutputServiceNow != nil {
		r.OutputServiceNow = &tfTypes.OutputServiceNow{}
		r.OutputServiceNow.AuthTokenName = types.StringPointerValue(resp.OutputServiceNow.AuthTokenName)
		if resp.OutputServiceNow.Compress != nil {
			r.OutputServiceNow.Compress = types.StringValue(string(*resp.OutputServiceNow.Compress))
		} else {
			r.OutputServiceNow.Compress = types.StringNull()
		}
		r.OutputServiceNow.Concurrency = types.Float64PointerValue(resp.OutputServiceNow.Concurrency)
		r.OutputServiceNow.ConnectionTimeout = types.Float64PointerValue(resp.OutputServiceNow.ConnectionTimeout)
		r.OutputServiceNow.Description = types.StringPointerValue(resp.OutputServiceNow.Description)
		r.OutputServiceNow.Endpoint = types.StringPointerValue(resp.OutputServiceNow.Endpoint)
		r.OutputServiceNow.Environment = types.StringPointerValue(resp.OutputServiceNow.Environment)
		r.OutputServiceNow.ExtraHTTPHeaders = []tfTypes.OutputServiceNowExtraHTTPHeader{}
		if len(r.OutputServiceNow.ExtraHTTPHeaders) > len(resp.OutputServiceNow.ExtraHTTPHeaders) {
			r.OutputServiceNow.ExtraHTTPHeaders = r.OutputServiceNow.ExtraHTTPHeaders[:len(resp.OutputServiceNow.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount22, extraHTTPHeadersItem22 := range resp.OutputServiceNow.ExtraHTTPHeaders {
			var extraHTTPHeaders22 tfTypes.OutputServiceNowExtraHTTPHeader
			extraHTTPHeaders22.Name = types.StringPointerValue(extraHTTPHeadersItem22.Name)
			extraHTTPHeaders22.Value = types.StringValue(extraHTTPHeadersItem22.Value)
			if extraHTTPHeadersCount22+1 > len(r.OutputServiceNow.ExtraHTTPHeaders) {
				r.OutputServiceNow.ExtraHTTPHeaders = append(r.OutputServiceNow.ExtraHTTPHeaders, extraHTTPHeaders22)
			} else {
				r.OutputServiceNow.ExtraHTTPHeaders[extraHTTPHeadersCount22].Name = extraHTTPHeaders22.Name
				r.OutputServiceNow.ExtraHTTPHeaders[extraHTTPHeadersCount22].Value = extraHTTPHeaders22.Value
			}
		}
		if resp.OutputServiceNow.FailedRequestLoggingMode != nil {
			r.OutputServiceNow.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputServiceNow.FailedRequestLoggingMode))
		} else {
			r.OutputServiceNow.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputServiceNow.FlushPeriodSec = types.Float64PointerValue(resp.OutputServiceNow.FlushPeriodSec)
		if resp.OutputServiceNow.HTTPCompress != nil {
			r.OutputServiceNow.HTTPCompress = types.StringValue(string(*resp.OutputServiceNow.HTTPCompress))
		} else {
			r.OutputServiceNow.HTTPCompress = types.StringNull()
		}
		r.OutputServiceNow.HTTPLogsEndpointOverride = types.StringPointerValue(resp.OutputServiceNow.HTTPLogsEndpointOverride)
		r.OutputServiceNow.HTTPMetricsEndpointOverride = types.StringPointerValue(resp.OutputServiceNow.HTTPMetricsEndpointOverride)
		r.OutputServiceNow.HTTPTracesEndpointOverride = types.StringPointerValue(resp.OutputServiceNow.HTTPTracesEndpointOverride)
		r.OutputServiceNow.ID = types.StringPointerValue(resp.OutputServiceNow.ID)
		r.OutputServiceNow.KeepAlive = types.BoolPointerValue(resp.OutputServiceNow.KeepAlive)
		r.OutputServiceNow.KeepAliveTime = types.Float64PointerValue(resp.OutputServiceNow.KeepAliveTime)
		r.OutputServiceNow.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputServiceNow.MaxPayloadSizeKB)
		r.OutputServiceNow.Metadata = []tfTypes.OutputServiceNowMetadatum{}
		if len(r.OutputServiceNow.Metadata) > len(resp.OutputServiceNow.Metadata) {
			r.OutputServiceNow.Metadata = r.OutputServiceNow.Metadata[:len(resp.OutputServiceNow.Metadata)]
		}
		for metadataCount3, metadataItem3 := range resp.OutputServiceNow.Metadata {
			var metadata3 tfTypes.OutputServiceNowMetadatum
			metadata3.Key = types.StringPointerValue(metadataItem3.Key)
			metadata3.Value = types.StringValue(metadataItem3.Value)
			if metadataCount3+1 > len(r.OutputServiceNow.Metadata) {
				r.OutputServiceNow.Metadata = append(r.OutputServiceNow.Metadata, metadata3)
			} else {
				r.OutputServiceNow.Metadata[metadataCount3].Key = metadata3.Key
				r.OutputServiceNow.Metadata[metadataCount3].Value = metadata3.Value
			}
		}
		if resp.OutputServiceNow.OnBackpressure != nil {
			r.OutputServiceNow.OnBackpressure = types.StringValue(string(*resp.OutputServiceNow.OnBackpressure))
		} else {
			r.OutputServiceNow.OnBackpressure = types.StringNull()
		}
		if resp.OutputServiceNow.OtlpVersion != nil {
			r.OutputServiceNow.OtlpVersion = types.StringValue(string(*resp.OutputServiceNow.OtlpVersion))
		} else {
			r.OutputServiceNow.OtlpVersion = types.StringNull()
		}
		r.OutputServiceNow.Pipeline = types.StringPointerValue(resp.OutputServiceNow.Pipeline)
		if resp.OutputServiceNow.PqCompress != nil {
			r.OutputServiceNow.PqCompress = types.StringValue(string(*resp.OutputServiceNow.PqCompress))
		} else {
			r.OutputServiceNow.PqCompress = types.StringNull()
		}
		if resp.OutputServiceNow.PqControls == nil {
			r.OutputServiceNow.PqControls = nil
		} else {
			r.OutputServiceNow.PqControls = &tfTypes.OutputServiceNowPqControls{}
		}
		r.OutputServiceNow.PqMaxFileSize = types.StringPointerValue(resp.OutputServiceNow.PqMaxFileSize)
		r.OutputServiceNow.PqMaxSize = types.StringPointerValue(resp.OutputServiceNow.PqMaxSize)
		if resp.OutputServiceNow.PqMode != nil {
			r.OutputServiceNow.PqMode = types.StringValue(string(*resp.OutputServiceNow.PqMode))
		} else {
			r.OutputServiceNow.PqMode = types.StringNull()
		}
		if resp.OutputServiceNow.PqOnBackpressure != nil {
			r.OutputServiceNow.PqOnBackpressure = types.StringValue(string(*resp.OutputServiceNow.PqOnBackpressure))
		} else {
			r.OutputServiceNow.PqOnBackpressure = types.StringNull()
		}
		r.OutputServiceNow.PqPath = types.StringPointerValue(resp.OutputServiceNow.PqPath)
		if resp.OutputServiceNow.Protocol != nil {
			r.OutputServiceNow.Protocol = types.StringValue(string(*resp.OutputServiceNow.Protocol))
		} else {
			r.OutputServiceNow.Protocol = types.StringNull()
		}
		r.OutputServiceNow.RejectUnauthorized = types.BoolPointerValue(resp.OutputServiceNow.RejectUnauthorized)
		r.OutputServiceNow.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputServiceNow.ResponseHonorRetryAfterHeader)
		r.OutputServiceNow.ResponseRetrySettings = []tfTypes.OutputServiceNowResponseRetrySetting{}
		if len(r.OutputServiceNow.ResponseRetrySettings) > len(resp.OutputServiceNow.ResponseRetrySettings) {
			r.OutputServiceNow.ResponseRetrySettings = r.OutputServiceNow.ResponseRetrySettings[:len(resp.OutputServiceNow.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount23, responseRetrySettingsItem23 := range resp.OutputServiceNow.ResponseRetrySettings {
			var responseRetrySettings23 tfTypes.OutputServiceNowResponseRetrySetting
			responseRetrySettings23.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem23.BackoffRate)
			responseRetrySettings23.HTTPStatus = types.Float64Value(responseRetrySettingsItem23.HTTPStatus)
			responseRetrySettings23.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem23.InitialBackoff)
			responseRetrySettings23.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem23.MaxBackoff)
			if responseRetrySettingsCount23+1 > len(r.OutputServiceNow.ResponseRetrySettings) {
				r.OutputServiceNow.ResponseRetrySettings = append(r.OutputServiceNow.ResponseRetrySettings, responseRetrySettings23)
			} else {
				r.OutputServiceNow.ResponseRetrySettings[responseRetrySettingsCount23].BackoffRate = responseRetrySettings23.BackoffRate
				r.OutputServiceNow.ResponseRetrySettings[responseRetrySettingsCount23].HTTPStatus = responseRetrySettings23.HTTPStatus
				r.OutputServiceNow.ResponseRetrySettings[responseRetrySettingsCount23].InitialBackoff = responseRetrySettings23.InitialBackoff
				r.OutputServiceNow.ResponseRetrySettings[responseRetrySettingsCount23].MaxBackoff = responseRetrySettings23.MaxBackoff
			}
		}
		r.OutputServiceNow.SafeHeaders = make([]types.String, 0, len(resp.OutputServiceNow.SafeHeaders))
		for _, v := range resp.OutputServiceNow.SafeHeaders {
			r.OutputServiceNow.SafeHeaders = append(r.OutputServiceNow.SafeHeaders, types.StringValue(v))
		}
		r.OutputServiceNow.Streamtags = make([]types.String, 0, len(resp.OutputServiceNow.Streamtags))
		for _, v := range resp.OutputServiceNow.Streamtags {
			r.OutputServiceNow.Streamtags = append(r.OutputServiceNow.Streamtags, types.StringValue(v))
		}
		r.OutputServiceNow.SystemFields = make([]types.String, 0, len(resp.OutputServiceNow.SystemFields))
		for _, v := range resp.OutputServiceNow.SystemFields {
			r.OutputServiceNow.SystemFields = append(r.OutputServiceNow.SystemFields, types.StringValue(v))
		}
		if resp.OutputServiceNow.TimeoutRetrySettings == nil {
			r.OutputServiceNow.TimeoutRetrySettings = nil
		} else {
			r.OutputServiceNow.TimeoutRetrySettings = &tfTypes.OutputServiceNowTimeoutRetrySettings{}
			r.OutputServiceNow.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputServiceNow.TimeoutRetrySettings.BackoffRate)
			r.OutputServiceNow.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputServiceNow.TimeoutRetrySettings.InitialBackoff)
			r.OutputServiceNow.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputServiceNow.TimeoutRetrySettings.MaxBackoff)
			r.OutputServiceNow.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputServiceNow.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputServiceNow.TimeoutSec = types.Float64PointerValue(resp.OutputServiceNow.TimeoutSec)
		if resp.OutputServiceNow.TLS == nil {
			r.OutputServiceNow.TLS = nil
		} else {
			r.OutputServiceNow.TLS = &tfTypes.OutputServiceNowTLSSettingsClientSide{}
			r.OutputServiceNow.TLS.CaPath = types.StringPointerValue(resp.OutputServiceNow.TLS.CaPath)
			r.OutputServiceNow.TLS.CertificateName = types.StringPointerValue(resp.OutputServiceNow.TLS.CertificateName)
			r.OutputServiceNow.TLS.CertPath = types.StringPointerValue(resp.OutputServiceNow.TLS.CertPath)
			r.OutputServiceNow.TLS.Disabled = types.BoolPointerValue(resp.OutputServiceNow.TLS.Disabled)
			if resp.OutputServiceNow.TLS.MaxVersion != nil {
				r.OutputServiceNow.TLS.MaxVersion = types.StringValue(string(*resp.OutputServiceNow.TLS.MaxVersion))
			} else {
				r.OutputServiceNow.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputServiceNow.TLS.MinVersion != nil {
				r.OutputServiceNow.TLS.MinVersion = types.StringValue(string(*resp.OutputServiceNow.TLS.MinVersion))
			} else {
				r.OutputServiceNow.TLS.MinVersion = types.StringNull()
			}
			r.OutputServiceNow.TLS.Passphrase = types.StringPointerValue(resp.OutputServiceNow.TLS.Passphrase)
			r.OutputServiceNow.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputServiceNow.TLS.PrivKeyPath)
			r.OutputServiceNow.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputServiceNow.TLS.RejectUnauthorized)
		}
		r.OutputServiceNow.TokenSecret = types.StringValue(resp.OutputServiceNow.TokenSecret)
		if resp.OutputServiceNow.Type != nil {
			r.OutputServiceNow.Type = types.StringValue(string(*resp.OutputServiceNow.Type))
		} else {
			r.OutputServiceNow.Type = types.StringNull()
		}
		r.OutputServiceNow.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputServiceNow.UseRoundRobinDNS)
	}
	if resp.OutputSignalfx != nil {
		r.OutputSignalfx = &tfTypes.OutputSignalfx{}
		if resp.OutputSignalfx.AuthType != nil {
			r.OutputSignalfx.AuthType = types.StringValue(string(*resp.OutputSignalfx.AuthType))
		} else {
			r.OutputSignalfx.AuthType = types.StringNull()
		}
		r.OutputSignalfx.Compress = types.BoolPointerValue(resp.OutputSignalfx.Compress)
		r.OutputSignalfx.Concurrency = types.Float64PointerValue(resp.OutputSignalfx.Concurrency)
		r.OutputSignalfx.Description = types.StringPointerValue(resp.OutputSignalfx.Description)
		r.OutputSignalfx.Environment = types.StringPointerValue(resp.OutputSignalfx.Environment)
		r.OutputSignalfx.ExtraHTTPHeaders = []tfTypes.OutputSignalfxExtraHTTPHeader{}
		if len(r.OutputSignalfx.ExtraHTTPHeaders) > len(resp.OutputSignalfx.ExtraHTTPHeaders) {
			r.OutputSignalfx.ExtraHTTPHeaders = r.OutputSignalfx.ExtraHTTPHeaders[:len(resp.OutputSignalfx.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount23, extraHTTPHeadersItem23 := range resp.OutputSignalfx.ExtraHTTPHeaders {
			var extraHTTPHeaders23 tfTypes.OutputSignalfxExtraHTTPHeader
			extraHTTPHeaders23.Name = types.StringPointerValue(extraHTTPHeadersItem23.Name)
			extraHTTPHeaders23.Value = types.StringValue(extraHTTPHeadersItem23.Value)
			if extraHTTPHeadersCount23+1 > len(r.OutputSignalfx.ExtraHTTPHeaders) {
				r.OutputSignalfx.ExtraHTTPHeaders = append(r.OutputSignalfx.ExtraHTTPHeaders, extraHTTPHeaders23)
			} else {
				r.OutputSignalfx.ExtraHTTPHeaders[extraHTTPHeadersCount23].Name = extraHTTPHeaders23.Name
				r.OutputSignalfx.ExtraHTTPHeaders[extraHTTPHeadersCount23].Value = extraHTTPHeaders23.Value
			}
		}
		if resp.OutputSignalfx.FailedRequestLoggingMode != nil {
			r.OutputSignalfx.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputSignalfx.FailedRequestLoggingMode))
		} else {
			r.OutputSignalfx.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputSignalfx.FlushPeriodSec = types.Float64PointerValue(resp.OutputSignalfx.FlushPeriodSec)
		r.OutputSignalfx.ID = types.StringPointerValue(resp.OutputSignalfx.ID)
		r.OutputSignalfx.MaxPayloadEvents = types.Float64PointerValue(resp.OutputSignalfx.MaxPayloadEvents)
		r.OutputSignalfx.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputSignalfx.MaxPayloadSizeKB)
		if resp.OutputSignalfx.OnBackpressure != nil {
			r.OutputSignalfx.OnBackpressure = types.StringValue(string(*resp.OutputSignalfx.OnBackpressure))
		} else {
			r.OutputSignalfx.OnBackpressure = types.StringNull()
		}
		r.OutputSignalfx.Pipeline = types.StringPointerValue(resp.OutputSignalfx.Pipeline)
		if resp.OutputSignalfx.PqCompress != nil {
			r.OutputSignalfx.PqCompress = types.StringValue(string(*resp.OutputSignalfx.PqCompress))
		} else {
			r.OutputSignalfx.PqCompress = types.StringNull()
		}
		if resp.OutputSignalfx.PqControls == nil {
			r.OutputSignalfx.PqControls = nil
		} else {
			r.OutputSignalfx.PqControls = &tfTypes.OutputSignalfxPqControls{}
		}
		r.OutputSignalfx.PqMaxFileSize = types.StringPointerValue(resp.OutputSignalfx.PqMaxFileSize)
		r.OutputSignalfx.PqMaxSize = types.StringPointerValue(resp.OutputSignalfx.PqMaxSize)
		if resp.OutputSignalfx.PqMode != nil {
			r.OutputSignalfx.PqMode = types.StringValue(string(*resp.OutputSignalfx.PqMode))
		} else {
			r.OutputSignalfx.PqMode = types.StringNull()
		}
		if resp.OutputSignalfx.PqOnBackpressure != nil {
			r.OutputSignalfx.PqOnBackpressure = types.StringValue(string(*resp.OutputSignalfx.PqOnBackpressure))
		} else {
			r.OutputSignalfx.PqOnBackpressure = types.StringNull()
		}
		r.OutputSignalfx.PqPath = types.StringPointerValue(resp.OutputSignalfx.PqPath)
		r.OutputSignalfx.Realm = types.StringPointerValue(resp.OutputSignalfx.Realm)
		r.OutputSignalfx.RejectUnauthorized = types.BoolPointerValue(resp.OutputSignalfx.RejectUnauthorized)
		r.OutputSignalfx.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputSignalfx.ResponseHonorRetryAfterHeader)
		r.OutputSignalfx.ResponseRetrySettings = []tfTypes.OutputSignalfxResponseRetrySetting{}
		if len(r.OutputSignalfx.ResponseRetrySettings) > len(resp.OutputSignalfx.ResponseRetrySettings) {
			r.OutputSignalfx.ResponseRetrySettings = r.OutputSignalfx.ResponseRetrySettings[:len(resp.OutputSignalfx.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount24, responseRetrySettingsItem24 := range resp.OutputSignalfx.ResponseRetrySettings {
			var responseRetrySettings24 tfTypes.OutputSignalfxResponseRetrySetting
			responseRetrySettings24.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem24.BackoffRate)
			responseRetrySettings24.HTTPStatus = types.Float64Value(responseRetrySettingsItem24.HTTPStatus)
			responseRetrySettings24.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem24.InitialBackoff)
			responseRetrySettings24.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem24.MaxBackoff)
			if responseRetrySettingsCount24+1 > len(r.OutputSignalfx.ResponseRetrySettings) {
				r.OutputSignalfx.ResponseRetrySettings = append(r.OutputSignalfx.ResponseRetrySettings, responseRetrySettings24)
			} else {
				r.OutputSignalfx.ResponseRetrySettings[responseRetrySettingsCount24].BackoffRate = responseRetrySettings24.BackoffRate
				r.OutputSignalfx.ResponseRetrySettings[responseRetrySettingsCount24].HTTPStatus = responseRetrySettings24.HTTPStatus
				r.OutputSignalfx.ResponseRetrySettings[responseRetrySettingsCount24].InitialBackoff = responseRetrySettings24.InitialBackoff
				r.OutputSignalfx.ResponseRetrySettings[responseRetrySettingsCount24].MaxBackoff = responseRetrySettings24.MaxBackoff
			}
		}
		r.OutputSignalfx.SafeHeaders = make([]types.String, 0, len(resp.OutputSignalfx.SafeHeaders))
		for _, v := range resp.OutputSignalfx.SafeHeaders {
			r.OutputSignalfx.SafeHeaders = append(r.OutputSignalfx.SafeHeaders, types.StringValue(v))
		}
		r.OutputSignalfx.Streamtags = make([]types.String, 0, len(resp.OutputSignalfx.Streamtags))
		for _, v := range resp.OutputSignalfx.Streamtags {
			r.OutputSignalfx.Streamtags = append(r.OutputSignalfx.Streamtags, types.StringValue(v))
		}
		r.OutputSignalfx.SystemFields = make([]types.String, 0, len(resp.OutputSignalfx.SystemFields))
		for _, v := range resp.OutputSignalfx.SystemFields {
			r.OutputSignalfx.SystemFields = append(r.OutputSignalfx.SystemFields, types.StringValue(v))
		}
		r.OutputSignalfx.TextSecret = types.StringPointerValue(resp.OutputSignalfx.TextSecret)
		if resp.OutputSignalfx.TimeoutRetrySettings == nil {
			r.OutputSignalfx.TimeoutRetrySettings = nil
		} else {
			r.OutputSignalfx.TimeoutRetrySettings = &tfTypes.OutputSignalfxTimeoutRetrySettings{}
			r.OutputSignalfx.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputSignalfx.TimeoutRetrySettings.BackoffRate)
			r.OutputSignalfx.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputSignalfx.TimeoutRetrySettings.InitialBackoff)
			r.OutputSignalfx.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputSignalfx.TimeoutRetrySettings.MaxBackoff)
			r.OutputSignalfx.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputSignalfx.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputSignalfx.TimeoutSec = types.Float64PointerValue(resp.OutputSignalfx.TimeoutSec)
		r.OutputSignalfx.Token = types.StringPointerValue(resp.OutputSignalfx.Token)
		r.OutputSignalfx.Type = types.StringValue(string(resp.OutputSignalfx.Type))
		r.OutputSignalfx.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputSignalfx.UseRoundRobinDNS)
	}
	if resp.OutputSnmp != nil {
		r.OutputSnmp = &tfTypes.OutputSnmp{}
		r.OutputSnmp.Description = types.StringPointerValue(resp.OutputSnmp.Description)
		r.OutputSnmp.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputSnmp.DNSResolvePeriodSec)
		r.OutputSnmp.Environment = types.StringPointerValue(resp.OutputSnmp.Environment)
		r.OutputSnmp.Hosts = []tfTypes.OutputSnmpHost{}
		if len(r.OutputSnmp.Hosts) > len(resp.OutputSnmp.Hosts) {
			r.OutputSnmp.Hosts = r.OutputSnmp.Hosts[:len(resp.OutputSnmp.Hosts)]
		}
		for hostsCount2, hostsItem2 := range resp.OutputSnmp.Hosts {
			var hosts2 tfTypes.OutputSnmpHost
			hosts2.Host = types.StringValue(hostsItem2.Host)
			hosts2.Port = types.Float64PointerValue(hostsItem2.Port)
			if hostsCount2+1 > len(r.OutputSnmp.Hosts) {
				r.OutputSnmp.Hosts = append(r.OutputSnmp.Hosts, hosts2)
			} else {
				r.OutputSnmp.Hosts[hostsCount2].Host = hosts2.Host
				r.OutputSnmp.Hosts[hostsCount2].Port = hosts2.Port
			}
		}
		r.OutputSnmp.ID = types.StringPointerValue(resp.OutputSnmp.ID)
		r.OutputSnmp.Pipeline = types.StringPointerValue(resp.OutputSnmp.Pipeline)
		r.OutputSnmp.Streamtags = make([]types.String, 0, len(resp.OutputSnmp.Streamtags))
		for _, v := range resp.OutputSnmp.Streamtags {
			r.OutputSnmp.Streamtags = append(r.OutputSnmp.Streamtags, types.StringValue(v))
		}
		r.OutputSnmp.SystemFields = make([]types.String, 0, len(resp.OutputSnmp.SystemFields))
		for _, v := range resp.OutputSnmp.SystemFields {
			r.OutputSnmp.SystemFields = append(r.OutputSnmp.SystemFields, types.StringValue(v))
		}
		r.OutputSnmp.Type = types.StringValue(string(resp.OutputSnmp.Type))
	}
	if resp.OutputSns != nil {
		r.OutputSns = &tfTypes.OutputSns{}
		r.OutputSns.AssumeRoleArn = types.StringPointerValue(resp.OutputSns.AssumeRoleArn)
		r.OutputSns.AssumeRoleExternalID = types.StringPointerValue(resp.OutputSns.AssumeRoleExternalID)
		r.OutputSns.AwsAPIKey = types.StringPointerValue(resp.OutputSns.AwsAPIKey)
		if resp.OutputSns.AwsAuthenticationMethod != nil {
			r.OutputSns.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputSns.AwsAuthenticationMethod))
		} else {
			r.OutputSns.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputSns.AwsSecret = types.StringPointerValue(resp.OutputSns.AwsSecret)
		r.OutputSns.AwsSecretKey = types.StringPointerValue(resp.OutputSns.AwsSecretKey)
		r.OutputSns.Description = types.StringPointerValue(resp.OutputSns.Description)
		r.OutputSns.DurationSeconds = types.Float64PointerValue(resp.OutputSns.DurationSeconds)
		r.OutputSns.EnableAssumeRole = types.BoolPointerValue(resp.OutputSns.EnableAssumeRole)
		r.OutputSns.Endpoint = types.StringPointerValue(resp.OutputSns.Endpoint)
		r.OutputSns.Environment = types.StringPointerValue(resp.OutputSns.Environment)
		r.OutputSns.ID = types.StringPointerValue(resp.OutputSns.ID)
		r.OutputSns.MaxRetries = types.Float64PointerValue(resp.OutputSns.MaxRetries)
		r.OutputSns.MessageGroupID = types.StringValue(resp.OutputSns.MessageGroupID)
		if resp.OutputSns.OnBackpressure != nil {
			r.OutputSns.OnBackpressure = types.StringValue(string(*resp.OutputSns.OnBackpressure))
		} else {
			r.OutputSns.OnBackpressure = types.StringNull()
		}
		r.OutputSns.Pipeline = types.StringPointerValue(resp.OutputSns.Pipeline)
		if resp.OutputSns.PqCompress != nil {
			r.OutputSns.PqCompress = types.StringValue(string(*resp.OutputSns.PqCompress))
		} else {
			r.OutputSns.PqCompress = types.StringNull()
		}
		if resp.OutputSns.PqControls == nil {
			r.OutputSns.PqControls = nil
		} else {
			r.OutputSns.PqControls = &tfTypes.OutputSnsPqControls{}
		}
		r.OutputSns.PqMaxFileSize = types.StringPointerValue(resp.OutputSns.PqMaxFileSize)
		r.OutputSns.PqMaxSize = types.StringPointerValue(resp.OutputSns.PqMaxSize)
		if resp.OutputSns.PqMode != nil {
			r.OutputSns.PqMode = types.StringValue(string(*resp.OutputSns.PqMode))
		} else {
			r.OutputSns.PqMode = types.StringNull()
		}
		if resp.OutputSns.PqOnBackpressure != nil {
			r.OutputSns.PqOnBackpressure = types.StringValue(string(*resp.OutputSns.PqOnBackpressure))
		} else {
			r.OutputSns.PqOnBackpressure = types.StringNull()
		}
		r.OutputSns.PqPath = types.StringPointerValue(resp.OutputSns.PqPath)
		r.OutputSns.Region = types.StringPointerValue(resp.OutputSns.Region)
		r.OutputSns.RejectUnauthorized = types.BoolPointerValue(resp.OutputSns.RejectUnauthorized)
		r.OutputSns.ReuseConnections = types.BoolPointerValue(resp.OutputSns.ReuseConnections)
		if resp.OutputSns.SignatureVersion != nil {
			r.OutputSns.SignatureVersion = types.StringValue(string(*resp.OutputSns.SignatureVersion))
		} else {
			r.OutputSns.SignatureVersion = types.StringNull()
		}
		r.OutputSns.Streamtags = make([]types.String, 0, len(resp.OutputSns.Streamtags))
		for _, v := range resp.OutputSns.Streamtags {
			r.OutputSns.Streamtags = append(r.OutputSns.Streamtags, types.StringValue(v))
		}
		r.OutputSns.SystemFields = make([]types.String, 0, len(resp.OutputSns.SystemFields))
		for _, v := range resp.OutputSns.SystemFields {
			r.OutputSns.SystemFields = append(r.OutputSns.SystemFields, types.StringValue(v))
		}
		r.OutputSns.TopicArn = types.StringValue(resp.OutputSns.TopicArn)
		if resp.OutputSns.Type != nil {
			r.OutputSns.Type = types.StringValue(string(*resp.OutputSns.Type))
		} else {
			r.OutputSns.Type = types.StringNull()
		}
	}
	if resp.OutputSplunk != nil {
		r.OutputSplunk = &tfTypes.OutputSplunk{}
		r.OutputSplunk.AuthToken = types.StringPointerValue(resp.OutputSplunk.AuthToken)
		if resp.OutputSplunk.AuthType != nil {
			r.OutputSplunk.AuthType = types.StringValue(string(*resp.OutputSplunk.AuthType))
		} else {
			r.OutputSplunk.AuthType = types.StringNull()
		}
		if resp.OutputSplunk.Compress != nil {
			r.OutputSplunk.Compress = types.StringValue(string(*resp.OutputSplunk.Compress))
		} else {
			r.OutputSplunk.Compress = types.StringNull()
		}
		r.OutputSplunk.ConnectionTimeout = types.Float64PointerValue(resp.OutputSplunk.ConnectionTimeout)
		r.OutputSplunk.Description = types.StringPointerValue(resp.OutputSplunk.Description)
		r.OutputSplunk.EnableACK = types.BoolPointerValue(resp.OutputSplunk.EnableACK)
		r.OutputSplunk.EnableMultiMetrics = types.BoolPointerValue(resp.OutputSplunk.EnableMultiMetrics)
		r.OutputSplunk.Environment = types.StringPointerValue(resp.OutputSplunk.Environment)
		r.OutputSplunk.Host = types.StringValue(resp.OutputSplunk.Host)
		r.OutputSplunk.ID = types.StringPointerValue(resp.OutputSplunk.ID)
		r.OutputSplunk.LogFailedRequests = types.BoolPointerValue(resp.OutputSplunk.LogFailedRequests)
		r.OutputSplunk.MaxFailedHealthChecks = types.Float64PointerValue(resp.OutputSplunk.MaxFailedHealthChecks)
		if resp.OutputSplunk.MaxS2Sversion != nil {
			r.OutputSplunk.MaxS2Sversion = types.StringValue(string(*resp.OutputSplunk.MaxS2Sversion))
		} else {
			r.OutputSplunk.MaxS2Sversion = types.StringNull()
		}
		if resp.OutputSplunk.NestedFields != nil {
			r.OutputSplunk.NestedFields = types.StringValue(string(*resp.OutputSplunk.NestedFields))
		} else {
			r.OutputSplunk.NestedFields = types.StringNull()
		}
		if resp.OutputSplunk.OnBackpressure != nil {
			r.OutputSplunk.OnBackpressure = types.StringValue(string(*resp.OutputSplunk.OnBackpressure))
		} else {
			r.OutputSplunk.OnBackpressure = types.StringNull()
		}
		r.OutputSplunk.Pipeline = types.StringPointerValue(resp.OutputSplunk.Pipeline)
		r.OutputSplunk.Port = types.Float64PointerValue(resp.OutputSplunk.Port)
		if resp.OutputSplunk.PqCompress != nil {
			r.OutputSplunk.PqCompress = types.StringValue(string(*resp.OutputSplunk.PqCompress))
		} else {
			r.OutputSplunk.PqCompress = types.StringNull()
		}
		if resp.OutputSplunk.PqControls == nil {
			r.OutputSplunk.PqControls = nil
		} else {
			r.OutputSplunk.PqControls = &tfTypes.OutputSplunkPqControls{}
		}
		r.OutputSplunk.PqMaxFileSize = types.StringPointerValue(resp.OutputSplunk.PqMaxFileSize)
		r.OutputSplunk.PqMaxSize = types.StringPointerValue(resp.OutputSplunk.PqMaxSize)
		if resp.OutputSplunk.PqMode != nil {
			r.OutputSplunk.PqMode = types.StringValue(string(*resp.OutputSplunk.PqMode))
		} else {
			r.OutputSplunk.PqMode = types.StringNull()
		}
		if resp.OutputSplunk.PqOnBackpressure != nil {
			r.OutputSplunk.PqOnBackpressure = types.StringValue(string(*resp.OutputSplunk.PqOnBackpressure))
		} else {
			r.OutputSplunk.PqOnBackpressure = types.StringNull()
		}
		r.OutputSplunk.PqPath = types.StringPointerValue(resp.OutputSplunk.PqPath)
		r.OutputSplunk.Streamtags = make([]types.String, 0, len(resp.OutputSplunk.Streamtags))
		for _, v := range resp.OutputSplunk.Streamtags {
			r.OutputSplunk.Streamtags = append(r.OutputSplunk.Streamtags, types.StringValue(v))
		}
		r.OutputSplunk.SystemFields = make([]types.String, 0, len(resp.OutputSplunk.SystemFields))
		for _, v := range resp.OutputSplunk.SystemFields {
			r.OutputSplunk.SystemFields = append(r.OutputSplunk.SystemFields, types.StringValue(v))
		}
		r.OutputSplunk.TextSecret = types.StringPointerValue(resp.OutputSplunk.TextSecret)
		r.OutputSplunk.ThrottleRatePerSec = types.StringPointerValue(resp.OutputSplunk.ThrottleRatePerSec)
		if resp.OutputSplunk.TLS == nil {
			r.OutputSplunk.TLS = nil
		} else {
			r.OutputSplunk.TLS = &tfTypes.OutputSplunkTLSSettingsClientSide{}
			r.OutputSplunk.TLS.CaPath = types.StringPointerValue(resp.OutputSplunk.TLS.CaPath)
			r.OutputSplunk.TLS.CertificateName = types.StringPointerValue(resp.OutputSplunk.TLS.CertificateName)
			r.OutputSplunk.TLS.CertPath = types.StringPointerValue(resp.OutputSplunk.TLS.CertPath)
			r.OutputSplunk.TLS.Disabled = types.BoolPointerValue(resp.OutputSplunk.TLS.Disabled)
			if resp.OutputSplunk.TLS.MaxVersion != nil {
				r.OutputSplunk.TLS.MaxVersion = types.StringValue(string(*resp.OutputSplunk.TLS.MaxVersion))
			} else {
				r.OutputSplunk.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputSplunk.TLS.MinVersion != nil {
				r.OutputSplunk.TLS.MinVersion = types.StringValue(string(*resp.OutputSplunk.TLS.MinVersion))
			} else {
				r.OutputSplunk.TLS.MinVersion = types.StringNull()
			}
			r.OutputSplunk.TLS.Passphrase = types.StringPointerValue(resp.OutputSplunk.TLS.Passphrase)
			r.OutputSplunk.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputSplunk.TLS.PrivKeyPath)
			r.OutputSplunk.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputSplunk.TLS.RejectUnauthorized)
			r.OutputSplunk.TLS.Servername = types.StringPointerValue(resp.OutputSplunk.TLS.Servername)
		}
		if resp.OutputSplunk.Type != nil {
			r.OutputSplunk.Type = types.StringValue(string(*resp.OutputSplunk.Type))
		} else {
			r.OutputSplunk.Type = types.StringNull()
		}
		r.OutputSplunk.WriteTimeout = types.Float64PointerValue(resp.OutputSplunk.WriteTimeout)
	}
	if resp.OutputSplunkHec != nil {
		r.OutputSplunkHec = &tfTypes.OutputSplunkHec{}
		if resp.OutputSplunkHec.AuthType != nil {
			r.OutputSplunkHec.AuthType = types.StringValue(string(*resp.OutputSplunkHec.AuthType))
		} else {
			r.OutputSplunkHec.AuthType = types.StringNull()
		}
		r.OutputSplunkHec.Compress = types.BoolPointerValue(resp.OutputSplunkHec.Compress)
		r.OutputSplunkHec.Concurrency = types.Float64PointerValue(resp.OutputSplunkHec.Concurrency)
		r.OutputSplunkHec.Description = types.StringPointerValue(resp.OutputSplunkHec.Description)
		r.OutputSplunkHec.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputSplunkHec.DNSResolvePeriodSec)
		r.OutputSplunkHec.EnableMultiMetrics = types.BoolPointerValue(resp.OutputSplunkHec.EnableMultiMetrics)
		r.OutputSplunkHec.Environment = types.StringPointerValue(resp.OutputSplunkHec.Environment)
		r.OutputSplunkHec.ExcludeSelf = types.BoolPointerValue(resp.OutputSplunkHec.ExcludeSelf)
		r.OutputSplunkHec.ExtraHTTPHeaders = []tfTypes.OutputSplunkHecExtraHTTPHeader{}
		if len(r.OutputSplunkHec.ExtraHTTPHeaders) > len(resp.OutputSplunkHec.ExtraHTTPHeaders) {
			r.OutputSplunkHec.ExtraHTTPHeaders = r.OutputSplunkHec.ExtraHTTPHeaders[:len(resp.OutputSplunkHec.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount24, extraHTTPHeadersItem24 := range resp.OutputSplunkHec.ExtraHTTPHeaders {
			var extraHTTPHeaders24 tfTypes.OutputSplunkHecExtraHTTPHeader
			extraHTTPHeaders24.Name = types.StringPointerValue(extraHTTPHeadersItem24.Name)
			extraHTTPHeaders24.Value = types.StringValue(extraHTTPHeadersItem24.Value)
			if extraHTTPHeadersCount24+1 > len(r.OutputSplunkHec.ExtraHTTPHeaders) {
				r.OutputSplunkHec.ExtraHTTPHeaders = append(r.OutputSplunkHec.ExtraHTTPHeaders, extraHTTPHeaders24)
			} else {
				r.OutputSplunkHec.ExtraHTTPHeaders[extraHTTPHeadersCount24].Name = extraHTTPHeaders24.Name
				r.OutputSplunkHec.ExtraHTTPHeaders[extraHTTPHeadersCount24].Value = extraHTTPHeaders24.Value
			}
		}
		if resp.OutputSplunkHec.FailedRequestLoggingMode != nil {
			r.OutputSplunkHec.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputSplunkHec.FailedRequestLoggingMode))
		} else {
			r.OutputSplunkHec.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputSplunkHec.FlushPeriodSec = types.Float64PointerValue(resp.OutputSplunkHec.FlushPeriodSec)
		r.OutputSplunkHec.ID = types.StringValue(resp.OutputSplunkHec.ID)
		r.OutputSplunkHec.LoadBalanced = types.BoolPointerValue(resp.OutputSplunkHec.LoadBalanced)
		r.OutputSplunkHec.LoadBalanceStatsPeriodSec = types.Float64PointerValue(resp.OutputSplunkHec.LoadBalanceStatsPeriodSec)
		r.OutputSplunkHec.MaxPayloadEvents = types.Float64PointerValue(resp.OutputSplunkHec.MaxPayloadEvents)
		r.OutputSplunkHec.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputSplunkHec.MaxPayloadSizeKB)
		r.OutputSplunkHec.NextQueue = types.StringPointerValue(resp.OutputSplunkHec.NextQueue)
		if resp.OutputSplunkHec.OnBackpressure != nil {
			r.OutputSplunkHec.OnBackpressure = types.StringValue(string(*resp.OutputSplunkHec.OnBackpressure))
		} else {
			r.OutputSplunkHec.OnBackpressure = types.StringNull()
		}
		r.OutputSplunkHec.Pipeline = types.StringPointerValue(resp.OutputSplunkHec.Pipeline)
		if resp.OutputSplunkHec.PqCompress != nil {
			r.OutputSplunkHec.PqCompress = types.StringValue(string(*resp.OutputSplunkHec.PqCompress))
		} else {
			r.OutputSplunkHec.PqCompress = types.StringNull()
		}
		if resp.OutputSplunkHec.PqControls == nil {
			r.OutputSplunkHec.PqControls = nil
		} else {
			r.OutputSplunkHec.PqControls = &tfTypes.OutputSplunkHecPqControls{}
		}
		r.OutputSplunkHec.PqMaxFileSize = types.StringPointerValue(resp.OutputSplunkHec.PqMaxFileSize)
		r.OutputSplunkHec.PqMaxSize = types.StringPointerValue(resp.OutputSplunkHec.PqMaxSize)
		if resp.OutputSplunkHec.PqMode != nil {
			r.OutputSplunkHec.PqMode = types.StringValue(string(*resp.OutputSplunkHec.PqMode))
		} else {
			r.OutputSplunkHec.PqMode = types.StringNull()
		}
		if resp.OutputSplunkHec.PqOnBackpressure != nil {
			r.OutputSplunkHec.PqOnBackpressure = types.StringValue(string(*resp.OutputSplunkHec.PqOnBackpressure))
		} else {
			r.OutputSplunkHec.PqOnBackpressure = types.StringNull()
		}
		r.OutputSplunkHec.PqPath = types.StringPointerValue(resp.OutputSplunkHec.PqPath)
		r.OutputSplunkHec.RejectUnauthorized = types.BoolPointerValue(resp.OutputSplunkHec.RejectUnauthorized)
		r.OutputSplunkHec.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputSplunkHec.ResponseHonorRetryAfterHeader)
		r.OutputSplunkHec.ResponseRetrySettings = []tfTypes.OutputSplunkHecResponseRetrySetting{}
		if len(r.OutputSplunkHec.ResponseRetrySettings) > len(resp.OutputSplunkHec.ResponseRetrySettings) {
			r.OutputSplunkHec.ResponseRetrySettings = r.OutputSplunkHec.ResponseRetrySettings[:len(resp.OutputSplunkHec.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount25, responseRetrySettingsItem25 := range resp.OutputSplunkHec.ResponseRetrySettings {
			var responseRetrySettings25 tfTypes.OutputSplunkHecResponseRetrySetting
			responseRetrySettings25.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem25.BackoffRate)
			responseRetrySettings25.HTTPStatus = types.Float64Value(responseRetrySettingsItem25.HTTPStatus)
			responseRetrySettings25.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem25.InitialBackoff)
			responseRetrySettings25.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem25.MaxBackoff)
			if responseRetrySettingsCount25+1 > len(r.OutputSplunkHec.ResponseRetrySettings) {
				r.OutputSplunkHec.ResponseRetrySettings = append(r.OutputSplunkHec.ResponseRetrySettings, responseRetrySettings25)
			} else {
				r.OutputSplunkHec.ResponseRetrySettings[responseRetrySettingsCount25].BackoffRate = responseRetrySettings25.BackoffRate
				r.OutputSplunkHec.ResponseRetrySettings[responseRetrySettingsCount25].HTTPStatus = responseRetrySettings25.HTTPStatus
				r.OutputSplunkHec.ResponseRetrySettings[responseRetrySettingsCount25].InitialBackoff = responseRetrySettings25.InitialBackoff
				r.OutputSplunkHec.ResponseRetrySettings[responseRetrySettingsCount25].MaxBackoff = responseRetrySettings25.MaxBackoff
			}
		}
		r.OutputSplunkHec.SafeHeaders = make([]types.String, 0, len(resp.OutputSplunkHec.SafeHeaders))
		for _, v := range resp.OutputSplunkHec.SafeHeaders {
			r.OutputSplunkHec.SafeHeaders = append(r.OutputSplunkHec.SafeHeaders, types.StringValue(v))
		}
		r.OutputSplunkHec.Streamtags = make([]types.String, 0, len(resp.OutputSplunkHec.Streamtags))
		for _, v := range resp.OutputSplunkHec.Streamtags {
			r.OutputSplunkHec.Streamtags = append(r.OutputSplunkHec.Streamtags, types.StringValue(v))
		}
		r.OutputSplunkHec.SystemFields = make([]types.String, 0, len(resp.OutputSplunkHec.SystemFields))
		for _, v := range resp.OutputSplunkHec.SystemFields {
			r.OutputSplunkHec.SystemFields = append(r.OutputSplunkHec.SystemFields, types.StringValue(v))
		}
		r.OutputSplunkHec.TCPRouting = types.StringPointerValue(resp.OutputSplunkHec.TCPRouting)
		r.OutputSplunkHec.TextSecret = types.StringPointerValue(resp.OutputSplunkHec.TextSecret)
		if resp.OutputSplunkHec.TimeoutRetrySettings == nil {
			r.OutputSplunkHec.TimeoutRetrySettings = nil
		} else {
			r.OutputSplunkHec.TimeoutRetrySettings = &tfTypes.OutputSplunkHecTimeoutRetrySettings{}
			r.OutputSplunkHec.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputSplunkHec.TimeoutRetrySettings.BackoffRate)
			r.OutputSplunkHec.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputSplunkHec.TimeoutRetrySettings.InitialBackoff)
			r.OutputSplunkHec.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputSplunkHec.TimeoutRetrySettings.MaxBackoff)
			r.OutputSplunkHec.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputSplunkHec.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputSplunkHec.TimeoutSec = types.Float64PointerValue(resp.OutputSplunkHec.TimeoutSec)
		r.OutputSplunkHec.Token = types.StringPointerValue(resp.OutputSplunkHec.Token)
		r.OutputSplunkHec.Type = types.StringValue(string(resp.OutputSplunkHec.Type))
		r.OutputSplunkHec.URL = types.StringPointerValue(resp.OutputSplunkHec.URL)
		r.OutputSplunkHec.Urls = []tfTypes.OutputSplunkHecURL{}
		if len(r.OutputSplunkHec.Urls) > len(resp.OutputSplunkHec.Urls) {
			r.OutputSplunkHec.Urls = r.OutputSplunkHec.Urls[:len(resp.OutputSplunkHec.Urls)]
		}
		for urlsCount2, urlsItem2 := range resp.OutputSplunkHec.Urls {
			var urls2 tfTypes.OutputSplunkHecURL
			urls2.URL = types.StringPointerValue(urlsItem2.URL)
			urls2.Weight = types.Float64PointerValue(urlsItem2.Weight)
			if urlsCount2+1 > len(r.OutputSplunkHec.Urls) {
				r.OutputSplunkHec.Urls = append(r.OutputSplunkHec.Urls, urls2)
			} else {
				r.OutputSplunkHec.Urls[urlsCount2].URL = urls2.URL
				r.OutputSplunkHec.Urls[urlsCount2].Weight = urls2.Weight
			}
		}
		r.OutputSplunkHec.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputSplunkHec.UseRoundRobinDNS)
	}
	if resp.OutputSplunkLb != nil {
		r.OutputSplunkLb = &tfTypes.OutputSplunkLb{}
		r.OutputSplunkLb.AuthToken = types.StringPointerValue(resp.OutputSplunkLb.AuthToken)
		if resp.OutputSplunkLb.AuthType != nil {
			r.OutputSplunkLb.AuthType = types.StringValue(string(*resp.OutputSplunkLb.AuthType))
		} else {
			r.OutputSplunkLb.AuthType = types.StringNull()
		}
		if resp.OutputSplunkLb.Compress != nil {
			r.OutputSplunkLb.Compress = types.StringValue(string(*resp.OutputSplunkLb.Compress))
		} else {
			r.OutputSplunkLb.Compress = types.StringNull()
		}
		r.OutputSplunkLb.ConnectionTimeout = types.Float64PointerValue(resp.OutputSplunkLb.ConnectionTimeout)
		r.OutputSplunkLb.Description = types.StringPointerValue(resp.OutputSplunkLb.Description)
		r.OutputSplunkLb.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputSplunkLb.DNSResolvePeriodSec)
		r.OutputSplunkLb.EnableACK = types.BoolPointerValue(resp.OutputSplunkLb.EnableACK)
		r.OutputSplunkLb.EnableMultiMetrics = types.BoolPointerValue(resp.OutputSplunkLb.EnableMultiMetrics)
		r.OutputSplunkLb.Environment = types.StringPointerValue(resp.OutputSplunkLb.Environment)
		r.OutputSplunkLb.ExcludeSelf = types.BoolPointerValue(resp.OutputSplunkLb.ExcludeSelf)
		r.OutputSplunkLb.Hosts = []tfTypes.OutputSplunkLbHost{}
		if len(r.OutputSplunkLb.Hosts) > len(resp.OutputSplunkLb.Hosts) {
			r.OutputSplunkLb.Hosts = r.OutputSplunkLb.Hosts[:len(resp.OutputSplunkLb.Hosts)]
		}
		for hostsCount3, hostsItem3 := range resp.OutputSplunkLb.Hosts {
			var hosts3 tfTypes.OutputSplunkLbHost
			hosts3.Host = types.StringValue(hostsItem3.Host)
			hosts3.Port = types.Float64PointerValue(hostsItem3.Port)
			hosts3.Servername = types.StringPointerValue(hostsItem3.Servername)
			if hostsItem3.TLS != nil {
				hosts3.TLS = types.StringValue(string(*hostsItem3.TLS))
			} else {
				hosts3.TLS = types.StringNull()
			}
			hosts3.Weight = types.Float64PointerValue(hostsItem3.Weight)
			if hostsCount3+1 > len(r.OutputSplunkLb.Hosts) {
				r.OutputSplunkLb.Hosts = append(r.OutputSplunkLb.Hosts, hosts3)
			} else {
				r.OutputSplunkLb.Hosts[hostsCount3].Host = hosts3.Host
				r.OutputSplunkLb.Hosts[hostsCount3].Port = hosts3.Port
				r.OutputSplunkLb.Hosts[hostsCount3].Servername = hosts3.Servername
				r.OutputSplunkLb.Hosts[hostsCount3].TLS = hosts3.TLS
				r.OutputSplunkLb.Hosts[hostsCount3].Weight = hosts3.Weight
			}
		}
		r.OutputSplunkLb.ID = types.StringPointerValue(resp.OutputSplunkLb.ID)
		r.OutputSplunkLb.IndexerDiscovery = types.BoolPointerValue(resp.OutputSplunkLb.IndexerDiscovery)
		if resp.OutputSplunkLb.IndexerDiscoveryConfigs == nil {
			r.OutputSplunkLb.IndexerDiscoveryConfigs = nil
		} else {
			r.OutputSplunkLb.IndexerDiscoveryConfigs = &tfTypes.IndexerDiscoveryConfigs{}
			r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthToken = types.StringPointerValue(resp.OutputSplunkLb.IndexerDiscoveryConfigs.AuthToken)
			r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens = []tfTypes.OutputSplunkLbAuthToken{}
			if len(r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens) > len(resp.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens) {
				r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens = r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens[:len(resp.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens)]
			}
			for authTokensCount, authTokensItem := range resp.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens {
				var authTokens tfTypes.OutputSplunkLbAuthToken
				if authTokensItem.AuthType != nil {
					authTokens.AuthType = types.StringValue(string(*authTokensItem.AuthType))
				} else {
					authTokens.AuthType = types.StringNull()
				}
				if authTokensCount+1 > len(r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens) {
					r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens = append(r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens, authTokens)
				} else {
					r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens[authTokensCount].AuthType = authTokens.AuthType
				}
			}
			if resp.OutputSplunkLb.IndexerDiscoveryConfigs.AuthType != nil {
				r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthType = types.StringValue(string(*resp.OutputSplunkLb.IndexerDiscoveryConfigs.AuthType))
			} else {
				r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthType = types.StringNull()
			}
			r.OutputSplunkLb.IndexerDiscoveryConfigs.MasterURI = types.StringValue(resp.OutputSplunkLb.IndexerDiscoveryConfigs.MasterURI)
			r.OutputSplunkLb.IndexerDiscoveryConfigs.RefreshIntervalSec = types.Float64PointerValue(resp.OutputSplunkLb.IndexerDiscoveryConfigs.RefreshIntervalSec)
			r.OutputSplunkLb.IndexerDiscoveryConfigs.RejectUnauthorized = types.BoolPointerValue(resp.OutputSplunkLb.IndexerDiscoveryConfigs.RejectUnauthorized)
			r.OutputSplunkLb.IndexerDiscoveryConfigs.Site = types.StringPointerValue(resp.OutputSplunkLb.IndexerDiscoveryConfigs.Site)
			r.OutputSplunkLb.IndexerDiscoveryConfigs.TextSecret = types.StringPointerValue(resp.OutputSplunkLb.IndexerDiscoveryConfigs.TextSecret)
		}
		r.OutputSplunkLb.LoadBalanceStatsPeriodSec = types.Float64PointerValue(resp.OutputSplunkLb.LoadBalanceStatsPeriodSec)
		r.OutputSplunkLb.LogFailedRequests = types.BoolPointerValue(resp.OutputSplunkLb.LogFailedRequests)
		r.OutputSplunkLb.MaxConcurrentSenders = types.Float64PointerValue(resp.OutputSplunkLb.MaxConcurrentSenders)
		r.OutputSplunkLb.MaxFailedHealthChecks = types.Float64PointerValue(resp.OutputSplunkLb.MaxFailedHealthChecks)
		if resp.OutputSplunkLb.MaxS2Sversion != nil {
			r.OutputSplunkLb.MaxS2Sversion = types.StringValue(string(*resp.OutputSplunkLb.MaxS2Sversion))
		} else {
			r.OutputSplunkLb.MaxS2Sversion = types.StringNull()
		}
		if resp.OutputSplunkLb.NestedFields != nil {
			r.OutputSplunkLb.NestedFields = types.StringValue(string(*resp.OutputSplunkLb.NestedFields))
		} else {
			r.OutputSplunkLb.NestedFields = types.StringNull()
		}
		if resp.OutputSplunkLb.OnBackpressure != nil {
			r.OutputSplunkLb.OnBackpressure = types.StringValue(string(*resp.OutputSplunkLb.OnBackpressure))
		} else {
			r.OutputSplunkLb.OnBackpressure = types.StringNull()
		}
		r.OutputSplunkLb.Pipeline = types.StringPointerValue(resp.OutputSplunkLb.Pipeline)
		if resp.OutputSplunkLb.PqCompress != nil {
			r.OutputSplunkLb.PqCompress = types.StringValue(string(*resp.OutputSplunkLb.PqCompress))
		} else {
			r.OutputSplunkLb.PqCompress = types.StringNull()
		}
		if resp.OutputSplunkLb.PqControls == nil {
			r.OutputSplunkLb.PqControls = nil
		} else {
			r.OutputSplunkLb.PqControls = &tfTypes.OutputSplunkLbPqControls{}
		}
		r.OutputSplunkLb.PqMaxFileSize = types.StringPointerValue(resp.OutputSplunkLb.PqMaxFileSize)
		r.OutputSplunkLb.PqMaxSize = types.StringPointerValue(resp.OutputSplunkLb.PqMaxSize)
		if resp.OutputSplunkLb.PqMode != nil {
			r.OutputSplunkLb.PqMode = types.StringValue(string(*resp.OutputSplunkLb.PqMode))
		} else {
			r.OutputSplunkLb.PqMode = types.StringNull()
		}
		if resp.OutputSplunkLb.PqOnBackpressure != nil {
			r.OutputSplunkLb.PqOnBackpressure = types.StringValue(string(*resp.OutputSplunkLb.PqOnBackpressure))
		} else {
			r.OutputSplunkLb.PqOnBackpressure = types.StringNull()
		}
		r.OutputSplunkLb.PqPath = types.StringPointerValue(resp.OutputSplunkLb.PqPath)
		r.OutputSplunkLb.SenderUnhealthyTimeAllowance = types.Float64PointerValue(resp.OutputSplunkLb.SenderUnhealthyTimeAllowance)
		r.OutputSplunkLb.Streamtags = make([]types.String, 0, len(resp.OutputSplunkLb.Streamtags))
		for _, v := range resp.OutputSplunkLb.Streamtags {
			r.OutputSplunkLb.Streamtags = append(r.OutputSplunkLb.Streamtags, types.StringValue(v))
		}
		r.OutputSplunkLb.SystemFields = make([]types.String, 0, len(resp.OutputSplunkLb.SystemFields))
		for _, v := range resp.OutputSplunkLb.SystemFields {
			r.OutputSplunkLb.SystemFields = append(r.OutputSplunkLb.SystemFields, types.StringValue(v))
		}
		r.OutputSplunkLb.TextSecret = types.StringPointerValue(resp.OutputSplunkLb.TextSecret)
		r.OutputSplunkLb.ThrottleRatePerSec = types.StringPointerValue(resp.OutputSplunkLb.ThrottleRatePerSec)
		if resp.OutputSplunkLb.TLS == nil {
			r.OutputSplunkLb.TLS = nil
		} else {
			r.OutputSplunkLb.TLS = &tfTypes.OutputSplunkLbTLSSettingsClientSide{}
			r.OutputSplunkLb.TLS.CaPath = types.StringPointerValue(resp.OutputSplunkLb.TLS.CaPath)
			r.OutputSplunkLb.TLS.CertificateName = types.StringPointerValue(resp.OutputSplunkLb.TLS.CertificateName)
			r.OutputSplunkLb.TLS.CertPath = types.StringPointerValue(resp.OutputSplunkLb.TLS.CertPath)
			r.OutputSplunkLb.TLS.Disabled = types.BoolPointerValue(resp.OutputSplunkLb.TLS.Disabled)
			if resp.OutputSplunkLb.TLS.MaxVersion != nil {
				r.OutputSplunkLb.TLS.MaxVersion = types.StringValue(string(*resp.OutputSplunkLb.TLS.MaxVersion))
			} else {
				r.OutputSplunkLb.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputSplunkLb.TLS.MinVersion != nil {
				r.OutputSplunkLb.TLS.MinVersion = types.StringValue(string(*resp.OutputSplunkLb.TLS.MinVersion))
			} else {
				r.OutputSplunkLb.TLS.MinVersion = types.StringNull()
			}
			r.OutputSplunkLb.TLS.Passphrase = types.StringPointerValue(resp.OutputSplunkLb.TLS.Passphrase)
			r.OutputSplunkLb.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputSplunkLb.TLS.PrivKeyPath)
			r.OutputSplunkLb.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputSplunkLb.TLS.RejectUnauthorized)
			r.OutputSplunkLb.TLS.Servername = types.StringPointerValue(resp.OutputSplunkLb.TLS.Servername)
		}
		r.OutputSplunkLb.Type = types.StringValue(string(resp.OutputSplunkLb.Type))
		r.OutputSplunkLb.WriteTimeout = types.Float64PointerValue(resp.OutputSplunkLb.WriteTimeout)
	}
	if resp.OutputSqs != nil {
		r.OutputSqs = &tfTypes.OutputSqs{}
		r.OutputSqs.AssumeRoleArn = types.StringPointerValue(resp.OutputSqs.AssumeRoleArn)
		r.OutputSqs.AssumeRoleExternalID = types.StringPointerValue(resp.OutputSqs.AssumeRoleExternalID)
		r.OutputSqs.AwsAccountID = types.StringPointerValue(resp.OutputSqs.AwsAccountID)
		r.OutputSqs.AwsAPIKey = types.StringPointerValue(resp.OutputSqs.AwsAPIKey)
		if resp.OutputSqs.AwsAuthenticationMethod != nil {
			r.OutputSqs.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputSqs.AwsAuthenticationMethod))
		} else {
			r.OutputSqs.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputSqs.AwsSecret = types.StringPointerValue(resp.OutputSqs.AwsSecret)
		r.OutputSqs.AwsSecretKey = types.StringPointerValue(resp.OutputSqs.AwsSecretKey)
		r.OutputSqs.CreateQueue = types.BoolPointerValue(resp.OutputSqs.CreateQueue)
		r.OutputSqs.Description = types.StringPointerValue(resp.OutputSqs.Description)
		r.OutputSqs.DurationSeconds = types.Float64PointerValue(resp.OutputSqs.DurationSeconds)
		r.OutputSqs.EnableAssumeRole = types.BoolPointerValue(resp.OutputSqs.EnableAssumeRole)
		r.OutputSqs.Endpoint = types.StringPointerValue(resp.OutputSqs.Endpoint)
		r.OutputSqs.Environment = types.StringPointerValue(resp.OutputSqs.Environment)
		r.OutputSqs.FlushPeriodSec = types.Float64PointerValue(resp.OutputSqs.FlushPeriodSec)
		r.OutputSqs.ID = types.StringPointerValue(resp.OutputSqs.ID)
		r.OutputSqs.MaxInProgress = types.Float64PointerValue(resp.OutputSqs.MaxInProgress)
		r.OutputSqs.MaxQueueSize = types.Float64PointerValue(resp.OutputSqs.MaxQueueSize)
		r.OutputSqs.MaxRecordSizeKB = types.Float64PointerValue(resp.OutputSqs.MaxRecordSizeKB)
		r.OutputSqs.MessageGroupID = types.StringPointerValue(resp.OutputSqs.MessageGroupID)
		if resp.OutputSqs.OnBackpressure != nil {
			r.OutputSqs.OnBackpressure = types.StringValue(string(*resp.OutputSqs.OnBackpressure))
		} else {
			r.OutputSqs.OnBackpressure = types.StringNull()
		}
		r.OutputSqs.Pipeline = types.StringPointerValue(resp.OutputSqs.Pipeline)
		if resp.OutputSqs.PqCompress != nil {
			r.OutputSqs.PqCompress = types.StringValue(string(*resp.OutputSqs.PqCompress))
		} else {
			r.OutputSqs.PqCompress = types.StringNull()
		}
		if resp.OutputSqs.PqControls == nil {
			r.OutputSqs.PqControls = nil
		} else {
			r.OutputSqs.PqControls = &tfTypes.OutputSqsPqControls{}
		}
		r.OutputSqs.PqMaxFileSize = types.StringPointerValue(resp.OutputSqs.PqMaxFileSize)
		r.OutputSqs.PqMaxSize = types.StringPointerValue(resp.OutputSqs.PqMaxSize)
		if resp.OutputSqs.PqMode != nil {
			r.OutputSqs.PqMode = types.StringValue(string(*resp.OutputSqs.PqMode))
		} else {
			r.OutputSqs.PqMode = types.StringNull()
		}
		if resp.OutputSqs.PqOnBackpressure != nil {
			r.OutputSqs.PqOnBackpressure = types.StringValue(string(*resp.OutputSqs.PqOnBackpressure))
		} else {
			r.OutputSqs.PqOnBackpressure = types.StringNull()
		}
		r.OutputSqs.PqPath = types.StringPointerValue(resp.OutputSqs.PqPath)
		r.OutputSqs.QueueName = types.StringValue(resp.OutputSqs.QueueName)
		if resp.OutputSqs.QueueType != nil {
			r.OutputSqs.QueueType = types.StringValue(string(*resp.OutputSqs.QueueType))
		} else {
			r.OutputSqs.QueueType = types.StringNull()
		}
		r.OutputSqs.Region = types.StringPointerValue(resp.OutputSqs.Region)
		r.OutputSqs.RejectUnauthorized = types.BoolPointerValue(resp.OutputSqs.RejectUnauthorized)
		r.OutputSqs.ReuseConnections = types.BoolPointerValue(resp.OutputSqs.ReuseConnections)
		if resp.OutputSqs.SignatureVersion != nil {
			r.OutputSqs.SignatureVersion = types.StringValue(string(*resp.OutputSqs.SignatureVersion))
		} else {
			r.OutputSqs.SignatureVersion = types.StringNull()
		}
		r.OutputSqs.Streamtags = make([]types.String, 0, len(resp.OutputSqs.Streamtags))
		for _, v := range resp.OutputSqs.Streamtags {
			r.OutputSqs.Streamtags = append(r.OutputSqs.Streamtags, types.StringValue(v))
		}
		r.OutputSqs.SystemFields = make([]types.String, 0, len(resp.OutputSqs.SystemFields))
		for _, v := range resp.OutputSqs.SystemFields {
			r.OutputSqs.SystemFields = append(r.OutputSqs.SystemFields, types.StringValue(v))
		}
		if resp.OutputSqs.Type != nil {
			r.OutputSqs.Type = types.StringValue(string(*resp.OutputSqs.Type))
		} else {
			r.OutputSqs.Type = types.StringNull()
		}
	}
	if resp.OutputStatsd != nil {
		r.OutputStatsd = &tfTypes.OutputStatsd{}
		r.OutputStatsd.ConnectionTimeout = types.Float64PointerValue(resp.OutputStatsd.ConnectionTimeout)
		r.OutputStatsd.Description = types.StringPointerValue(resp.OutputStatsd.Description)
		r.OutputStatsd.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputStatsd.DNSResolvePeriodSec)
		r.OutputStatsd.Environment = types.StringPointerValue(resp.OutputStatsd.Environment)
		r.OutputStatsd.FlushPeriodSec = types.Float64PointerValue(resp.OutputStatsd.FlushPeriodSec)
		r.OutputStatsd.Host = types.StringValue(resp.OutputStatsd.Host)
		r.OutputStatsd.ID = types.StringPointerValue(resp.OutputStatsd.ID)
		r.OutputStatsd.Mtu = types.Float64PointerValue(resp.OutputStatsd.Mtu)
		if resp.OutputStatsd.OnBackpressure != nil {
			r.OutputStatsd.OnBackpressure = types.StringValue(string(*resp.OutputStatsd.OnBackpressure))
		} else {
			r.OutputStatsd.OnBackpressure = types.StringNull()
		}
		r.OutputStatsd.Pipeline = types.StringPointerValue(resp.OutputStatsd.Pipeline)
		r.OutputStatsd.Port = types.Float64PointerValue(resp.OutputStatsd.Port)
		if resp.OutputStatsd.PqCompress != nil {
			r.OutputStatsd.PqCompress = types.StringValue(string(*resp.OutputStatsd.PqCompress))
		} else {
			r.OutputStatsd.PqCompress = types.StringNull()
		}
		if resp.OutputStatsd.PqControls == nil {
			r.OutputStatsd.PqControls = nil
		} else {
			r.OutputStatsd.PqControls = &tfTypes.OutputStatsdPqControls{}
		}
		r.OutputStatsd.PqMaxFileSize = types.StringPointerValue(resp.OutputStatsd.PqMaxFileSize)
		r.OutputStatsd.PqMaxSize = types.StringPointerValue(resp.OutputStatsd.PqMaxSize)
		if resp.OutputStatsd.PqMode != nil {
			r.OutputStatsd.PqMode = types.StringValue(string(*resp.OutputStatsd.PqMode))
		} else {
			r.OutputStatsd.PqMode = types.StringNull()
		}
		if resp.OutputStatsd.PqOnBackpressure != nil {
			r.OutputStatsd.PqOnBackpressure = types.StringValue(string(*resp.OutputStatsd.PqOnBackpressure))
		} else {
			r.OutputStatsd.PqOnBackpressure = types.StringNull()
		}
		r.OutputStatsd.PqPath = types.StringPointerValue(resp.OutputStatsd.PqPath)
		if resp.OutputStatsd.Protocol != nil {
			r.OutputStatsd.Protocol = types.StringValue(string(*resp.OutputStatsd.Protocol))
		} else {
			r.OutputStatsd.Protocol = types.StringNull()
		}
		r.OutputStatsd.Streamtags = make([]types.String, 0, len(resp.OutputStatsd.Streamtags))
		for _, v := range resp.OutputStatsd.Streamtags {
			r.OutputStatsd.Streamtags = append(r.OutputStatsd.Streamtags, types.StringValue(v))
		}
		r.OutputStatsd.SystemFields = make([]types.String, 0, len(resp.OutputStatsd.SystemFields))
		for _, v := range resp.OutputStatsd.SystemFields {
			r.OutputStatsd.SystemFields = append(r.OutputStatsd.SystemFields, types.StringValue(v))
		}
		r.OutputStatsd.ThrottleRatePerSec = types.StringPointerValue(resp.OutputStatsd.ThrottleRatePerSec)
		if resp.OutputStatsd.Type != nil {
			r.OutputStatsd.Type = types.StringValue(string(*resp.OutputStatsd.Type))
		} else {
			r.OutputStatsd.Type = types.StringNull()
		}
		r.OutputStatsd.WriteTimeout = types.Float64PointerValue(resp.OutputStatsd.WriteTimeout)
	}
	if resp.OutputStatsdExt != nil {
		r.OutputStatsdExt = &tfTypes.OutputStatsdExt{}
		r.OutputStatsdExt.ConnectionTimeout = types.Float64PointerValue(resp.OutputStatsdExt.ConnectionTimeout)
		r.OutputStatsdExt.Description = types.StringPointerValue(resp.OutputStatsdExt.Description)
		r.OutputStatsdExt.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputStatsdExt.DNSResolvePeriodSec)
		r.OutputStatsdExt.Environment = types.StringPointerValue(resp.OutputStatsdExt.Environment)
		r.OutputStatsdExt.FlushPeriodSec = types.Float64PointerValue(resp.OutputStatsdExt.FlushPeriodSec)
		r.OutputStatsdExt.Host = types.StringValue(resp.OutputStatsdExt.Host)
		r.OutputStatsdExt.ID = types.StringPointerValue(resp.OutputStatsdExt.ID)
		r.OutputStatsdExt.Mtu = types.Float64PointerValue(resp.OutputStatsdExt.Mtu)
		if resp.OutputStatsdExt.OnBackpressure != nil {
			r.OutputStatsdExt.OnBackpressure = types.StringValue(string(*resp.OutputStatsdExt.OnBackpressure))
		} else {
			r.OutputStatsdExt.OnBackpressure = types.StringNull()
		}
		r.OutputStatsdExt.Pipeline = types.StringPointerValue(resp.OutputStatsdExt.Pipeline)
		r.OutputStatsdExt.Port = types.Float64PointerValue(resp.OutputStatsdExt.Port)
		if resp.OutputStatsdExt.PqCompress != nil {
			r.OutputStatsdExt.PqCompress = types.StringValue(string(*resp.OutputStatsdExt.PqCompress))
		} else {
			r.OutputStatsdExt.PqCompress = types.StringNull()
		}
		if resp.OutputStatsdExt.PqControls == nil {
			r.OutputStatsdExt.PqControls = nil
		} else {
			r.OutputStatsdExt.PqControls = &tfTypes.OutputStatsdExtPqControls{}
		}
		r.OutputStatsdExt.PqMaxFileSize = types.StringPointerValue(resp.OutputStatsdExt.PqMaxFileSize)
		r.OutputStatsdExt.PqMaxSize = types.StringPointerValue(resp.OutputStatsdExt.PqMaxSize)
		if resp.OutputStatsdExt.PqMode != nil {
			r.OutputStatsdExt.PqMode = types.StringValue(string(*resp.OutputStatsdExt.PqMode))
		} else {
			r.OutputStatsdExt.PqMode = types.StringNull()
		}
		if resp.OutputStatsdExt.PqOnBackpressure != nil {
			r.OutputStatsdExt.PqOnBackpressure = types.StringValue(string(*resp.OutputStatsdExt.PqOnBackpressure))
		} else {
			r.OutputStatsdExt.PqOnBackpressure = types.StringNull()
		}
		r.OutputStatsdExt.PqPath = types.StringPointerValue(resp.OutputStatsdExt.PqPath)
		if resp.OutputStatsdExt.Protocol != nil {
			r.OutputStatsdExt.Protocol = types.StringValue(string(*resp.OutputStatsdExt.Protocol))
		} else {
			r.OutputStatsdExt.Protocol = types.StringNull()
		}
		r.OutputStatsdExt.Streamtags = make([]types.String, 0, len(resp.OutputStatsdExt.Streamtags))
		for _, v := range resp.OutputStatsdExt.Streamtags {
			r.OutputStatsdExt.Streamtags = append(r.OutputStatsdExt.Streamtags, types.StringValue(v))
		}
		r.OutputStatsdExt.SystemFields = make([]types.String, 0, len(resp.OutputStatsdExt.SystemFields))
		for _, v := range resp.OutputStatsdExt.SystemFields {
			r.OutputStatsdExt.SystemFields = append(r.OutputStatsdExt.SystemFields, types.StringValue(v))
		}
		r.OutputStatsdExt.ThrottleRatePerSec = types.StringPointerValue(resp.OutputStatsdExt.ThrottleRatePerSec)
		if resp.OutputStatsdExt.Type != nil {
			r.OutputStatsdExt.Type = types.StringValue(string(*resp.OutputStatsdExt.Type))
		} else {
			r.OutputStatsdExt.Type = types.StringNull()
		}
		r.OutputStatsdExt.WriteTimeout = types.Float64PointerValue(resp.OutputStatsdExt.WriteTimeout)
	}
	if resp.OutputSumoLogic != nil {
		r.OutputSumoLogic = &tfTypes.OutputSumoLogic{}
		r.OutputSumoLogic.Compress = types.BoolPointerValue(resp.OutputSumoLogic.Compress)
		r.OutputSumoLogic.Concurrency = types.Float64PointerValue(resp.OutputSumoLogic.Concurrency)
		r.OutputSumoLogic.CustomCategory = types.StringPointerValue(resp.OutputSumoLogic.CustomCategory)
		r.OutputSumoLogic.CustomSource = types.StringPointerValue(resp.OutputSumoLogic.CustomSource)
		r.OutputSumoLogic.Description = types.StringPointerValue(resp.OutputSumoLogic.Description)
		r.OutputSumoLogic.Environment = types.StringPointerValue(resp.OutputSumoLogic.Environment)
		r.OutputSumoLogic.ExtraHTTPHeaders = []tfTypes.OutputSumoLogicExtraHTTPHeader{}
		if len(r.OutputSumoLogic.ExtraHTTPHeaders) > len(resp.OutputSumoLogic.ExtraHTTPHeaders) {
			r.OutputSumoLogic.ExtraHTTPHeaders = r.OutputSumoLogic.ExtraHTTPHeaders[:len(resp.OutputSumoLogic.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount25, extraHTTPHeadersItem25 := range resp.OutputSumoLogic.ExtraHTTPHeaders {
			var extraHTTPHeaders25 tfTypes.OutputSumoLogicExtraHTTPHeader
			extraHTTPHeaders25.Name = types.StringPointerValue(extraHTTPHeadersItem25.Name)
			extraHTTPHeaders25.Value = types.StringValue(extraHTTPHeadersItem25.Value)
			if extraHTTPHeadersCount25+1 > len(r.OutputSumoLogic.ExtraHTTPHeaders) {
				r.OutputSumoLogic.ExtraHTTPHeaders = append(r.OutputSumoLogic.ExtraHTTPHeaders, extraHTTPHeaders25)
			} else {
				r.OutputSumoLogic.ExtraHTTPHeaders[extraHTTPHeadersCount25].Name = extraHTTPHeaders25.Name
				r.OutputSumoLogic.ExtraHTTPHeaders[extraHTTPHeadersCount25].Value = extraHTTPHeaders25.Value
			}
		}
		if resp.OutputSumoLogic.FailedRequestLoggingMode != nil {
			r.OutputSumoLogic.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputSumoLogic.FailedRequestLoggingMode))
		} else {
			r.OutputSumoLogic.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputSumoLogic.FlushPeriodSec = types.Float64PointerValue(resp.OutputSumoLogic.FlushPeriodSec)
		if resp.OutputSumoLogic.Format != nil {
			r.OutputSumoLogic.Format = types.StringValue(string(*resp.OutputSumoLogic.Format))
		} else {
			r.OutputSumoLogic.Format = types.StringNull()
		}
		r.OutputSumoLogic.ID = types.StringPointerValue(resp.OutputSumoLogic.ID)
		r.OutputSumoLogic.MaxPayloadEvents = types.Float64PointerValue(resp.OutputSumoLogic.MaxPayloadEvents)
		r.OutputSumoLogic.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputSumoLogic.MaxPayloadSizeKB)
		if resp.OutputSumoLogic.OnBackpressure != nil {
			r.OutputSumoLogic.OnBackpressure = types.StringValue(string(*resp.OutputSumoLogic.OnBackpressure))
		} else {
			r.OutputSumoLogic.OnBackpressure = types.StringNull()
		}
		r.OutputSumoLogic.Pipeline = types.StringPointerValue(resp.OutputSumoLogic.Pipeline)
		if resp.OutputSumoLogic.PqCompress != nil {
			r.OutputSumoLogic.PqCompress = types.StringValue(string(*resp.OutputSumoLogic.PqCompress))
		} else {
			r.OutputSumoLogic.PqCompress = types.StringNull()
		}
		if resp.OutputSumoLogic.PqControls == nil {
			r.OutputSumoLogic.PqControls = nil
		} else {
			r.OutputSumoLogic.PqControls = &tfTypes.OutputSumoLogicPqControls{}
		}
		r.OutputSumoLogic.PqMaxFileSize = types.StringPointerValue(resp.OutputSumoLogic.PqMaxFileSize)
		r.OutputSumoLogic.PqMaxSize = types.StringPointerValue(resp.OutputSumoLogic.PqMaxSize)
		if resp.OutputSumoLogic.PqMode != nil {
			r.OutputSumoLogic.PqMode = types.StringValue(string(*resp.OutputSumoLogic.PqMode))
		} else {
			r.OutputSumoLogic.PqMode = types.StringNull()
		}
		if resp.OutputSumoLogic.PqOnBackpressure != nil {
			r.OutputSumoLogic.PqOnBackpressure = types.StringValue(string(*resp.OutputSumoLogic.PqOnBackpressure))
		} else {
			r.OutputSumoLogic.PqOnBackpressure = types.StringNull()
		}
		r.OutputSumoLogic.PqPath = types.StringPointerValue(resp.OutputSumoLogic.PqPath)
		r.OutputSumoLogic.RejectUnauthorized = types.BoolPointerValue(resp.OutputSumoLogic.RejectUnauthorized)
		r.OutputSumoLogic.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputSumoLogic.ResponseHonorRetryAfterHeader)
		r.OutputSumoLogic.ResponseRetrySettings = []tfTypes.OutputSumoLogicResponseRetrySetting{}
		if len(r.OutputSumoLogic.ResponseRetrySettings) > len(resp.OutputSumoLogic.ResponseRetrySettings) {
			r.OutputSumoLogic.ResponseRetrySettings = r.OutputSumoLogic.ResponseRetrySettings[:len(resp.OutputSumoLogic.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount26, responseRetrySettingsItem26 := range resp.OutputSumoLogic.ResponseRetrySettings {
			var responseRetrySettings26 tfTypes.OutputSumoLogicResponseRetrySetting
			responseRetrySettings26.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem26.BackoffRate)
			responseRetrySettings26.HTTPStatus = types.Float64Value(responseRetrySettingsItem26.HTTPStatus)
			responseRetrySettings26.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem26.InitialBackoff)
			responseRetrySettings26.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem26.MaxBackoff)
			if responseRetrySettingsCount26+1 > len(r.OutputSumoLogic.ResponseRetrySettings) {
				r.OutputSumoLogic.ResponseRetrySettings = append(r.OutputSumoLogic.ResponseRetrySettings, responseRetrySettings26)
			} else {
				r.OutputSumoLogic.ResponseRetrySettings[responseRetrySettingsCount26].BackoffRate = responseRetrySettings26.BackoffRate
				r.OutputSumoLogic.ResponseRetrySettings[responseRetrySettingsCount26].HTTPStatus = responseRetrySettings26.HTTPStatus
				r.OutputSumoLogic.ResponseRetrySettings[responseRetrySettingsCount26].InitialBackoff = responseRetrySettings26.InitialBackoff
				r.OutputSumoLogic.ResponseRetrySettings[responseRetrySettingsCount26].MaxBackoff = responseRetrySettings26.MaxBackoff
			}
		}
		r.OutputSumoLogic.SafeHeaders = make([]types.String, 0, len(resp.OutputSumoLogic.SafeHeaders))
		for _, v := range resp.OutputSumoLogic.SafeHeaders {
			r.OutputSumoLogic.SafeHeaders = append(r.OutputSumoLogic.SafeHeaders, types.StringValue(v))
		}
		r.OutputSumoLogic.Streamtags = make([]types.String, 0, len(resp.OutputSumoLogic.Streamtags))
		for _, v := range resp.OutputSumoLogic.Streamtags {
			r.OutputSumoLogic.Streamtags = append(r.OutputSumoLogic.Streamtags, types.StringValue(v))
		}
		r.OutputSumoLogic.SystemFields = make([]types.String, 0, len(resp.OutputSumoLogic.SystemFields))
		for _, v := range resp.OutputSumoLogic.SystemFields {
			r.OutputSumoLogic.SystemFields = append(r.OutputSumoLogic.SystemFields, types.StringValue(v))
		}
		if resp.OutputSumoLogic.TimeoutRetrySettings == nil {
			r.OutputSumoLogic.TimeoutRetrySettings = nil
		} else {
			r.OutputSumoLogic.TimeoutRetrySettings = &tfTypes.OutputSumoLogicTimeoutRetrySettings{}
			r.OutputSumoLogic.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputSumoLogic.TimeoutRetrySettings.BackoffRate)
			r.OutputSumoLogic.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputSumoLogic.TimeoutRetrySettings.InitialBackoff)
			r.OutputSumoLogic.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputSumoLogic.TimeoutRetrySettings.MaxBackoff)
			r.OutputSumoLogic.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputSumoLogic.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputSumoLogic.TimeoutSec = types.Float64PointerValue(resp.OutputSumoLogic.TimeoutSec)
		r.OutputSumoLogic.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputSumoLogic.TotalMemoryLimitKB)
		r.OutputSumoLogic.Type = types.StringValue(string(resp.OutputSumoLogic.Type))
		r.OutputSumoLogic.URL = types.StringValue(resp.OutputSumoLogic.URL)
		r.OutputSumoLogic.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputSumoLogic.UseRoundRobinDNS)
	}
	if resp.OutputSyslog != nil {
		r.OutputSyslog = &tfTypes.OutputSyslog{}
		r.OutputSyslog.AppName = types.StringPointerValue(resp.OutputSyslog.AppName)
		r.OutputSyslog.ConnectionTimeout = types.Float64PointerValue(resp.OutputSyslog.ConnectionTimeout)
		r.OutputSyslog.Description = types.StringPointerValue(resp.OutputSyslog.Description)
		r.OutputSyslog.Environment = types.StringPointerValue(resp.OutputSyslog.Environment)
		if resp.OutputSyslog.Facility != nil {
			r.OutputSyslog.Facility = types.Int64Value(int64(*resp.OutputSyslog.Facility))
		} else {
			r.OutputSyslog.Facility = types.Int64Null()
		}
		r.OutputSyslog.Host = types.StringPointerValue(resp.OutputSyslog.Host)
		r.OutputSyslog.ID = types.StringValue(resp.OutputSyslog.ID)
		r.OutputSyslog.LoadBalanced = types.BoolPointerValue(resp.OutputSyslog.LoadBalanced)
		r.OutputSyslog.LogFailedRequests = types.BoolPointerValue(resp.OutputSyslog.LogFailedRequests)
		r.OutputSyslog.MaxRecordSize = types.Float64PointerValue(resp.OutputSyslog.MaxRecordSize)
		if resp.OutputSyslog.MessageFormat != nil {
			r.OutputSyslog.MessageFormat = types.StringValue(string(*resp.OutputSyslog.MessageFormat))
		} else {
			r.OutputSyslog.MessageFormat = types.StringNull()
		}
		r.OutputSyslog.OctetCountFraming = types.BoolPointerValue(resp.OutputSyslog.OctetCountFraming)
		if resp.OutputSyslog.OnBackpressure != nil {
			r.OutputSyslog.OnBackpressure = types.StringValue(string(*resp.OutputSyslog.OnBackpressure))
		} else {
			r.OutputSyslog.OnBackpressure = types.StringNull()
		}
		r.OutputSyslog.Pipeline = types.StringPointerValue(resp.OutputSyslog.Pipeline)
		r.OutputSyslog.Port = types.Float64PointerValue(resp.OutputSyslog.Port)
		if resp.OutputSyslog.PqCompress != nil {
			r.OutputSyslog.PqCompress = types.StringValue(string(*resp.OutputSyslog.PqCompress))
		} else {
			r.OutputSyslog.PqCompress = types.StringNull()
		}
		if resp.OutputSyslog.PqControls == nil {
			r.OutputSyslog.PqControls = nil
		} else {
			r.OutputSyslog.PqControls = &tfTypes.OutputSyslogPqControls{}
		}
		r.OutputSyslog.PqMaxFileSize = types.StringPointerValue(resp.OutputSyslog.PqMaxFileSize)
		r.OutputSyslog.PqMaxSize = types.StringPointerValue(resp.OutputSyslog.PqMaxSize)
		if resp.OutputSyslog.PqMode != nil {
			r.OutputSyslog.PqMode = types.StringValue(string(*resp.OutputSyslog.PqMode))
		} else {
			r.OutputSyslog.PqMode = types.StringNull()
		}
		if resp.OutputSyslog.PqOnBackpressure != nil {
			r.OutputSyslog.PqOnBackpressure = types.StringValue(string(*resp.OutputSyslog.PqOnBackpressure))
		} else {
			r.OutputSyslog.PqOnBackpressure = types.StringNull()
		}
		r.OutputSyslog.PqPath = types.StringPointerValue(resp.OutputSyslog.PqPath)
		if resp.OutputSyslog.Protocol != nil {
			r.OutputSyslog.Protocol = types.StringValue(string(*resp.OutputSyslog.Protocol))
		} else {
			r.OutputSyslog.Protocol = types.StringNull()
		}
		if resp.OutputSyslog.Severity != nil {
			r.OutputSyslog.Severity = types.Int64Value(int64(*resp.OutputSyslog.Severity))
		} else {
			r.OutputSyslog.Severity = types.Int64Null()
		}
		r.OutputSyslog.Streamtags = make([]types.String, 0, len(resp.OutputSyslog.Streamtags))
		for _, v := range resp.OutputSyslog.Streamtags {
			r.OutputSyslog.Streamtags = append(r.OutputSyslog.Streamtags, types.StringValue(v))
		}
		r.OutputSyslog.SystemFields = make([]types.String, 0, len(resp.OutputSyslog.SystemFields))
		for _, v := range resp.OutputSyslog.SystemFields {
			r.OutputSyslog.SystemFields = append(r.OutputSyslog.SystemFields, types.StringValue(v))
		}
		r.OutputSyslog.ThrottleRatePerSec = types.StringPointerValue(resp.OutputSyslog.ThrottleRatePerSec)
		if resp.OutputSyslog.TimestampFormat != nil {
			r.OutputSyslog.TimestampFormat = types.StringValue(string(*resp.OutputSyslog.TimestampFormat))
		} else {
			r.OutputSyslog.TimestampFormat = types.StringNull()
		}
		if resp.OutputSyslog.TLS == nil {
			r.OutputSyslog.TLS = nil
		} else {
			r.OutputSyslog.TLS = &tfTypes.OutputSyslogTLSSettingsClientSide{}
			r.OutputSyslog.TLS.CaPath = types.StringPointerValue(resp.OutputSyslog.TLS.CaPath)
			r.OutputSyslog.TLS.CertificateName = types.StringPointerValue(resp.OutputSyslog.TLS.CertificateName)
			r.OutputSyslog.TLS.CertPath = types.StringPointerValue(resp.OutputSyslog.TLS.CertPath)
			r.OutputSyslog.TLS.Disabled = types.BoolPointerValue(resp.OutputSyslog.TLS.Disabled)
			if resp.OutputSyslog.TLS.MaxVersion != nil {
				r.OutputSyslog.TLS.MaxVersion = types.StringValue(string(*resp.OutputSyslog.TLS.MaxVersion))
			} else {
				r.OutputSyslog.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputSyslog.TLS.MinVersion != nil {
				r.OutputSyslog.TLS.MinVersion = types.StringValue(string(*resp.OutputSyslog.TLS.MinVersion))
			} else {
				r.OutputSyslog.TLS.MinVersion = types.StringNull()
			}
			r.OutputSyslog.TLS.Passphrase = types.StringPointerValue(resp.OutputSyslog.TLS.Passphrase)
			r.OutputSyslog.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputSyslog.TLS.PrivKeyPath)
			r.OutputSyslog.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputSyslog.TLS.RejectUnauthorized)
			r.OutputSyslog.TLS.Servername = types.StringPointerValue(resp.OutputSyslog.TLS.Servername)
		}
		r.OutputSyslog.Type = types.StringValue(string(resp.OutputSyslog.Type))
		r.OutputSyslog.UDPDNSResolvePeriodSec = types.Float64PointerValue(resp.OutputSyslog.UDPDNSResolvePeriodSec)
		r.OutputSyslog.WriteTimeout = types.Float64PointerValue(resp.OutputSyslog.WriteTimeout)
	}
	if resp.OutputTcpjson != nil {
		r.OutputTcpjson = &tfTypes.OutputTcpjson{}
		r.OutputTcpjson.AuthToken = types.StringPointerValue(resp.OutputTcpjson.AuthToken)
		if resp.OutputTcpjson.AuthType != nil {
			r.OutputTcpjson.AuthType = types.StringValue(string(*resp.OutputTcpjson.AuthType))
		} else {
			r.OutputTcpjson.AuthType = types.StringNull()
		}
		if resp.OutputTcpjson.Compression != nil {
			r.OutputTcpjson.Compression = types.StringValue(string(*resp.OutputTcpjson.Compression))
		} else {
			r.OutputTcpjson.Compression = types.StringNull()
		}
		r.OutputTcpjson.ConnectionTimeout = types.Float64PointerValue(resp.OutputTcpjson.ConnectionTimeout)
		r.OutputTcpjson.Description = types.StringPointerValue(resp.OutputTcpjson.Description)
		r.OutputTcpjson.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputTcpjson.DNSResolvePeriodSec)
		r.OutputTcpjson.Environment = types.StringPointerValue(resp.OutputTcpjson.Environment)
		r.OutputTcpjson.ExcludeSelf = types.BoolPointerValue(resp.OutputTcpjson.ExcludeSelf)
		r.OutputTcpjson.Host = types.StringPointerValue(resp.OutputTcpjson.Host)
		r.OutputTcpjson.Hosts = []tfTypes.OutputTcpjsonHost{}
		if len(r.OutputTcpjson.Hosts) > len(resp.OutputTcpjson.Hosts) {
			r.OutputTcpjson.Hosts = r.OutputTcpjson.Hosts[:len(resp.OutputTcpjson.Hosts)]
		}
		for hostsCount4, hostsItem4 := range resp.OutputTcpjson.Hosts {
			var hosts4 tfTypes.OutputTcpjsonHost
			hosts4.Host = types.StringValue(hostsItem4.Host)
			hosts4.Port = types.Float64Value(hostsItem4.Port)
			hosts4.Servername = types.StringPointerValue(hostsItem4.Servername)
			if hostsItem4.TLS != nil {
				hosts4.TLS = types.StringValue(string(*hostsItem4.TLS))
			} else {
				hosts4.TLS = types.StringNull()
			}
			hosts4.Weight = types.Float64PointerValue(hostsItem4.Weight)
			if hostsCount4+1 > len(r.OutputTcpjson.Hosts) {
				r.OutputTcpjson.Hosts = append(r.OutputTcpjson.Hosts, hosts4)
			} else {
				r.OutputTcpjson.Hosts[hostsCount4].Host = hosts4.Host
				r.OutputTcpjson.Hosts[hostsCount4].Port = hosts4.Port
				r.OutputTcpjson.Hosts[hostsCount4].Servername = hosts4.Servername
				r.OutputTcpjson.Hosts[hostsCount4].TLS = hosts4.TLS
				r.OutputTcpjson.Hosts[hostsCount4].Weight = hosts4.Weight
			}
		}
		r.OutputTcpjson.ID = types.StringValue(resp.OutputTcpjson.ID)
		r.OutputTcpjson.LoadBalanced = types.BoolPointerValue(resp.OutputTcpjson.LoadBalanced)
		r.OutputTcpjson.LoadBalanceStatsPeriodSec = types.Float64PointerValue(resp.OutputTcpjson.LoadBalanceStatsPeriodSec)
		r.OutputTcpjson.LogFailedRequests = types.BoolPointerValue(resp.OutputTcpjson.LogFailedRequests)
		r.OutputTcpjson.MaxConcurrentSenders = types.Float64PointerValue(resp.OutputTcpjson.MaxConcurrentSenders)
		if resp.OutputTcpjson.OnBackpressure != nil {
			r.OutputTcpjson.OnBackpressure = types.StringValue(string(*resp.OutputTcpjson.OnBackpressure))
		} else {
			r.OutputTcpjson.OnBackpressure = types.StringNull()
		}
		r.OutputTcpjson.Pipeline = types.StringPointerValue(resp.OutputTcpjson.Pipeline)
		r.OutputTcpjson.Port = types.Float64PointerValue(resp.OutputTcpjson.Port)
		if resp.OutputTcpjson.PqCompress != nil {
			r.OutputTcpjson.PqCompress = types.StringValue(string(*resp.OutputTcpjson.PqCompress))
		} else {
			r.OutputTcpjson.PqCompress = types.StringNull()
		}
		if resp.OutputTcpjson.PqControls == nil {
			r.OutputTcpjson.PqControls = nil
		} else {
			r.OutputTcpjson.PqControls = &tfTypes.OutputTcpjsonPqControls{}
		}
		r.OutputTcpjson.PqMaxFileSize = types.StringPointerValue(resp.OutputTcpjson.PqMaxFileSize)
		r.OutputTcpjson.PqMaxSize = types.StringPointerValue(resp.OutputTcpjson.PqMaxSize)
		if resp.OutputTcpjson.PqMode != nil {
			r.OutputTcpjson.PqMode = types.StringValue(string(*resp.OutputTcpjson.PqMode))
		} else {
			r.OutputTcpjson.PqMode = types.StringNull()
		}
		if resp.OutputTcpjson.PqOnBackpressure != nil {
			r.OutputTcpjson.PqOnBackpressure = types.StringValue(string(*resp.OutputTcpjson.PqOnBackpressure))
		} else {
			r.OutputTcpjson.PqOnBackpressure = types.StringNull()
		}
		r.OutputTcpjson.PqPath = types.StringPointerValue(resp.OutputTcpjson.PqPath)
		r.OutputTcpjson.SendHeader = types.BoolPointerValue(resp.OutputTcpjson.SendHeader)
		r.OutputTcpjson.Streamtags = make([]types.String, 0, len(resp.OutputTcpjson.Streamtags))
		for _, v := range resp.OutputTcpjson.Streamtags {
			r.OutputTcpjson.Streamtags = append(r.OutputTcpjson.Streamtags, types.StringValue(v))
		}
		r.OutputTcpjson.SystemFields = make([]types.String, 0, len(resp.OutputTcpjson.SystemFields))
		for _, v := range resp.OutputTcpjson.SystemFields {
			r.OutputTcpjson.SystemFields = append(r.OutputTcpjson.SystemFields, types.StringValue(v))
		}
		r.OutputTcpjson.TextSecret = types.StringPointerValue(resp.OutputTcpjson.TextSecret)
		r.OutputTcpjson.ThrottleRatePerSec = types.StringPointerValue(resp.OutputTcpjson.ThrottleRatePerSec)
		if resp.OutputTcpjson.TLS == nil {
			r.OutputTcpjson.TLS = nil
		} else {
			r.OutputTcpjson.TLS = &tfTypes.OutputTcpjsonTLSSettingsClientSide{}
			r.OutputTcpjson.TLS.CaPath = types.StringPointerValue(resp.OutputTcpjson.TLS.CaPath)
			r.OutputTcpjson.TLS.CertificateName = types.StringPointerValue(resp.OutputTcpjson.TLS.CertificateName)
			r.OutputTcpjson.TLS.CertPath = types.StringPointerValue(resp.OutputTcpjson.TLS.CertPath)
			r.OutputTcpjson.TLS.Disabled = types.BoolPointerValue(resp.OutputTcpjson.TLS.Disabled)
			if resp.OutputTcpjson.TLS.MaxVersion != nil {
				r.OutputTcpjson.TLS.MaxVersion = types.StringValue(string(*resp.OutputTcpjson.TLS.MaxVersion))
			} else {
				r.OutputTcpjson.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputTcpjson.TLS.MinVersion != nil {
				r.OutputTcpjson.TLS.MinVersion = types.StringValue(string(*resp.OutputTcpjson.TLS.MinVersion))
			} else {
				r.OutputTcpjson.TLS.MinVersion = types.StringNull()
			}
			r.OutputTcpjson.TLS.Passphrase = types.StringPointerValue(resp.OutputTcpjson.TLS.Passphrase)
			r.OutputTcpjson.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputTcpjson.TLS.PrivKeyPath)
			r.OutputTcpjson.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputTcpjson.TLS.RejectUnauthorized)
			r.OutputTcpjson.TLS.Servername = types.StringPointerValue(resp.OutputTcpjson.TLS.Servername)
		}
		r.OutputTcpjson.TokenTTLMinutes = types.Float64PointerValue(resp.OutputTcpjson.TokenTTLMinutes)
		r.OutputTcpjson.Type = types.StringValue(string(resp.OutputTcpjson.Type))
		r.OutputTcpjson.WriteTimeout = types.Float64PointerValue(resp.OutputTcpjson.WriteTimeout)
	}
	if resp.OutputWavefront != nil {
		r.OutputWavefront = &tfTypes.OutputWavefront{}
		if resp.OutputWavefront.AuthType != nil {
			r.OutputWavefront.AuthType = types.StringValue(string(*resp.OutputWavefront.AuthType))
		} else {
			r.OutputWavefront.AuthType = types.StringNull()
		}
		r.OutputWavefront.Compress = types.BoolPointerValue(resp.OutputWavefront.Compress)
		r.OutputWavefront.Concurrency = types.Float64PointerValue(resp.OutputWavefront.Concurrency)
		r.OutputWavefront.Description = types.StringPointerValue(resp.OutputWavefront.Description)
		r.OutputWavefront.Domain = types.StringPointerValue(resp.OutputWavefront.Domain)
		r.OutputWavefront.Environment = types.StringPointerValue(resp.OutputWavefront.Environment)
		r.OutputWavefront.ExtraHTTPHeaders = []tfTypes.OutputWavefrontExtraHTTPHeader{}
		if len(r.OutputWavefront.ExtraHTTPHeaders) > len(resp.OutputWavefront.ExtraHTTPHeaders) {
			r.OutputWavefront.ExtraHTTPHeaders = r.OutputWavefront.ExtraHTTPHeaders[:len(resp.OutputWavefront.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount26, extraHTTPHeadersItem26 := range resp.OutputWavefront.ExtraHTTPHeaders {
			var extraHTTPHeaders26 tfTypes.OutputWavefrontExtraHTTPHeader
			extraHTTPHeaders26.Name = types.StringPointerValue(extraHTTPHeadersItem26.Name)
			extraHTTPHeaders26.Value = types.StringValue(extraHTTPHeadersItem26.Value)
			if extraHTTPHeadersCount26+1 > len(r.OutputWavefront.ExtraHTTPHeaders) {
				r.OutputWavefront.ExtraHTTPHeaders = append(r.OutputWavefront.ExtraHTTPHeaders, extraHTTPHeaders26)
			} else {
				r.OutputWavefront.ExtraHTTPHeaders[extraHTTPHeadersCount26].Name = extraHTTPHeaders26.Name
				r.OutputWavefront.ExtraHTTPHeaders[extraHTTPHeadersCount26].Value = extraHTTPHeaders26.Value
			}
		}
		if resp.OutputWavefront.FailedRequestLoggingMode != nil {
			r.OutputWavefront.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputWavefront.FailedRequestLoggingMode))
		} else {
			r.OutputWavefront.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputWavefront.FlushPeriodSec = types.Float64PointerValue(resp.OutputWavefront.FlushPeriodSec)
		r.OutputWavefront.ID = types.StringPointerValue(resp.OutputWavefront.ID)
		r.OutputWavefront.MaxPayloadEvents = types.Float64PointerValue(resp.OutputWavefront.MaxPayloadEvents)
		r.OutputWavefront.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputWavefront.MaxPayloadSizeKB)
		if resp.OutputWavefront.OnBackpressure != nil {
			r.OutputWavefront.OnBackpressure = types.StringValue(string(*resp.OutputWavefront.OnBackpressure))
		} else {
			r.OutputWavefront.OnBackpressure = types.StringNull()
		}
		r.OutputWavefront.Pipeline = types.StringPointerValue(resp.OutputWavefront.Pipeline)
		if resp.OutputWavefront.PqCompress != nil {
			r.OutputWavefront.PqCompress = types.StringValue(string(*resp.OutputWavefront.PqCompress))
		} else {
			r.OutputWavefront.PqCompress = types.StringNull()
		}
		if resp.OutputWavefront.PqControls == nil {
			r.OutputWavefront.PqControls = nil
		} else {
			r.OutputWavefront.PqControls = &tfTypes.OutputWavefrontPqControls{}
		}
		r.OutputWavefront.PqMaxFileSize = types.StringPointerValue(resp.OutputWavefront.PqMaxFileSize)
		r.OutputWavefront.PqMaxSize = types.StringPointerValue(resp.OutputWavefront.PqMaxSize)
		if resp.OutputWavefront.PqMode != nil {
			r.OutputWavefront.PqMode = types.StringValue(string(*resp.OutputWavefront.PqMode))
		} else {
			r.OutputWavefront.PqMode = types.StringNull()
		}
		if resp.OutputWavefront.PqOnBackpressure != nil {
			r.OutputWavefront.PqOnBackpressure = types.StringValue(string(*resp.OutputWavefront.PqOnBackpressure))
		} else {
			r.OutputWavefront.PqOnBackpressure = types.StringNull()
		}
		r.OutputWavefront.PqPath = types.StringPointerValue(resp.OutputWavefront.PqPath)
		r.OutputWavefront.RejectUnauthorized = types.BoolPointerValue(resp.OutputWavefront.RejectUnauthorized)
		r.OutputWavefront.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputWavefront.ResponseHonorRetryAfterHeader)
		r.OutputWavefront.ResponseRetrySettings = []tfTypes.OutputWavefrontResponseRetrySetting{}
		if len(r.OutputWavefront.ResponseRetrySettings) > len(resp.OutputWavefront.ResponseRetrySettings) {
			r.OutputWavefront.ResponseRetrySettings = r.OutputWavefront.ResponseRetrySettings[:len(resp.OutputWavefront.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount27, responseRetrySettingsItem27 := range resp.OutputWavefront.ResponseRetrySettings {
			var responseRetrySettings27 tfTypes.OutputWavefrontResponseRetrySetting
			responseRetrySettings27.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem27.BackoffRate)
			responseRetrySettings27.HTTPStatus = types.Float64Value(responseRetrySettingsItem27.HTTPStatus)
			responseRetrySettings27.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem27.InitialBackoff)
			responseRetrySettings27.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem27.MaxBackoff)
			if responseRetrySettingsCount27+1 > len(r.OutputWavefront.ResponseRetrySettings) {
				r.OutputWavefront.ResponseRetrySettings = append(r.OutputWavefront.ResponseRetrySettings, responseRetrySettings27)
			} else {
				r.OutputWavefront.ResponseRetrySettings[responseRetrySettingsCount27].BackoffRate = responseRetrySettings27.BackoffRate
				r.OutputWavefront.ResponseRetrySettings[responseRetrySettingsCount27].HTTPStatus = responseRetrySettings27.HTTPStatus
				r.OutputWavefront.ResponseRetrySettings[responseRetrySettingsCount27].InitialBackoff = responseRetrySettings27.InitialBackoff
				r.OutputWavefront.ResponseRetrySettings[responseRetrySettingsCount27].MaxBackoff = responseRetrySettings27.MaxBackoff
			}
		}
		r.OutputWavefront.SafeHeaders = make([]types.String, 0, len(resp.OutputWavefront.SafeHeaders))
		for _, v := range resp.OutputWavefront.SafeHeaders {
			r.OutputWavefront.SafeHeaders = append(r.OutputWavefront.SafeHeaders, types.StringValue(v))
		}
		r.OutputWavefront.Streamtags = make([]types.String, 0, len(resp.OutputWavefront.Streamtags))
		for _, v := range resp.OutputWavefront.Streamtags {
			r.OutputWavefront.Streamtags = append(r.OutputWavefront.Streamtags, types.StringValue(v))
		}
		r.OutputWavefront.SystemFields = make([]types.String, 0, len(resp.OutputWavefront.SystemFields))
		for _, v := range resp.OutputWavefront.SystemFields {
			r.OutputWavefront.SystemFields = append(r.OutputWavefront.SystemFields, types.StringValue(v))
		}
		r.OutputWavefront.TextSecret = types.StringPointerValue(resp.OutputWavefront.TextSecret)
		if resp.OutputWavefront.TimeoutRetrySettings == nil {
			r.OutputWavefront.TimeoutRetrySettings = nil
		} else {
			r.OutputWavefront.TimeoutRetrySettings = &tfTypes.OutputWavefrontTimeoutRetrySettings{}
			r.OutputWavefront.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputWavefront.TimeoutRetrySettings.BackoffRate)
			r.OutputWavefront.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputWavefront.TimeoutRetrySettings.InitialBackoff)
			r.OutputWavefront.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputWavefront.TimeoutRetrySettings.MaxBackoff)
			r.OutputWavefront.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputWavefront.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputWavefront.TimeoutSec = types.Float64PointerValue(resp.OutputWavefront.TimeoutSec)
		r.OutputWavefront.Token = types.StringPointerValue(resp.OutputWavefront.Token)
		r.OutputWavefront.Type = types.StringValue(string(resp.OutputWavefront.Type))
		r.OutputWavefront.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputWavefront.UseRoundRobinDNS)
	}
	if resp.OutputWebhook != nil {
		r.OutputWebhook = &tfTypes.OutputWebhook{}
		r.OutputWebhook.AdvancedContentType = types.StringPointerValue(resp.OutputWebhook.AdvancedContentType)
		r.OutputWebhook.AuthHeaderExpr = types.StringPointerValue(resp.OutputWebhook.AuthHeaderExpr)
		if resp.OutputWebhook.AuthType != nil {
			r.OutputWebhook.AuthType = types.StringValue(string(*resp.OutputWebhook.AuthType))
		} else {
			r.OutputWebhook.AuthType = types.StringNull()
		}
		r.OutputWebhook.Compress = types.BoolPointerValue(resp.OutputWebhook.Compress)
		r.OutputWebhook.Concurrency = types.Float64PointerValue(resp.OutputWebhook.Concurrency)
		r.OutputWebhook.CredentialsSecret = types.StringPointerValue(resp.OutputWebhook.CredentialsSecret)
		r.OutputWebhook.CustomContentType = types.StringPointerValue(resp.OutputWebhook.CustomContentType)
		r.OutputWebhook.CustomDropWhenNull = types.BoolPointerValue(resp.OutputWebhook.CustomDropWhenNull)
		r.OutputWebhook.CustomEventDelimiter = types.StringPointerValue(resp.OutputWebhook.CustomEventDelimiter)
		r.OutputWebhook.CustomPayloadExpression = types.StringPointerValue(resp.OutputWebhook.CustomPayloadExpression)
		r.OutputWebhook.CustomSourceExpression = types.StringPointerValue(resp.OutputWebhook.CustomSourceExpression)
		r.OutputWebhook.Description = types.StringPointerValue(resp.OutputWebhook.Description)
		r.OutputWebhook.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputWebhook.DNSResolvePeriodSec)
		r.OutputWebhook.Environment = types.StringPointerValue(resp.OutputWebhook.Environment)
		r.OutputWebhook.ExcludeSelf = types.BoolPointerValue(resp.OutputWebhook.ExcludeSelf)
		r.OutputWebhook.ExtraHTTPHeaders = []tfTypes.OutputWebhookExtraHTTPHeader{}
		if len(r.OutputWebhook.ExtraHTTPHeaders) > len(resp.OutputWebhook.ExtraHTTPHeaders) {
			r.OutputWebhook.ExtraHTTPHeaders = r.OutputWebhook.ExtraHTTPHeaders[:len(resp.OutputWebhook.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount27, extraHTTPHeadersItem27 := range resp.OutputWebhook.ExtraHTTPHeaders {
			var extraHTTPHeaders27 tfTypes.OutputWebhookExtraHTTPHeader
			extraHTTPHeaders27.Name = types.StringPointerValue(extraHTTPHeadersItem27.Name)
			extraHTTPHeaders27.Value = types.StringValue(extraHTTPHeadersItem27.Value)
			if extraHTTPHeadersCount27+1 > len(r.OutputWebhook.ExtraHTTPHeaders) {
				r.OutputWebhook.ExtraHTTPHeaders = append(r.OutputWebhook.ExtraHTTPHeaders, extraHTTPHeaders27)
			} else {
				r.OutputWebhook.ExtraHTTPHeaders[extraHTTPHeadersCount27].Name = extraHTTPHeaders27.Name
				r.OutputWebhook.ExtraHTTPHeaders[extraHTTPHeadersCount27].Value = extraHTTPHeaders27.Value
			}
		}
		if resp.OutputWebhook.FailedRequestLoggingMode != nil {
			r.OutputWebhook.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputWebhook.FailedRequestLoggingMode))
		} else {
			r.OutputWebhook.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputWebhook.FlushPeriodSec = types.Float64PointerValue(resp.OutputWebhook.FlushPeriodSec)
		if resp.OutputWebhook.Format != nil {
			r.OutputWebhook.Format = types.StringValue(string(*resp.OutputWebhook.Format))
		} else {
			r.OutputWebhook.Format = types.StringNull()
		}
		r.OutputWebhook.FormatEventCode = types.StringPointerValue(resp.OutputWebhook.FormatEventCode)
		r.OutputWebhook.FormatPayloadCode = types.StringPointerValue(resp.OutputWebhook.FormatPayloadCode)
		r.OutputWebhook.ID = types.StringValue(resp.OutputWebhook.ID)
		r.OutputWebhook.KeepAlive = types.BoolPointerValue(resp.OutputWebhook.KeepAlive)
		r.OutputWebhook.LoadBalanced = types.BoolPointerValue(resp.OutputWebhook.LoadBalanced)
		r.OutputWebhook.LoadBalanceStatsPeriodSec = types.Float64PointerValue(resp.OutputWebhook.LoadBalanceStatsPeriodSec)
		r.OutputWebhook.LoginURL = types.StringPointerValue(resp.OutputWebhook.LoginURL)
		r.OutputWebhook.MaxPayloadEvents = types.Float64PointerValue(resp.OutputWebhook.MaxPayloadEvents)
		r.OutputWebhook.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputWebhook.MaxPayloadSizeKB)
		if resp.OutputWebhook.Method != nil {
			r.OutputWebhook.Method = types.StringValue(string(*resp.OutputWebhook.Method))
		} else {
			r.OutputWebhook.Method = types.StringNull()
		}
		r.OutputWebhook.OauthHeaders = []tfTypes.OutputWebhookOauthHeader{}
		if len(r.OutputWebhook.OauthHeaders) > len(resp.OutputWebhook.OauthHeaders) {
			r.OutputWebhook.OauthHeaders = r.OutputWebhook.OauthHeaders[:len(resp.OutputWebhook.OauthHeaders)]
		}
		for oauthHeadersCount4, oauthHeadersItem4 := range resp.OutputWebhook.OauthHeaders {
			var oauthHeaders4 tfTypes.OutputWebhookOauthHeader
			oauthHeaders4.Name = types.StringValue(oauthHeadersItem4.Name)
			oauthHeaders4.Value = types.StringValue(oauthHeadersItem4.Value)
			if oauthHeadersCount4+1 > len(r.OutputWebhook.OauthHeaders) {
				r.OutputWebhook.OauthHeaders = append(r.OutputWebhook.OauthHeaders, oauthHeaders4)
			} else {
				r.OutputWebhook.OauthHeaders[oauthHeadersCount4].Name = oauthHeaders4.Name
				r.OutputWebhook.OauthHeaders[oauthHeadersCount4].Value = oauthHeaders4.Value
			}
		}
		r.OutputWebhook.OauthParams = []tfTypes.OutputWebhookOauthParam{}
		if len(r.OutputWebhook.OauthParams) > len(resp.OutputWebhook.OauthParams) {
			r.OutputWebhook.OauthParams = r.OutputWebhook.OauthParams[:len(resp.OutputWebhook.OauthParams)]
		}
		for oauthParamsCount4, oauthParamsItem4 := range resp.OutputWebhook.OauthParams {
			var oauthParams4 tfTypes.OutputWebhookOauthParam
			oauthParams4.Name = types.StringValue(oauthParamsItem4.Name)
			oauthParams4.Value = types.StringValue(oauthParamsItem4.Value)
			if oauthParamsCount4+1 > len(r.OutputWebhook.OauthParams) {
				r.OutputWebhook.OauthParams = append(r.OutputWebhook.OauthParams, oauthParams4)
			} else {
				r.OutputWebhook.OauthParams[oauthParamsCount4].Name = oauthParams4.Name
				r.OutputWebhook.OauthParams[oauthParamsCount4].Value = oauthParams4.Value
			}
		}
		if resp.OutputWebhook.OnBackpressure != nil {
			r.OutputWebhook.OnBackpressure = types.StringValue(string(*resp.OutputWebhook.OnBackpressure))
		} else {
			r.OutputWebhook.OnBackpressure = types.StringNull()
		}
		r.OutputWebhook.Password = types.StringPointerValue(resp.OutputWebhook.Password)
		r.OutputWebhook.Pipeline = types.StringPointerValue(resp.OutputWebhook.Pipeline)
		if resp.OutputWebhook.PqCompress != nil {
			r.OutputWebhook.PqCompress = types.StringValue(string(*resp.OutputWebhook.PqCompress))
		} else {
			r.OutputWebhook.PqCompress = types.StringNull()
		}
		if resp.OutputWebhook.PqControls == nil {
			r.OutputWebhook.PqControls = nil
		} else {
			r.OutputWebhook.PqControls = &tfTypes.OutputWebhookPqControls{}
		}
		r.OutputWebhook.PqMaxFileSize = types.StringPointerValue(resp.OutputWebhook.PqMaxFileSize)
		r.OutputWebhook.PqMaxSize = types.StringPointerValue(resp.OutputWebhook.PqMaxSize)
		if resp.OutputWebhook.PqMode != nil {
			r.OutputWebhook.PqMode = types.StringValue(string(*resp.OutputWebhook.PqMode))
		} else {
			r.OutputWebhook.PqMode = types.StringNull()
		}
		if resp.OutputWebhook.PqOnBackpressure != nil {
			r.OutputWebhook.PqOnBackpressure = types.StringValue(string(*resp.OutputWebhook.PqOnBackpressure))
		} else {
			r.OutputWebhook.PqOnBackpressure = types.StringNull()
		}
		r.OutputWebhook.PqPath = types.StringPointerValue(resp.OutputWebhook.PqPath)
		r.OutputWebhook.RejectUnauthorized = types.BoolPointerValue(resp.OutputWebhook.RejectUnauthorized)
		r.OutputWebhook.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputWebhook.ResponseHonorRetryAfterHeader)
		r.OutputWebhook.ResponseRetrySettings = []tfTypes.OutputWebhookResponseRetrySetting{}
		if len(r.OutputWebhook.ResponseRetrySettings) > len(resp.OutputWebhook.ResponseRetrySettings) {
			r.OutputWebhook.ResponseRetrySettings = r.OutputWebhook.ResponseRetrySettings[:len(resp.OutputWebhook.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount28, responseRetrySettingsItem28 := range resp.OutputWebhook.ResponseRetrySettings {
			var responseRetrySettings28 tfTypes.OutputWebhookResponseRetrySetting
			responseRetrySettings28.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem28.BackoffRate)
			responseRetrySettings28.HTTPStatus = types.Float64Value(responseRetrySettingsItem28.HTTPStatus)
			responseRetrySettings28.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem28.InitialBackoff)
			responseRetrySettings28.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem28.MaxBackoff)
			if responseRetrySettingsCount28+1 > len(r.OutputWebhook.ResponseRetrySettings) {
				r.OutputWebhook.ResponseRetrySettings = append(r.OutputWebhook.ResponseRetrySettings, responseRetrySettings28)
			} else {
				r.OutputWebhook.ResponseRetrySettings[responseRetrySettingsCount28].BackoffRate = responseRetrySettings28.BackoffRate
				r.OutputWebhook.ResponseRetrySettings[responseRetrySettingsCount28].HTTPStatus = responseRetrySettings28.HTTPStatus
				r.OutputWebhook.ResponseRetrySettings[responseRetrySettingsCount28].InitialBackoff = responseRetrySettings28.InitialBackoff
				r.OutputWebhook.ResponseRetrySettings[responseRetrySettingsCount28].MaxBackoff = responseRetrySettings28.MaxBackoff
			}
		}
		r.OutputWebhook.SafeHeaders = make([]types.String, 0, len(resp.OutputWebhook.SafeHeaders))
		for _, v := range resp.OutputWebhook.SafeHeaders {
			r.OutputWebhook.SafeHeaders = append(r.OutputWebhook.SafeHeaders, types.StringValue(v))
		}
		r.OutputWebhook.Secret = types.StringPointerValue(resp.OutputWebhook.Secret)
		r.OutputWebhook.SecretParamName = types.StringPointerValue(resp.OutputWebhook.SecretParamName)
		r.OutputWebhook.Streamtags = make([]types.String, 0, len(resp.OutputWebhook.Streamtags))
		for _, v := range resp.OutputWebhook.Streamtags {
			r.OutputWebhook.Streamtags = append(r.OutputWebhook.Streamtags, types.StringValue(v))
		}
		r.OutputWebhook.SystemFields = make([]types.String, 0, len(resp.OutputWebhook.SystemFields))
		for _, v := range resp.OutputWebhook.SystemFields {
			r.OutputWebhook.SystemFields = append(r.OutputWebhook.SystemFields, types.StringValue(v))
		}
		r.OutputWebhook.TextSecret = types.StringPointerValue(resp.OutputWebhook.TextSecret)
		if resp.OutputWebhook.TimeoutRetrySettings == nil {
			r.OutputWebhook.TimeoutRetrySettings = nil
		} else {
			r.OutputWebhook.TimeoutRetrySettings = &tfTypes.OutputWebhookTimeoutRetrySettings{}
			r.OutputWebhook.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputWebhook.TimeoutRetrySettings.BackoffRate)
			r.OutputWebhook.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputWebhook.TimeoutRetrySettings.InitialBackoff)
			r.OutputWebhook.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputWebhook.TimeoutRetrySettings.MaxBackoff)
			r.OutputWebhook.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputWebhook.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputWebhook.TimeoutSec = types.Float64PointerValue(resp.OutputWebhook.TimeoutSec)
		if resp.OutputWebhook.TLS == nil {
			r.OutputWebhook.TLS = nil
		} else {
			r.OutputWebhook.TLS = &tfTypes.OutputWebhookTLSSettingsClientSide{}
			r.OutputWebhook.TLS.CaPath = types.StringPointerValue(resp.OutputWebhook.TLS.CaPath)
			r.OutputWebhook.TLS.CertificateName = types.StringPointerValue(resp.OutputWebhook.TLS.CertificateName)
			r.OutputWebhook.TLS.CertPath = types.StringPointerValue(resp.OutputWebhook.TLS.CertPath)
			r.OutputWebhook.TLS.Disabled = types.BoolPointerValue(resp.OutputWebhook.TLS.Disabled)
			if resp.OutputWebhook.TLS.MaxVersion != nil {
				r.OutputWebhook.TLS.MaxVersion = types.StringValue(string(*resp.OutputWebhook.TLS.MaxVersion))
			} else {
				r.OutputWebhook.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputWebhook.TLS.MinVersion != nil {
				r.OutputWebhook.TLS.MinVersion = types.StringValue(string(*resp.OutputWebhook.TLS.MinVersion))
			} else {
				r.OutputWebhook.TLS.MinVersion = types.StringNull()
			}
			r.OutputWebhook.TLS.Passphrase = types.StringPointerValue(resp.OutputWebhook.TLS.Passphrase)
			r.OutputWebhook.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputWebhook.TLS.PrivKeyPath)
			r.OutputWebhook.TLS.Servername = types.StringPointerValue(resp.OutputWebhook.TLS.Servername)
		}
		r.OutputWebhook.Token = types.StringPointerValue(resp.OutputWebhook.Token)
		r.OutputWebhook.TokenAttributeName = types.StringPointerValue(resp.OutputWebhook.TokenAttributeName)
		r.OutputWebhook.TokenTimeoutSecs = types.Float64PointerValue(resp.OutputWebhook.TokenTimeoutSecs)
		r.OutputWebhook.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputWebhook.TotalMemoryLimitKB)
		r.OutputWebhook.Type = types.StringValue(string(resp.OutputWebhook.Type))
		r.OutputWebhook.URL = types.StringPointerValue(resp.OutputWebhook.URL)
		r.OutputWebhook.Urls = []tfTypes.OutputWebhookURL{}
		if len(r.OutputWebhook.Urls) > len(resp.OutputWebhook.Urls) {
			r.OutputWebhook.Urls = r.OutputWebhook.Urls[:len(resp.OutputWebhook.Urls)]
		}
		for urlsCount3, urlsItem3 := range resp.OutputWebhook.Urls {
			var urls3 tfTypes.OutputWebhookURL
			urls3.URL = types.StringValue(urlsItem3.URL)
			urls3.Weight = types.Float64PointerValue(urlsItem3.Weight)
			if urlsCount3+1 > len(r.OutputWebhook.Urls) {
				r.OutputWebhook.Urls = append(r.OutputWebhook.Urls, urls3)
			} else {
				r.OutputWebhook.Urls[urlsCount3].URL = urls3.URL
				r.OutputWebhook.Urls[urlsCount3].Weight = urls3.Weight
			}
		}
		r.OutputWebhook.Username = types.StringPointerValue(resp.OutputWebhook.Username)
		r.OutputWebhook.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputWebhook.UseRoundRobinDNS)
	}
	if resp.OutputXsiam != nil {
		r.OutputXsiam = &tfTypes.OutputXsiam{}
		if resp.OutputXsiam.AuthType != nil {
			r.OutputXsiam.AuthType = types.StringValue(string(*resp.OutputXsiam.AuthType))
		} else {
			r.OutputXsiam.AuthType = types.StringNull()
		}
		r.OutputXsiam.Concurrency = types.Float64PointerValue(resp.OutputXsiam.Concurrency)
		r.OutputXsiam.Description = types.StringPointerValue(resp.OutputXsiam.Description)
		r.OutputXsiam.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputXsiam.DNSResolvePeriodSec)
		r.OutputXsiam.Environment = types.StringPointerValue(resp.OutputXsiam.Environment)
		r.OutputXsiam.ExcludeSelf = types.BoolPointerValue(resp.OutputXsiam.ExcludeSelf)
		r.OutputXsiam.ExtraHTTPHeaders = []tfTypes.OutputXsiamExtraHTTPHeader{}
		if len(r.OutputXsiam.ExtraHTTPHeaders) > len(resp.OutputXsiam.ExtraHTTPHeaders) {
			r.OutputXsiam.ExtraHTTPHeaders = r.OutputXsiam.ExtraHTTPHeaders[:len(resp.OutputXsiam.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount28, extraHTTPHeadersItem28 := range resp.OutputXsiam.ExtraHTTPHeaders {
			var extraHTTPHeaders28 tfTypes.OutputXsiamExtraHTTPHeader
			extraHTTPHeaders28.Name = types.StringPointerValue(extraHTTPHeadersItem28.Name)
			extraHTTPHeaders28.Value = types.StringValue(extraHTTPHeadersItem28.Value)
			if extraHTTPHeadersCount28+1 > len(r.OutputXsiam.ExtraHTTPHeaders) {
				r.OutputXsiam.ExtraHTTPHeaders = append(r.OutputXsiam.ExtraHTTPHeaders, extraHTTPHeaders28)
			} else {
				r.OutputXsiam.ExtraHTTPHeaders[extraHTTPHeadersCount28].Name = extraHTTPHeaders28.Name
				r.OutputXsiam.ExtraHTTPHeaders[extraHTTPHeadersCount28].Value = extraHTTPHeaders28.Value
			}
		}
		if resp.OutputXsiam.FailedRequestLoggingMode != nil {
			r.OutputXsiam.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputXsiam.FailedRequestLoggingMode))
		} else {
			r.OutputXsiam.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputXsiam.FlushPeriodSec = types.Float64PointerValue(resp.OutputXsiam.FlushPeriodSec)
		r.OutputXsiam.ID = types.StringValue(resp.OutputXsiam.ID)
		r.OutputXsiam.LoadBalanced = types.BoolPointerValue(resp.OutputXsiam.LoadBalanced)
		r.OutputXsiam.LoadBalanceStatsPeriodSec = types.Float64PointerValue(resp.OutputXsiam.LoadBalanceStatsPeriodSec)
		r.OutputXsiam.MaxPayloadEvents = types.Float64PointerValue(resp.OutputXsiam.MaxPayloadEvents)
		r.OutputXsiam.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputXsiam.MaxPayloadSizeKB)
		if resp.OutputXsiam.OnBackpressure != nil {
			r.OutputXsiam.OnBackpressure = types.StringValue(string(*resp.OutputXsiam.OnBackpressure))
		} else {
			r.OutputXsiam.OnBackpressure = types.StringNull()
		}
		r.OutputXsiam.Pipeline = types.StringPointerValue(resp.OutputXsiam.Pipeline)
		if resp.OutputXsiam.PqCompress != nil {
			r.OutputXsiam.PqCompress = types.StringValue(string(*resp.OutputXsiam.PqCompress))
		} else {
			r.OutputXsiam.PqCompress = types.StringNull()
		}
		if resp.OutputXsiam.PqControls == nil {
			r.OutputXsiam.PqControls = nil
		} else {
			r.OutputXsiam.PqControls = &tfTypes.OutputXsiamPqControls{}
		}
		r.OutputXsiam.PqMaxFileSize = types.StringPointerValue(resp.OutputXsiam.PqMaxFileSize)
		r.OutputXsiam.PqMaxSize = types.StringPointerValue(resp.OutputXsiam.PqMaxSize)
		if resp.OutputXsiam.PqMode != nil {
			r.OutputXsiam.PqMode = types.StringValue(string(*resp.OutputXsiam.PqMode))
		} else {
			r.OutputXsiam.PqMode = types.StringNull()
		}
		if resp.OutputXsiam.PqOnBackpressure != nil {
			r.OutputXsiam.PqOnBackpressure = types.StringValue(string(*resp.OutputXsiam.PqOnBackpressure))
		} else {
			r.OutputXsiam.PqOnBackpressure = types.StringNull()
		}
		r.OutputXsiam.PqPath = types.StringPointerValue(resp.OutputXsiam.PqPath)
		r.OutputXsiam.RejectUnauthorized = types.BoolPointerValue(resp.OutputXsiam.RejectUnauthorized)
		r.OutputXsiam.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputXsiam.ResponseHonorRetryAfterHeader)
		r.OutputXsiam.ResponseRetrySettings = []tfTypes.OutputXsiamResponseRetrySetting{}
		if len(r.OutputXsiam.ResponseRetrySettings) > len(resp.OutputXsiam.ResponseRetrySettings) {
			r.OutputXsiam.ResponseRetrySettings = r.OutputXsiam.ResponseRetrySettings[:len(resp.OutputXsiam.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount29, responseRetrySettingsItem29 := range resp.OutputXsiam.ResponseRetrySettings {
			var responseRetrySettings29 tfTypes.OutputXsiamResponseRetrySetting
			responseRetrySettings29.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem29.BackoffRate)
			responseRetrySettings29.HTTPStatus = types.Float64Value(responseRetrySettingsItem29.HTTPStatus)
			responseRetrySettings29.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem29.InitialBackoff)
			responseRetrySettings29.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem29.MaxBackoff)
			if responseRetrySettingsCount29+1 > len(r.OutputXsiam.ResponseRetrySettings) {
				r.OutputXsiam.ResponseRetrySettings = append(r.OutputXsiam.ResponseRetrySettings, responseRetrySettings29)
			} else {
				r.OutputXsiam.ResponseRetrySettings[responseRetrySettingsCount29].BackoffRate = responseRetrySettings29.BackoffRate
				r.OutputXsiam.ResponseRetrySettings[responseRetrySettingsCount29].HTTPStatus = responseRetrySettings29.HTTPStatus
				r.OutputXsiam.ResponseRetrySettings[responseRetrySettingsCount29].InitialBackoff = responseRetrySettings29.InitialBackoff
				r.OutputXsiam.ResponseRetrySettings[responseRetrySettingsCount29].MaxBackoff = responseRetrySettings29.MaxBackoff
			}
		}
		r.OutputXsiam.SafeHeaders = make([]types.String, 0, len(resp.OutputXsiam.SafeHeaders))
		for _, v := range resp.OutputXsiam.SafeHeaders {
			r.OutputXsiam.SafeHeaders = append(r.OutputXsiam.SafeHeaders, types.StringValue(v))
		}
		r.OutputXsiam.Streamtags = make([]types.String, 0, len(resp.OutputXsiam.Streamtags))
		for _, v := range resp.OutputXsiam.Streamtags {
			r.OutputXsiam.Streamtags = append(r.OutputXsiam.Streamtags, types.StringValue(v))
		}
		r.OutputXsiam.SystemFields = make([]types.String, 0, len(resp.OutputXsiam.SystemFields))
		for _, v := range resp.OutputXsiam.SystemFields {
			r.OutputXsiam.SystemFields = append(r.OutputXsiam.SystemFields, types.StringValue(v))
		}
		r.OutputXsiam.TextSecret = types.StringPointerValue(resp.OutputXsiam.TextSecret)
		r.OutputXsiam.ThrottleRateReqPerSec = types.Int64PointerValue(resp.OutputXsiam.ThrottleRateReqPerSec)
		if resp.OutputXsiam.TimeoutRetrySettings == nil {
			r.OutputXsiam.TimeoutRetrySettings = nil
		} else {
			r.OutputXsiam.TimeoutRetrySettings = &tfTypes.OutputXsiamTimeoutRetrySettings{}
			r.OutputXsiam.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputXsiam.TimeoutRetrySettings.BackoffRate)
			r.OutputXsiam.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputXsiam.TimeoutRetrySettings.InitialBackoff)
			r.OutputXsiam.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputXsiam.TimeoutRetrySettings.MaxBackoff)
			r.OutputXsiam.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputXsiam.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputXsiam.TimeoutSec = types.Float64PointerValue(resp.OutputXsiam.TimeoutSec)
		r.OutputXsiam.Token = types.StringPointerValue(resp.OutputXsiam.Token)
		r.OutputXsiam.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputXsiam.TotalMemoryLimitKB)
		r.OutputXsiam.Type = types.StringValue(string(resp.OutputXsiam.Type))
		r.OutputXsiam.URL = types.StringPointerValue(resp.OutputXsiam.URL)
		r.OutputXsiam.Urls = []tfTypes.OutputXsiamURL{}
		if len(r.OutputXsiam.Urls) > len(resp.OutputXsiam.Urls) {
			r.OutputXsiam.Urls = r.OutputXsiam.Urls[:len(resp.OutputXsiam.Urls)]
		}
		for urlsCount4, urlsItem4 := range resp.OutputXsiam.Urls {
			var urls4 tfTypes.OutputXsiamURL
			urlResult, _ := json.Marshal(urlsItem4.URL)
			urls4.URL = types.StringValue(string(urlResult))
			urls4.Weight = types.Float64PointerValue(urlsItem4.Weight)
			if urlsCount4+1 > len(r.OutputXsiam.Urls) {
				r.OutputXsiam.Urls = append(r.OutputXsiam.Urls, urls4)
			} else {
				r.OutputXsiam.Urls[urlsCount4].URL = urls4.URL
				r.OutputXsiam.Urls[urlsCount4].Weight = urls4.Weight
			}
		}
		r.OutputXsiam.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputXsiam.UseRoundRobinDNS)
	}

	return diags
}

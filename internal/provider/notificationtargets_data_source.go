// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &NotificationTargetsDataSource{}
var _ datasource.DataSourceWithConfigure = &NotificationTargetsDataSource{}

func NewNotificationTargetsDataSource() datasource.DataSource {
	return &NotificationTargetsDataSource{}
}

// NotificationTargetsDataSource is the data source implementation.
type NotificationTargetsDataSource struct {
	// Provider configured SDK client.
	client *sdk.CriblIo
}

// NotificationTargetsDataSourceModel describes the data model.
type NotificationTargetsDataSourceModel struct {
	Items []tfTypes.NotificationTarget `tfsdk:"items"`
}

// Metadata returns the data source type name.
func (r *NotificationTargetsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_notification_targets"
}

// Schema defines the schema for the data source.
func (r *NotificationTargetsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "NotificationTargets DataSource",

		Attributes: map[string]schema.Attribute{
			"items": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"pager_duty_target": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"class": schema.StringAttribute{
									Computed:    true,
									Description: `Optional, default class value`,
								},
								"component": schema.StringAttribute{
									Computed:    true,
									Description: `Optional, default component value`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Optional, default group value`,
								},
								"id": schema.StringAttribute{
									Computed:    true,
									Description: `Unique ID for this notification target`,
								},
								"routing_key": schema.StringAttribute{
									Computed:    true,
									Description: `32-character integration key for an integration on a service or global ruleset`,
								},
								"severity": schema.StringAttribute{
									Computed:    true,
									Description: `Default value for message severity. Defaults to info. The __severity value, if set, will overwrite this.`,
								},
								"system_fields": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `Fields to automatically add to events, such as cribl_pipe. Supports wildcards.`,
								},
								"type": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"slack_target": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed:    true,
									Description: `Unique ID for this notification target`,
								},
								"system_fields": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `Fields to automatically add to events, such as cribl_pipe. Supports wildcards.`,
								},
								"type": schema.StringAttribute{
									Computed: true,
								},
								"url": schema.StringAttribute{
									Computed:    true,
									Description: `Slack's Incoming Webhook URL`,
								},
							},
						},
						"smtp_target": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"encryption_option": schema.StringAttribute{
									Computed:    true,
									Description: `Encryption method for SMTP`,
								},
								"from": schema.StringAttribute{
									Computed:    true,
									Description: `Email address to send from`,
								},
								"host": schema.StringAttribute{
									Computed:    true,
									Description: `SMTP server hostname`,
								},
								"id": schema.StringAttribute{
									Computed:    true,
									Description: `Unique ID for this notification target`,
								},
								"password": schema.StringAttribute{
									Computed:    true,
									Description: `SMTP authentication password`,
								},
								"port": schema.Int64Attribute{
									Computed:    true,
									Description: `SMTP server port`,
								},
								"system_fields": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `Fields to automatically add to events, such as cribl_pipe. Supports wildcards.`,
								},
								"tls": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"max_version": schema.StringAttribute{
											Computed:    true,
											Description: `Maximum TLS version to accept`,
										},
										"min_version": schema.StringAttribute{
											Computed:    true,
											Description: `Minimum TLS version to accept`,
										},
										"reject_unauthorized": schema.BoolAttribute{
											Computed:    true,
											Description: `Whether to reject unauthorized certificates`,
										},
									},
									Description: `TLS configuration options`,
								},
								"type": schema.StringAttribute{
									Computed: true,
								},
								"username": schema.StringAttribute{
									Computed:    true,
									Description: `SMTP authentication username`,
								},
							},
						},
						"sns_target": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"allowlist": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `Wildcard list of allowed phone numbers. This is not enforced if the notification is sent to topic.`,
								},
								"assume_role_arn": schema.StringAttribute{
									Computed:    true,
									Description: `ARN of the role to assume`,
								},
								"assume_role_external_id": schema.StringAttribute{
									Computed:    true,
									Description: `External ID for role assumption`,
								},
								"aws_api_key": schema.StringAttribute{
									Computed:    true,
									Description: `AWS access key`,
								},
								"aws_authentication_method": schema.StringAttribute{
									Computed:    true,
									Description: `AWS authentication method`,
								},
								"aws_secret_key": schema.StringAttribute{
									Computed:    true,
									Description: `AWS secret key`,
								},
								"destination_type": schema.StringAttribute{
									Computed:    true,
									Description: `The type of destination to send notifications to`,
								},
								"endpoint": schema.StringAttribute{
									Computed:    true,
									Description: `SNS endpoint URL`,
								},
								"id": schema.StringAttribute{
									Computed:    true,
									Description: `Unique ID for this notification target`,
								},
								"message_group_id": schema.StringAttribute{
									Computed:    true,
									Description: `Message group ID for FIFO topics`,
								},
								"phone_number": schema.StringAttribute{
									Computed:    true,
									Description: `The default phone number to send the notification to. This value can be overridden by the notification event __phoneNumber field.`,
								},
								"region": schema.StringAttribute{
									Computed:    true,
									Description: `AWS region`,
								},
								"system_fields": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `Fields to automatically add to events, such as cribl_pipe. Supports wildcards.`,
								},
								"topic_arn": schema.StringAttribute{
									Computed:    true,
									Description: `The default ARN of the SNS topic to send notifications to`,
								},
								"topic_type": schema.StringAttribute{
									Computed:    true,
									Description: `Type of the topic selected in AWS SNS`,
								},
								"type": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"webhook_target": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"auth_type": schema.StringAttribute{
									Computed:    true,
									Description: `Authentication method for the webhook`,
								},
								"format": schema.StringAttribute{
									Computed:    true,
									Description: `Format of the webhook payload`,
								},
								"id": schema.StringAttribute{
									Computed:    true,
									Description: `Unique ID for this notification target`,
								},
								"method": schema.StringAttribute{
									Computed:    true,
									Description: `HTTP method to use for the webhook`,
								},
								"password": schema.StringAttribute{
									Computed:    true,
									Description: `Basic authentication password`,
								},
								"system_fields": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `Fields to automatically add to events, such as cribl_pipe. Supports wildcards.`,
								},
								"token": schema.StringAttribute{
									Computed:    true,
									Description: `Authentication token`,
								},
								"type": schema.StringAttribute{
									Computed: true,
								},
								"url": schema.StringAttribute{
									Computed:    true,
									Description: `URL to send the webhook to`,
								},
								"username": schema.StringAttribute{
									Computed:    true,
									Description: `Basic authentication username`,
								},
							},
						},
					},
				},
			},
		},
	}
}

func (r *NotificationTargetsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.CriblIo)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.CriblIo, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NotificationTargetsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *NotificationTargetsDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	res, err := r.client.NotificationTargets.ListNotificationTarget(ctx)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromOperationsListNotificationTargetResponseBody(ctx, res.Object)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

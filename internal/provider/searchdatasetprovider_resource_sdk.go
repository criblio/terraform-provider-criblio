// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SearchDatasetProviderResourceModel) RefreshFromOperationsGetDatasetProviderByIDResponseBody(ctx context.Context, resp *operations.GetDatasetProviderByIDResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
	}

	return diags
}

func (r *SearchDatasetProviderResourceModel) RefreshFromSharedGenericProvider(ctx context.Context, resp *shared.GenericProvider) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp.APIAwsProvider != nil {
		r.APIAwsProvider = &tfTypes.APIAwsProvider{}
		r.APIAwsProvider.AccountConfigs = []tfTypes.AwsAccountConfig{}

		for _, accountConfigsItem := range resp.APIAwsProvider.AccountConfigs {
			var accountConfigs tfTypes.AwsAccountConfig

			accountConfigs.AssumeRoleArn = types.StringPointerValue(accountConfigsItem.AssumeRoleArn)
			accountConfigs.AssumeRoleExternalID = types.StringPointerValue(accountConfigsItem.AssumeRoleExternalID)
			accountConfigs.AwsAPIKey = types.StringPointerValue(accountConfigsItem.AwsAPIKey)
			accountConfigs.AwsSecretKey = types.StringPointerValue(accountConfigsItem.AwsSecretKey)
			accountConfigs.Name = types.StringValue(accountConfigsItem.Name)

			r.APIAwsProvider.AccountConfigs = append(r.APIAwsProvider.AccountConfigs, accountConfigs)
		}
		r.APIAwsProvider.Description = types.StringPointerValue(resp.APIAwsProvider.Description)
		r.Description = r.APIAwsProvider.Description
		r.APIAwsProvider.ID = types.StringValue(resp.APIAwsProvider.ID)
		r.ID = r.APIAwsProvider.ID
		r.APIAwsProvider.Type = types.StringValue(resp.APIAwsProvider.Type)
		r.Type = r.APIAwsProvider.Type
	}
	if resp.APIAzureDataExplorerProvider != nil {
		r.APIAzureDataExplorerProvider = &tfTypes.APIAzureDataExplorerProvider{}
		r.APIAzureDataExplorerProvider.ClientID = types.StringValue(resp.APIAzureDataExplorerProvider.ClientID)
		r.APIAzureDataExplorerProvider.ClientSecret = types.StringValue(resp.APIAzureDataExplorerProvider.ClientSecret)
		r.APIAzureDataExplorerProvider.Description = types.StringPointerValue(resp.APIAzureDataExplorerProvider.Description)
		r.Description = r.APIAzureDataExplorerProvider.Description
		r.APIAzureDataExplorerProvider.ID = types.StringValue(resp.APIAzureDataExplorerProvider.ID)
		r.ID = r.APIAzureDataExplorerProvider.ID
		r.APIAzureDataExplorerProvider.TenantID = types.StringValue(resp.APIAzureDataExplorerProvider.TenantID)
		r.APIAzureDataExplorerProvider.Type = types.StringValue(resp.APIAzureDataExplorerProvider.Type)
		r.Type = r.APIAzureDataExplorerProvider.Type
	}
	if resp.APIAzureProvider != nil {
		r.APIAzureProvider = &tfTypes.APIAzureProvider{}
		r.APIAzureProvider.AccountConfigs = []tfTypes.AzureAccountConfig{}

		for _, accountConfigsItem1 := range resp.APIAzureProvider.AccountConfigs {
			var accountConfigs1 tfTypes.AzureAccountConfig

			accountConfigs1.ClientID = types.StringValue(accountConfigsItem1.ClientID)
			accountConfigs1.ClientSecret = types.StringValue(accountConfigsItem1.ClientSecret)
			accountConfigs1.Name = types.StringValue(accountConfigsItem1.Name)
			accountConfigs1.TenantID = types.StringValue(accountConfigsItem1.TenantID)

			r.APIAzureProvider.AccountConfigs = append(r.APIAzureProvider.AccountConfigs, accountConfigs1)
		}
		r.APIAzureProvider.Description = types.StringPointerValue(resp.APIAzureProvider.Description)
		r.Description = r.APIAzureProvider.Description
		r.APIAzureProvider.ID = types.StringValue(resp.APIAzureProvider.ID)
		r.ID = r.APIAzureProvider.ID
		r.APIAzureProvider.Type = types.StringValue(resp.APIAzureProvider.Type)
		r.Type = r.APIAzureProvider.Type
	}
	if resp.APIElasticSearchProvider != nil {
		r.APIElasticSearchProvider = &tfTypes.APIElasticSearchProvider{}
		r.APIElasticSearchProvider.Description = types.StringPointerValue(resp.APIElasticSearchProvider.Description)
		r.Description = r.APIElasticSearchProvider.Description
		r.APIElasticSearchProvider.Endpoint = types.StringValue(resp.APIElasticSearchProvider.Endpoint)
		r.APIElasticSearchProvider.ID = types.StringValue(resp.APIElasticSearchProvider.ID)
		r.ID = r.APIElasticSearchProvider.ID
		r.APIElasticSearchProvider.Password = types.StringValue(resp.APIElasticSearchProvider.Password)
		r.APIElasticSearchProvider.Type = types.StringValue(resp.APIElasticSearchProvider.Type)
		r.Type = r.APIElasticSearchProvider.Type
		r.APIElasticSearchProvider.Username = types.StringValue(resp.APIElasticSearchProvider.Username)
	}
	if resp.APIGcpProvider != nil {
		r.APIGcpProvider = &tfTypes.APIGcpProvider{}
		r.APIGcpProvider.AccountConfigs = []tfTypes.GcpAccountConfig{}

		for _, accountConfigsItem2 := range resp.APIGcpProvider.AccountConfigs {
			var accountConfigs2 tfTypes.GcpAccountConfig

			accountConfigs2.Name = types.StringValue(accountConfigsItem2.Name)
			accountConfigs2.ServiceAccountCredentials = types.StringValue(accountConfigsItem2.ServiceAccountCredentials)

			r.APIGcpProvider.AccountConfigs = append(r.APIGcpProvider.AccountConfigs, accountConfigs2)
		}
		r.APIGcpProvider.Description = types.StringPointerValue(resp.APIGcpProvider.Description)
		r.Description = r.APIGcpProvider.Description
		r.APIGcpProvider.ID = types.StringValue(resp.APIGcpProvider.ID)
		r.ID = r.APIGcpProvider.ID
		r.APIGcpProvider.Type = types.StringValue(resp.APIGcpProvider.Type)
		r.Type = r.APIGcpProvider.Type
	}
	if resp.APIGoogleWorkspaceProvider != nil {
		r.APIGoogleWorkspaceProvider = &tfTypes.APIGoogleWorkspaceProvider{}
		r.APIGoogleWorkspaceProvider.AccountConfigs = []tfTypes.GoogleWorkspaceAccountConfig{}

		for _, accountConfigsItem3 := range resp.APIGoogleWorkspaceProvider.AccountConfigs {
			var accountConfigs3 tfTypes.GoogleWorkspaceAccountConfig

			accountConfigs3.Name = types.StringValue(accountConfigsItem3.Name)
			accountConfigs3.ServiceAccountCredentials = types.StringValue(accountConfigsItem3.ServiceAccountCredentials)
			accountConfigs3.Subject = types.StringValue(accountConfigsItem3.Subject)

			r.APIGoogleWorkspaceProvider.AccountConfigs = append(r.APIGoogleWorkspaceProvider.AccountConfigs, accountConfigs3)
		}
		r.APIGoogleWorkspaceProvider.Description = types.StringPointerValue(resp.APIGoogleWorkspaceProvider.Description)
		r.Description = r.APIGoogleWorkspaceProvider.Description
		r.APIGoogleWorkspaceProvider.ID = types.StringValue(resp.APIGoogleWorkspaceProvider.ID)
		r.ID = r.APIGoogleWorkspaceProvider.ID
		r.APIGoogleWorkspaceProvider.Type = types.StringValue(resp.APIGoogleWorkspaceProvider.Type)
		r.Type = r.APIGoogleWorkspaceProvider.Type
	}
	if resp.APIHTTPProvider != nil {
		r.APIHTTPProvider = &tfTypes.APIHTTPProvider{}
		if resp.APIHTTPProvider.AuthenticationMethod != nil {
			r.APIHTTPProvider.AuthenticationMethod = types.StringValue(string(*resp.APIHTTPProvider.AuthenticationMethod))
		} else {
			r.APIHTTPProvider.AuthenticationMethod = types.StringNull()
		}
		r.APIHTTPProvider.AvailableEndpoints = []tfTypes.HTTPEndpoint{}

		for _, availableEndpointsItem := range resp.APIHTTPProvider.AvailableEndpoints {
			var availableEndpoints tfTypes.HTTPEndpoint

			availableEndpoints.DataField = types.StringPointerValue(availableEndpointsItem.DataField)
			availableEndpoints.Headers = []tfTypes.HTTPHeader{}

			for _, headersItem := range availableEndpointsItem.Headers {
				var headers tfTypes.HTTPHeader

				headers.Name = types.StringValue(headersItem.Name)
				headers.Value = types.StringValue(headersItem.Value)

				availableEndpoints.Headers = append(availableEndpoints.Headers, headers)
			}
			if availableEndpointsItem.Method != nil {
				availableEndpoints.Method = types.StringValue(string(*availableEndpointsItem.Method))
			} else {
				availableEndpoints.Method = types.StringNull()
			}
			availableEndpoints.Name = types.StringValue(availableEndpointsItem.Name)
			availableEndpoints.URL = types.StringValue(availableEndpointsItem.URL)

			r.APIHTTPProvider.AvailableEndpoints = append(r.APIHTTPProvider.AvailableEndpoints, availableEndpoints)
		}
		r.APIHTTPProvider.Description = types.StringPointerValue(resp.APIHTTPProvider.Description)
		r.Description = r.APIHTTPProvider.Description
		r.APIHTTPProvider.ID = types.StringValue(resp.APIHTTPProvider.ID)
		r.ID = r.APIHTTPProvider.ID
		r.APIHTTPProvider.Type = types.StringValue(resp.APIHTTPProvider.Type)
		r.Type = r.APIHTTPProvider.Type
	}
	if resp.APIMsGraphProvider != nil {
		r.APIMsGraphProvider = &tfTypes.APIMsGraphProvider{}
		r.APIMsGraphProvider.AccountConfigs = []tfTypes.MsGraphAccountConfig{}

		for _, accountConfigsItem4 := range resp.APIMsGraphProvider.AccountConfigs {
			var accountConfigs4 tfTypes.MsGraphAccountConfig

			accountConfigs4.ClientID = types.StringValue(accountConfigsItem4.ClientID)
			accountConfigs4.ClientSecret = types.StringValue(accountConfigsItem4.ClientSecret)
			accountConfigs4.Name = types.StringValue(accountConfigsItem4.Name)
			accountConfigs4.TenantID = types.StringValue(accountConfigsItem4.TenantID)

			r.APIMsGraphProvider.AccountConfigs = append(r.APIMsGraphProvider.AccountConfigs, accountConfigs4)
		}
		r.APIMsGraphProvider.Description = types.StringPointerValue(resp.APIMsGraphProvider.Description)
		r.Description = r.APIMsGraphProvider.Description
		r.APIMsGraphProvider.ID = types.StringValue(resp.APIMsGraphProvider.ID)
		r.ID = r.APIMsGraphProvider.ID
		r.APIMsGraphProvider.Type = types.StringValue(resp.APIMsGraphProvider.Type)
		r.Type = r.APIMsGraphProvider.Type
	}
	if resp.APIOktaProvider != nil {
		r.APIOktaProvider = &tfTypes.APIOktaProvider{}
		r.APIOktaProvider.AccountConfigs = []tfTypes.OktaAccountConfig{}

		for _, accountConfigsItem5 := range resp.APIOktaProvider.AccountConfigs {
			var accountConfigs5 tfTypes.OktaAccountConfig

			accountConfigs5.APIToken = types.StringValue(accountConfigsItem5.APIToken)
			accountConfigs5.DomainEndpoint = types.StringValue(accountConfigsItem5.DomainEndpoint)
			accountConfigs5.Name = types.StringValue(accountConfigsItem5.Name)

			r.APIOktaProvider.AccountConfigs = append(r.APIOktaProvider.AccountConfigs, accountConfigs5)
		}
		r.APIOktaProvider.Description = types.StringPointerValue(resp.APIOktaProvider.Description)
		r.Description = r.APIOktaProvider.Description
		r.APIOktaProvider.ID = types.StringValue(resp.APIOktaProvider.ID)
		r.ID = r.APIOktaProvider.ID
		r.APIOktaProvider.Type = types.StringValue(resp.APIOktaProvider.Type)
		r.Type = r.APIOktaProvider.Type
	}
	if resp.APIOpenSearchProvider != nil {
		r.APIOpenSearchProvider = &tfTypes.APIOpenSearchProvider{}
		r.APIOpenSearchProvider.Description = types.StringPointerValue(resp.APIOpenSearchProvider.Description)
		r.Description = r.APIOpenSearchProvider.Description
		r.APIOpenSearchProvider.Endpoint = types.StringValue(resp.APIOpenSearchProvider.Endpoint)
		r.APIOpenSearchProvider.ID = types.StringValue(resp.APIOpenSearchProvider.ID)
		r.ID = r.APIOpenSearchProvider.ID
		r.APIOpenSearchProvider.Password = types.StringValue(resp.APIOpenSearchProvider.Password)
		r.APIOpenSearchProvider.Type = types.StringValue(resp.APIOpenSearchProvider.Type)
		r.Type = r.APIOpenSearchProvider.Type
		r.APIOpenSearchProvider.Username = types.StringValue(resp.APIOpenSearchProvider.Username)
	}
	if resp.APITailscaleProvider != nil {
		r.APITailscaleProvider = &tfTypes.APITailscaleProvider{}
		r.APITailscaleProvider.AccountConfigs = []tfTypes.TailscaleAccountConfig{}

		for _, accountConfigsItem6 := range resp.APITailscaleProvider.AccountConfigs {
			var accountConfigs6 tfTypes.TailscaleAccountConfig

			accountConfigs6.ClientID = types.StringValue(accountConfigsItem6.ClientID)
			accountConfigs6.ClientSecret = types.StringValue(accountConfigsItem6.ClientSecret)
			accountConfigs6.Name = types.StringValue(accountConfigsItem6.Name)

			r.APITailscaleProvider.AccountConfigs = append(r.APITailscaleProvider.AccountConfigs, accountConfigs6)
		}
		r.APITailscaleProvider.Description = types.StringPointerValue(resp.APITailscaleProvider.Description)
		r.Description = r.APITailscaleProvider.Description
		r.APITailscaleProvider.ID = types.StringValue(resp.APITailscaleProvider.ID)
		r.ID = r.APITailscaleProvider.ID
		r.APITailscaleProvider.Type = types.StringValue(resp.APITailscaleProvider.Type)
		r.Type = r.APITailscaleProvider.Type
	}
	if resp.APIZoomProvider != nil {
		r.APIZoomProvider = &tfTypes.APIZoomProvider{}
		r.APIZoomProvider.AccountConfigs = []tfTypes.ZoomAccountConfig{}

		for _, accountConfigsItem7 := range resp.APIZoomProvider.AccountConfigs {
			var accountConfigs7 tfTypes.ZoomAccountConfig

			accountConfigs7.AccountID = types.StringValue(accountConfigsItem7.AccountID)
			accountConfigs7.ClientID = types.StringValue(accountConfigsItem7.ClientID)
			accountConfigs7.ClientSecret = types.StringValue(accountConfigsItem7.ClientSecret)
			accountConfigs7.Name = types.StringValue(accountConfigsItem7.Name)

			r.APIZoomProvider.AccountConfigs = append(r.APIZoomProvider.AccountConfigs, accountConfigs7)
		}
		r.APIZoomProvider.Description = types.StringPointerValue(resp.APIZoomProvider.Description)
		r.Description = r.APIZoomProvider.Description
		r.APIZoomProvider.ID = types.StringValue(resp.APIZoomProvider.ID)
		r.ID = r.APIZoomProvider.ID
		r.APIZoomProvider.Type = types.StringValue(resp.APIZoomProvider.Type)
		r.Type = r.APIZoomProvider.Type
	}
	if resp.AwsSecurityLakeProvider != nil {
		r.AwsSecurityLakeProvider = &tfTypes.AwsSecurityLakeProvider{}
		r.AwsSecurityLakeProvider.Description = types.StringPointerValue(resp.AwsSecurityLakeProvider.Description)
		r.Description = r.AwsSecurityLakeProvider.Description
		r.AwsSecurityLakeProvider.ID = types.StringValue(resp.AwsSecurityLakeProvider.ID)
		r.ID = r.AwsSecurityLakeProvider.ID
		r.AwsSecurityLakeProvider.Type = types.StringValue(resp.AwsSecurityLakeProvider.Type)
		r.Type = r.AwsSecurityLakeProvider.Type
	}
	if resp.AzureBlobProvider != nil {
		r.AzureBlobProvider = &tfTypes.AzureBlobProvider{}
		if resp.AzureBlobProvider.AuthenticationMethod != nil {
			r.AzureBlobProvider.AuthenticationMethod = types.StringValue(string(*resp.AzureBlobProvider.AuthenticationMethod))
		} else {
			r.AzureBlobProvider.AuthenticationMethod = types.StringNull()
		}
		r.AzureBlobProvider.ClientID = types.StringPointerValue(resp.AzureBlobProvider.ClientID)
		r.AzureBlobProvider.ClientSecret = types.StringPointerValue(resp.AzureBlobProvider.ClientSecret)
		r.AzureBlobProvider.ConnectionString = types.StringPointerValue(resp.AzureBlobProvider.ConnectionString)
		r.AzureBlobProvider.Description = types.StringPointerValue(resp.AzureBlobProvider.Description)
		r.Description = r.AzureBlobProvider.Description
		r.AzureBlobProvider.ID = types.StringValue(resp.AzureBlobProvider.ID)
		r.ID = r.AzureBlobProvider.ID
		r.AzureBlobProvider.Location = types.StringValue(resp.AzureBlobProvider.Location)
		r.AzureBlobProvider.SasConfigs = []tfTypes.SasConfig{}

		for _, sasConfigsItem := range resp.AzureBlobProvider.SasConfigs {
			var sasConfigs tfTypes.SasConfig

			sasConfigs.BlobSasURL = types.StringValue(sasConfigsItem.BlobSasURL)
			sasConfigs.ContainerName = types.StringValue(sasConfigsItem.ContainerName)

			r.AzureBlobProvider.SasConfigs = append(r.AzureBlobProvider.SasConfigs, sasConfigs)
		}
		r.AzureBlobProvider.StorageAccountName = types.StringPointerValue(resp.AzureBlobProvider.StorageAccountName)
		r.AzureBlobProvider.TenantID = types.StringPointerValue(resp.AzureBlobProvider.TenantID)
		r.AzureBlobProvider.Type = types.StringValue(resp.AzureBlobProvider.Type)
		r.Type = r.AzureBlobProvider.Type
	}
	if resp.ClickHouseProvider != nil {
		r.ClickHouseProvider = &tfTypes.ClickHouseProvider{}
		r.ClickHouseProvider.Description = types.StringPointerValue(resp.ClickHouseProvider.Description)
		r.Description = r.ClickHouseProvider.Description
		r.ClickHouseProvider.Endpoint = types.StringValue(resp.ClickHouseProvider.Endpoint)
		r.ClickHouseProvider.ID = types.StringValue(resp.ClickHouseProvider.ID)
		r.ID = r.ClickHouseProvider.ID
		r.ClickHouseProvider.Password = types.StringPointerValue(resp.ClickHouseProvider.Password)
		r.ClickHouseProvider.Type = types.StringValue(resp.ClickHouseProvider.Type)
		r.Type = r.ClickHouseProvider.Type
		r.ClickHouseProvider.Username = types.StringValue(resp.ClickHouseProvider.Username)
	}
	if resp.CriblLeaderProvider != nil {
		r.CriblLeaderProvider = &tfTypes.CriblLeaderProvider{}
		r.CriblLeaderProvider.Description = types.StringPointerValue(resp.CriblLeaderProvider.Description)
		r.Description = r.CriblLeaderProvider.Description
		r.CriblLeaderProvider.ID = types.StringValue(resp.CriblLeaderProvider.ID)
		r.ID = r.CriblLeaderProvider.ID
		r.CriblLeaderProvider.Type = types.StringValue(resp.CriblLeaderProvider.Type)
		r.Type = r.CriblLeaderProvider.Type
	}
	if resp.EdgeProvider != nil {
		r.EdgeProvider = &tfTypes.EdgeProvider{}
		r.EdgeProvider.Description = types.StringPointerValue(resp.EdgeProvider.Description)
		r.Description = r.EdgeProvider.Description
		r.EdgeProvider.ID = types.StringValue(resp.EdgeProvider.ID)
		r.ID = r.EdgeProvider.ID
		r.EdgeProvider.Type = types.StringValue(resp.EdgeProvider.Type)
		r.Type = r.EdgeProvider.Type
	}
	if resp.GcsProvider != nil {
		r.GcsProvider = &tfTypes.GcsProvider{}
		r.GcsProvider.Description = types.StringPointerValue(resp.GcsProvider.Description)
		r.Description = r.GcsProvider.Description
		r.GcsProvider.Endpoint = types.StringPointerValue(resp.GcsProvider.Endpoint)
		r.GcsProvider.ID = types.StringValue(resp.GcsProvider.ID)
		r.ID = r.GcsProvider.ID
		r.GcsProvider.ServiceAccountCredentials = types.StringValue(resp.GcsProvider.ServiceAccountCredentials)
		r.GcsProvider.Type = types.StringValue(resp.GcsProvider.Type)
		r.Type = r.GcsProvider.Type
	}
	if resp.MetaProvider != nil {
		r.MetaProvider = &tfTypes.MetaProvider{}
		r.MetaProvider.Description = types.StringPointerValue(resp.MetaProvider.Description)
		r.Description = r.MetaProvider.Description
		r.MetaProvider.ID = types.StringValue(resp.MetaProvider.ID)
		r.ID = r.MetaProvider.ID
		r.MetaProvider.Type = types.StringValue(resp.MetaProvider.Type)
		r.Type = r.MetaProvider.Type
	}
	if resp.PrometheusProvider != nil {
		r.PrometheusProvider = &tfTypes.PrometheusProvider{}
		if resp.PrometheusProvider.AuthType != nil {
			r.PrometheusProvider.AuthType = types.StringValue(string(*resp.PrometheusProvider.AuthType))
		} else {
			r.PrometheusProvider.AuthType = types.StringNull()
		}
		r.PrometheusProvider.Description = types.StringPointerValue(resp.PrometheusProvider.Description)
		r.Description = r.PrometheusProvider.Description
		r.PrometheusProvider.Endpoint = types.StringValue(resp.PrometheusProvider.Endpoint)
		r.PrometheusProvider.ID = types.StringValue(resp.PrometheusProvider.ID)
		r.ID = r.PrometheusProvider.ID
		r.PrometheusProvider.MaxConcurrency = types.Float64PointerValue(resp.PrometheusProvider.MaxConcurrency)
		r.PrometheusProvider.Password = types.StringPointerValue(resp.PrometheusProvider.Password)
		r.PrometheusProvider.Token = types.StringPointerValue(resp.PrometheusProvider.Token)
		r.PrometheusProvider.Type = types.StringValue(resp.PrometheusProvider.Type)
		r.Type = r.PrometheusProvider.Type
		r.PrometheusProvider.Username = types.StringPointerValue(resp.PrometheusProvider.Username)
	}
	if resp.S3Provider != nil {
		r.S3Provider = &tfTypes.S3Provider{}
		r.S3Provider.AssumeRoleArn = types.StringPointerValue(resp.S3Provider.AssumeRoleArn)
		r.S3Provider.AssumeRoleExternalID = types.StringPointerValue(resp.S3Provider.AssumeRoleExternalID)
		r.S3Provider.AwsAPIKey = types.StringPointerValue(resp.S3Provider.AwsAPIKey)
		if resp.S3Provider.AwsAuthenticationMethod != nil {
			r.S3Provider.AwsAuthenticationMethod = types.StringValue(string(*resp.S3Provider.AwsAuthenticationMethod))
		} else {
			r.S3Provider.AwsAuthenticationMethod = types.StringNull()
		}
		r.S3Provider.AwsSecretKey = types.StringPointerValue(resp.S3Provider.AwsSecretKey)
		r.S3Provider.Bucket = types.StringPointerValue(resp.S3Provider.Bucket)
		r.S3Provider.BucketPathSuggestion = types.StringPointerValue(resp.S3Provider.BucketPathSuggestion)
		r.S3Provider.Description = types.StringPointerValue(resp.S3Provider.Description)
		r.Description = r.S3Provider.Description
		r.S3Provider.EnableAbacTagging = types.BoolPointerValue(resp.S3Provider.EnableAbacTagging)
		r.S3Provider.EnableAssumeRole = types.BoolPointerValue(resp.S3Provider.EnableAssumeRole)
		r.S3Provider.Endpoint = types.StringPointerValue(resp.S3Provider.Endpoint)
		r.S3Provider.ID = types.StringValue(resp.S3Provider.ID)
		r.ID = r.S3Provider.ID
		r.S3Provider.Region = types.StringPointerValue(resp.S3Provider.Region)
		r.S3Provider.RejectUnauthorized = types.BoolPointerValue(resp.S3Provider.RejectUnauthorized)
		r.S3Provider.ReuseConnections = types.BoolPointerValue(resp.S3Provider.ReuseConnections)
		r.S3Provider.SessionToken = types.StringPointerValue(resp.S3Provider.SessionToken)
		r.S3Provider.SignatureVersion = types.StringValue(string(resp.S3Provider.SignatureVersion))
		r.S3Provider.Type = types.StringValue(resp.S3Provider.Type)
		r.Type = r.S3Provider.Type
	}
	if resp.SnowflakeProvider != nil {
		r.SnowflakeProvider = &tfTypes.SnowflakeProvider{}
		r.SnowflakeProvider.AccountIdentifier = types.StringValue(resp.SnowflakeProvider.AccountIdentifier)
		r.SnowflakeProvider.Description = types.StringPointerValue(resp.SnowflakeProvider.Description)
		r.Description = r.SnowflakeProvider.Description
		r.SnowflakeProvider.Endpoint = types.StringPointerValue(resp.SnowflakeProvider.Endpoint)
		r.SnowflakeProvider.ID = types.StringValue(resp.SnowflakeProvider.ID)
		r.ID = r.SnowflakeProvider.ID
		r.SnowflakeProvider.MaxConcurrency = types.Int64PointerValue(resp.SnowflakeProvider.MaxConcurrency)
		r.SnowflakeProvider.Passphrase = types.StringPointerValue(resp.SnowflakeProvider.Passphrase)
		r.SnowflakeProvider.PrivKey = types.StringValue(resp.SnowflakeProvider.PrivKey)
		r.SnowflakeProvider.Type = types.StringValue(resp.SnowflakeProvider.Type)
		r.Type = r.SnowflakeProvider.Type
		r.SnowflakeProvider.Username = types.StringValue(resp.SnowflakeProvider.Username)
	}

	return diags
}

func (r *SearchDatasetProviderResourceModel) ToOperationsDeleteDatasetProviderByIDRequest(ctx context.Context) (*operations.DeleteDatasetProviderByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteDatasetProviderByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *SearchDatasetProviderResourceModel) ToOperationsGetDatasetProviderByIDRequest(ctx context.Context) (*operations.GetDatasetProviderByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetDatasetProviderByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *SearchDatasetProviderResourceModel) ToOperationsUpdateDatasetProviderByIDRequest(ctx context.Context) (*operations.UpdateDatasetProviderByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	genericProvider, genericProviderDiags := r.ToSharedGenericProvider(ctx)
	diags.Append(genericProviderDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateDatasetProviderByIDRequest{
		ID:              id,
		GenericProvider: *genericProvider,
	}

	return &out, diags
}

func (r *SearchDatasetProviderResourceModel) ToSharedGenericProvider(ctx context.Context) (*shared.GenericProvider, diag.Diagnostics) {
	var diags diag.Diagnostics

	var out shared.GenericProvider
	var apiHTTPProvider *shared.APIHTTPProvider
	if r.APIHTTPProvider != nil {
		var id string
		id = r.APIHTTPProvider.ID.ValueString()

		var typeVar string
		typeVar = r.APIHTTPProvider.Type.ValueString()

		description := new(string)
		if !r.APIHTTPProvider.Description.IsUnknown() && !r.APIHTTPProvider.Description.IsNull() {
			*description = r.APIHTTPProvider.Description.ValueString()
		} else {
			description = nil
		}
		availableEndpoints := make([]shared.HTTPEndpoint, 0, len(r.APIHTTPProvider.AvailableEndpoints))
		for _, availableEndpointsItem := range r.APIHTTPProvider.AvailableEndpoints {
			var name string
			name = availableEndpointsItem.Name.ValueString()

			dataField := new(string)
			if !availableEndpointsItem.DataField.IsUnknown() && !availableEndpointsItem.DataField.IsNull() {
				*dataField = availableEndpointsItem.DataField.ValueString()
			} else {
				dataField = nil
			}
			method := new(shared.HTTPEndpointMethod)
			if !availableEndpointsItem.Method.IsUnknown() && !availableEndpointsItem.Method.IsNull() {
				*method = shared.HTTPEndpointMethod(availableEndpointsItem.Method.ValueString())
			} else {
				method = nil
			}
			var url string
			url = availableEndpointsItem.URL.ValueString()

			headers := make([]shared.HTTPHeader, 0, len(availableEndpointsItem.Headers))
			for _, headersItem := range availableEndpointsItem.Headers {
				var name1 string
				name1 = headersItem.Name.ValueString()

				var value string
				value = headersItem.Value.ValueString()

				headers = append(headers, shared.HTTPHeader{
					Name:  name1,
					Value: value,
				})
			}
			availableEndpoints = append(availableEndpoints, shared.HTTPEndpoint{
				Name:      name,
				DataField: dataField,
				Method:    method,
				URL:       url,
				Headers:   headers,
			})
		}
		authenticationMethod := new(shared.APIHTTPProviderAuthenticationMethod)
		if !r.APIHTTPProvider.AuthenticationMethod.IsUnknown() && !r.APIHTTPProvider.AuthenticationMethod.IsNull() {
			*authenticationMethod = shared.APIHTTPProviderAuthenticationMethod(r.APIHTTPProvider.AuthenticationMethod.ValueString())
		} else {
			authenticationMethod = nil
		}
		apiHTTPProvider = &shared.APIHTTPProvider{
			ID:                   id,
			Type:                 typeVar,
			Description:          description,
			AvailableEndpoints:   availableEndpoints,
			AuthenticationMethod: authenticationMethod,
		}
	}
	if apiHTTPProvider != nil {
		out = shared.GenericProvider{
			APIHTTPProvider: apiHTTPProvider,
		}
	}
	var apiAwsProvider *shared.APIAwsProvider
	if r.APIAwsProvider != nil {
		var id1 string
		id1 = r.APIAwsProvider.ID.ValueString()

		var typeVar1 string
		typeVar1 = r.APIAwsProvider.Type.ValueString()

		description1 := new(string)
		if !r.APIAwsProvider.Description.IsUnknown() && !r.APIAwsProvider.Description.IsNull() {
			*description1 = r.APIAwsProvider.Description.ValueString()
		} else {
			description1 = nil
		}
		accountConfigs := make([]shared.AwsAccountConfig, 0, len(r.APIAwsProvider.AccountConfigs))
		for _, accountConfigsItem := range r.APIAwsProvider.AccountConfigs {
			var name2 string
			name2 = accountConfigsItem.Name.ValueString()

			assumeRoleArn := new(string)
			if !accountConfigsItem.AssumeRoleArn.IsUnknown() && !accountConfigsItem.AssumeRoleArn.IsNull() {
				*assumeRoleArn = accountConfigsItem.AssumeRoleArn.ValueString()
			} else {
				assumeRoleArn = nil
			}
			assumeRoleExternalID := new(string)
			if !accountConfigsItem.AssumeRoleExternalID.IsUnknown() && !accountConfigsItem.AssumeRoleExternalID.IsNull() {
				*assumeRoleExternalID = accountConfigsItem.AssumeRoleExternalID.ValueString()
			} else {
				assumeRoleExternalID = nil
			}
			awsAPIKey := new(string)
			if !accountConfigsItem.AwsAPIKey.IsUnknown() && !accountConfigsItem.AwsAPIKey.IsNull() {
				*awsAPIKey = accountConfigsItem.AwsAPIKey.ValueString()
			} else {
				awsAPIKey = nil
			}
			awsSecretKey := new(string)
			if !accountConfigsItem.AwsSecretKey.IsUnknown() && !accountConfigsItem.AwsSecretKey.IsNull() {
				*awsSecretKey = accountConfigsItem.AwsSecretKey.ValueString()
			} else {
				awsSecretKey = nil
			}
			accountConfigs = append(accountConfigs, shared.AwsAccountConfig{
				Name:                 name2,
				AssumeRoleArn:        assumeRoleArn,
				AssumeRoleExternalID: assumeRoleExternalID,
				AwsAPIKey:            awsAPIKey,
				AwsSecretKey:         awsSecretKey,
			})
		}
		apiAwsProvider = &shared.APIAwsProvider{
			ID:             id1,
			Type:           typeVar1,
			Description:    description1,
			AccountConfigs: accountConfigs,
		}
	}
	if apiAwsProvider != nil {
		out = shared.GenericProvider{
			APIAwsProvider: apiAwsProvider,
		}
	}
	var apiAzureProvider *shared.APIAzureProvider
	if r.APIAzureProvider != nil {
		var id2 string
		id2 = r.APIAzureProvider.ID.ValueString()

		var typeVar2 string
		typeVar2 = r.APIAzureProvider.Type.ValueString()

		description2 := new(string)
		if !r.APIAzureProvider.Description.IsUnknown() && !r.APIAzureProvider.Description.IsNull() {
			*description2 = r.APIAzureProvider.Description.ValueString()
		} else {
			description2 = nil
		}
		accountConfigs1 := make([]shared.AzureAccountConfig, 0, len(r.APIAzureProvider.AccountConfigs))
		for _, accountConfigsItem1 := range r.APIAzureProvider.AccountConfigs {
			var name3 string
			name3 = accountConfigsItem1.Name.ValueString()

			var clientID string
			clientID = accountConfigsItem1.ClientID.ValueString()

			var clientSecret string
			clientSecret = accountConfigsItem1.ClientSecret.ValueString()

			var tenantID string
			tenantID = accountConfigsItem1.TenantID.ValueString()

			accountConfigs1 = append(accountConfigs1, shared.AzureAccountConfig{
				Name:         name3,
				ClientID:     clientID,
				ClientSecret: clientSecret,
				TenantID:     tenantID,
			})
		}
		apiAzureProvider = &shared.APIAzureProvider{
			ID:             id2,
			Type:           typeVar2,
			Description:    description2,
			AccountConfigs: accountConfigs1,
		}
	}
	if apiAzureProvider != nil {
		out = shared.GenericProvider{
			APIAzureProvider: apiAzureProvider,
		}
	}
	var apiGcpProvider *shared.APIGcpProvider
	if r.APIGcpProvider != nil {
		var id3 string
		id3 = r.APIGcpProvider.ID.ValueString()

		var typeVar3 string
		typeVar3 = r.APIGcpProvider.Type.ValueString()

		description3 := new(string)
		if !r.APIGcpProvider.Description.IsUnknown() && !r.APIGcpProvider.Description.IsNull() {
			*description3 = r.APIGcpProvider.Description.ValueString()
		} else {
			description3 = nil
		}
		accountConfigs2 := make([]shared.GcpAccountConfig, 0, len(r.APIGcpProvider.AccountConfigs))
		for _, accountConfigsItem2 := range r.APIGcpProvider.AccountConfigs {
			var name4 string
			name4 = accountConfigsItem2.Name.ValueString()

			var serviceAccountCredentials string
			serviceAccountCredentials = accountConfigsItem2.ServiceAccountCredentials.ValueString()

			accountConfigs2 = append(accountConfigs2, shared.GcpAccountConfig{
				Name:                      name4,
				ServiceAccountCredentials: serviceAccountCredentials,
			})
		}
		apiGcpProvider = &shared.APIGcpProvider{
			ID:             id3,
			Type:           typeVar3,
			Description:    description3,
			AccountConfigs: accountConfigs2,
		}
	}
	if apiGcpProvider != nil {
		out = shared.GenericProvider{
			APIGcpProvider: apiGcpProvider,
		}
	}
	var apiGoogleWorkspaceProvider *shared.APIGoogleWorkspaceProvider
	if r.APIGoogleWorkspaceProvider != nil {
		var id4 string
		id4 = r.APIGoogleWorkspaceProvider.ID.ValueString()

		var typeVar4 string
		typeVar4 = r.APIGoogleWorkspaceProvider.Type.ValueString()

		description4 := new(string)
		if !r.APIGoogleWorkspaceProvider.Description.IsUnknown() && !r.APIGoogleWorkspaceProvider.Description.IsNull() {
			*description4 = r.APIGoogleWorkspaceProvider.Description.ValueString()
		} else {
			description4 = nil
		}
		accountConfigs3 := make([]shared.GoogleWorkspaceAccountConfig, 0, len(r.APIGoogleWorkspaceProvider.AccountConfigs))
		for _, accountConfigsItem3 := range r.APIGoogleWorkspaceProvider.AccountConfigs {
			var name5 string
			name5 = accountConfigsItem3.Name.ValueString()

			var subject string
			subject = accountConfigsItem3.Subject.ValueString()

			var serviceAccountCredentials1 string
			serviceAccountCredentials1 = accountConfigsItem3.ServiceAccountCredentials.ValueString()

			accountConfigs3 = append(accountConfigs3, shared.GoogleWorkspaceAccountConfig{
				Name:                      name5,
				Subject:                   subject,
				ServiceAccountCredentials: serviceAccountCredentials1,
			})
		}
		apiGoogleWorkspaceProvider = &shared.APIGoogleWorkspaceProvider{
			ID:             id4,
			Type:           typeVar4,
			Description:    description4,
			AccountConfigs: accountConfigs3,
		}
	}
	if apiGoogleWorkspaceProvider != nil {
		out = shared.GenericProvider{
			APIGoogleWorkspaceProvider: apiGoogleWorkspaceProvider,
		}
	}
	var apiMsGraphProvider *shared.APIMsGraphProvider
	if r.APIMsGraphProvider != nil {
		var id5 string
		id5 = r.APIMsGraphProvider.ID.ValueString()

		var typeVar5 string
		typeVar5 = r.APIMsGraphProvider.Type.ValueString()

		description5 := new(string)
		if !r.APIMsGraphProvider.Description.IsUnknown() && !r.APIMsGraphProvider.Description.IsNull() {
			*description5 = r.APIMsGraphProvider.Description.ValueString()
		} else {
			description5 = nil
		}
		accountConfigs4 := make([]shared.MsGraphAccountConfig, 0, len(r.APIMsGraphProvider.AccountConfigs))
		for _, accountConfigsItem4 := range r.APIMsGraphProvider.AccountConfigs {
			var name6 string
			name6 = accountConfigsItem4.Name.ValueString()

			var tenantId1 string
			tenantId1 = accountConfigsItem4.TenantID.ValueString()

			var clientId1 string
			clientId1 = accountConfigsItem4.ClientID.ValueString()

			var clientSecret1 string
			clientSecret1 = accountConfigsItem4.ClientSecret.ValueString()

			accountConfigs4 = append(accountConfigs4, shared.MsGraphAccountConfig{
				Name:         name6,
				TenantID:     tenantId1,
				ClientID:     clientId1,
				ClientSecret: clientSecret1,
			})
		}
		apiMsGraphProvider = &shared.APIMsGraphProvider{
			ID:             id5,
			Type:           typeVar5,
			Description:    description5,
			AccountConfigs: accountConfigs4,
		}
	}
	if apiMsGraphProvider != nil {
		out = shared.GenericProvider{
			APIMsGraphProvider: apiMsGraphProvider,
		}
	}
	var apiOktaProvider *shared.APIOktaProvider
	if r.APIOktaProvider != nil {
		var id6 string
		id6 = r.APIOktaProvider.ID.ValueString()

		var typeVar6 string
		typeVar6 = r.APIOktaProvider.Type.ValueString()

		description6 := new(string)
		if !r.APIOktaProvider.Description.IsUnknown() && !r.APIOktaProvider.Description.IsNull() {
			*description6 = r.APIOktaProvider.Description.ValueString()
		} else {
			description6 = nil
		}
		accountConfigs5 := make([]shared.OktaAccountConfig, 0, len(r.APIOktaProvider.AccountConfigs))
		for _, accountConfigsItem5 := range r.APIOktaProvider.AccountConfigs {
			var name7 string
			name7 = accountConfigsItem5.Name.ValueString()

			var domainEndpoint string
			domainEndpoint = accountConfigsItem5.DomainEndpoint.ValueString()

			var apiToken string
			apiToken = accountConfigsItem5.APIToken.ValueString()

			accountConfigs5 = append(accountConfigs5, shared.OktaAccountConfig{
				Name:           name7,
				DomainEndpoint: domainEndpoint,
				APIToken:       apiToken,
			})
		}
		apiOktaProvider = &shared.APIOktaProvider{
			ID:             id6,
			Type:           typeVar6,
			Description:    description6,
			AccountConfigs: accountConfigs5,
		}
	}
	if apiOktaProvider != nil {
		out = shared.GenericProvider{
			APIOktaProvider: apiOktaProvider,
		}
	}
	var apiTailscaleProvider *shared.APITailscaleProvider
	if r.APITailscaleProvider != nil {
		var id7 string
		id7 = r.APITailscaleProvider.ID.ValueString()

		var typeVar7 string
		typeVar7 = r.APITailscaleProvider.Type.ValueString()

		description7 := new(string)
		if !r.APITailscaleProvider.Description.IsUnknown() && !r.APITailscaleProvider.Description.IsNull() {
			*description7 = r.APITailscaleProvider.Description.ValueString()
		} else {
			description7 = nil
		}
		accountConfigs6 := make([]shared.TailscaleAccountConfig, 0, len(r.APITailscaleProvider.AccountConfigs))
		for _, accountConfigsItem6 := range r.APITailscaleProvider.AccountConfigs {
			var name8 string
			name8 = accountConfigsItem6.Name.ValueString()

			var clientId2 string
			clientId2 = accountConfigsItem6.ClientID.ValueString()

			var clientSecret2 string
			clientSecret2 = accountConfigsItem6.ClientSecret.ValueString()

			accountConfigs6 = append(accountConfigs6, shared.TailscaleAccountConfig{
				Name:         name8,
				ClientID:     clientId2,
				ClientSecret: clientSecret2,
			})
		}
		apiTailscaleProvider = &shared.APITailscaleProvider{
			ID:             id7,
			Type:           typeVar7,
			Description:    description7,
			AccountConfigs: accountConfigs6,
		}
	}
	if apiTailscaleProvider != nil {
		out = shared.GenericProvider{
			APITailscaleProvider: apiTailscaleProvider,
		}
	}
	var apiZoomProvider *shared.APIZoomProvider
	if r.APIZoomProvider != nil {
		var id8 string
		id8 = r.APIZoomProvider.ID.ValueString()

		var typeVar8 string
		typeVar8 = r.APIZoomProvider.Type.ValueString()

		description8 := new(string)
		if !r.APIZoomProvider.Description.IsUnknown() && !r.APIZoomProvider.Description.IsNull() {
			*description8 = r.APIZoomProvider.Description.ValueString()
		} else {
			description8 = nil
		}
		accountConfigs7 := make([]shared.ZoomAccountConfig, 0, len(r.APIZoomProvider.AccountConfigs))
		for _, accountConfigsItem7 := range r.APIZoomProvider.AccountConfigs {
			var name9 string
			name9 = accountConfigsItem7.Name.ValueString()

			var accountID string
			accountID = accountConfigsItem7.AccountID.ValueString()

			var clientId3 string
			clientId3 = accountConfigsItem7.ClientID.ValueString()

			var clientSecret3 string
			clientSecret3 = accountConfigsItem7.ClientSecret.ValueString()

			accountConfigs7 = append(accountConfigs7, shared.ZoomAccountConfig{
				Name:         name9,
				AccountID:    accountID,
				ClientID:     clientId3,
				ClientSecret: clientSecret3,
			})
		}
		apiZoomProvider = &shared.APIZoomProvider{
			ID:             id8,
			Type:           typeVar8,
			Description:    description8,
			AccountConfigs: accountConfigs7,
		}
	}
	if apiZoomProvider != nil {
		out = shared.GenericProvider{
			APIZoomProvider: apiZoomProvider,
		}
	}
	var apiAzureDataExplorerProvider *shared.APIAzureDataExplorerProvider
	if r.APIAzureDataExplorerProvider != nil {
		var id9 string
		id9 = r.APIAzureDataExplorerProvider.ID.ValueString()

		var typeVar9 string
		typeVar9 = r.APIAzureDataExplorerProvider.Type.ValueString()

		description9 := new(string)
		if !r.APIAzureDataExplorerProvider.Description.IsUnknown() && !r.APIAzureDataExplorerProvider.Description.IsNull() {
			*description9 = r.APIAzureDataExplorerProvider.Description.ValueString()
		} else {
			description9 = nil
		}
		var tenantId2 string
		tenantId2 = r.APIAzureDataExplorerProvider.TenantID.ValueString()

		var clientId4 string
		clientId4 = r.APIAzureDataExplorerProvider.ClientID.ValueString()

		var clientSecret4 string
		clientSecret4 = r.APIAzureDataExplorerProvider.ClientSecret.ValueString()

		apiAzureDataExplorerProvider = &shared.APIAzureDataExplorerProvider{
			ID:           id9,
			Type:         typeVar9,
			Description:  description9,
			TenantID:     tenantId2,
			ClientID:     clientId4,
			ClientSecret: clientSecret4,
		}
	}
	if apiAzureDataExplorerProvider != nil {
		out = shared.GenericProvider{
			APIAzureDataExplorerProvider: apiAzureDataExplorerProvider,
		}
	}
	var snowflakeProvider *shared.SnowflakeProvider
	if r.SnowflakeProvider != nil {
		var id10 string
		id10 = r.SnowflakeProvider.ID.ValueString()

		var typeVar10 string
		typeVar10 = r.SnowflakeProvider.Type.ValueString()

		description10 := new(string)
		if !r.SnowflakeProvider.Description.IsUnknown() && !r.SnowflakeProvider.Description.IsNull() {
			*description10 = r.SnowflakeProvider.Description.ValueString()
		} else {
			description10 = nil
		}
		var accountIdentifier string
		accountIdentifier = r.SnowflakeProvider.AccountIdentifier.ValueString()

		var username string
		username = r.SnowflakeProvider.Username.ValueString()

		var privKey string
		privKey = r.SnowflakeProvider.PrivKey.ValueString()

		passphrase := new(string)
		if !r.SnowflakeProvider.Passphrase.IsUnknown() && !r.SnowflakeProvider.Passphrase.IsNull() {
			*passphrase = r.SnowflakeProvider.Passphrase.ValueString()
		} else {
			passphrase = nil
		}
		maxConcurrency := new(int64)
		if !r.SnowflakeProvider.MaxConcurrency.IsUnknown() && !r.SnowflakeProvider.MaxConcurrency.IsNull() {
			*maxConcurrency = r.SnowflakeProvider.MaxConcurrency.ValueInt64()
		} else {
			maxConcurrency = nil
		}
		endpoint := new(string)
		if !r.SnowflakeProvider.Endpoint.IsUnknown() && !r.SnowflakeProvider.Endpoint.IsNull() {
			*endpoint = r.SnowflakeProvider.Endpoint.ValueString()
		} else {
			endpoint = nil
		}
		snowflakeProvider = &shared.SnowflakeProvider{
			ID:                id10,
			Type:              typeVar10,
			Description:       description10,
			AccountIdentifier: accountIdentifier,
			Username:          username,
			PrivKey:           privKey,
			Passphrase:        passphrase,
			MaxConcurrency:    maxConcurrency,
			Endpoint:          endpoint,
		}
	}
	if snowflakeProvider != nil {
		out = shared.GenericProvider{
			SnowflakeProvider: snowflakeProvider,
		}
	}
	var clickHouseProvider *shared.ClickHouseProvider
	if r.ClickHouseProvider != nil {
		var id11 string
		id11 = r.ClickHouseProvider.ID.ValueString()

		var typeVar11 string
		typeVar11 = r.ClickHouseProvider.Type.ValueString()

		description11 := new(string)
		if !r.ClickHouseProvider.Description.IsUnknown() && !r.ClickHouseProvider.Description.IsNull() {
			*description11 = r.ClickHouseProvider.Description.ValueString()
		} else {
			description11 = nil
		}
		var username1 string
		username1 = r.ClickHouseProvider.Username.ValueString()

		password := new(string)
		if !r.ClickHouseProvider.Password.IsUnknown() && !r.ClickHouseProvider.Password.IsNull() {
			*password = r.ClickHouseProvider.Password.ValueString()
		} else {
			password = nil
		}
		var endpoint1 string
		endpoint1 = r.ClickHouseProvider.Endpoint.ValueString()

		clickHouseProvider = &shared.ClickHouseProvider{
			ID:          id11,
			Type:        typeVar11,
			Description: description11,
			Username:    username1,
			Password:    password,
			Endpoint:    endpoint1,
		}
	}
	if clickHouseProvider != nil {
		out = shared.GenericProvider{
			ClickHouseProvider: clickHouseProvider,
		}
	}
	var prometheusProvider *shared.PrometheusProvider
	if r.PrometheusProvider != nil {
		var id12 string
		id12 = r.PrometheusProvider.ID.ValueString()

		var typeVar12 string
		typeVar12 = r.PrometheusProvider.Type.ValueString()

		description12 := new(string)
		if !r.PrometheusProvider.Description.IsUnknown() && !r.PrometheusProvider.Description.IsNull() {
			*description12 = r.PrometheusProvider.Description.ValueString()
		} else {
			description12 = nil
		}
		var endpoint2 string
		endpoint2 = r.PrometheusProvider.Endpoint.ValueString()

		authType := new(shared.PrometheusProviderAuthenticationType)
		if !r.PrometheusProvider.AuthType.IsUnknown() && !r.PrometheusProvider.AuthType.IsNull() {
			*authType = shared.PrometheusProviderAuthenticationType(r.PrometheusProvider.AuthType.ValueString())
		} else {
			authType = nil
		}
		username2 := new(string)
		if !r.PrometheusProvider.Username.IsUnknown() && !r.PrometheusProvider.Username.IsNull() {
			*username2 = r.PrometheusProvider.Username.ValueString()
		} else {
			username2 = nil
		}
		password1 := new(string)
		if !r.PrometheusProvider.Password.IsUnknown() && !r.PrometheusProvider.Password.IsNull() {
			*password1 = r.PrometheusProvider.Password.ValueString()
		} else {
			password1 = nil
		}
		token := new(string)
		if !r.PrometheusProvider.Token.IsUnknown() && !r.PrometheusProvider.Token.IsNull() {
			*token = r.PrometheusProvider.Token.ValueString()
		} else {
			token = nil
		}
		maxConcurrency1 := new(float64)
		if !r.PrometheusProvider.MaxConcurrency.IsUnknown() && !r.PrometheusProvider.MaxConcurrency.IsNull() {
			*maxConcurrency1 = r.PrometheusProvider.MaxConcurrency.ValueFloat64()
		} else {
			maxConcurrency1 = nil
		}
		prometheusProvider = &shared.PrometheusProvider{
			ID:             id12,
			Type:           typeVar12,
			Description:    description12,
			Endpoint:       endpoint2,
			AuthType:       authType,
			Username:       username2,
			Password:       password1,
			Token:          token,
			MaxConcurrency: maxConcurrency1,
		}
	}
	if prometheusProvider != nil {
		out = shared.GenericProvider{
			PrometheusProvider: prometheusProvider,
		}
	}
	var apiOpenSearchProvider *shared.APIOpenSearchProvider
	if r.APIOpenSearchProvider != nil {
		var id13 string
		id13 = r.APIOpenSearchProvider.ID.ValueString()

		var typeVar13 string
		typeVar13 = r.APIOpenSearchProvider.Type.ValueString()

		description13 := new(string)
		if !r.APIOpenSearchProvider.Description.IsUnknown() && !r.APIOpenSearchProvider.Description.IsNull() {
			*description13 = r.APIOpenSearchProvider.Description.ValueString()
		} else {
			description13 = nil
		}
		var username3 string
		username3 = r.APIOpenSearchProvider.Username.ValueString()

		var password2 string
		password2 = r.APIOpenSearchProvider.Password.ValueString()

		var endpoint3 string
		endpoint3 = r.APIOpenSearchProvider.Endpoint.ValueString()

		apiOpenSearchProvider = &shared.APIOpenSearchProvider{
			ID:          id13,
			Type:        typeVar13,
			Description: description13,
			Username:    username3,
			Password:    password2,
			Endpoint:    endpoint3,
		}
	}
	if apiOpenSearchProvider != nil {
		out = shared.GenericProvider{
			APIOpenSearchProvider: apiOpenSearchProvider,
		}
	}
	var apiElasticSearchProvider *shared.APIElasticSearchProvider
	if r.APIElasticSearchProvider != nil {
		var id14 string
		id14 = r.APIElasticSearchProvider.ID.ValueString()

		var typeVar14 string
		typeVar14 = r.APIElasticSearchProvider.Type.ValueString()

		description14 := new(string)
		if !r.APIElasticSearchProvider.Description.IsUnknown() && !r.APIElasticSearchProvider.Description.IsNull() {
			*description14 = r.APIElasticSearchProvider.Description.ValueString()
		} else {
			description14 = nil
		}
		var username4 string
		username4 = r.APIElasticSearchProvider.Username.ValueString()

		var password3 string
		password3 = r.APIElasticSearchProvider.Password.ValueString()

		var endpoint4 string
		endpoint4 = r.APIElasticSearchProvider.Endpoint.ValueString()

		apiElasticSearchProvider = &shared.APIElasticSearchProvider{
			ID:          id14,
			Type:        typeVar14,
			Description: description14,
			Username:    username4,
			Password:    password3,
			Endpoint:    endpoint4,
		}
	}
	if apiElasticSearchProvider != nil {
		out = shared.GenericProvider{
			APIElasticSearchProvider: apiElasticSearchProvider,
		}
	}
	var awsSecurityLakeProvider *shared.AwsSecurityLakeProvider
	if r.AwsSecurityLakeProvider != nil {
		var id15 string
		id15 = r.AwsSecurityLakeProvider.ID.ValueString()

		var typeVar15 string
		typeVar15 = r.AwsSecurityLakeProvider.Type.ValueString()

		description15 := new(string)
		if !r.AwsSecurityLakeProvider.Description.IsUnknown() && !r.AwsSecurityLakeProvider.Description.IsNull() {
			*description15 = r.AwsSecurityLakeProvider.Description.ValueString()
		} else {
			description15 = nil
		}
		awsSecurityLakeProvider = &shared.AwsSecurityLakeProvider{
			ID:          id15,
			Type:        typeVar15,
			Description: description15,
		}
	}
	if awsSecurityLakeProvider != nil {
		out = shared.GenericProvider{
			AwsSecurityLakeProvider: awsSecurityLakeProvider,
		}
	}
	var s3Provider *shared.S3Provider
	if r.S3Provider != nil {
		var id16 string
		id16 = r.S3Provider.ID.ValueString()

		var typeVar16 string
		typeVar16 = r.S3Provider.Type.ValueString()

		description16 := new(string)
		if !r.S3Provider.Description.IsUnknown() && !r.S3Provider.Description.IsNull() {
			*description16 = r.S3Provider.Description.ValueString()
		} else {
			description16 = nil
		}
		awsAuthenticationMethod := new(shared.S3ProviderAuthenticationMethod)
		if !r.S3Provider.AwsAuthenticationMethod.IsUnknown() && !r.S3Provider.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod = shared.S3ProviderAuthenticationMethod(r.S3Provider.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod = nil
		}
		assumeRoleArn1 := new(string)
		if !r.S3Provider.AssumeRoleArn.IsUnknown() && !r.S3Provider.AssumeRoleArn.IsNull() {
			*assumeRoleArn1 = r.S3Provider.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn1 = nil
		}
		assumeRoleExternalId1 := new(string)
		if !r.S3Provider.AssumeRoleExternalID.IsUnknown() && !r.S3Provider.AssumeRoleExternalID.IsNull() {
			*assumeRoleExternalId1 = r.S3Provider.AssumeRoleExternalID.ValueString()
		} else {
			assumeRoleExternalId1 = nil
		}
		awsAPIKey1 := new(string)
		if !r.S3Provider.AwsAPIKey.IsUnknown() && !r.S3Provider.AwsAPIKey.IsNull() {
			*awsAPIKey1 = r.S3Provider.AwsAPIKey.ValueString()
		} else {
			awsAPIKey1 = nil
		}
		awsSecretKey1 := new(string)
		if !r.S3Provider.AwsSecretKey.IsUnknown() && !r.S3Provider.AwsSecretKey.IsNull() {
			*awsSecretKey1 = r.S3Provider.AwsSecretKey.ValueString()
		} else {
			awsSecretKey1 = nil
		}
		bucket := new(string)
		if !r.S3Provider.Bucket.IsUnknown() && !r.S3Provider.Bucket.IsNull() {
			*bucket = r.S3Provider.Bucket.ValueString()
		} else {
			bucket = nil
		}
		region := new(string)
		if !r.S3Provider.Region.IsUnknown() && !r.S3Provider.Region.IsNull() {
			*region = r.S3Provider.Region.ValueString()
		} else {
			region = nil
		}
		endpoint5 := new(string)
		if !r.S3Provider.Endpoint.IsUnknown() && !r.S3Provider.Endpoint.IsNull() {
			*endpoint5 = r.S3Provider.Endpoint.ValueString()
		} else {
			endpoint5 = nil
		}
		signatureVersion := shared.S3ProviderSignatureVersion(r.S3Provider.SignatureVersion.ValueString())
		rejectUnauthorized := new(bool)
		if !r.S3Provider.RejectUnauthorized.IsUnknown() && !r.S3Provider.RejectUnauthorized.IsNull() {
			*rejectUnauthorized = r.S3Provider.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized = nil
		}
		reuseConnections := new(bool)
		if !r.S3Provider.ReuseConnections.IsUnknown() && !r.S3Provider.ReuseConnections.IsNull() {
			*reuseConnections = r.S3Provider.ReuseConnections.ValueBool()
		} else {
			reuseConnections = nil
		}
		enableAssumeRole := new(bool)
		if !r.S3Provider.EnableAssumeRole.IsUnknown() && !r.S3Provider.EnableAssumeRole.IsNull() {
			*enableAssumeRole = r.S3Provider.EnableAssumeRole.ValueBool()
		} else {
			enableAssumeRole = nil
		}
		bucketPathSuggestion := new(string)
		if !r.S3Provider.BucketPathSuggestion.IsUnknown() && !r.S3Provider.BucketPathSuggestion.IsNull() {
			*bucketPathSuggestion = r.S3Provider.BucketPathSuggestion.ValueString()
		} else {
			bucketPathSuggestion = nil
		}
		sessionToken := new(string)
		if !r.S3Provider.SessionToken.IsUnknown() && !r.S3Provider.SessionToken.IsNull() {
			*sessionToken = r.S3Provider.SessionToken.ValueString()
		} else {
			sessionToken = nil
		}
		enableAbacTagging := new(bool)
		if !r.S3Provider.EnableAbacTagging.IsUnknown() && !r.S3Provider.EnableAbacTagging.IsNull() {
			*enableAbacTagging = r.S3Provider.EnableAbacTagging.ValueBool()
		} else {
			enableAbacTagging = nil
		}
		s3Provider = &shared.S3Provider{
			ID:                      id16,
			Type:                    typeVar16,
			Description:             description16,
			AwsAuthenticationMethod: awsAuthenticationMethod,
			AssumeRoleArn:           assumeRoleArn1,
			AssumeRoleExternalID:    assumeRoleExternalId1,
			AwsAPIKey:               awsAPIKey1,
			AwsSecretKey:            awsSecretKey1,
			Bucket:                  bucket,
			Region:                  region,
			Endpoint:                endpoint5,
			SignatureVersion:        signatureVersion,
			RejectUnauthorized:      rejectUnauthorized,
			ReuseConnections:        reuseConnections,
			EnableAssumeRole:        enableAssumeRole,
			BucketPathSuggestion:    bucketPathSuggestion,
			SessionToken:            sessionToken,
			EnableAbacTagging:       enableAbacTagging,
		}
	}
	if s3Provider != nil {
		out = shared.GenericProvider{
			S3Provider: s3Provider,
		}
	}
	var criblLeaderProvider *shared.CriblLeaderProvider
	if r.CriblLeaderProvider != nil {
		var id17 string
		id17 = r.CriblLeaderProvider.ID.ValueString()

		var typeVar17 string
		typeVar17 = r.CriblLeaderProvider.Type.ValueString()

		description17 := new(string)
		if !r.CriblLeaderProvider.Description.IsUnknown() && !r.CriblLeaderProvider.Description.IsNull() {
			*description17 = r.CriblLeaderProvider.Description.ValueString()
		} else {
			description17 = nil
		}
		criblLeaderProvider = &shared.CriblLeaderProvider{
			ID:          id17,
			Type:        typeVar17,
			Description: description17,
		}
	}
	if criblLeaderProvider != nil {
		out = shared.GenericProvider{
			CriblLeaderProvider: criblLeaderProvider,
		}
	}
	var metaProvider *shared.MetaProvider
	if r.MetaProvider != nil {
		var id18 string
		id18 = r.MetaProvider.ID.ValueString()

		var typeVar18 string
		typeVar18 = r.MetaProvider.Type.ValueString()

		description18 := new(string)
		if !r.MetaProvider.Description.IsUnknown() && !r.MetaProvider.Description.IsNull() {
			*description18 = r.MetaProvider.Description.ValueString()
		} else {
			description18 = nil
		}
		metaProvider = &shared.MetaProvider{
			ID:          id18,
			Type:        typeVar18,
			Description: description18,
		}
	}
	if metaProvider != nil {
		out = shared.GenericProvider{
			MetaProvider: metaProvider,
		}
	}
	var edgeProvider *shared.EdgeProvider
	if r.EdgeProvider != nil {
		var id19 string
		id19 = r.EdgeProvider.ID.ValueString()

		var typeVar19 string
		typeVar19 = r.EdgeProvider.Type.ValueString()

		description19 := new(string)
		if !r.EdgeProvider.Description.IsUnknown() && !r.EdgeProvider.Description.IsNull() {
			*description19 = r.EdgeProvider.Description.ValueString()
		} else {
			description19 = nil
		}
		edgeProvider = &shared.EdgeProvider{
			ID:          id19,
			Type:        typeVar19,
			Description: description19,
		}
	}
	if edgeProvider != nil {
		out = shared.GenericProvider{
			EdgeProvider: edgeProvider,
		}
	}
	var azureBlobProvider *shared.AzureBlobProvider
	if r.AzureBlobProvider != nil {
		var id20 string
		id20 = r.AzureBlobProvider.ID.ValueString()

		var typeVar20 string
		typeVar20 = r.AzureBlobProvider.Type.ValueString()

		description20 := new(string)
		if !r.AzureBlobProvider.Description.IsUnknown() && !r.AzureBlobProvider.Description.IsNull() {
			*description20 = r.AzureBlobProvider.Description.ValueString()
		} else {
			description20 = nil
		}
		authenticationMethod1 := new(shared.AzureBlobProviderAuthenticationMethod)
		if !r.AzureBlobProvider.AuthenticationMethod.IsUnknown() && !r.AzureBlobProvider.AuthenticationMethod.IsNull() {
			*authenticationMethod1 = shared.AzureBlobProviderAuthenticationMethod(r.AzureBlobProvider.AuthenticationMethod.ValueString())
		} else {
			authenticationMethod1 = nil
		}
		var location string
		location = r.AzureBlobProvider.Location.ValueString()

		connectionString := new(string)
		if !r.AzureBlobProvider.ConnectionString.IsUnknown() && !r.AzureBlobProvider.ConnectionString.IsNull() {
			*connectionString = r.AzureBlobProvider.ConnectionString.ValueString()
		} else {
			connectionString = nil
		}
		sasConfigs := make([]shared.SasConfig, 0, len(r.AzureBlobProvider.SasConfigs))
		for _, sasConfigsItem := range r.AzureBlobProvider.SasConfigs {
			var containerName string
			containerName = sasConfigsItem.ContainerName.ValueString()

			var blobSasURL string
			blobSasURL = sasConfigsItem.BlobSasURL.ValueString()

			sasConfigs = append(sasConfigs, shared.SasConfig{
				ContainerName: containerName,
				BlobSasURL:    blobSasURL,
			})
		}
		storageAccountName := new(string)
		if !r.AzureBlobProvider.StorageAccountName.IsUnknown() && !r.AzureBlobProvider.StorageAccountName.IsNull() {
			*storageAccountName = r.AzureBlobProvider.StorageAccountName.ValueString()
		} else {
			storageAccountName = nil
		}
		tenantId3 := new(string)
		if !r.AzureBlobProvider.TenantID.IsUnknown() && !r.AzureBlobProvider.TenantID.IsNull() {
			*tenantId3 = r.AzureBlobProvider.TenantID.ValueString()
		} else {
			tenantId3 = nil
		}
		clientId5 := new(string)
		if !r.AzureBlobProvider.ClientID.IsUnknown() && !r.AzureBlobProvider.ClientID.IsNull() {
			*clientId5 = r.AzureBlobProvider.ClientID.ValueString()
		} else {
			clientId5 = nil
		}
		clientSecret5 := new(string)
		if !r.AzureBlobProvider.ClientSecret.IsUnknown() && !r.AzureBlobProvider.ClientSecret.IsNull() {
			*clientSecret5 = r.AzureBlobProvider.ClientSecret.ValueString()
		} else {
			clientSecret5 = nil
		}
		azureBlobProvider = &shared.AzureBlobProvider{
			ID:                   id20,
			Type:                 typeVar20,
			Description:          description20,
			AuthenticationMethod: authenticationMethod1,
			Location:             location,
			ConnectionString:     connectionString,
			SasConfigs:           sasConfigs,
			StorageAccountName:   storageAccountName,
			TenantID:             tenantId3,
			ClientID:             clientId5,
			ClientSecret:         clientSecret5,
		}
	}
	if azureBlobProvider != nil {
		out = shared.GenericProvider{
			AzureBlobProvider: azureBlobProvider,
		}
	}
	var gcsProvider *shared.GcsProvider
	if r.GcsProvider != nil {
		var id21 string
		id21 = r.GcsProvider.ID.ValueString()

		var typeVar21 string
		typeVar21 = r.GcsProvider.Type.ValueString()

		description21 := new(string)
		if !r.GcsProvider.Description.IsUnknown() && !r.GcsProvider.Description.IsNull() {
			*description21 = r.GcsProvider.Description.ValueString()
		} else {
			description21 = nil
		}
		var serviceAccountCredentials2 string
		serviceAccountCredentials2 = r.GcsProvider.ServiceAccountCredentials.ValueString()

		endpoint6 := new(string)
		if !r.GcsProvider.Endpoint.IsUnknown() && !r.GcsProvider.Endpoint.IsNull() {
			*endpoint6 = r.GcsProvider.Endpoint.ValueString()
		} else {
			endpoint6 = nil
		}
		gcsProvider = &shared.GcsProvider{
			ID:                        id21,
			Type:                      typeVar21,
			Description:               description21,
			ServiceAccountCredentials: serviceAccountCredentials2,
			Endpoint:                  endpoint6,
		}
	}
	if gcsProvider != nil {
		out = shared.GenericProvider{
			GcsProvider: gcsProvider,
		}
	}

	return &out, diags
}

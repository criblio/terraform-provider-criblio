// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SearchUsageGroupResourceModel) RefreshFromSharedUsageGroup(ctx context.Context, resp *shared.UsageGroup) diag.Diagnostics {
	var diags diag.Diagnostics

	r.CoordinatorHeapMemoryLimit = types.Float64PointerValue(resp.CoordinatorHeapMemoryLimit)
	r.Description = types.StringPointerValue(resp.Description)
	r.Enabled = types.BoolPointerValue(resp.Enabled)
	r.ID = types.StringValue(resp.ID)
	rulesResult, _ := json.Marshal(resp.Rules)
	r.Rules = types.StringValue(string(rulesResult))
	r.UsersCount = types.Float64PointerValue(resp.UsersCount)

	return diags
}

func (r *SearchUsageGroupResourceModel) ToOperationsDeleteUsageGroupByIDRequest(ctx context.Context) (*operations.DeleteUsageGroupByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteUsageGroupByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *SearchUsageGroupResourceModel) ToOperationsUpdateUsageGroupByIDRequest(ctx context.Context) (*operations.UpdateUsageGroupByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	usageGroup, usageGroupDiags := r.ToSharedUsageGroup(ctx)
	diags.Append(usageGroupDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateUsageGroupByIDRequest{
		ID:         id,
		UsageGroup: *usageGroup,
	}

	return &out, diags
}

func (r *SearchUsageGroupResourceModel) ToSharedUsageGroup(ctx context.Context) (*shared.UsageGroup, diag.Diagnostics) {
	var diags diag.Diagnostics

	coordinatorHeapMemoryLimit := new(float64)
	if !r.CoordinatorHeapMemoryLimit.IsUnknown() && !r.CoordinatorHeapMemoryLimit.IsNull() {
		*coordinatorHeapMemoryLimit = r.CoordinatorHeapMemoryLimit.ValueFloat64()
	} else {
		coordinatorHeapMemoryLimit = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	var id string
	id = r.ID.ValueString()

	var rules interface{}
	_ = json.Unmarshal([]byte(r.Rules.ValueString()), &rules)
	usersCount := new(float64)
	if !r.UsersCount.IsUnknown() && !r.UsersCount.IsNull() {
		*usersCount = r.UsersCount.ValueFloat64()
	} else {
		usersCount = nil
	}
	out := shared.UsageGroup{
		CoordinatorHeapMemoryLimit: coordinatorHeapMemoryLimit,
		Description:                description,
		Enabled:                    enabled,
		ID:                         id,
		Rules:                      rules,
		UsersCount:                 usersCount,
	}

	return &out, diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SubscriptionDataSourceModel) RefreshFromSharedSubscription(ctx context.Context, resp *shared.Subscription) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Description = types.StringPointerValue(resp.Description)
	r.Disabled = types.BoolPointerValue(resp.Disabled)
	r.Filter = types.StringPointerValue(resp.Filter)
	r.ID = types.StringValue(resp.ID)
	r.Pipeline = types.StringValue(resp.Pipeline)

	return diags
}

func (r *SubscriptionDataSourceModel) ToOperationsListSubscriptionRequest(ctx context.Context) (*operations.ListSubscriptionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	disabled := new(bool)
	if !r.Disabled.IsUnknown() && !r.Disabled.IsNull() {
		*disabled = r.Disabled.ValueBool()
	} else {
		disabled = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	filter := new(string)
	if !r.Filter.IsUnknown() && !r.Filter.IsNull() {
		*filter = r.Filter.ValueString()
	} else {
		filter = nil
	}
	pipeline := new(string)
	if !r.Pipeline.IsUnknown() && !r.Pipeline.IsNull() {
		*pipeline = r.Pipeline.ValueString()
	} else {
		pipeline = nil
	}
	out := operations.ListSubscriptionRequest{
		GroupID:     groupID,
		Disabled:    disabled,
		Description: description,
		Filter:      filter,
		Pipeline:    pipeline,
	}

	return &out, diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *RoutesDataSourceModel) RefreshFromSharedRoutes(ctx context.Context, resp *shared.Routes) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Comments = []tfTypes.Comment{}

	for _, commentsItem := range resp.Comments {
		var comments tfTypes.Comment

		if commentsItem.AdditionalProperties == nil {
			comments.AdditionalProperties = jsontypes.NewNormalizedNull()
		} else {
			additionalPropertiesResult, _ := json.Marshal(commentsItem.AdditionalProperties)
			comments.AdditionalProperties = jsontypes.NewNormalizedValue(string(additionalPropertiesResult))
		}
		comments.Comment = types.StringPointerValue(commentsItem.Comment)

		r.Comments = append(r.Comments, comments)
	}
	if len(resp.Groups) > 0 {
		r.Groups = make(map[string]tfTypes.RoutesGroups, len(resp.Groups))
		for routesGroupsKey, routesGroupsValue := range resp.Groups {
			var routesGroupsResult tfTypes.RoutesGroups
			routesGroupsResult.Description = types.StringPointerValue(routesGroupsValue.Description)
			routesGroupsResult.Disabled = types.BoolPointerValue(routesGroupsValue.Disabled)
			routesGroupsResult.Name = types.StringValue(routesGroupsValue.Name)

			r.Groups[routesGroupsKey] = routesGroupsResult
		}
	}
	r.ID = types.StringPointerValue(resp.ID)
	r.Routes = []tfTypes.RoutesRoute{}

	for _, routesItem := range resp.Routes {
		var routes tfTypes.RoutesRoute

		if routesItem.AdditionalProperties == nil {
			routes.AdditionalProperties = jsontypes.NewNormalizedNull()
		} else {
			additionalPropertiesResult1, _ := json.Marshal(routesItem.AdditionalProperties)
			routes.AdditionalProperties = jsontypes.NewNormalizedValue(string(additionalPropertiesResult1))
		}
		routes.Description = types.StringPointerValue(routesItem.Description)
		routes.Disabled = types.BoolPointerValue(routesItem.Disabled)
		routes.EnableOutputExpression = types.BoolPointerValue(routesItem.EnableOutputExpression)
		routes.Filter = types.StringPointerValue(routesItem.Filter)
		routes.Final = types.BoolPointerValue(routesItem.Final)
		routes.ID = types.StringPointerValue(routesItem.ID)
		routes.Name = types.StringValue(routesItem.Name)
		if routesItem.Output == nil {
			routes.Output = jsontypes.NewNormalizedNull()
		} else {
			outputResult, _ := json.Marshal(routesItem.Output)
			routes.Output = jsontypes.NewNormalizedValue(string(outputResult))
		}
		if routesItem.OutputExpression == nil {
			routes.OutputExpression = jsontypes.NewNormalizedNull()
		} else {
			outputExpressionResult, _ := json.Marshal(routesItem.OutputExpression)
			routes.OutputExpression = jsontypes.NewNormalizedValue(string(outputExpressionResult))
		}
		routes.Pipeline = types.StringValue(routesItem.Pipeline)

		r.Routes = append(r.Routes, routes)
	}

	return diags
}

func (r *RoutesDataSourceModel) ToOperationsGetRoutesByGroupIDRequest(ctx context.Context) (*operations.GetRoutesByGroupIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.GetRoutesByGroupIDRequest{
		GroupID: groupID,
	}

	return &out, diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *PipelineDataSourceModel) RefreshFromOperationsGetPipelineByIDResponseBody(ctx context.Context, resp *operations.GetPipelineByIDResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.Pipeline{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.Pipeline

			items.Conf.AsyncFuncTimeout = types.Int64PointerValue(itemsItem.Conf.AsyncFuncTimeout)
			items.Conf.Description = types.StringPointerValue(itemsItem.Conf.Description)
			items.Conf.Functions = []tfTypes.PipelineFunctionConf{}

			for _, functionsItem := range itemsItem.Conf.Functions {
				var functions tfTypes.PipelineFunctionConf

				if len(functionsItem.Conf) > 0 {
					functions.Conf = make(map[string]jsontypes.Normalized, len(functionsItem.Conf))
					for key, value := range functionsItem.Conf {
						result, _ := json.Marshal(value)
						functions.Conf[key] = jsontypes.NewNormalizedValue(string(result))
					}
				}
				functions.Description = types.StringPointerValue(functionsItem.Description)
				functions.Disabled = types.BoolPointerValue(functionsItem.Disabled)
				functions.Filter = types.StringPointerValue(functionsItem.Filter)
				functions.Final = types.BoolPointerValue(functionsItem.Final)
				functions.GroupID = types.StringPointerValue(functionsItem.GroupID)
				functions.ID = types.StringValue(functionsItem.ID)

				items.Conf.Functions = append(items.Conf.Functions, functions)
			}
			if len(itemsItem.Conf.Groups) > 0 {
				items.Conf.Groups = make(map[string]tfTypes.PipelineGroups, len(itemsItem.Conf.Groups))
				for pipelineGroupsKey, pipelineGroupsValue := range itemsItem.Conf.Groups {
					var pipelineGroupsResult tfTypes.PipelineGroups
					pipelineGroupsResult.Description = types.StringPointerValue(pipelineGroupsValue.Description)
					pipelineGroupsResult.Disabled = types.BoolPointerValue(pipelineGroupsValue.Disabled)
					pipelineGroupsResult.Name = types.StringValue(pipelineGroupsValue.Name)

					items.Conf.Groups[pipelineGroupsKey] = pipelineGroupsResult
				}
			}
			items.Conf.Output = types.StringPointerValue(itemsItem.Conf.Output)
			items.Conf.Streamtags = make([]types.String, 0, len(itemsItem.Conf.Streamtags))
			for _, v := range itemsItem.Conf.Streamtags {
				items.Conf.Streamtags = append(items.Conf.Streamtags, types.StringValue(v))
			}
			items.ID = types.StringValue(itemsItem.ID)

			r.Items = append(r.Items, items)
		}
	}

	return diags
}

func (r *PipelineDataSourceModel) ToOperationsGetPipelineByIDRequest(ctx context.Context) (*operations.GetPipelineByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.GetPipelineByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *PipelineDataSourceModel) RefreshFromSharedPipeline(ctx context.Context, resp *shared.Pipeline) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Conf.AsyncFuncTimeout = types.Int64PointerValue(resp.Conf.AsyncFuncTimeout)
	r.Conf.Description = types.StringPointerValue(resp.Conf.Description)
	r.Conf.Functions = []tfTypes.PipelineFunctionConf{}

	for _, functionsItem := range resp.Conf.Functions {
		var functions tfTypes.PipelineFunctionConf

		if len(functionsItem.Conf) > 0 {
			functions.Conf = make(map[string]jsontypes.Normalized, len(functionsItem.Conf))
			for key, value := range functionsItem.Conf {
				result, _ := json.Marshal(value)
				functions.Conf[key] = jsontypes.NewNormalizedValue(string(result))
			}
		}
		functions.Description = types.StringPointerValue(functionsItem.Description)
		functions.Disabled = types.BoolPointerValue(functionsItem.Disabled)
		functions.Filter = types.StringPointerValue(functionsItem.Filter)
		functions.Final = types.BoolPointerValue(functionsItem.Final)
		functions.GroupID = types.StringPointerValue(functionsItem.GroupID)
		functions.ID = types.StringValue(functionsItem.ID)

		r.Conf.Functions = append(r.Conf.Functions, functions)
	}
	if len(resp.Conf.Groups) > 0 {
		r.Conf.Groups = make(map[string]tfTypes.PipelineGroups, len(resp.Conf.Groups))
		for pipelineGroupsKey, pipelineGroupsValue := range resp.Conf.Groups {
			var pipelineGroupsResult tfTypes.PipelineGroups
			pipelineGroupsResult.Description = types.StringPointerValue(pipelineGroupsValue.Description)
			pipelineGroupsResult.Disabled = types.BoolPointerValue(pipelineGroupsValue.Disabled)
			pipelineGroupsResult.Name = types.StringValue(pipelineGroupsValue.Name)

			r.Conf.Groups[pipelineGroupsKey] = pipelineGroupsResult
		}
	}
	r.Conf.Output = types.StringPointerValue(resp.Conf.Output)
	r.Conf.Streamtags = make([]types.String, 0, len(resp.Conf.Streamtags))
	for _, v := range resp.Conf.Streamtags {
		r.Conf.Streamtags = append(r.Conf.Streamtags, types.StringValue(v))
	}
	r.ID = types.StringValue(resp.ID)

	return diags
}

func (r *PipelineDataSourceModel) ToOperationsGetPipelineByIDRequest(ctx context.Context) (*operations.GetPipelineByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.GetPipelineByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

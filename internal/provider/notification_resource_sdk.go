// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *NotificationResourceModel) RefreshFromOperationsGetNotificationByIDResponseBody(ctx context.Context, resp *operations.GetNotificationByIDResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.Notification{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.Notification

			items.ID = types.StringValue(itemsItem.ID)
			items.Disabled = types.BoolPointerValue(itemsItem.Disabled)
			items.Condition = types.StringValue(itemsItem.Condition)
			items.Targets = make([]types.String, 0, len(itemsItem.Targets))
			for _, v := range itemsItem.Targets {
				items.Targets = append(items.Targets, types.StringValue(v))
			}
			items.TargetConfigs = []tfTypes.TargetConfig{}

			for _, targetConfigsItem := range itemsItem.TargetConfigs {
				var targetConfigs tfTypes.TargetConfig

				targetConfigs.ID = types.StringValue(targetConfigsItem.ID)
				if targetConfigsItem.Conf == nil {
					targetConfigs.Conf = nil
				} else {
					targetConfigs.Conf = &tfTypes.TargetConfigConf{}
					targetConfigs.Conf.IncludeResults = types.BoolPointerValue(targetConfigsItem.Conf.IncludeResults)
					if targetConfigsItem.Conf.AttachmentType != nil {
						targetConfigs.Conf.AttachmentType = types.StringValue(string(*targetConfigsItem.Conf.AttachmentType))
					} else {
						targetConfigs.Conf.AttachmentType = types.StringNull()
					}
				}

				items.TargetConfigs = append(items.TargetConfigs, targetConfigs)
			}
			if itemsItem.Conf == nil {
				items.Conf = nil
			} else {
				items.Conf = &tfTypes.ConditionSpecificConfigs{}
				items.Conf.SavedQueryID = types.StringValue(itemsItem.Conf.SavedQueryID)
				items.Conf.Message = types.StringValue(itemsItem.Conf.Message)
				items.Conf.TriggerType = types.StringPointerValue(itemsItem.Conf.TriggerType)
				items.Conf.TriggerComparator = types.StringPointerValue(itemsItem.Conf.TriggerComparator)
				items.Conf.TriggerCount = types.Float64PointerValue(itemsItem.Conf.TriggerCount)
			}
			items.Group = types.StringPointerValue(itemsItem.Group)

			r.Items = append(r.Items, items)
		}
	}

	return diags
}

func (r *NotificationResourceModel) RefreshFromSharedNotification(ctx context.Context, resp *shared.Notification) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Condition = types.StringValue(resp.Condition)
	if resp.Conf == nil {
		r.Conf = nil
	} else {
		r.Conf = &tfTypes.ConditionSpecificConfigs{}
		r.Conf.Message = types.StringValue(resp.Conf.Message)
		r.Conf.SavedQueryID = types.StringValue(resp.Conf.SavedQueryID)
		r.Conf.TriggerComparator = types.StringPointerValue(resp.Conf.TriggerComparator)
		r.Conf.TriggerCount = types.Float64PointerValue(resp.Conf.TriggerCount)
		r.Conf.TriggerType = types.StringPointerValue(resp.Conf.TriggerType)
	}
	r.Disabled = types.BoolPointerValue(resp.Disabled)
	r.Group = types.StringPointerValue(resp.Group)
	r.ID = types.StringValue(resp.ID)
	r.TargetConfigs = []tfTypes.TargetConfig{}

	for _, targetConfigsItem := range resp.TargetConfigs {
		var targetConfigs tfTypes.TargetConfig

		if targetConfigsItem.Conf == nil {
			targetConfigs.Conf = nil
		} else {
			targetConfigs.Conf = &tfTypes.TargetConfigConf{}
			if targetConfigsItem.Conf.AttachmentType != nil {
				targetConfigs.Conf.AttachmentType = types.StringValue(string(*targetConfigsItem.Conf.AttachmentType))
			} else {
				targetConfigs.Conf.AttachmentType = types.StringNull()
			}
			targetConfigs.Conf.IncludeResults = types.BoolPointerValue(targetConfigsItem.Conf.IncludeResults)
		}
		targetConfigs.ID = types.StringValue(targetConfigsItem.ID)

		r.TargetConfigs = append(r.TargetConfigs, targetConfigs)
	}
	r.Targets = make([]types.String, 0, len(resp.Targets))
	for _, v := range resp.Targets {
		r.Targets = append(r.Targets, types.StringValue(v))
	}

	return diags
}

func (r *NotificationResourceModel) ToOperationsDeleteNotificationByIDRequest(ctx context.Context) (*operations.DeleteNotificationByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteNotificationByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *NotificationResourceModel) ToOperationsGetNotificationByIDRequest(ctx context.Context) (*operations.GetNotificationByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetNotificationByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *NotificationResourceModel) ToOperationsUpdateNotificationByIDRequest(ctx context.Context) (*operations.UpdateNotificationByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	notification, notificationDiags := r.ToSharedNotification(ctx)
	diags.Append(notificationDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateNotificationByIDRequest{
		ID:           id,
		Notification: *notification,
	}

	return &out, diags
}

func (r *NotificationResourceModel) ToSharedNotification(ctx context.Context) (*shared.Notification, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	disabled := new(bool)
	if !r.Disabled.IsUnknown() && !r.Disabled.IsNull() {
		*disabled = r.Disabled.ValueBool()
	} else {
		disabled = nil
	}
	var condition string
	condition = r.Condition.ValueString()

	targets := make([]string, 0, len(r.Targets))
	for _, targetsItem := range r.Targets {
		targets = append(targets, targetsItem.ValueString())
	}
	targetConfigs := make([]shared.TargetConfig, 0, len(r.TargetConfigs))
	for _, targetConfigsItem := range r.TargetConfigs {
		var id1 string
		id1 = targetConfigsItem.ID.ValueString()

		var conf *shared.TargetConfigConf
		if targetConfigsItem.Conf != nil {
			includeResults := new(bool)
			if !targetConfigsItem.Conf.IncludeResults.IsUnknown() && !targetConfigsItem.Conf.IncludeResults.IsNull() {
				*includeResults = targetConfigsItem.Conf.IncludeResults.ValueBool()
			} else {
				includeResults = nil
			}
			attachmentType := new(shared.AttachmentType)
			if !targetConfigsItem.Conf.AttachmentType.IsUnknown() && !targetConfigsItem.Conf.AttachmentType.IsNull() {
				*attachmentType = shared.AttachmentType(targetConfigsItem.Conf.AttachmentType.ValueString())
			} else {
				attachmentType = nil
			}
			conf = &shared.TargetConfigConf{
				IncludeResults: includeResults,
				AttachmentType: attachmentType,
			}
		}
		targetConfigs = append(targetConfigs, shared.TargetConfig{
			ID:   id1,
			Conf: conf,
		})
	}
	var conf1 *shared.ConditionSpecificConfigs
	if r.Conf != nil {
		var savedQueryID string
		savedQueryID = r.Conf.SavedQueryID.ValueString()

		var message string
		message = r.Conf.Message.ValueString()

		triggerType := new(string)
		if !r.Conf.TriggerType.IsUnknown() && !r.Conf.TriggerType.IsNull() {
			*triggerType = r.Conf.TriggerType.ValueString()
		} else {
			triggerType = nil
		}
		triggerComparator := new(string)
		if !r.Conf.TriggerComparator.IsUnknown() && !r.Conf.TriggerComparator.IsNull() {
			*triggerComparator = r.Conf.TriggerComparator.ValueString()
		} else {
			triggerComparator = nil
		}
		triggerCount := new(float64)
		if !r.Conf.TriggerCount.IsUnknown() && !r.Conf.TriggerCount.IsNull() {
			*triggerCount = r.Conf.TriggerCount.ValueFloat64()
		} else {
			triggerCount = nil
		}
		conf1 = &shared.ConditionSpecificConfigs{
			SavedQueryID:      savedQueryID,
			Message:           message,
			TriggerType:       triggerType,
			TriggerComparator: triggerComparator,
			TriggerCount:      triggerCount,
		}
	}
	group := new(string)
	if !r.Group.IsUnknown() && !r.Group.IsNull() {
		*group = r.Group.ValueString()
	} else {
		group = nil
	}
	out := shared.Notification{
		ID:            id,
		Disabled:      disabled,
		Condition:     condition,
		Targets:       targets,
		TargetConfigs: targetConfigs,
		Conf:          conf1,
		Group:         group,
	}

	return &out, diags
}

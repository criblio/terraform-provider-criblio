// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *ProjectResourceModel) RefreshFromSharedProjectConfig(ctx context.Context, resp *shared.ProjectConfig) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp.Consumers == nil {
		r.Consumers = nil
	} else {
		r.Consumers = &tfTypes.Consumers{}
	}
	r.Description = types.StringPointerValue(resp.Description)
	r.Destinations = make([]types.String, 0, len(resp.Destinations))
	for _, v := range resp.Destinations {
		r.Destinations = append(r.Destinations, types.StringValue(v))
	}
	r.ID = types.StringValue(resp.ID)
	r.Subscriptions = make([]types.String, 0, len(resp.Subscriptions))
	for _, v := range resp.Subscriptions {
		r.Subscriptions = append(r.Subscriptions, types.StringValue(v))
	}

	return diags
}

func (r *ProjectResourceModel) ToOperationsCreateProjectRequest(ctx context.Context) (*operations.CreateProjectRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	projectConfig, projectConfigDiags := r.ToSharedProjectConfig(ctx)
	diags.Append(projectConfigDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateProjectRequest{
		GroupID:       groupID,
		ProjectConfig: *projectConfig,
	}

	return &out, diags
}

func (r *ProjectResourceModel) ToOperationsDeleteProjectByIDRequest(ctx context.Context) (*operations.DeleteProjectByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.DeleteProjectByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *ProjectResourceModel) ToOperationsGetProjectByIDRequest(ctx context.Context) (*operations.GetProjectByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.GetProjectByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *ProjectResourceModel) ToOperationsUpdateProjectByIDRequest(ctx context.Context) (*operations.UpdateProjectByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	projectConfig, projectConfigDiags := r.ToSharedProjectConfig(ctx)
	diags.Append(projectConfigDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateProjectByIDRequest{
		ID:            id,
		GroupID:       groupID,
		ProjectConfig: *projectConfig,
	}

	return &out, diags
}

func (r *ProjectResourceModel) ToSharedProjectConfig(ctx context.Context) (*shared.ProjectConfig, diag.Diagnostics) {
	var diags diag.Diagnostics

	var consumers *shared.Consumers
	if r.Consumers != nil {
		consumers = &shared.Consumers{}
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	destinations := make([]string, 0, len(r.Destinations))
	for _, destinationsItem := range r.Destinations {
		destinations = append(destinations, destinationsItem.ValueString())
	}
	var id string
	id = r.ID.ValueString()

	subscriptions := make([]string, 0, len(r.Subscriptions))
	for _, subscriptionsItem := range r.Subscriptions {
		subscriptions = append(subscriptions, subscriptionsItem.ValueString())
	}
	out := shared.ProjectConfig{
		Consumers:     consumers,
		Description:   description,
		Destinations:  destinations,
		ID:            id,
		Subscriptions: subscriptions,
	}

	return &out, diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
)

func (r *PackVarsResourceModel) RefreshFromOperationsCreateGlobalVariableLibVarsByPackResponseBody(ctx context.Context, resp *operations.CreateGlobalVariableLibVarsByPackResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = nil
		for _, itemsItem := range resp.Items {
			var items map[string]jsontypes.Normalized
			if len(itemsItem) > 0 {
				items = make(map[string]jsontypes.Normalized, len(itemsItem))
				for key, value := range itemsItem {
					result, _ := json.Marshal(value)
					items[key] = jsontypes.NewNormalizedValue(string(result))
				}
			}
			r.Items = append(r.Items, items)
		}
	}

	return diags
}

func (r *PackVarsResourceModel) RefreshFromOperationsGetGlobalVariableLibVarsByPackAndIDResponseBody(ctx context.Context, resp *operations.GetGlobalVariableLibVarsByPackAndIDResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = nil
		for _, itemsItem := range resp.Items {
			var items map[string]jsontypes.Normalized
			if len(itemsItem) > 0 {
				items = make(map[string]jsontypes.Normalized, len(itemsItem))
				for key, value := range itemsItem {
					result, _ := json.Marshal(value)
					items[key] = jsontypes.NewNormalizedValue(string(result))
				}
			}
			r.Items = append(r.Items, items)
		}
	}

	return diags
}

func (r *PackVarsResourceModel) RefreshFromOperationsUpdateGlobalVariableLibVarsByPackAndIDResponseBody(ctx context.Context, resp *operations.UpdateGlobalVariableLibVarsByPackAndIDResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = nil
		for _, itemsItem := range resp.Items {
			var items map[string]jsontypes.Normalized
			if len(itemsItem) > 0 {
				items = make(map[string]jsontypes.Normalized, len(itemsItem))
				for key, value := range itemsItem {
					result, _ := json.Marshal(value)
					items[key] = jsontypes.NewNormalizedValue(string(result))
				}
			}
			r.Items = append(r.Items, items)
		}
	}

	return diags
}

func (r *PackVarsResourceModel) ToOperationsCreateGlobalVariableLibVarsByPackRequest(ctx context.Context) (*operations.CreateGlobalVariableLibVarsByPackRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pack string
	pack = r.Pack.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	globalVar, globalVarDiags := r.ToSharedGlobalVar(ctx)
	diags.Append(globalVarDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateGlobalVariableLibVarsByPackRequest{
		Pack:      pack,
		GroupID:   groupID,
		GlobalVar: *globalVar,
	}

	return &out, diags
}

func (r *PackVarsResourceModel) ToOperationsDeleteGlobalVariableLibVarsByPackAndIDRequest(ctx context.Context) (*operations.DeleteGlobalVariableLibVarsByPackAndIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var pack string
	pack = r.Pack.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.DeleteGlobalVariableLibVarsByPackAndIDRequest{
		ID:      id,
		Pack:    pack,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *PackVarsResourceModel) ToOperationsGetGlobalVariableLibVarsByPackAndIDRequest(ctx context.Context) (*operations.GetGlobalVariableLibVarsByPackAndIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var pack string
	pack = r.Pack.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.GetGlobalVariableLibVarsByPackAndIDRequest{
		ID:      id,
		Pack:    pack,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *PackVarsResourceModel) ToOperationsUpdateGlobalVariableLibVarsByPackAndIDRequest(ctx context.Context) (*operations.UpdateGlobalVariableLibVarsByPackAndIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var pack string
	pack = r.Pack.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	globalVar, globalVarDiags := r.ToSharedGlobalVar(ctx)
	diags.Append(globalVarDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateGlobalVariableLibVarsByPackAndIDRequest{
		ID:        id,
		Pack:      pack,
		GroupID:   groupID,
		GlobalVar: *globalVar,
	}

	return &out, diags
}

func (r *PackVarsResourceModel) ToSharedGlobalVar(ctx context.Context) (*shared.GlobalVar, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	lib := new(string)
	if !r.Lib.IsUnknown() && !r.Lib.IsNull() {
		*lib = r.Lib.ValueString()
	} else {
		lib = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	typeVar := new(shared.GlobalVarType)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.GlobalVarType(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	value := new(string)
	if !r.Value.IsUnknown() && !r.Value.IsNull() {
		*value = r.Value.ValueString()
	} else {
		value = nil
	}
	tags := new(string)
	if !r.Tags.IsUnknown() && !r.Tags.IsNull() {
		*tags = r.Tags.ValueString()
	} else {
		tags = nil
	}
	out := shared.GlobalVar{
		ID:          id,
		Lib:         lib,
		Description: description,
		Type:        typeVar,
		Value:       value,
		Tags:        tags,
	}

	return &out, diags
}

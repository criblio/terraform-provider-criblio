// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SearchDatasetProviderDataSourceModel) RefreshFromOperationsGetDatasetProviderByIDResponseBody(ctx context.Context, resp *operations.GetDatasetProviderByIDResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.GenericProvider{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.GenericProvider

			if itemsItem.APIAwsProvider != nil {
				items.APIAwsProvider = &tfTypes.APIAwsProvider{}
				items.APIAwsProvider.AccountConfigs = []tfTypes.AwsAccountConfig{}

				for _, accountConfigsItem := range itemsItem.APIAwsProvider.AccountConfigs {
					var accountConfigs tfTypes.AwsAccountConfig

					accountConfigs.AssumeRoleArn = types.StringPointerValue(accountConfigsItem.AssumeRoleArn)
					accountConfigs.AssumeRoleExternalID = types.StringPointerValue(accountConfigsItem.AssumeRoleExternalID)
					accountConfigs.AwsAPIKey = types.StringPointerValue(accountConfigsItem.AwsAPIKey)
					accountConfigs.AwsSecretKey = types.StringPointerValue(accountConfigsItem.AwsSecretKey)
					accountConfigs.Name = types.StringValue(accountConfigsItem.Name)

					items.APIAwsProvider.AccountConfigs = append(items.APIAwsProvider.AccountConfigs, accountConfigs)
				}
				items.APIAwsProvider.Description = types.StringPointerValue(itemsItem.APIAwsProvider.Description)
				items.APIAwsProvider.ID = types.StringValue(itemsItem.APIAwsProvider.ID)
				items.APIAwsProvider.Type = types.StringValue(itemsItem.APIAwsProvider.Type)
			}
			if itemsItem.APIAzureDataExplorerProvider != nil {
				items.APIAzureDataExplorerProvider = &tfTypes.APIAzureDataExplorerProvider{}
				items.APIAzureDataExplorerProvider.ClientID = types.StringValue(itemsItem.APIAzureDataExplorerProvider.ClientID)
				items.APIAzureDataExplorerProvider.ClientSecret = types.StringValue(itemsItem.APIAzureDataExplorerProvider.ClientSecret)
				items.APIAzureDataExplorerProvider.Description = types.StringPointerValue(itemsItem.APIAzureDataExplorerProvider.Description)
				items.APIAzureDataExplorerProvider.ID = types.StringValue(itemsItem.APIAzureDataExplorerProvider.ID)
				items.APIAzureDataExplorerProvider.TenantID = types.StringValue(itemsItem.APIAzureDataExplorerProvider.TenantID)
				items.APIAzureDataExplorerProvider.Type = types.StringValue(itemsItem.APIAzureDataExplorerProvider.Type)
			}
			if itemsItem.APIAzureProvider != nil {
				items.APIAzureProvider = &tfTypes.APIAzureProvider{}
				items.APIAzureProvider.AccountConfigs = []tfTypes.AzureAccountConfig{}

				for _, accountConfigsItem1 := range itemsItem.APIAzureProvider.AccountConfigs {
					var accountConfigs1 tfTypes.AzureAccountConfig

					accountConfigs1.ClientID = types.StringValue(accountConfigsItem1.ClientID)
					accountConfigs1.ClientSecret = types.StringValue(accountConfigsItem1.ClientSecret)
					accountConfigs1.Name = types.StringValue(accountConfigsItem1.Name)
					accountConfigs1.TenantID = types.StringValue(accountConfigsItem1.TenantID)

					items.APIAzureProvider.AccountConfigs = append(items.APIAzureProvider.AccountConfigs, accountConfigs1)
				}
				items.APIAzureProvider.Description = types.StringPointerValue(itemsItem.APIAzureProvider.Description)
				items.APIAzureProvider.ID = types.StringValue(itemsItem.APIAzureProvider.ID)
				items.APIAzureProvider.Type = types.StringValue(itemsItem.APIAzureProvider.Type)
			}
			if itemsItem.APIElasticSearchProvider != nil {
				items.APIElasticSearchProvider = &tfTypes.APIElasticSearchProvider{}
				items.APIElasticSearchProvider.Description = types.StringPointerValue(itemsItem.APIElasticSearchProvider.Description)
				items.APIElasticSearchProvider.Endpoint = types.StringValue(itemsItem.APIElasticSearchProvider.Endpoint)
				items.APIElasticSearchProvider.ID = types.StringValue(itemsItem.APIElasticSearchProvider.ID)
				items.APIElasticSearchProvider.Password = types.StringValue(itemsItem.APIElasticSearchProvider.Password)
				items.APIElasticSearchProvider.Type = types.StringValue(itemsItem.APIElasticSearchProvider.Type)
				items.APIElasticSearchProvider.Username = types.StringValue(itemsItem.APIElasticSearchProvider.Username)
			}
			if itemsItem.APIGcpProvider != nil {
				items.APIGcpProvider = &tfTypes.APIGcpProvider{}
				items.APIGcpProvider.AccountConfigs = []tfTypes.GcpAccountConfig{}

				for _, accountConfigsItem2 := range itemsItem.APIGcpProvider.AccountConfigs {
					var accountConfigs2 tfTypes.GcpAccountConfig

					accountConfigs2.Name = types.StringValue(accountConfigsItem2.Name)
					accountConfigs2.ServiceAccountCredentials = types.StringValue(accountConfigsItem2.ServiceAccountCredentials)

					items.APIGcpProvider.AccountConfigs = append(items.APIGcpProvider.AccountConfigs, accountConfigs2)
				}
				items.APIGcpProvider.Description = types.StringPointerValue(itemsItem.APIGcpProvider.Description)
				items.APIGcpProvider.ID = types.StringValue(itemsItem.APIGcpProvider.ID)
				items.APIGcpProvider.Type = types.StringValue(itemsItem.APIGcpProvider.Type)
			}
			if itemsItem.APIGoogleWorkspaceProvider != nil {
				items.APIGoogleWorkspaceProvider = &tfTypes.APIGoogleWorkspaceProvider{}
				items.APIGoogleWorkspaceProvider.AccountConfigs = []tfTypes.GoogleWorkspaceAccountConfig{}

				for _, accountConfigsItem3 := range itemsItem.APIGoogleWorkspaceProvider.AccountConfigs {
					var accountConfigs3 tfTypes.GoogleWorkspaceAccountConfig

					accountConfigs3.Name = types.StringValue(accountConfigsItem3.Name)
					accountConfigs3.ServiceAccountCredentials = types.StringValue(accountConfigsItem3.ServiceAccountCredentials)
					accountConfigs3.Subject = types.StringValue(accountConfigsItem3.Subject)

					items.APIGoogleWorkspaceProvider.AccountConfigs = append(items.APIGoogleWorkspaceProvider.AccountConfigs, accountConfigs3)
				}
				items.APIGoogleWorkspaceProvider.Description = types.StringPointerValue(itemsItem.APIGoogleWorkspaceProvider.Description)
				items.APIGoogleWorkspaceProvider.ID = types.StringValue(itemsItem.APIGoogleWorkspaceProvider.ID)
				items.APIGoogleWorkspaceProvider.Type = types.StringValue(itemsItem.APIGoogleWorkspaceProvider.Type)
			}
			if itemsItem.APIHTTPProvider != nil {
				items.APIHTTPProvider = &tfTypes.APIHTTPProvider{}
				if itemsItem.APIHTTPProvider.AuthenticationMethod != nil {
					items.APIHTTPProvider.AuthenticationMethod = types.StringValue(string(*itemsItem.APIHTTPProvider.AuthenticationMethod))
				} else {
					items.APIHTTPProvider.AuthenticationMethod = types.StringNull()
				}
				items.APIHTTPProvider.AvailableEndpoints = []tfTypes.HTTPEndpoint{}

				for _, availableEndpointsItem := range itemsItem.APIHTTPProvider.AvailableEndpoints {
					var availableEndpoints tfTypes.HTTPEndpoint

					availableEndpoints.DataField = types.StringPointerValue(availableEndpointsItem.DataField)
					availableEndpoints.Headers = []tfTypes.HTTPHeader{}

					for _, headersItem := range availableEndpointsItem.Headers {
						var headers tfTypes.HTTPHeader

						headers.Name = types.StringValue(headersItem.Name)
						headers.Value = types.StringValue(headersItem.Value)

						availableEndpoints.Headers = append(availableEndpoints.Headers, headers)
					}
					if availableEndpointsItem.Method != nil {
						availableEndpoints.Method = types.StringValue(string(*availableEndpointsItem.Method))
					} else {
						availableEndpoints.Method = types.StringNull()
					}
					availableEndpoints.Name = types.StringValue(availableEndpointsItem.Name)
					availableEndpoints.URL = types.StringValue(availableEndpointsItem.URL)

					items.APIHTTPProvider.AvailableEndpoints = append(items.APIHTTPProvider.AvailableEndpoints, availableEndpoints)
				}
				items.APIHTTPProvider.Description = types.StringPointerValue(itemsItem.APIHTTPProvider.Description)
				items.APIHTTPProvider.ID = types.StringValue(itemsItem.APIHTTPProvider.ID)
				items.APIHTTPProvider.Type = types.StringValue(itemsItem.APIHTTPProvider.Type)
			}
			if itemsItem.APIMsGraphProvider != nil {
				items.APIMsGraphProvider = &tfTypes.APIMsGraphProvider{}
				items.APIMsGraphProvider.AccountConfigs = []tfTypes.MsGraphAccountConfig{}

				for _, accountConfigsItem4 := range itemsItem.APIMsGraphProvider.AccountConfigs {
					var accountConfigs4 tfTypes.MsGraphAccountConfig

					accountConfigs4.ClientID = types.StringValue(accountConfigsItem4.ClientID)
					accountConfigs4.ClientSecret = types.StringValue(accountConfigsItem4.ClientSecret)
					accountConfigs4.Name = types.StringValue(accountConfigsItem4.Name)
					accountConfigs4.TenantID = types.StringValue(accountConfigsItem4.TenantID)

					items.APIMsGraphProvider.AccountConfigs = append(items.APIMsGraphProvider.AccountConfigs, accountConfigs4)
				}
				items.APIMsGraphProvider.Description = types.StringPointerValue(itemsItem.APIMsGraphProvider.Description)
				items.APIMsGraphProvider.ID = types.StringValue(itemsItem.APIMsGraphProvider.ID)
				items.APIMsGraphProvider.Type = types.StringValue(itemsItem.APIMsGraphProvider.Type)
			}
			if itemsItem.APIOktaProvider != nil {
				items.APIOktaProvider = &tfTypes.APIOktaProvider{}
				items.APIOktaProvider.AccountConfigs = []tfTypes.OktaAccountConfig{}

				for _, accountConfigsItem5 := range itemsItem.APIOktaProvider.AccountConfigs {
					var accountConfigs5 tfTypes.OktaAccountConfig

					accountConfigs5.APIToken = types.StringValue(accountConfigsItem5.APIToken)
					accountConfigs5.DomainEndpoint = types.StringValue(accountConfigsItem5.DomainEndpoint)
					accountConfigs5.Name = types.StringValue(accountConfigsItem5.Name)

					items.APIOktaProvider.AccountConfigs = append(items.APIOktaProvider.AccountConfigs, accountConfigs5)
				}
				items.APIOktaProvider.Description = types.StringPointerValue(itemsItem.APIOktaProvider.Description)
				items.APIOktaProvider.ID = types.StringValue(itemsItem.APIOktaProvider.ID)
				items.APIOktaProvider.Type = types.StringValue(itemsItem.APIOktaProvider.Type)
			}
			if itemsItem.APIOpenSearchProvider != nil {
				items.APIOpenSearchProvider = &tfTypes.APIOpenSearchProvider{}
				items.APIOpenSearchProvider.Description = types.StringPointerValue(itemsItem.APIOpenSearchProvider.Description)
				items.APIOpenSearchProvider.Endpoint = types.StringValue(itemsItem.APIOpenSearchProvider.Endpoint)
				items.APIOpenSearchProvider.ID = types.StringValue(itemsItem.APIOpenSearchProvider.ID)
				items.APIOpenSearchProvider.Password = types.StringValue(itemsItem.APIOpenSearchProvider.Password)
				items.APIOpenSearchProvider.Type = types.StringValue(itemsItem.APIOpenSearchProvider.Type)
				items.APIOpenSearchProvider.Username = types.StringValue(itemsItem.APIOpenSearchProvider.Username)
			}
			if itemsItem.APITailscaleProvider != nil {
				items.APITailscaleProvider = &tfTypes.APITailscaleProvider{}
				items.APITailscaleProvider.AccountConfigs = []tfTypes.TailscaleAccountConfig{}

				for _, accountConfigsItem6 := range itemsItem.APITailscaleProvider.AccountConfigs {
					var accountConfigs6 tfTypes.TailscaleAccountConfig

					accountConfigs6.ClientID = types.StringValue(accountConfigsItem6.ClientID)
					accountConfigs6.ClientSecret = types.StringValue(accountConfigsItem6.ClientSecret)
					accountConfigs6.Name = types.StringValue(accountConfigsItem6.Name)

					items.APITailscaleProvider.AccountConfigs = append(items.APITailscaleProvider.AccountConfigs, accountConfigs6)
				}
				items.APITailscaleProvider.Description = types.StringPointerValue(itemsItem.APITailscaleProvider.Description)
				items.APITailscaleProvider.ID = types.StringValue(itemsItem.APITailscaleProvider.ID)
				items.APITailscaleProvider.Type = types.StringValue(itemsItem.APITailscaleProvider.Type)
			}
			if itemsItem.APIZoomProvider != nil {
				items.APIZoomProvider = &tfTypes.APIZoomProvider{}
				items.APIZoomProvider.AccountConfigs = []tfTypes.ZoomAccountConfig{}

				for _, accountConfigsItem7 := range itemsItem.APIZoomProvider.AccountConfigs {
					var accountConfigs7 tfTypes.ZoomAccountConfig

					accountConfigs7.AccountID = types.StringValue(accountConfigsItem7.AccountID)
					accountConfigs7.ClientID = types.StringValue(accountConfigsItem7.ClientID)
					accountConfigs7.ClientSecret = types.StringValue(accountConfigsItem7.ClientSecret)
					accountConfigs7.Name = types.StringValue(accountConfigsItem7.Name)

					items.APIZoomProvider.AccountConfigs = append(items.APIZoomProvider.AccountConfigs, accountConfigs7)
				}
				items.APIZoomProvider.Description = types.StringPointerValue(itemsItem.APIZoomProvider.Description)
				items.APIZoomProvider.ID = types.StringValue(itemsItem.APIZoomProvider.ID)
				items.APIZoomProvider.Type = types.StringValue(itemsItem.APIZoomProvider.Type)
			}
			if itemsItem.AwsSecurityLakeProvider != nil {
				items.AwsSecurityLakeProvider = &tfTypes.AwsSecurityLakeProvider{}
				items.AwsSecurityLakeProvider.Description = types.StringPointerValue(itemsItem.AwsSecurityLakeProvider.Description)
				items.AwsSecurityLakeProvider.ID = types.StringValue(itemsItem.AwsSecurityLakeProvider.ID)
				items.AwsSecurityLakeProvider.Type = types.StringValue(itemsItem.AwsSecurityLakeProvider.Type)
			}
			if itemsItem.AzureBlobProvider != nil {
				items.AzureBlobProvider = &tfTypes.AzureBlobProvider{}
				if itemsItem.AzureBlobProvider.AuthenticationMethod != nil {
					items.AzureBlobProvider.AuthenticationMethod = types.StringValue(string(*itemsItem.AzureBlobProvider.AuthenticationMethod))
				} else {
					items.AzureBlobProvider.AuthenticationMethod = types.StringNull()
				}
				items.AzureBlobProvider.ClientID = types.StringPointerValue(itemsItem.AzureBlobProvider.ClientID)
				items.AzureBlobProvider.ClientSecret = types.StringPointerValue(itemsItem.AzureBlobProvider.ClientSecret)
				items.AzureBlobProvider.ConnectionString = types.StringPointerValue(itemsItem.AzureBlobProvider.ConnectionString)
				items.AzureBlobProvider.Description = types.StringPointerValue(itemsItem.AzureBlobProvider.Description)
				items.AzureBlobProvider.ID = types.StringValue(itemsItem.AzureBlobProvider.ID)
				items.AzureBlobProvider.Location = types.StringValue(itemsItem.AzureBlobProvider.Location)
				items.AzureBlobProvider.SasConfigs = []tfTypes.SasConfig{}

				for _, sasConfigsItem := range itemsItem.AzureBlobProvider.SasConfigs {
					var sasConfigs tfTypes.SasConfig

					sasConfigs.BlobSasURL = types.StringValue(sasConfigsItem.BlobSasURL)
					sasConfigs.ContainerName = types.StringValue(sasConfigsItem.ContainerName)

					items.AzureBlobProvider.SasConfigs = append(items.AzureBlobProvider.SasConfigs, sasConfigs)
				}
				items.AzureBlobProvider.StorageAccountName = types.StringPointerValue(itemsItem.AzureBlobProvider.StorageAccountName)
				items.AzureBlobProvider.TenantID = types.StringPointerValue(itemsItem.AzureBlobProvider.TenantID)
				items.AzureBlobProvider.Type = types.StringValue(itemsItem.AzureBlobProvider.Type)
			}
			if itemsItem.ClickHouseProvider != nil {
				items.ClickHouseProvider = &tfTypes.ClickHouseProvider{}
				items.ClickHouseProvider.Description = types.StringPointerValue(itemsItem.ClickHouseProvider.Description)
				items.ClickHouseProvider.Endpoint = types.StringValue(itemsItem.ClickHouseProvider.Endpoint)
				items.ClickHouseProvider.ID = types.StringValue(itemsItem.ClickHouseProvider.ID)
				items.ClickHouseProvider.Password = types.StringPointerValue(itemsItem.ClickHouseProvider.Password)
				items.ClickHouseProvider.Type = types.StringValue(itemsItem.ClickHouseProvider.Type)
				items.ClickHouseProvider.Username = types.StringValue(itemsItem.ClickHouseProvider.Username)
			}
			if itemsItem.CriblLeaderProvider != nil {
				items.CriblLeaderProvider = &tfTypes.CriblLeaderProvider{}
				items.CriblLeaderProvider.Description = types.StringPointerValue(itemsItem.CriblLeaderProvider.Description)
				items.CriblLeaderProvider.ID = types.StringValue(itemsItem.CriblLeaderProvider.ID)
				items.CriblLeaderProvider.Type = types.StringValue(itemsItem.CriblLeaderProvider.Type)
			}
			if itemsItem.EdgeProvider != nil {
				items.EdgeProvider = &tfTypes.EdgeProvider{}
				items.EdgeProvider.Description = types.StringPointerValue(itemsItem.EdgeProvider.Description)
				items.EdgeProvider.ID = types.StringValue(itemsItem.EdgeProvider.ID)
				items.EdgeProvider.Type = types.StringValue(itemsItem.EdgeProvider.Type)
			}
			if itemsItem.GcsProvider != nil {
				items.GcsProvider = &tfTypes.GcsProvider{}
				items.GcsProvider.Description = types.StringPointerValue(itemsItem.GcsProvider.Description)
				items.GcsProvider.Endpoint = types.StringPointerValue(itemsItem.GcsProvider.Endpoint)
				items.GcsProvider.ID = types.StringValue(itemsItem.GcsProvider.ID)
				items.GcsProvider.ServiceAccountCredentials = types.StringValue(itemsItem.GcsProvider.ServiceAccountCredentials)
				items.GcsProvider.Type = types.StringValue(itemsItem.GcsProvider.Type)
			}
			if itemsItem.MetaProvider != nil {
				items.MetaProvider = &tfTypes.MetaProvider{}
				items.MetaProvider.Description = types.StringPointerValue(itemsItem.MetaProvider.Description)
				items.MetaProvider.ID = types.StringValue(itemsItem.MetaProvider.ID)
				items.MetaProvider.Type = types.StringValue(itemsItem.MetaProvider.Type)
			}
			if itemsItem.PrometheusProvider != nil {
				items.PrometheusProvider = &tfTypes.PrometheusProvider{}
				if itemsItem.PrometheusProvider.AuthType != nil {
					items.PrometheusProvider.AuthType = types.StringValue(string(*itemsItem.PrometheusProvider.AuthType))
				} else {
					items.PrometheusProvider.AuthType = types.StringNull()
				}
				items.PrometheusProvider.Description = types.StringPointerValue(itemsItem.PrometheusProvider.Description)
				items.PrometheusProvider.Endpoint = types.StringValue(itemsItem.PrometheusProvider.Endpoint)
				items.PrometheusProvider.ID = types.StringValue(itemsItem.PrometheusProvider.ID)
				items.PrometheusProvider.MaxConcurrency = types.Float64PointerValue(itemsItem.PrometheusProvider.MaxConcurrency)
				items.PrometheusProvider.Password = types.StringPointerValue(itemsItem.PrometheusProvider.Password)
				items.PrometheusProvider.Token = types.StringPointerValue(itemsItem.PrometheusProvider.Token)
				items.PrometheusProvider.Type = types.StringValue(itemsItem.PrometheusProvider.Type)
				items.PrometheusProvider.Username = types.StringPointerValue(itemsItem.PrometheusProvider.Username)
			}
			if itemsItem.S3Provider != nil {
				items.S3Provider = &tfTypes.S3Provider{}
				items.S3Provider.AssumeRoleArn = types.StringPointerValue(itemsItem.S3Provider.AssumeRoleArn)
				items.S3Provider.AssumeRoleExternalID = types.StringPointerValue(itemsItem.S3Provider.AssumeRoleExternalID)
				items.S3Provider.AwsAPIKey = types.StringPointerValue(itemsItem.S3Provider.AwsAPIKey)
				if itemsItem.S3Provider.AwsAuthenticationMethod != nil {
					items.S3Provider.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.S3Provider.AwsAuthenticationMethod))
				} else {
					items.S3Provider.AwsAuthenticationMethod = types.StringNull()
				}
				items.S3Provider.AwsSecretKey = types.StringPointerValue(itemsItem.S3Provider.AwsSecretKey)
				items.S3Provider.Bucket = types.StringPointerValue(itemsItem.S3Provider.Bucket)
				items.S3Provider.BucketPathSuggestion = types.StringPointerValue(itemsItem.S3Provider.BucketPathSuggestion)
				items.S3Provider.Description = types.StringPointerValue(itemsItem.S3Provider.Description)
				items.S3Provider.EnableAbacTagging = types.BoolPointerValue(itemsItem.S3Provider.EnableAbacTagging)
				items.S3Provider.EnableAssumeRole = types.BoolPointerValue(itemsItem.S3Provider.EnableAssumeRole)
				items.S3Provider.Endpoint = types.StringPointerValue(itemsItem.S3Provider.Endpoint)
				items.S3Provider.ID = types.StringValue(itemsItem.S3Provider.ID)
				items.S3Provider.Region = types.StringPointerValue(itemsItem.S3Provider.Region)
				items.S3Provider.RejectUnauthorized = types.BoolPointerValue(itemsItem.S3Provider.RejectUnauthorized)
				items.S3Provider.ReuseConnections = types.BoolPointerValue(itemsItem.S3Provider.ReuseConnections)
				items.S3Provider.SessionToken = types.StringPointerValue(itemsItem.S3Provider.SessionToken)
				items.S3Provider.SignatureVersion = types.StringValue(string(itemsItem.S3Provider.SignatureVersion))
				items.S3Provider.Type = types.StringValue(itemsItem.S3Provider.Type)
			}
			if itemsItem.SnowflakeProvider != nil {
				items.SnowflakeProvider = &tfTypes.SnowflakeProvider{}
				items.SnowflakeProvider.AccountIdentifier = types.StringValue(itemsItem.SnowflakeProvider.AccountIdentifier)
				items.SnowflakeProvider.Description = types.StringPointerValue(itemsItem.SnowflakeProvider.Description)
				items.SnowflakeProvider.Endpoint = types.StringPointerValue(itemsItem.SnowflakeProvider.Endpoint)
				items.SnowflakeProvider.ID = types.StringValue(itemsItem.SnowflakeProvider.ID)
				items.SnowflakeProvider.MaxConcurrency = types.Int64PointerValue(itemsItem.SnowflakeProvider.MaxConcurrency)
				items.SnowflakeProvider.Passphrase = types.StringPointerValue(itemsItem.SnowflakeProvider.Passphrase)
				items.SnowflakeProvider.PrivKey = types.StringValue(itemsItem.SnowflakeProvider.PrivKey)
				items.SnowflakeProvider.Type = types.StringValue(itemsItem.SnowflakeProvider.Type)
				items.SnowflakeProvider.Username = types.StringValue(itemsItem.SnowflakeProvider.Username)
			}

			r.Items = append(r.Items, items)
		}
	}

	return diags
}

func (r *SearchDatasetProviderDataSourceModel) ToOperationsGetDatasetProviderByIDRequest(ctx context.Context) (*operations.GetDatasetProviderByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetDatasetProviderByIDRequest{
		ID: id,
	}

	return &out, diags
}

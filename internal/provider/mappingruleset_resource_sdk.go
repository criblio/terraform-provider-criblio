// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *MappingRulesetResourceModel) RefreshFromSharedMappingRuleset(ctx context.Context, resp *shared.MappingRuleset) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Active = types.BoolPointerValue(resp.Active)
	if resp.Conf == nil {
		r.Conf = nil
	} else {
		r.Conf = &tfTypes.MappingRulesetConf{}
		r.Conf.Functions = []tfTypes.MappingRulesetFunctionConf{}

		for _, functionsItem := range resp.Conf.Functions {
			var functions tfTypes.MappingRulesetFunctionConf

			functions.Conf.Add = []tfTypes.Add{}

			for _, addItem := range functionsItem.Conf.Add {
				var add tfTypes.Add

				add.Name = types.StringValue(addItem.Name)
				add.Value = types.StringValue(addItem.Value)

				functions.Conf.Add = append(functions.Conf.Add, add)
			}
			functions.Description = types.StringPointerValue(functionsItem.Description)
			functions.Disabled = types.BoolPointerValue(functionsItem.Disabled)
			functions.Filter = types.StringPointerValue(functionsItem.Filter)
			functions.Final = types.BoolPointerValue(functionsItem.Final)
			functions.GroupID = types.StringPointerValue(functionsItem.GroupID)
			functions.ID = types.StringValue(functionsItem.ID)

			r.Conf.Functions = append(r.Conf.Functions, functions)
		}
	}
	r.ID = types.StringValue(resp.ID)

	return diags
}

func (r *MappingRulesetResourceModel) ToOperationsCreateAdminProductsMappingsByProductRequest(ctx context.Context) (*operations.CreateAdminProductsMappingsByProductRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	product := operations.CreateAdminProductsMappingsByProductProduct(r.Product.ValueString())
	var id string
	id = r.ID.ValueString()

	mappingRuleset, mappingRulesetDiags := r.ToSharedMappingRuleset(ctx)
	diags.Append(mappingRulesetDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAdminProductsMappingsByProductRequest{
		Product:        product,
		ID:             id,
		MappingRuleset: *mappingRuleset,
	}

	return &out, diags
}

func (r *MappingRulesetResourceModel) ToOperationsDeleteAdminProductsMappingsByProductAndIDRequest(ctx context.Context) (*operations.DeleteAdminProductsMappingsByProductAndIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	product := operations.DeleteAdminProductsMappingsByProductAndIDProduct(r.Product.ValueString())
	var id string
	id = r.ID.ValueString()

	out := operations.DeleteAdminProductsMappingsByProductAndIDRequest{
		Product: product,
		ID:      id,
	}

	return &out, diags
}

func (r *MappingRulesetResourceModel) ToOperationsGetAdminProductsMappingsByProductAndIDRequest(ctx context.Context) (*operations.GetAdminProductsMappingsByProductAndIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	product := operations.GetAdminProductsMappingsByProductAndIDProduct(r.Product.ValueString())
	var id string
	id = r.ID.ValueString()

	out := operations.GetAdminProductsMappingsByProductAndIDRequest{
		Product: product,
		ID:      id,
	}

	return &out, diags
}

func (r *MappingRulesetResourceModel) ToOperationsUpdateAdminProductsMappingsByProductAndIDRequest(ctx context.Context) (*operations.UpdateAdminProductsMappingsByProductAndIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	product := operations.UpdateAdminProductsMappingsByProductAndIDProduct(r.Product.ValueString())
	var id string
	id = r.ID.ValueString()

	mappingRuleset, mappingRulesetDiags := r.ToSharedMappingRuleset(ctx)
	diags.Append(mappingRulesetDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAdminProductsMappingsByProductAndIDRequest{
		Product:        product,
		ID:             id,
		MappingRuleset: *mappingRuleset,
	}

	return &out, diags
}

func (r *MappingRulesetResourceModel) ToSharedMappingRuleset(ctx context.Context) (*shared.MappingRuleset, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var conf *shared.MappingRulesetConf
	if r.Conf != nil {
		functions := make([]shared.MappingRulesetFunctionConf, 0, len(r.Conf.Functions))
		for _, functionsItem := range r.Conf.Functions {
			filter := new(string)
			if !functionsItem.Filter.IsUnknown() && !functionsItem.Filter.IsNull() {
				*filter = functionsItem.Filter.ValueString()
			} else {
				filter = nil
			}
			var id1 string
			id1 = functionsItem.ID.ValueString()

			description := new(string)
			if !functionsItem.Description.IsUnknown() && !functionsItem.Description.IsNull() {
				*description = functionsItem.Description.ValueString()
			} else {
				description = nil
			}
			disabled := new(bool)
			if !functionsItem.Disabled.IsUnknown() && !functionsItem.Disabled.IsNull() {
				*disabled = functionsItem.Disabled.ValueBool()
			} else {
				disabled = nil
			}
			final := new(bool)
			if !functionsItem.Final.IsUnknown() && !functionsItem.Final.IsNull() {
				*final = functionsItem.Final.ValueBool()
			} else {
				final = nil
			}
			add := make([]shared.Add, 0, len(functionsItem.Conf.Add))
			for _, addItem := range functionsItem.Conf.Add {
				var name string
				name = addItem.Name.ValueString()

				var value string
				value = addItem.Value.ValueString()

				add = append(add, shared.Add{
					Name:  name,
					Value: value,
				})
			}
			conf1 := shared.FunctionSpecificConfigs{
				Add: add,
			}
			groupID := new(string)
			if !functionsItem.GroupID.IsUnknown() && !functionsItem.GroupID.IsNull() {
				*groupID = functionsItem.GroupID.ValueString()
			} else {
				groupID = nil
			}
			functions = append(functions, shared.MappingRulesetFunctionConf{
				Filter:      filter,
				ID:          id1,
				Description: description,
				Disabled:    disabled,
				Final:       final,
				Conf:        conf1,
				GroupID:     groupID,
			})
		}
		conf = &shared.MappingRulesetConf{
			Functions: functions,
		}
	}
	active := new(bool)
	if !r.Active.IsUnknown() && !r.Active.IsNull() {
		*active = r.Active.ValueBool()
	} else {
		active = nil
	}
	out := shared.MappingRuleset{
		ID:     id,
		Conf:   conf,
		Active: active,
	}

	return &out, diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-criblio/internal/provider/types"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk/models/shared"
)

func (r *GroupResourceModel) ToSharedGroup(ctx context.Context) (*shared.Group, diag.Diagnostics) {
	var diags diag.Diagnostics

	onPrem := new(bool)
	if !r.OnPrem.IsUnknown() && !r.OnPrem.IsNull() {
		*onPrem = r.OnPrem.ValueBool()
	} else {
		onPrem = nil
	}
	workerRemoteAccess := new(bool)
	if !r.WorkerRemoteAccess.IsUnknown() && !r.WorkerRemoteAccess.IsNull() {
		*workerRemoteAccess = r.WorkerRemoteAccess.ValueBool()
	} else {
		workerRemoteAccess = nil
	}
	streamtags := make([]string, 0, len(r.Streamtags))
	for _, streamtagsItem := range r.Streamtags {
		streamtags = append(streamtags, streamtagsItem.ValueString())
	}
	var cloud *shared.Cloud
	if r.Cloud != nil {
		provider := shared.Provider(r.Cloud.Provider.ValueString())
		var region string
		region = r.Cloud.Region.ValueString()

		cloud = &shared.Cloud{
			Provider: provider,
			Region:   region,
		}
	}
	var provisioned bool
	provisioned = r.Provisioned.ValueBool()

	isFleet := new(bool)
	if !r.IsFleet.IsUnknown() && !r.IsFleet.IsNull() {
		*isFleet = r.IsFleet.ValueBool()
	} else {
		isFleet = nil
	}
	estimatedIngestRate := new(float64)
	if !r.EstimatedIngestRate.IsUnknown() && !r.EstimatedIngestRate.IsNull() {
		*estimatedIngestRate = r.EstimatedIngestRate.ValueFloat64()
	} else {
		estimatedIngestRate = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	var id string
	id = r.ID.ValueString()

	out := shared.Group{
		OnPrem:              onPrem,
		WorkerRemoteAccess:  workerRemoteAccess,
		Streamtags:          streamtags,
		Cloud:               cloud,
		Provisioned:         provisioned,
		IsFleet:             isFleet,
		EstimatedIngestRate: estimatedIngestRate,
		Name:                name,
		ID:                  id,
	}

	return &out, diags
}

func (r *GroupResourceModel) ToOperationsCreateProductsGroupsByProductRequest(ctx context.Context) (*operations.CreateProductsGroupsByProductRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	product := operations.CreateProductsGroupsByProductProduct(r.Product.ValueString())
	group, groupDiags := r.ToSharedGroup(ctx)
	diags.Append(groupDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateProductsGroupsByProductRequest{
		Product: product,
		Group:   *group,
	}

	return &out, diags
}

func (r *GroupResourceModel) ToOperationsGetGroupsByIDRequest(ctx context.Context) (*operations.GetGroupsByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetGroupsByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *GroupResourceModel) ToOperationsUpdateGroupsByIDRequest(ctx context.Context) (*operations.UpdateGroupsByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.UpdateGroupsByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *GroupResourceModel) ToOperationsDeleteGroupsByIDRequest(ctx context.Context) (*operations.DeleteGroupsByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteGroupsByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *GroupResourceModel) RefreshFromSharedGroup(ctx context.Context, resp *shared.Group) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp.Cloud == nil {
		r.Cloud = nil
	} else {
		r.Cloud = &tfTypes.Cloud{}
		r.Cloud.Provider = types.StringValue(string(resp.Cloud.Provider))
		r.Cloud.Region = types.StringValue(resp.Cloud.Region)
	}
	r.EstimatedIngestRate = types.Float64PointerValue(resp.EstimatedIngestRate)
	r.ID = types.StringValue(resp.ID)
	r.IsFleet = types.BoolPointerValue(resp.IsFleet)
	r.Name = types.StringPointerValue(resp.Name)
	r.OnPrem = types.BoolPointerValue(resp.OnPrem)
	r.Provisioned = types.BoolValue(resp.Provisioned)
	r.Streamtags = make([]types.String, 0, len(resp.Streamtags))
	for _, v := range resp.Streamtags {
		r.Streamtags = append(r.Streamtags, types.StringValue(v))
	}
	r.WorkerRemoteAccess = types.BoolPointerValue(resp.WorkerRemoteAccess)

	return diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/criblio/terraform-provider-criblio/internal/provider/typeconvert"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SearchDatasetDataSourceModel) RefreshFromSharedGenericDataset(ctx context.Context, resp *shared.GenericDataset) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp.APIAwsDataset != nil {
		r.APIAwsDataset = &tfTypes.APIAwsDataset{}
		r.APIAwsDataset.Description = types.StringPointerValue(resp.APIAwsDataset.Description)
		r.Description = r.APIAwsDataset.Description
		r.APIAwsDataset.EnabledEndpoints = make([]types.String, 0, len(resp.APIAwsDataset.EnabledEndpoints))
		for _, v := range resp.APIAwsDataset.EnabledEndpoints {
			r.APIAwsDataset.EnabledEndpoints = append(r.APIAwsDataset.EnabledEndpoints, types.StringValue(v))
		}
		r.APIAwsDataset.ID = types.StringValue(resp.APIAwsDataset.ID)
		r.ID = r.APIAwsDataset.ID
		if resp.APIAwsDataset.Metadata == nil {
			r.APIAwsDataset.Metadata = nil
		} else {
			r.APIAwsDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIAwsDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIAwsDataset.Metadata.Created))
			r.APIAwsDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIAwsDataset.Metadata.EnableAcceleration)
			r.APIAwsDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIAwsDataset.Metadata.Modified))
			r.APIAwsDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIAwsDataset.Metadata.Tags))
			for _, v := range resp.APIAwsDataset.Metadata.Tags {
				r.APIAwsDataset.Metadata.Tags = append(r.APIAwsDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIAwsDataset.ProviderID = types.StringValue(resp.APIAwsDataset.ProviderID)
		r.ProviderID = r.APIAwsDataset.ProviderID
		r.APIAwsDataset.Regions = make([]types.String, 0, len(resp.APIAwsDataset.Regions))
		for _, v := range resp.APIAwsDataset.Regions {
			r.APIAwsDataset.Regions = append(r.APIAwsDataset.Regions, types.StringValue(v))
		}
		r.APIAwsDataset.Type = types.StringValue(resp.APIAwsDataset.Type)
		r.Type = r.APIAwsDataset.Type
	}
	if resp.APIAzureDataExplorerDataset != nil {
		r.APIAzureDataExplorerDataset = &tfTypes.APIAzureDataExplorerDataset{}
		r.APIAzureDataExplorerDataset.Cluster = types.StringValue(resp.APIAzureDataExplorerDataset.Cluster)
		r.APIAzureDataExplorerDataset.Database = types.StringValue(resp.APIAzureDataExplorerDataset.Database)
		r.APIAzureDataExplorerDataset.Description = types.StringPointerValue(resp.APIAzureDataExplorerDataset.Description)
		r.Description = r.APIAzureDataExplorerDataset.Description
		r.APIAzureDataExplorerDataset.ID = types.StringValue(resp.APIAzureDataExplorerDataset.ID)
		r.ID = r.APIAzureDataExplorerDataset.ID
		r.APIAzureDataExplorerDataset.Location = types.StringValue(resp.APIAzureDataExplorerDataset.Location)
		if resp.APIAzureDataExplorerDataset.Metadata == nil {
			r.APIAzureDataExplorerDataset.Metadata = nil
		} else {
			r.APIAzureDataExplorerDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIAzureDataExplorerDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIAzureDataExplorerDataset.Metadata.Created))
			r.APIAzureDataExplorerDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIAzureDataExplorerDataset.Metadata.EnableAcceleration)
			r.APIAzureDataExplorerDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIAzureDataExplorerDataset.Metadata.Modified))
			r.APIAzureDataExplorerDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIAzureDataExplorerDataset.Metadata.Tags))
			for _, v := range resp.APIAzureDataExplorerDataset.Metadata.Tags {
				r.APIAzureDataExplorerDataset.Metadata.Tags = append(r.APIAzureDataExplorerDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIAzureDataExplorerDataset.ProviderID = types.StringValue(resp.APIAzureDataExplorerDataset.ProviderID)
		r.ProviderID = r.APIAzureDataExplorerDataset.ProviderID
		r.APIAzureDataExplorerDataset.Table = types.StringValue(resp.APIAzureDataExplorerDataset.Table)
		r.APIAzureDataExplorerDataset.TimestampField = types.StringPointerValue(resp.APIAzureDataExplorerDataset.TimestampField)
		r.APIAzureDataExplorerDataset.TimestampFieldContents = types.StringPointerValue(resp.APIAzureDataExplorerDataset.TimestampFieldContents)
		r.APIAzureDataExplorerDataset.Type = types.StringValue(resp.APIAzureDataExplorerDataset.Type)
		r.Type = r.APIAzureDataExplorerDataset.Type
	}
	if resp.APIAzureDataset != nil {
		r.APIAzureDataset = &tfTypes.APIAzureDataset{}
		r.APIAzureDataset.Description = types.StringPointerValue(resp.APIAzureDataset.Description)
		r.Description = r.APIAzureDataset.Description
		r.APIAzureDataset.EnabledEndpoints = make([]types.String, 0, len(resp.APIAzureDataset.EnabledEndpoints))
		for _, v := range resp.APIAzureDataset.EnabledEndpoints {
			r.APIAzureDataset.EnabledEndpoints = append(r.APIAzureDataset.EnabledEndpoints, types.StringValue(v))
		}
		r.APIAzureDataset.ID = types.StringValue(resp.APIAzureDataset.ID)
		r.ID = r.APIAzureDataset.ID
		if resp.APIAzureDataset.Metadata == nil {
			r.APIAzureDataset.Metadata = nil
		} else {
			r.APIAzureDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIAzureDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIAzureDataset.Metadata.Created))
			r.APIAzureDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIAzureDataset.Metadata.EnableAcceleration)
			r.APIAzureDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIAzureDataset.Metadata.Modified))
			r.APIAzureDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIAzureDataset.Metadata.Tags))
			for _, v := range resp.APIAzureDataset.Metadata.Tags {
				r.APIAzureDataset.Metadata.Tags = append(r.APIAzureDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIAzureDataset.ProviderID = types.StringValue(resp.APIAzureDataset.ProviderID)
		r.ProviderID = r.APIAzureDataset.ProviderID
		r.APIAzureDataset.SubscriptionIds = make([]types.String, 0, len(resp.APIAzureDataset.SubscriptionIds))
		for _, v := range resp.APIAzureDataset.SubscriptionIds {
			r.APIAzureDataset.SubscriptionIds = append(r.APIAzureDataset.SubscriptionIds, types.StringValue(v))
		}
		r.APIAzureDataset.Type = types.StringValue(resp.APIAzureDataset.Type)
		r.Type = r.APIAzureDataset.Type
	}
	if resp.APIElasticSearchDataset != nil {
		r.APIElasticSearchDataset = &tfTypes.APIElasticSearchDataset{}
		r.APIElasticSearchDataset.Description = types.StringPointerValue(resp.APIElasticSearchDataset.Description)
		r.Description = r.APIElasticSearchDataset.Description
		r.APIElasticSearchDataset.ID = types.StringValue(resp.APIElasticSearchDataset.ID)
		r.ID = r.APIElasticSearchDataset.ID
		r.APIElasticSearchDataset.Index = types.StringValue(resp.APIElasticSearchDataset.Index)
		if resp.APIElasticSearchDataset.Metadata == nil {
			r.APIElasticSearchDataset.Metadata = nil
		} else {
			r.APIElasticSearchDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIElasticSearchDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIElasticSearchDataset.Metadata.Created))
			r.APIElasticSearchDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIElasticSearchDataset.Metadata.EnableAcceleration)
			r.APIElasticSearchDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIElasticSearchDataset.Metadata.Modified))
			r.APIElasticSearchDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIElasticSearchDataset.Metadata.Tags))
			for _, v := range resp.APIElasticSearchDataset.Metadata.Tags {
				r.APIElasticSearchDataset.Metadata.Tags = append(r.APIElasticSearchDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIElasticSearchDataset.ProviderID = types.StringValue(resp.APIElasticSearchDataset.ProviderID)
		r.ProviderID = r.APIElasticSearchDataset.ProviderID
		r.APIElasticSearchDataset.TimestampField = types.StringValue(resp.APIElasticSearchDataset.TimestampField)
		r.APIElasticSearchDataset.Type = types.StringValue(resp.APIElasticSearchDataset.Type)
		r.Type = r.APIElasticSearchDataset.Type
	}
	if resp.APIGcpDataset != nil {
		r.APIGcpDataset = &tfTypes.APIGcpDataset{}
		r.APIGcpDataset.Description = types.StringPointerValue(resp.APIGcpDataset.Description)
		r.Description = r.APIGcpDataset.Description
		r.APIGcpDataset.EndpointConfigs = []tfTypes.GcpEndpointConfig{}

		for _, endpointConfigsItem := range resp.APIGcpDataset.EndpointConfigs {
			var endpointConfigs tfTypes.GcpEndpointConfig

			endpointConfigs.EndpointName = types.StringValue(endpointConfigsItem.EndpointName)
			endpointConfigs.Region = types.StringPointerValue(endpointConfigsItem.Region)

			r.APIGcpDataset.EndpointConfigs = append(r.APIGcpDataset.EndpointConfigs, endpointConfigs)
		}
		r.APIGcpDataset.ID = types.StringValue(resp.APIGcpDataset.ID)
		r.ID = r.APIGcpDataset.ID
		if resp.APIGcpDataset.Metadata == nil {
			r.APIGcpDataset.Metadata = nil
		} else {
			r.APIGcpDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIGcpDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIGcpDataset.Metadata.Created))
			r.APIGcpDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIGcpDataset.Metadata.EnableAcceleration)
			r.APIGcpDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIGcpDataset.Metadata.Modified))
			r.APIGcpDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIGcpDataset.Metadata.Tags))
			for _, v := range resp.APIGcpDataset.Metadata.Tags {
				r.APIGcpDataset.Metadata.Tags = append(r.APIGcpDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIGcpDataset.ProviderID = types.StringValue(resp.APIGcpDataset.ProviderID)
		r.ProviderID = r.APIGcpDataset.ProviderID
		r.APIGcpDataset.Type = types.StringValue(resp.APIGcpDataset.Type)
		r.Type = r.APIGcpDataset.Type
	}
	if resp.APIGoogleWorkspaceDataset != nil {
		r.APIGoogleWorkspaceDataset = &tfTypes.APIGoogleWorkspaceDataset{}
		r.APIGoogleWorkspaceDataset.Description = types.StringPointerValue(resp.APIGoogleWorkspaceDataset.Description)
		r.Description = r.APIGoogleWorkspaceDataset.Description
		r.APIGoogleWorkspaceDataset.EnabledEndpoints = make([]types.String, 0, len(resp.APIGoogleWorkspaceDataset.EnabledEndpoints))
		for _, v := range resp.APIGoogleWorkspaceDataset.EnabledEndpoints {
			r.APIGoogleWorkspaceDataset.EnabledEndpoints = append(r.APIGoogleWorkspaceDataset.EnabledEndpoints, types.StringValue(v))
		}
		r.APIGoogleWorkspaceDataset.ID = types.StringValue(resp.APIGoogleWorkspaceDataset.ID)
		r.ID = r.APIGoogleWorkspaceDataset.ID
		if resp.APIGoogleWorkspaceDataset.Metadata == nil {
			r.APIGoogleWorkspaceDataset.Metadata = nil
		} else {
			r.APIGoogleWorkspaceDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIGoogleWorkspaceDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIGoogleWorkspaceDataset.Metadata.Created))
			r.APIGoogleWorkspaceDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIGoogleWorkspaceDataset.Metadata.EnableAcceleration)
			r.APIGoogleWorkspaceDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIGoogleWorkspaceDataset.Metadata.Modified))
			r.APIGoogleWorkspaceDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIGoogleWorkspaceDataset.Metadata.Tags))
			for _, v := range resp.APIGoogleWorkspaceDataset.Metadata.Tags {
				r.APIGoogleWorkspaceDataset.Metadata.Tags = append(r.APIGoogleWorkspaceDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIGoogleWorkspaceDataset.ProviderID = types.StringValue(resp.APIGoogleWorkspaceDataset.ProviderID)
		r.ProviderID = r.APIGoogleWorkspaceDataset.ProviderID
		r.APIGoogleWorkspaceDataset.Type = types.StringValue(resp.APIGoogleWorkspaceDataset.Type)
		r.Type = r.APIGoogleWorkspaceDataset.Type
	}
	if resp.APIHTTPDataset != nil {
		r.APIHTTPDataset = &tfTypes.APIHTTPDataset{}
		r.APIHTTPDataset.Description = types.StringPointerValue(resp.APIHTTPDataset.Description)
		r.Description = r.APIHTTPDataset.Description
		r.APIHTTPDataset.EnabledEndpoints = make([]types.String, 0, len(resp.APIHTTPDataset.EnabledEndpoints))
		for _, v := range resp.APIHTTPDataset.EnabledEndpoints {
			r.APIHTTPDataset.EnabledEndpoints = append(r.APIHTTPDataset.EnabledEndpoints, types.StringValue(v))
		}
		r.APIHTTPDataset.ID = types.StringValue(resp.APIHTTPDataset.ID)
		r.ID = r.APIHTTPDataset.ID
		if resp.APIHTTPDataset.Metadata == nil {
			r.APIHTTPDataset.Metadata = nil
		} else {
			r.APIHTTPDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIHTTPDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIHTTPDataset.Metadata.Created))
			r.APIHTTPDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIHTTPDataset.Metadata.EnableAcceleration)
			r.APIHTTPDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIHTTPDataset.Metadata.Modified))
			r.APIHTTPDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIHTTPDataset.Metadata.Tags))
			for _, v := range resp.APIHTTPDataset.Metadata.Tags {
				r.APIHTTPDataset.Metadata.Tags = append(r.APIHTTPDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIHTTPDataset.ProviderID = types.StringValue(resp.APIHTTPDataset.ProviderID)
		r.ProviderID = r.APIHTTPDataset.ProviderID
		r.APIHTTPDataset.Type = types.StringValue(resp.APIHTTPDataset.Type)
		r.Type = r.APIHTTPDataset.Type
	}
	if resp.APIMsGraphDataset != nil {
		r.APIMsGraphDataset = &tfTypes.APIMsGraphDataset{}
		r.APIMsGraphDataset.Description = types.StringPointerValue(resp.APIMsGraphDataset.Description)
		r.Description = r.APIMsGraphDataset.Description
		r.APIMsGraphDataset.EnabledEndpoints = make([]types.String, 0, len(resp.APIMsGraphDataset.EnabledEndpoints))
		for _, v := range resp.APIMsGraphDataset.EnabledEndpoints {
			r.APIMsGraphDataset.EnabledEndpoints = append(r.APIMsGraphDataset.EnabledEndpoints, types.StringValue(v))
		}
		r.APIMsGraphDataset.ID = types.StringValue(resp.APIMsGraphDataset.ID)
		r.ID = r.APIMsGraphDataset.ID
		if resp.APIMsGraphDataset.Metadata == nil {
			r.APIMsGraphDataset.Metadata = nil
		} else {
			r.APIMsGraphDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIMsGraphDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIMsGraphDataset.Metadata.Created))
			r.APIMsGraphDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIMsGraphDataset.Metadata.EnableAcceleration)
			r.APIMsGraphDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIMsGraphDataset.Metadata.Modified))
			r.APIMsGraphDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIMsGraphDataset.Metadata.Tags))
			for _, v := range resp.APIMsGraphDataset.Metadata.Tags {
				r.APIMsGraphDataset.Metadata.Tags = append(r.APIMsGraphDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIMsGraphDataset.ProviderID = types.StringValue(resp.APIMsGraphDataset.ProviderID)
		r.ProviderID = r.APIMsGraphDataset.ProviderID
		r.APIMsGraphDataset.Type = types.StringValue(resp.APIMsGraphDataset.Type)
		r.Type = r.APIMsGraphDataset.Type
	}
	if resp.APIOktaDataset != nil {
		r.APIOktaDataset = &tfTypes.APIOktaDataset{}
		r.APIOktaDataset.Description = types.StringPointerValue(resp.APIOktaDataset.Description)
		r.Description = r.APIOktaDataset.Description
		r.APIOktaDataset.EnabledEndpoints = make([]types.String, 0, len(resp.APIOktaDataset.EnabledEndpoints))
		for _, v := range resp.APIOktaDataset.EnabledEndpoints {
			r.APIOktaDataset.EnabledEndpoints = append(r.APIOktaDataset.EnabledEndpoints, types.StringValue(v))
		}
		r.APIOktaDataset.ID = types.StringValue(resp.APIOktaDataset.ID)
		r.ID = r.APIOktaDataset.ID
		if resp.APIOktaDataset.Metadata == nil {
			r.APIOktaDataset.Metadata = nil
		} else {
			r.APIOktaDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIOktaDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIOktaDataset.Metadata.Created))
			r.APIOktaDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIOktaDataset.Metadata.EnableAcceleration)
			r.APIOktaDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIOktaDataset.Metadata.Modified))
			r.APIOktaDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIOktaDataset.Metadata.Tags))
			for _, v := range resp.APIOktaDataset.Metadata.Tags {
				r.APIOktaDataset.Metadata.Tags = append(r.APIOktaDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIOktaDataset.ProviderID = types.StringValue(resp.APIOktaDataset.ProviderID)
		r.ProviderID = r.APIOktaDataset.ProviderID
		r.APIOktaDataset.Type = types.StringValue(resp.APIOktaDataset.Type)
		r.Type = r.APIOktaDataset.Type
	}
	if resp.APIOpenSearchDataset != nil {
		r.APIOpenSearchDataset = &tfTypes.APIOpenSearchDataset{}
		r.APIOpenSearchDataset.Description = types.StringPointerValue(resp.APIOpenSearchDataset.Description)
		r.Description = r.APIOpenSearchDataset.Description
		r.APIOpenSearchDataset.ID = types.StringValue(resp.APIOpenSearchDataset.ID)
		r.ID = r.APIOpenSearchDataset.ID
		r.APIOpenSearchDataset.Index = types.StringValue(resp.APIOpenSearchDataset.Index)
		if resp.APIOpenSearchDataset.Metadata == nil {
			r.APIOpenSearchDataset.Metadata = nil
		} else {
			r.APIOpenSearchDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIOpenSearchDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIOpenSearchDataset.Metadata.Created))
			r.APIOpenSearchDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIOpenSearchDataset.Metadata.EnableAcceleration)
			r.APIOpenSearchDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIOpenSearchDataset.Metadata.Modified))
			r.APIOpenSearchDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIOpenSearchDataset.Metadata.Tags))
			for _, v := range resp.APIOpenSearchDataset.Metadata.Tags {
				r.APIOpenSearchDataset.Metadata.Tags = append(r.APIOpenSearchDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIOpenSearchDataset.ProviderID = types.StringValue(resp.APIOpenSearchDataset.ProviderID)
		r.ProviderID = r.APIOpenSearchDataset.ProviderID
		r.APIOpenSearchDataset.TimestampField = types.StringPointerValue(resp.APIOpenSearchDataset.TimestampField)
		r.APIOpenSearchDataset.Type = types.StringValue(resp.APIOpenSearchDataset.Type)
		r.Type = r.APIOpenSearchDataset.Type
	}
	if resp.APITailscaleDataset != nil {
		r.APITailscaleDataset = &tfTypes.APITailscaleDataset{}
		r.APITailscaleDataset.Description = types.StringPointerValue(resp.APITailscaleDataset.Description)
		r.Description = r.APITailscaleDataset.Description
		r.APITailscaleDataset.EnabledEndpoints = make([]types.String, 0, len(resp.APITailscaleDataset.EnabledEndpoints))
		for _, v := range resp.APITailscaleDataset.EnabledEndpoints {
			r.APITailscaleDataset.EnabledEndpoints = append(r.APITailscaleDataset.EnabledEndpoints, types.StringValue(v))
		}
		r.APITailscaleDataset.ID = types.StringValue(resp.APITailscaleDataset.ID)
		r.ID = r.APITailscaleDataset.ID
		if resp.APITailscaleDataset.Metadata == nil {
			r.APITailscaleDataset.Metadata = nil
		} else {
			r.APITailscaleDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APITailscaleDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APITailscaleDataset.Metadata.Created))
			r.APITailscaleDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APITailscaleDataset.Metadata.EnableAcceleration)
			r.APITailscaleDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APITailscaleDataset.Metadata.Modified))
			r.APITailscaleDataset.Metadata.Tags = make([]types.String, 0, len(resp.APITailscaleDataset.Metadata.Tags))
			for _, v := range resp.APITailscaleDataset.Metadata.Tags {
				r.APITailscaleDataset.Metadata.Tags = append(r.APITailscaleDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APITailscaleDataset.ProviderID = types.StringValue(resp.APITailscaleDataset.ProviderID)
		r.ProviderID = r.APITailscaleDataset.ProviderID
		r.APITailscaleDataset.Type = types.StringValue(resp.APITailscaleDataset.Type)
		r.Type = r.APITailscaleDataset.Type
	}
	if resp.APIZoomDataset != nil {
		r.APIZoomDataset = &tfTypes.APIZoomDataset{}
		r.APIZoomDataset.Description = types.StringPointerValue(resp.APIZoomDataset.Description)
		r.Description = r.APIZoomDataset.Description
		r.APIZoomDataset.EnabledEndpoints = make([]types.String, 0, len(resp.APIZoomDataset.EnabledEndpoints))
		for _, v := range resp.APIZoomDataset.EnabledEndpoints {
			r.APIZoomDataset.EnabledEndpoints = append(r.APIZoomDataset.EnabledEndpoints, types.StringValue(v))
		}
		r.APIZoomDataset.ID = types.StringValue(resp.APIZoomDataset.ID)
		r.ID = r.APIZoomDataset.ID
		if resp.APIZoomDataset.Metadata == nil {
			r.APIZoomDataset.Metadata = nil
		} else {
			r.APIZoomDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIZoomDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIZoomDataset.Metadata.Created))
			r.APIZoomDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIZoomDataset.Metadata.EnableAcceleration)
			r.APIZoomDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIZoomDataset.Metadata.Modified))
			r.APIZoomDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIZoomDataset.Metadata.Tags))
			for _, v := range resp.APIZoomDataset.Metadata.Tags {
				r.APIZoomDataset.Metadata.Tags = append(r.APIZoomDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIZoomDataset.ProviderID = types.StringValue(resp.APIZoomDataset.ProviderID)
		r.ProviderID = r.APIZoomDataset.ProviderID
		r.APIZoomDataset.Type = types.StringValue(resp.APIZoomDataset.Type)
		r.Type = r.APIZoomDataset.Type
	}
	if resp.AwsSecurityLakeDataset != nil {
		r.AwsSecurityLakeDataset = &tfTypes.AwsSecurityLakeDataset{}
		r.AwsSecurityLakeDataset.Description = types.StringPointerValue(resp.AwsSecurityLakeDataset.Description)
		r.Description = r.AwsSecurityLakeDataset.Description
		r.AwsSecurityLakeDataset.Filter = types.StringPointerValue(resp.AwsSecurityLakeDataset.Filter)
		r.AwsSecurityLakeDataset.ID = types.StringValue(resp.AwsSecurityLakeDataset.ID)
		r.ID = r.AwsSecurityLakeDataset.ID
		if resp.AwsSecurityLakeDataset.Metadata == nil {
			r.AwsSecurityLakeDataset.Metadata = nil
		} else {
			r.AwsSecurityLakeDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.AwsSecurityLakeDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.AwsSecurityLakeDataset.Metadata.Created))
			r.AwsSecurityLakeDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.AwsSecurityLakeDataset.Metadata.EnableAcceleration)
			r.AwsSecurityLakeDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.AwsSecurityLakeDataset.Metadata.Modified))
			r.AwsSecurityLakeDataset.Metadata.Tags = make([]types.String, 0, len(resp.AwsSecurityLakeDataset.Metadata.Tags))
			for _, v := range resp.AwsSecurityLakeDataset.Metadata.Tags {
				r.AwsSecurityLakeDataset.Metadata.Tags = append(r.AwsSecurityLakeDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.AwsSecurityLakeDataset.Path = types.StringPointerValue(resp.AwsSecurityLakeDataset.Path)
		r.AwsSecurityLakeDataset.ProviderID = types.StringValue(resp.AwsSecurityLakeDataset.ProviderID)
		r.ProviderID = r.AwsSecurityLakeDataset.ProviderID
		r.AwsSecurityLakeDataset.SelectedBuckets = []tfTypes.S3Bucket{}

		for _, selectedBucketsItem := range resp.AwsSecurityLakeDataset.SelectedBuckets {
			var selectedBuckets tfTypes.S3Bucket

			selectedBuckets.Name = types.StringPointerValue(selectedBucketsItem.Name)
			selectedBuckets.Region = types.StringPointerValue(selectedBucketsItem.Region)

			r.AwsSecurityLakeDataset.SelectedBuckets = append(r.AwsSecurityLakeDataset.SelectedBuckets, selectedBuckets)
		}
		r.AwsSecurityLakeDataset.Type = types.StringValue(resp.AwsSecurityLakeDataset.Type)
		r.Type = r.AwsSecurityLakeDataset.Type
	}
	if resp.AzureBlobDataset != nil {
		r.AzureBlobDataset = &tfTypes.AzureBlobDataset{}
		r.AzureBlobDataset.ContainerName = types.StringValue(resp.AzureBlobDataset.ContainerName)
		r.AzureBlobDataset.Description = types.StringPointerValue(resp.AzureBlobDataset.Description)
		r.Description = r.AzureBlobDataset.Description
		r.AzureBlobDataset.ExtraPaths = []tfTypes.AzureBlobDatasetExtraPath{}

		for _, extraPathsItem := range resp.AzureBlobDataset.ExtraPaths {
			var extraPaths tfTypes.AzureBlobDatasetExtraPath

			extraPaths.ContainerName = types.StringValue(extraPathsItem.ContainerName)
			extraPaths.Filter = types.StringPointerValue(extraPathsItem.Filter)
			extraPaths.Path = types.StringPointerValue(extraPathsItem.Path)

			r.AzureBlobDataset.ExtraPaths = append(r.AzureBlobDataset.ExtraPaths, extraPaths)
		}
		r.AzureBlobDataset.Filter = types.StringPointerValue(resp.AzureBlobDataset.Filter)
		r.AzureBlobDataset.ID = types.StringValue(resp.AzureBlobDataset.ID)
		r.ID = r.AzureBlobDataset.ID
		if resp.AzureBlobDataset.Metadata == nil {
			r.AzureBlobDataset.Metadata = nil
		} else {
			r.AzureBlobDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.AzureBlobDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.AzureBlobDataset.Metadata.Created))
			r.AzureBlobDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.AzureBlobDataset.Metadata.EnableAcceleration)
			r.AzureBlobDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.AzureBlobDataset.Metadata.Modified))
			r.AzureBlobDataset.Metadata.Tags = make([]types.String, 0, len(resp.AzureBlobDataset.Metadata.Tags))
			for _, v := range resp.AzureBlobDataset.Metadata.Tags {
				r.AzureBlobDataset.Metadata.Tags = append(r.AzureBlobDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.AzureBlobDataset.Path = types.StringPointerValue(resp.AzureBlobDataset.Path)
		r.AzureBlobDataset.ProviderID = types.StringValue(resp.AzureBlobDataset.ProviderID)
		r.ProviderID = r.AzureBlobDataset.ProviderID
		r.AzureBlobDataset.SkipEventTimeFilter = types.BoolPointerValue(resp.AzureBlobDataset.SkipEventTimeFilter)
		r.AzureBlobDataset.StorageClasses = make([]types.String, 0, len(resp.AzureBlobDataset.StorageClasses))
		for _, v := range resp.AzureBlobDataset.StorageClasses {
			r.AzureBlobDataset.StorageClasses = append(r.AzureBlobDataset.StorageClasses, types.StringValue(v))
		}
		r.AzureBlobDataset.Type = types.StringValue(resp.AzureBlobDataset.Type)
		r.Type = r.AzureBlobDataset.Type
	}
	if resp.ClickHouseDataset != nil {
		r.ClickHouseDataset = &tfTypes.ClickHouseDataset{}
		r.ClickHouseDataset.Database = types.StringPointerValue(resp.ClickHouseDataset.Database)
		r.ClickHouseDataset.Description = types.StringPointerValue(resp.ClickHouseDataset.Description)
		r.Description = r.ClickHouseDataset.Description
		r.ClickHouseDataset.ID = types.StringValue(resp.ClickHouseDataset.ID)
		r.ID = r.ClickHouseDataset.ID
		if resp.ClickHouseDataset.Metadata == nil {
			r.ClickHouseDataset.Metadata = nil
		} else {
			r.ClickHouseDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.ClickHouseDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ClickHouseDataset.Metadata.Created))
			r.ClickHouseDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.ClickHouseDataset.Metadata.EnableAcceleration)
			r.ClickHouseDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ClickHouseDataset.Metadata.Modified))
			r.ClickHouseDataset.Metadata.Tags = make([]types.String, 0, len(resp.ClickHouseDataset.Metadata.Tags))
			for _, v := range resp.ClickHouseDataset.Metadata.Tags {
				r.ClickHouseDataset.Metadata.Tags = append(r.ClickHouseDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.ClickHouseDataset.ProviderID = types.StringValue(resp.ClickHouseDataset.ProviderID)
		r.ProviderID = r.ClickHouseDataset.ProviderID
		r.ClickHouseDataset.Table = types.StringValue(resp.ClickHouseDataset.Table)
		r.ClickHouseDataset.TimestampField = types.StringPointerValue(resp.ClickHouseDataset.TimestampField)
		r.ClickHouseDataset.Type = types.StringValue(resp.ClickHouseDataset.Type)
		r.Type = r.ClickHouseDataset.Type
	}
	if resp.CriblLeaderDataset != nil {
		r.CriblLeaderDataset = &tfTypes.CriblLeaderDataset{}
		r.CriblLeaderDataset.Description = types.StringPointerValue(resp.CriblLeaderDataset.Description)
		r.Description = r.CriblLeaderDataset.Description
		r.CriblLeaderDataset.ExtraPaths = []tfTypes.CriblLeaderDatasetExtraPath{}

		for _, extraPathsItem1 := range resp.CriblLeaderDataset.ExtraPaths {
			var extraPaths1 tfTypes.CriblLeaderDatasetExtraPath

			extraPaths1.Filter = types.StringPointerValue(extraPathsItem1.Filter)
			extraPaths1.Path = types.StringValue(extraPathsItem1.Path)

			r.CriblLeaderDataset.ExtraPaths = append(r.CriblLeaderDataset.ExtraPaths, extraPaths1)
		}
		r.CriblLeaderDataset.Filter = types.StringPointerValue(resp.CriblLeaderDataset.Filter)
		r.CriblLeaderDataset.ID = types.StringValue(resp.CriblLeaderDataset.ID)
		r.ID = r.CriblLeaderDataset.ID
		if resp.CriblLeaderDataset.Metadata == nil {
			r.CriblLeaderDataset.Metadata = nil
		} else {
			r.CriblLeaderDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.CriblLeaderDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CriblLeaderDataset.Metadata.Created))
			r.CriblLeaderDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.CriblLeaderDataset.Metadata.EnableAcceleration)
			r.CriblLeaderDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CriblLeaderDataset.Metadata.Modified))
			r.CriblLeaderDataset.Metadata.Tags = make([]types.String, 0, len(resp.CriblLeaderDataset.Metadata.Tags))
			for _, v := range resp.CriblLeaderDataset.Metadata.Tags {
				r.CriblLeaderDataset.Metadata.Tags = append(r.CriblLeaderDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.CriblLeaderDataset.Path = types.StringValue(resp.CriblLeaderDataset.Path)
		r.CriblLeaderDataset.ProviderID = types.StringValue(resp.CriblLeaderDataset.ProviderID)
		r.ProviderID = r.CriblLeaderDataset.ProviderID
		r.CriblLeaderDataset.Type = types.StringValue(resp.CriblLeaderDataset.Type)
		r.Type = r.CriblLeaderDataset.Type
	}
	if resp.EdgeDataset != nil {
		r.EdgeDataset = &tfTypes.EdgeDataset{}
		r.EdgeDataset.Description = types.StringPointerValue(resp.EdgeDataset.Description)
		r.Description = r.EdgeDataset.Description
		r.EdgeDataset.Filter = types.StringPointerValue(resp.EdgeDataset.Filter)
		r.EdgeDataset.Fleets = make([]types.String, 0, len(resp.EdgeDataset.Fleets))
		for _, v := range resp.EdgeDataset.Fleets {
			r.EdgeDataset.Fleets = append(r.EdgeDataset.Fleets, types.StringValue(v))
		}
		r.EdgeDataset.ID = types.StringValue(resp.EdgeDataset.ID)
		r.ID = r.EdgeDataset.ID
		if resp.EdgeDataset.Metadata == nil {
			r.EdgeDataset.Metadata = nil
		} else {
			r.EdgeDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.EdgeDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.EdgeDataset.Metadata.Created))
			r.EdgeDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.EdgeDataset.Metadata.EnableAcceleration)
			r.EdgeDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.EdgeDataset.Metadata.Modified))
			r.EdgeDataset.Metadata.Tags = make([]types.String, 0, len(resp.EdgeDataset.Metadata.Tags))
			for _, v := range resp.EdgeDataset.Metadata.Tags {
				r.EdgeDataset.Metadata.Tags = append(r.EdgeDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.EdgeDataset.Path = types.StringValue(resp.EdgeDataset.Path)
		r.EdgeDataset.ProviderID = types.StringValue(resp.EdgeDataset.ProviderID)
		r.ProviderID = r.EdgeDataset.ProviderID
		r.EdgeDataset.Type = types.StringValue(resp.EdgeDataset.Type)
		r.Type = r.EdgeDataset.Type
	}
	if resp.GcsDataset != nil {
		r.GcsDataset = &tfTypes.GcsDataset{}
		r.GcsDataset.Bucket = types.StringValue(resp.GcsDataset.Bucket)
		r.GcsDataset.Description = types.StringPointerValue(resp.GcsDataset.Description)
		r.Description = r.GcsDataset.Description
		r.GcsDataset.ExtraPaths = []tfTypes.GcsDatasetExtraPath{}

		for _, extraPathsItem2 := range resp.GcsDataset.ExtraPaths {
			var extraPaths2 tfTypes.GcsDatasetExtraPath

			extraPaths2.Bucket = types.StringValue(extraPathsItem2.Bucket)
			extraPaths2.Filter = types.StringPointerValue(extraPathsItem2.Filter)
			extraPaths2.Region = types.StringPointerValue(extraPathsItem2.Region)

			r.GcsDataset.ExtraPaths = append(r.GcsDataset.ExtraPaths, extraPaths2)
		}
		r.GcsDataset.Filter = types.StringPointerValue(resp.GcsDataset.Filter)
		r.GcsDataset.ID = types.StringValue(resp.GcsDataset.ID)
		r.ID = r.GcsDataset.ID
		if resp.GcsDataset.Metadata == nil {
			r.GcsDataset.Metadata = nil
		} else {
			r.GcsDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.GcsDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.GcsDataset.Metadata.Created))
			r.GcsDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.GcsDataset.Metadata.EnableAcceleration)
			r.GcsDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.GcsDataset.Metadata.Modified))
			r.GcsDataset.Metadata.Tags = make([]types.String, 0, len(resp.GcsDataset.Metadata.Tags))
			for _, v := range resp.GcsDataset.Metadata.Tags {
				r.GcsDataset.Metadata.Tags = append(r.GcsDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.GcsDataset.ProviderID = types.StringValue(resp.GcsDataset.ProviderID)
		r.ProviderID = r.GcsDataset.ProviderID
		r.GcsDataset.Region = types.StringPointerValue(resp.GcsDataset.Region)
		r.GcsDataset.SkipEventTimeFilter = types.BoolPointerValue(resp.GcsDataset.SkipEventTimeFilter)
		r.GcsDataset.StorageClasses = make([]types.String, 0, len(resp.GcsDataset.StorageClasses))
		for _, v := range resp.GcsDataset.StorageClasses {
			r.GcsDataset.StorageClasses = append(r.GcsDataset.StorageClasses, types.StringValue(v))
		}
		r.GcsDataset.Type = types.StringValue(resp.GcsDataset.Type)
		r.Type = r.GcsDataset.Type
	}
	if resp.MetaDataset != nil {
		r.MetaDataset = &tfTypes.MetaDataset{}
		r.MetaDataset.Datasets = make([]types.String, 0, len(resp.MetaDataset.Datasets))
		for _, v := range resp.MetaDataset.Datasets {
			r.MetaDataset.Datasets = append(r.MetaDataset.Datasets, types.StringValue(v))
		}
		r.MetaDataset.Description = types.StringPointerValue(resp.MetaDataset.Description)
		r.Description = r.MetaDataset.Description
		r.MetaDataset.ID = types.StringValue(resp.MetaDataset.ID)
		r.ID = r.MetaDataset.ID
		if resp.MetaDataset.Metadata == nil {
			r.MetaDataset.Metadata = nil
		} else {
			r.MetaDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.MetaDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.MetaDataset.Metadata.Created))
			r.MetaDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.MetaDataset.Metadata.EnableAcceleration)
			r.MetaDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.MetaDataset.Metadata.Modified))
			r.MetaDataset.Metadata.Tags = make([]types.String, 0, len(resp.MetaDataset.Metadata.Tags))
			for _, v := range resp.MetaDataset.Metadata.Tags {
				r.MetaDataset.Metadata.Tags = append(r.MetaDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.MetaDataset.ProviderID = types.StringValue(resp.MetaDataset.ProviderID)
		r.ProviderID = r.MetaDataset.ProviderID
		r.MetaDataset.Type = types.StringValue(resp.MetaDataset.Type)
		r.Type = r.MetaDataset.Type
	}
	if resp.PrometheusDataset != nil {
		r.PrometheusDataset = &tfTypes.PrometheusDataset{}
		r.PrometheusDataset.Description = types.StringPointerValue(resp.PrometheusDataset.Description)
		r.Description = r.PrometheusDataset.Description
		r.PrometheusDataset.DesiredNumDataPoints = types.Float64PointerValue(resp.PrometheusDataset.DesiredNumDataPoints)
		r.PrometheusDataset.ID = types.StringValue(resp.PrometheusDataset.ID)
		r.ID = r.PrometheusDataset.ID
		if resp.PrometheusDataset.Metadata == nil {
			r.PrometheusDataset.Metadata = nil
		} else {
			r.PrometheusDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.PrometheusDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.PrometheusDataset.Metadata.Created))
			r.PrometheusDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.PrometheusDataset.Metadata.EnableAcceleration)
			r.PrometheusDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.PrometheusDataset.Metadata.Modified))
			r.PrometheusDataset.Metadata.Tags = make([]types.String, 0, len(resp.PrometheusDataset.Metadata.Tags))
			for _, v := range resp.PrometheusDataset.Metadata.Tags {
				r.PrometheusDataset.Metadata.Tags = append(r.PrometheusDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.PrometheusDataset.MetricNamePattern = types.StringPointerValue(resp.PrometheusDataset.MetricNamePattern)
		r.PrometheusDataset.ProviderID = types.StringValue(resp.PrometheusDataset.ProviderID)
		r.ProviderID = r.PrometheusDataset.ProviderID
		if resp.PrometheusDataset.StepMode != nil {
			r.PrometheusDataset.StepMode = types.StringValue(string(*resp.PrometheusDataset.StepMode))
		} else {
			r.PrometheusDataset.StepMode = types.StringNull()
		}
		r.PrometheusDataset.Type = types.StringValue(resp.PrometheusDataset.Type)
		r.Type = r.PrometheusDataset.Type
	}
	if resp.S3Dataset != nil {
		r.S3Dataset = &tfTypes.S3Dataset{}
		r.S3Dataset.AutoDetectRegion = types.BoolPointerValue(resp.S3Dataset.AutoDetectRegion)
		r.S3Dataset.Bucket = types.StringValue(resp.S3Dataset.Bucket)
		r.S3Dataset.Description = types.StringPointerValue(resp.S3Dataset.Description)
		r.Description = r.S3Dataset.Description
		r.S3Dataset.ExtraPaths = []tfTypes.S3DatasetExtraPath{}

		for _, extraPathsItem3 := range resp.S3Dataset.ExtraPaths {
			var extraPaths3 tfTypes.S3DatasetExtraPath

			extraPaths3.AutoDetectRegion = types.BoolPointerValue(extraPathsItem3.AutoDetectRegion)
			extraPaths3.Bucket = types.StringValue(extraPathsItem3.Bucket)
			extraPaths3.Filter = types.StringPointerValue(extraPathsItem3.Filter)
			extraPaths3.Path = types.StringPointerValue(extraPathsItem3.Path)
			extraPaths3.Region = types.StringPointerValue(extraPathsItem3.Region)

			r.S3Dataset.ExtraPaths = append(r.S3Dataset.ExtraPaths, extraPaths3)
		}
		r.S3Dataset.Filter = types.StringPointerValue(resp.S3Dataset.Filter)
		r.S3Dataset.ID = types.StringValue(resp.S3Dataset.ID)
		r.ID = r.S3Dataset.ID
		if resp.S3Dataset.Metadata == nil {
			r.S3Dataset.Metadata = nil
		} else {
			r.S3Dataset.Metadata = &tfTypes.DatasetMetadata{}
			r.S3Dataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.S3Dataset.Metadata.Created))
			r.S3Dataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.S3Dataset.Metadata.EnableAcceleration)
			r.S3Dataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.S3Dataset.Metadata.Modified))
			r.S3Dataset.Metadata.Tags = make([]types.String, 0, len(resp.S3Dataset.Metadata.Tags))
			for _, v := range resp.S3Dataset.Metadata.Tags {
				r.S3Dataset.Metadata.Tags = append(r.S3Dataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.S3Dataset.Path = types.StringPointerValue(resp.S3Dataset.Path)
		r.S3Dataset.ProviderID = types.StringValue(resp.S3Dataset.ProviderID)
		r.ProviderID = r.S3Dataset.ProviderID
		r.S3Dataset.Region = types.StringPointerValue(resp.S3Dataset.Region)
		r.S3Dataset.SkipEventTimeFilter = types.BoolPointerValue(resp.S3Dataset.SkipEventTimeFilter)
		r.S3Dataset.StorageClasses = make([]types.String, 0, len(resp.S3Dataset.StorageClasses))
		for _, v := range resp.S3Dataset.StorageClasses {
			r.S3Dataset.StorageClasses = append(r.S3Dataset.StorageClasses, types.StringValue(v))
		}
		r.S3Dataset.Type = types.StringValue(resp.S3Dataset.Type)
		r.Type = r.S3Dataset.Type
	}
	if resp.SnowflakeDataset != nil {
		r.SnowflakeDataset = &tfTypes.SnowflakeDataset{}
		r.SnowflakeDataset.Database = types.StringPointerValue(resp.SnowflakeDataset.Database)
		r.SnowflakeDataset.Description = types.StringPointerValue(resp.SnowflakeDataset.Description)
		r.Description = r.SnowflakeDataset.Description
		r.SnowflakeDataset.ID = types.StringValue(resp.SnowflakeDataset.ID)
		r.ID = r.SnowflakeDataset.ID
		if resp.SnowflakeDataset.Metadata == nil {
			r.SnowflakeDataset.Metadata = nil
		} else {
			r.SnowflakeDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.SnowflakeDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.SnowflakeDataset.Metadata.Created))
			r.SnowflakeDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.SnowflakeDataset.Metadata.EnableAcceleration)
			r.SnowflakeDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.SnowflakeDataset.Metadata.Modified))
			r.SnowflakeDataset.Metadata.Tags = make([]types.String, 0, len(resp.SnowflakeDataset.Metadata.Tags))
			for _, v := range resp.SnowflakeDataset.Metadata.Tags {
				r.SnowflakeDataset.Metadata.Tags = append(r.SnowflakeDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.SnowflakeDataset.ProviderID = types.StringValue(resp.SnowflakeDataset.ProviderID)
		r.ProviderID = r.SnowflakeDataset.ProviderID
		r.SnowflakeDataset.Role = types.StringPointerValue(resp.SnowflakeDataset.Role)
		r.SnowflakeDataset.Schema = types.StringPointerValue(resp.SnowflakeDataset.Schema)
		r.SnowflakeDataset.Table = types.StringValue(resp.SnowflakeDataset.Table)
		r.SnowflakeDataset.TimestampField = types.StringPointerValue(resp.SnowflakeDataset.TimestampField)
		r.SnowflakeDataset.Type = types.StringValue(resp.SnowflakeDataset.Type)
		r.Type = r.SnowflakeDataset.Type
		r.SnowflakeDataset.Warehouse = types.StringPointerValue(resp.SnowflakeDataset.Warehouse)
	}

	return diags
}

func (r *SearchDatasetDataSourceModel) ToOperationsGetDatasetByIDRequest(ctx context.Context) (*operations.GetDatasetByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetDatasetByIDRequest{
		ID: id,
	}

	return &out, diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/criblio/terraform-provider-criblio/internal/sdk"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"net/http"
	"os"
)

var _ provider.Provider = (*CriblioProvider)(nil)
var _ provider.ProviderWithEphemeralResources = (*CriblioProvider)(nil)

type CriblioProvider struct {
	// version is set to the provider version on release, "dev" when the
	// provider is built and ran locally, and "test" when running acceptance
	// testing.
	version string
}

// CriblioProviderModel describes the provider data model.
type CriblioProviderModel struct {
	BearerAuth     types.String `tfsdk:"bearer_auth"`
	ClientID       types.String `tfsdk:"client_id"`
	ClientSecret   types.String `tfsdk:"client_secret"`
	CloudDomain    types.String `tfsdk:"cloud_domain"`
	GroupName      types.String `tfsdk:"group_name"`
	Hostname       types.String `tfsdk:"hostname"`
	OrganizationID types.String `tfsdk:"organization_id"`
	Port           types.String `tfsdk:"port"`
	ServerURL      types.String `tfsdk:"server_url"`
	TokenURL       types.String `tfsdk:"token_url"`
	WorkspaceID    types.String `tfsdk:"workspace_id"`
	WorkspaceName  types.String `tfsdk:"workspace_name"`
}

func (p *CriblioProvider) Metadata(ctx context.Context, req provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "criblio"
	resp.Version = p.version
}

func (p *CriblioProvider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"bearer_auth": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
			"client_id": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
			"client_secret": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
			"cloud_domain": schema.StringAttribute{
				MarkdownDescription: `Cribl Cloud domain name (defaults to cribl.cloud)`,
				Optional:            true,
			},
			"group_name": schema.StringAttribute{
				MarkdownDescription: `The name of the Worker Group or Fleet (defaults to default)`,
				Optional:            true,
			},
			"hostname": schema.StringAttribute{
				MarkdownDescription: `The hostname of the managed API server (defaults to localhost)`,
				Optional:            true,
			},
			"organization_id": schema.StringAttribute{
				MarkdownDescription: `The Organization ID (defaults to ian)`,
				Optional:            true,
			},
			"port": schema.StringAttribute{
				MarkdownDescription: `The port of the managed API server (defaults to 9000)`,
				Optional:            true,
			},
			"server_url": schema.StringAttribute{
				Description: `Server URL (defaults to https://app.cribl.cloud)`,
				Optional:    true,
			},
			"token_url": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
			"workspace_id": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
			"workspace_name": schema.StringAttribute{
				MarkdownDescription: `The Workspace name (defaults to main)`,
				Optional:            true,
			},
		},
		MarkdownDescription: `Cribl API Reference: This API Reference lists available REST endpoints, along with their supported operations for accessing, creating, updating, or deleting resources. See our complementary product documentation at [docs.cribl.io](http://docs.cribl.io).`,
	}
}

func (p *CriblioProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	var data CriblioProviderModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	serverUrl := data.ServerURL.ValueString()

	if serverUrl == "" && os.Getenv("CRIBL_SERVER_URL") != "" {
		serverUrl = os.Getenv("CRIBL_SERVER_URL")
	}

	if serverUrl == "" {
		serverUrl = "https://app.cribl.cloud"
	}

	serverUrlParams := make(map[string]string)

	if data.WorkspaceName.ValueString() != "" {
		serverUrlParams["workspaceName"] = data.WorkspaceName.ValueString()
	}

	if _, ok := serverUrlParams["workspaceName"]; !ok {
		serverUrlParams["workspaceName"] = "main"
	}

	if data.OrganizationID.ValueString() != "" {
		serverUrlParams["organizationId"] = data.OrganizationID.ValueString()
	}

	if _, ok := serverUrlParams["organizationId"]; !ok && os.Getenv("CRIBL_ORGANIZATION_ID") != "" {
		serverUrlParams["organizationId"] = os.Getenv("CRIBL_ORGANIZATION_ID")
	}

	if _, ok := serverUrlParams["organizationId"]; !ok {
		serverUrlParams["organizationId"] = "ian"
	}

	if data.CloudDomain.ValueString() != "" {
		serverUrlParams["cloudDomain"] = data.CloudDomain.ValueString()
	}

	if _, ok := serverUrlParams["cloudDomain"]; !ok {
		serverUrlParams["cloudDomain"] = "cribl.cloud"
	}

	if data.GroupName.ValueString() != "" {
		serverUrlParams["groupName"] = data.GroupName.ValueString()
	}

	if _, ok := serverUrlParams["groupName"]; !ok {
		serverUrlParams["groupName"] = "default"
	}

	if data.Hostname.ValueString() != "" {
		serverUrlParams["hostname"] = data.Hostname.ValueString()
	}

	if _, ok := serverUrlParams["hostname"]; !ok {
		serverUrlParams["hostname"] = "localhost"
	}

	if data.Port.ValueString() != "" {
		serverUrlParams["port"] = data.Port.ValueString()
	}

	if _, ok := serverUrlParams["port"]; !ok {
		serverUrlParams["port"] = "9000"
	}

	security := shared.Security{}

	if !data.BearerAuth.IsUnknown() {
		security.BearerAuth = data.BearerAuth.ValueStringPointer()
	}

	clientOauth := &shared.SchemeClientOauth{}

	if !data.ClientID.IsUnknown() {
		clientOauth.ClientID = data.ClientID.ValueString()
	}

	if clientIDEnvVar := os.Getenv("CRIBL_CLIENT_ID"); clientOauth.ClientID == "" && clientIDEnvVar != "" {
		clientOauth.ClientID = clientIDEnvVar
	}

	if !data.ClientSecret.IsUnknown() {
		clientOauth.ClientSecret = data.ClientSecret.ValueString()
	}

	if clientSecretEnvVar := os.Getenv("CRIBL_CLIENT_SECRET"); clientOauth.ClientSecret == "" && clientSecretEnvVar != "" {
		clientOauth.ClientSecret = clientSecretEnvVar
	}

	if !data.TokenURL.IsUnknown() {
		clientOauth.TokenURL = data.TokenURL.ValueString()
	}

	if clientOauth.ClientID != "" && clientOauth.ClientSecret != "" {
		security.ClientOauth = clientOauth
	}

	if !data.OrganizationID.IsUnknown() {
		security.OrganizationID = data.OrganizationID.ValueStringPointer()
	}

	if organizationIDEnvVar := os.Getenv("CRIBL_ORGANIZATION_ID"); security.OrganizationID == nil && organizationIDEnvVar != "" {
		security.OrganizationID = &organizationIDEnvVar
	}

	if !data.WorkspaceID.IsUnknown() {
		security.WorkspaceID = data.WorkspaceID.ValueStringPointer()
	}

	if workspaceIDEnvVar := os.Getenv("CRIBL_WORKSPACE_ID"); security.WorkspaceID == nil && workspaceIDEnvVar != "" {
		security.WorkspaceID = &workspaceIDEnvVar
	}

	providerHTTPTransportOpts := ProviderHTTPTransportOpts{
		SetHeaders: make(map[string]string),
		Transport:  http.DefaultTransport,
	}

	httpClient := http.DefaultClient
	httpClient.Transport = NewProviderHTTPTransport(providerHTTPTransportOpts)

	opts := []sdk.SDKOption{
		sdk.WithTemplatedServerURL(serverUrl, serverUrlParams),
		sdk.WithSecurity(security),
		sdk.WithClient(httpClient),
	}

	client := sdk.New(opts...)
	resp.DataSourceData = client
	resp.EphemeralResourceData = client
	resp.ResourceData = client
}

func (p *CriblioProvider) Resources(ctx context.Context) []func() resource.Resource {
	return []func() resource.Resource{
		NewAppscopeConfigResource,
		NewCommitResource,
		NewCriblLakeDatasetResource,
		NewCriblLakeHouseResource,
		NewDatabaseConnectionResource,
		NewDeployResource,
		NewDestinationResource,
		NewEventBreakerRulesetResource,
		NewGlobalVarResource,
		NewGrokResource,
		NewGroupResource,
		NewHmacFunctionResource,
		NewLakehouseDatasetConnectionResource,
		NewLookupFileResource,
		NewNotificationResource,
		NewNotificationTargetResource,
		NewPackResource,
		NewPackBreakersResource,
		NewPackDestinationResource,
		NewPackLookupsResource,
		NewPackPipelineResource,
		NewPackRoutesResource,
		NewPackSourceResource,
		NewPackVarsResource,
		NewParquetSchemaResource,
		NewParserLibEntryResource,
		NewPipelineResource,
		NewProjectResource,
		NewRegexResource,
		NewSchemaResource,
		NewSearchDashboardResource,
		NewSearchDashboardCategoryResource,
		NewSearchDatasetResource,
		NewSearchDatasetProviderResource,
		NewSearchMacroResource,
		NewSearchSavedQueryResource,
		NewSearchUsageGroupResource,
		NewSourceResource,
		NewSubscriptionResource,
	}
}

func (p *CriblioProvider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{
		NewAppscopeConfigDataSource,
		NewConfigVersionDataSource,
		NewCriblLakeDatasetDataSource,
		NewCriblLakeHouseDataSource,
		NewDatabaseConnectionDataSource,
		NewDestinationDataSource,
		NewEventBreakerRulesetDataSource,
		NewGlobalVarDataSource,
		NewGrokDataSource,
		NewGroupDataSource,
		NewHmacFunctionDataSource,
		NewLakehouseDatasetConnectionDataSource,
		NewLookupFileDataSource,
		NewNotificationDataSource,
		NewNotificationTargetDataSource,
		NewPackDataSource,
		NewPackBreakersDataSource,
		NewPackDestinationDataSource,
		NewPackLookupsDataSource,
		NewPackPipelineDataSource,
		NewPackRoutesDataSource,
		NewPackSourceDataSource,
		NewPackVarsDataSource,
		NewParquetSchemaDataSource,
		NewParserLibEntryDataSource,
		NewPipelineDataSource,
		NewProjectDataSource,
		NewRegexDataSource,
		NewSchemaDataSource,
		NewSearchDashboardDataSource,
		NewSearchDashboardCategoryDataSource,
		NewSearchDatasetDataSource,
		NewSearchDatasetProviderDataSource,
		NewSearchMacroDataSource,
		NewSearchSavedQueryDataSource,
		NewSearchUsageGroupDataSource,
		NewSourceDataSource,
		NewSubscriptionDataSource,
	}
}

func (p *CriblioProvider) EphemeralResources(ctx context.Context) []func() ephemeral.EphemeralResource {
	return []func() ephemeral.EphemeralResource{}
}

func New(version string) func() provider.Provider {
	return func() provider.Provider {
		return &CriblioProvider{
			version: version,
		}
	}
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationsDataSourceModel) RefreshFromOperationsListOutputResponseBody(ctx context.Context, resp *operations.ListOutputResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.Output{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.Output

			if itemsItem.OutputAzureBlob != nil {
				items.OutputAzureBlob = &tfTypes.OutputAzureBlob{}
				items.OutputAzureBlob.AddIDToStagePath = types.BoolPointerValue(itemsItem.OutputAzureBlob.AddIDToStagePath)
				if itemsItem.OutputAzureBlob.AuthType != nil {
					items.OutputAzureBlob.AuthType = types.StringValue(string(*itemsItem.OutputAzureBlob.AuthType))
				} else {
					items.OutputAzureBlob.AuthType = types.StringNull()
				}
				items.OutputAzureBlob.AutomaticSchema = types.BoolPointerValue(itemsItem.OutputAzureBlob.AutomaticSchema)
				items.OutputAzureBlob.AzureCloud = types.StringPointerValue(itemsItem.OutputAzureBlob.AzureCloud)
				items.OutputAzureBlob.BaseFileName = types.StringPointerValue(itemsItem.OutputAzureBlob.BaseFileName)
				if itemsItem.OutputAzureBlob.Certificate == nil {
					items.OutputAzureBlob.Certificate = nil
				} else {
					items.OutputAzureBlob.Certificate = &tfTypes.OutputAzureBlobCertificate{}
					items.OutputAzureBlob.Certificate.CertificateName = types.StringValue(itemsItem.OutputAzureBlob.Certificate.CertificateName)
				}
				items.OutputAzureBlob.ClientID = types.StringPointerValue(itemsItem.OutputAzureBlob.ClientID)
				items.OutputAzureBlob.ClientTextSecret = types.StringPointerValue(itemsItem.OutputAzureBlob.ClientTextSecret)
				if itemsItem.OutputAzureBlob.Compress != nil {
					items.OutputAzureBlob.Compress = types.StringValue(string(*itemsItem.OutputAzureBlob.Compress))
				} else {
					items.OutputAzureBlob.Compress = types.StringNull()
				}
				if itemsItem.OutputAzureBlob.CompressionLevel != nil {
					items.OutputAzureBlob.CompressionLevel = types.StringValue(string(*itemsItem.OutputAzureBlob.CompressionLevel))
				} else {
					items.OutputAzureBlob.CompressionLevel = types.StringNull()
				}
				items.OutputAzureBlob.ConnectionString = types.StringPointerValue(itemsItem.OutputAzureBlob.ConnectionString)
				items.OutputAzureBlob.ContainerName = types.StringValue(itemsItem.OutputAzureBlob.ContainerName)
				items.OutputAzureBlob.CreateContainer = types.BoolPointerValue(itemsItem.OutputAzureBlob.CreateContainer)
				items.OutputAzureBlob.DeadletterEnabled = types.BoolPointerValue(itemsItem.OutputAzureBlob.DeadletterEnabled)
				items.OutputAzureBlob.DeadletterPath = types.StringPointerValue(itemsItem.OutputAzureBlob.DeadletterPath)
				items.OutputAzureBlob.Description = types.StringPointerValue(itemsItem.OutputAzureBlob.Description)
				items.OutputAzureBlob.DestPath = types.StringPointerValue(itemsItem.OutputAzureBlob.DestPath)
				items.OutputAzureBlob.EmptyDirCleanupSec = types.Float64PointerValue(itemsItem.OutputAzureBlob.EmptyDirCleanupSec)
				items.OutputAzureBlob.EnablePageChecksum = types.BoolPointerValue(itemsItem.OutputAzureBlob.EnablePageChecksum)
				items.OutputAzureBlob.EnableStatistics = types.BoolPointerValue(itemsItem.OutputAzureBlob.EnableStatistics)
				items.OutputAzureBlob.EnableWritePageIndex = types.BoolPointerValue(itemsItem.OutputAzureBlob.EnableWritePageIndex)
				items.OutputAzureBlob.EndpointSuffix = types.StringPointerValue(itemsItem.OutputAzureBlob.EndpointSuffix)
				items.OutputAzureBlob.Environment = types.StringPointerValue(itemsItem.OutputAzureBlob.Environment)
				items.OutputAzureBlob.FileNameSuffix = types.StringPointerValue(itemsItem.OutputAzureBlob.FileNameSuffix)
				if itemsItem.OutputAzureBlob.Format != nil {
					items.OutputAzureBlob.Format = types.StringValue(string(*itemsItem.OutputAzureBlob.Format))
				} else {
					items.OutputAzureBlob.Format = types.StringNull()
				}
				items.OutputAzureBlob.HeaderLine = types.StringPointerValue(itemsItem.OutputAzureBlob.HeaderLine)
				items.OutputAzureBlob.ID = types.StringPointerValue(itemsItem.OutputAzureBlob.ID)
				items.OutputAzureBlob.KeyValueMetadata = []tfTypes.OutputAzureBlobKeyValueMetadatum{}

				for _, keyValueMetadataItem := range itemsItem.OutputAzureBlob.KeyValueMetadata {
					var keyValueMetadata tfTypes.OutputAzureBlobKeyValueMetadatum

					keyValueMetadata.Key = types.StringPointerValue(keyValueMetadataItem.Key)
					keyValueMetadata.Value = types.StringValue(keyValueMetadataItem.Value)

					items.OutputAzureBlob.KeyValueMetadata = append(items.OutputAzureBlob.KeyValueMetadata, keyValueMetadata)
				}
				items.OutputAzureBlob.MaxConcurrentFileParts = types.Float64PointerValue(itemsItem.OutputAzureBlob.MaxConcurrentFileParts)
				items.OutputAzureBlob.MaxFileIdleTimeSec = types.Float64PointerValue(itemsItem.OutputAzureBlob.MaxFileIdleTimeSec)
				items.OutputAzureBlob.MaxFileOpenTimeSec = types.Float64PointerValue(itemsItem.OutputAzureBlob.MaxFileOpenTimeSec)
				items.OutputAzureBlob.MaxFileSizeMB = types.Float64PointerValue(itemsItem.OutputAzureBlob.MaxFileSizeMB)
				items.OutputAzureBlob.MaxOpenFiles = types.Float64PointerValue(itemsItem.OutputAzureBlob.MaxOpenFiles)
				items.OutputAzureBlob.MaxRetryNum = types.Float64PointerValue(itemsItem.OutputAzureBlob.MaxRetryNum)
				if itemsItem.OutputAzureBlob.OnBackpressure != nil {
					items.OutputAzureBlob.OnBackpressure = types.StringValue(string(*itemsItem.OutputAzureBlob.OnBackpressure))
				} else {
					items.OutputAzureBlob.OnBackpressure = types.StringNull()
				}
				if itemsItem.OutputAzureBlob.OnDiskFullBackpressure != nil {
					items.OutputAzureBlob.OnDiskFullBackpressure = types.StringValue(string(*itemsItem.OutputAzureBlob.OnDiskFullBackpressure))
				} else {
					items.OutputAzureBlob.OnDiskFullBackpressure = types.StringNull()
				}
				if itemsItem.OutputAzureBlob.ParquetDataPageVersion != nil {
					items.OutputAzureBlob.ParquetDataPageVersion = types.StringValue(string(*itemsItem.OutputAzureBlob.ParquetDataPageVersion))
				} else {
					items.OutputAzureBlob.ParquetDataPageVersion = types.StringNull()
				}
				items.OutputAzureBlob.ParquetPageSize = types.StringPointerValue(itemsItem.OutputAzureBlob.ParquetPageSize)
				items.OutputAzureBlob.ParquetRowGroupLength = types.Float64PointerValue(itemsItem.OutputAzureBlob.ParquetRowGroupLength)
				if itemsItem.OutputAzureBlob.ParquetVersion != nil {
					items.OutputAzureBlob.ParquetVersion = types.StringValue(string(*itemsItem.OutputAzureBlob.ParquetVersion))
				} else {
					items.OutputAzureBlob.ParquetVersion = types.StringNull()
				}
				items.OutputAzureBlob.PartitionExpr = types.StringPointerValue(itemsItem.OutputAzureBlob.PartitionExpr)
				items.OutputAzureBlob.Pipeline = types.StringPointerValue(itemsItem.OutputAzureBlob.Pipeline)
				items.OutputAzureBlob.RemoveEmptyDirs = types.BoolPointerValue(itemsItem.OutputAzureBlob.RemoveEmptyDirs)
				items.OutputAzureBlob.ShouldLogInvalidRows = types.BoolPointerValue(itemsItem.OutputAzureBlob.ShouldLogInvalidRows)
				items.OutputAzureBlob.StagePath = types.StringPointerValue(itemsItem.OutputAzureBlob.StagePath)
				items.OutputAzureBlob.StorageAccountName = types.StringPointerValue(itemsItem.OutputAzureBlob.StorageAccountName)
				if itemsItem.OutputAzureBlob.StorageClass != nil {
					items.OutputAzureBlob.StorageClass = types.StringValue(string(*itemsItem.OutputAzureBlob.StorageClass))
				} else {
					items.OutputAzureBlob.StorageClass = types.StringNull()
				}
				items.OutputAzureBlob.Streamtags = make([]types.String, 0, len(itemsItem.OutputAzureBlob.Streamtags))
				for _, v := range itemsItem.OutputAzureBlob.Streamtags {
					items.OutputAzureBlob.Streamtags = append(items.OutputAzureBlob.Streamtags, types.StringValue(v))
				}
				items.OutputAzureBlob.SystemFields = make([]types.String, 0, len(itemsItem.OutputAzureBlob.SystemFields))
				for _, v := range itemsItem.OutputAzureBlob.SystemFields {
					items.OutputAzureBlob.SystemFields = append(items.OutputAzureBlob.SystemFields, types.StringValue(v))
				}
				items.OutputAzureBlob.TenantID = types.StringPointerValue(itemsItem.OutputAzureBlob.TenantID)
				items.OutputAzureBlob.TextSecret = types.StringPointerValue(itemsItem.OutputAzureBlob.TextSecret)
				if itemsItem.OutputAzureBlob.Type != nil {
					items.OutputAzureBlob.Type = types.StringValue(string(*itemsItem.OutputAzureBlob.Type))
				} else {
					items.OutputAzureBlob.Type = types.StringNull()
				}
				items.OutputAzureBlob.WriteHighWaterMark = types.Float64PointerValue(itemsItem.OutputAzureBlob.WriteHighWaterMark)
			}
			if itemsItem.OutputAzureDataExplorer != nil {
				items.OutputAzureDataExplorer = &tfTypes.OutputAzureDataExplorer{}
				items.OutputAzureDataExplorer.AddIDToStagePath = types.BoolPointerValue(itemsItem.OutputAzureDataExplorer.AddIDToStagePath)
				items.OutputAzureDataExplorer.AdditionalProperties = []tfTypes.AdditionalProperty{}

				for _, additionalPropertiesItem := range itemsItem.OutputAzureDataExplorer.AdditionalProperties {
					var additionalProperties tfTypes.AdditionalProperty

					additionalProperties.Key = types.StringValue(additionalPropertiesItem.Key)
					additionalProperties.Value = types.StringValue(additionalPropertiesItem.Value)

					items.OutputAzureDataExplorer.AdditionalProperties = append(items.OutputAzureDataExplorer.AdditionalProperties, additionalProperties)
				}
				if itemsItem.OutputAzureDataExplorer.Certificate == nil {
					items.OutputAzureDataExplorer.Certificate = nil
				} else {
					items.OutputAzureDataExplorer.Certificate = &tfTypes.OutputAzureDataExplorerCertificate{}
					items.OutputAzureDataExplorer.Certificate.CertificateName = types.StringPointerValue(itemsItem.OutputAzureDataExplorer.Certificate.CertificateName)
				}
				items.OutputAzureDataExplorer.ClientID = types.StringValue(itemsItem.OutputAzureDataExplorer.ClientID)
				items.OutputAzureDataExplorer.ClientSecret = types.StringPointerValue(itemsItem.OutputAzureDataExplorer.ClientSecret)
				items.OutputAzureDataExplorer.ClusterURL = types.StringValue(itemsItem.OutputAzureDataExplorer.ClusterURL)
				if itemsItem.OutputAzureDataExplorer.Compress != nil {
					items.OutputAzureDataExplorer.Compress = types.StringValue(string(*itemsItem.OutputAzureDataExplorer.Compress))
				} else {
					items.OutputAzureDataExplorer.Compress = types.StringNull()
				}
				items.OutputAzureDataExplorer.Concurrency = types.Float64PointerValue(itemsItem.OutputAzureDataExplorer.Concurrency)
				items.OutputAzureDataExplorer.Database = types.StringValue(itemsItem.OutputAzureDataExplorer.Database)
				items.OutputAzureDataExplorer.DeadletterEnabled = types.BoolPointerValue(itemsItem.OutputAzureDataExplorer.DeadletterEnabled)
				items.OutputAzureDataExplorer.Description = types.StringPointerValue(itemsItem.OutputAzureDataExplorer.Description)
				items.OutputAzureDataExplorer.Environment = types.StringPointerValue(itemsItem.OutputAzureDataExplorer.Environment)
				items.OutputAzureDataExplorer.ExtentTags = []tfTypes.ExtentTag{}

				for _, extentTagsItem := range itemsItem.OutputAzureDataExplorer.ExtentTags {
					var extentTags tfTypes.ExtentTag

					if extentTagsItem.Prefix != nil {
						extentTags.Prefix = types.StringValue(string(*extentTagsItem.Prefix))
					} else {
						extentTags.Prefix = types.StringNull()
					}
					extentTags.Value = types.StringValue(extentTagsItem.Value)

					items.OutputAzureDataExplorer.ExtentTags = append(items.OutputAzureDataExplorer.ExtentTags, extentTags)
				}
				items.OutputAzureDataExplorer.FileNameSuffix = types.StringPointerValue(itemsItem.OutputAzureDataExplorer.FileNameSuffix)
				items.OutputAzureDataExplorer.FlushImmediately = types.BoolPointerValue(itemsItem.OutputAzureDataExplorer.FlushImmediately)
				items.OutputAzureDataExplorer.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputAzureDataExplorer.FlushPeriodSec)
				if itemsItem.OutputAzureDataExplorer.Format != nil {
					items.OutputAzureDataExplorer.Format = types.StringValue(string(*itemsItem.OutputAzureDataExplorer.Format))
				} else {
					items.OutputAzureDataExplorer.Format = types.StringNull()
				}
				items.OutputAzureDataExplorer.ID = types.StringPointerValue(itemsItem.OutputAzureDataExplorer.ID)
				items.OutputAzureDataExplorer.IngestIfNotExists = []tfTypes.IngestIfNotExist{}

				for _, ingestIfNotExistsItem := range itemsItem.OutputAzureDataExplorer.IngestIfNotExists {
					var ingestIfNotExists tfTypes.IngestIfNotExist

					ingestIfNotExists.Value = types.StringValue(ingestIfNotExistsItem.Value)

					items.OutputAzureDataExplorer.IngestIfNotExists = append(items.OutputAzureDataExplorer.IngestIfNotExists, ingestIfNotExists)
				}
				if itemsItem.OutputAzureDataExplorer.IngestMode != nil {
					items.OutputAzureDataExplorer.IngestMode = types.StringValue(string(*itemsItem.OutputAzureDataExplorer.IngestMode))
				} else {
					items.OutputAzureDataExplorer.IngestMode = types.StringNull()
				}
				items.OutputAzureDataExplorer.IngestURL = types.StringPointerValue(itemsItem.OutputAzureDataExplorer.IngestURL)
				items.OutputAzureDataExplorer.IsMappingObj = types.BoolPointerValue(itemsItem.OutputAzureDataExplorer.IsMappingObj)
				items.OutputAzureDataExplorer.KeepAlive = types.BoolPointerValue(itemsItem.OutputAzureDataExplorer.KeepAlive)
				items.OutputAzureDataExplorer.MappingRef = types.StringPointerValue(itemsItem.OutputAzureDataExplorer.MappingRef)
				items.OutputAzureDataExplorer.MaxConcurrentFileParts = types.Float64PointerValue(itemsItem.OutputAzureDataExplorer.MaxConcurrentFileParts)
				items.OutputAzureDataExplorer.MaxFileIdleTimeSec = types.Float64PointerValue(itemsItem.OutputAzureDataExplorer.MaxFileIdleTimeSec)
				items.OutputAzureDataExplorer.MaxFileOpenTimeSec = types.Float64PointerValue(itemsItem.OutputAzureDataExplorer.MaxFileOpenTimeSec)
				items.OutputAzureDataExplorer.MaxFileSizeMB = types.Float64PointerValue(itemsItem.OutputAzureDataExplorer.MaxFileSizeMB)
				items.OutputAzureDataExplorer.MaxOpenFiles = types.Float64PointerValue(itemsItem.OutputAzureDataExplorer.MaxOpenFiles)
				items.OutputAzureDataExplorer.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputAzureDataExplorer.MaxPayloadEvents)
				items.OutputAzureDataExplorer.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputAzureDataExplorer.MaxPayloadSizeKB)
				if itemsItem.OutputAzureDataExplorer.OauthEndpoint != nil {
					items.OutputAzureDataExplorer.OauthEndpoint = types.StringValue(string(*itemsItem.OutputAzureDataExplorer.OauthEndpoint))
				} else {
					items.OutputAzureDataExplorer.OauthEndpoint = types.StringNull()
				}
				if itemsItem.OutputAzureDataExplorer.OauthType != nil {
					items.OutputAzureDataExplorer.OauthType = types.StringValue(string(*itemsItem.OutputAzureDataExplorer.OauthType))
				} else {
					items.OutputAzureDataExplorer.OauthType = types.StringNull()
				}
				if itemsItem.OutputAzureDataExplorer.OnBackpressure != nil {
					items.OutputAzureDataExplorer.OnBackpressure = types.StringValue(string(*itemsItem.OutputAzureDataExplorer.OnBackpressure))
				} else {
					items.OutputAzureDataExplorer.OnBackpressure = types.StringNull()
				}
				if itemsItem.OutputAzureDataExplorer.OnDiskFullBackpressure != nil {
					items.OutputAzureDataExplorer.OnDiskFullBackpressure = types.StringValue(string(*itemsItem.OutputAzureDataExplorer.OnDiskFullBackpressure))
				} else {
					items.OutputAzureDataExplorer.OnDiskFullBackpressure = types.StringNull()
				}
				items.OutputAzureDataExplorer.Pipeline = types.StringPointerValue(itemsItem.OutputAzureDataExplorer.Pipeline)
				if itemsItem.OutputAzureDataExplorer.PqCompress != nil {
					items.OutputAzureDataExplorer.PqCompress = types.StringValue(string(*itemsItem.OutputAzureDataExplorer.PqCompress))
				} else {
					items.OutputAzureDataExplorer.PqCompress = types.StringNull()
				}
				if itemsItem.OutputAzureDataExplorer.PqControls == nil {
					items.OutputAzureDataExplorer.PqControls = nil
				} else {
					items.OutputAzureDataExplorer.PqControls = &tfTypes.OutputAzureDataExplorerPqControls{}
				}
				items.OutputAzureDataExplorer.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputAzureDataExplorer.PqMaxFileSize)
				items.OutputAzureDataExplorer.PqMaxSize = types.StringPointerValue(itemsItem.OutputAzureDataExplorer.PqMaxSize)
				if itemsItem.OutputAzureDataExplorer.PqMode != nil {
					items.OutputAzureDataExplorer.PqMode = types.StringValue(string(*itemsItem.OutputAzureDataExplorer.PqMode))
				} else {
					items.OutputAzureDataExplorer.PqMode = types.StringNull()
				}
				if itemsItem.OutputAzureDataExplorer.PqOnBackpressure != nil {
					items.OutputAzureDataExplorer.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputAzureDataExplorer.PqOnBackpressure))
				} else {
					items.OutputAzureDataExplorer.PqOnBackpressure = types.StringNull()
				}
				items.OutputAzureDataExplorer.PqPath = types.StringPointerValue(itemsItem.OutputAzureDataExplorer.PqPath)
				items.OutputAzureDataExplorer.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputAzureDataExplorer.RejectUnauthorized)
				items.OutputAzureDataExplorer.RemoveEmptyDirs = types.BoolPointerValue(itemsItem.OutputAzureDataExplorer.RemoveEmptyDirs)
				if itemsItem.OutputAzureDataExplorer.ReportLevel != nil {
					items.OutputAzureDataExplorer.ReportLevel = types.StringValue(string(*itemsItem.OutputAzureDataExplorer.ReportLevel))
				} else {
					items.OutputAzureDataExplorer.ReportLevel = types.StringNull()
				}
				if itemsItem.OutputAzureDataExplorer.ReportMethod != nil {
					items.OutputAzureDataExplorer.ReportMethod = types.StringValue(string(*itemsItem.OutputAzureDataExplorer.ReportMethod))
				} else {
					items.OutputAzureDataExplorer.ReportMethod = types.StringNull()
				}
				items.OutputAzureDataExplorer.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputAzureDataExplorer.ResponseHonorRetryAfterHeader)
				items.OutputAzureDataExplorer.ResponseRetrySettings = []tfTypes.OutputAzureDataExplorerResponseRetrySetting{}

				for _, responseRetrySettingsItem := range itemsItem.OutputAzureDataExplorer.ResponseRetrySettings {
					var responseRetrySettings tfTypes.OutputAzureDataExplorerResponseRetrySetting

					responseRetrySettings.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem.BackoffRate)
					responseRetrySettings.HTTPStatus = types.Float64Value(responseRetrySettingsItem.HTTPStatus)
					responseRetrySettings.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem.InitialBackoff)
					responseRetrySettings.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem.MaxBackoff)

					items.OutputAzureDataExplorer.ResponseRetrySettings = append(items.OutputAzureDataExplorer.ResponseRetrySettings, responseRetrySettings)
				}
				items.OutputAzureDataExplorer.RetainBlobOnSuccess = types.BoolPointerValue(itemsItem.OutputAzureDataExplorer.RetainBlobOnSuccess)
				items.OutputAzureDataExplorer.Scope = types.StringValue(itemsItem.OutputAzureDataExplorer.Scope)
				items.OutputAzureDataExplorer.StagePath = types.StringPointerValue(itemsItem.OutputAzureDataExplorer.StagePath)
				items.OutputAzureDataExplorer.Streamtags = make([]types.String, 0, len(itemsItem.OutputAzureDataExplorer.Streamtags))
				for _, v := range itemsItem.OutputAzureDataExplorer.Streamtags {
					items.OutputAzureDataExplorer.Streamtags = append(items.OutputAzureDataExplorer.Streamtags, types.StringValue(v))
				}
				items.OutputAzureDataExplorer.SystemFields = make([]types.String, 0, len(itemsItem.OutputAzureDataExplorer.SystemFields))
				for _, v := range itemsItem.OutputAzureDataExplorer.SystemFields {
					items.OutputAzureDataExplorer.SystemFields = append(items.OutputAzureDataExplorer.SystemFields, types.StringValue(v))
				}
				items.OutputAzureDataExplorer.Table = types.StringValue(itemsItem.OutputAzureDataExplorer.Table)
				items.OutputAzureDataExplorer.TenantID = types.StringValue(itemsItem.OutputAzureDataExplorer.TenantID)
				items.OutputAzureDataExplorer.TextSecret = types.StringPointerValue(itemsItem.OutputAzureDataExplorer.TextSecret)
				if itemsItem.OutputAzureDataExplorer.TimeoutRetrySettings == nil {
					items.OutputAzureDataExplorer.TimeoutRetrySettings = nil
				} else {
					items.OutputAzureDataExplorer.TimeoutRetrySettings = &tfTypes.OutputAzureDataExplorerTimeoutRetrySettings{}
					items.OutputAzureDataExplorer.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputAzureDataExplorer.TimeoutRetrySettings.BackoffRate)
					items.OutputAzureDataExplorer.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputAzureDataExplorer.TimeoutRetrySettings.InitialBackoff)
					items.OutputAzureDataExplorer.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputAzureDataExplorer.TimeoutRetrySettings.MaxBackoff)
					items.OutputAzureDataExplorer.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputAzureDataExplorer.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputAzureDataExplorer.TimeoutSec = types.Float64PointerValue(itemsItem.OutputAzureDataExplorer.TimeoutSec)
				if itemsItem.OutputAzureDataExplorer.Type != nil {
					items.OutputAzureDataExplorer.Type = types.StringValue(string(*itemsItem.OutputAzureDataExplorer.Type))
				} else {
					items.OutputAzureDataExplorer.Type = types.StringNull()
				}
				items.OutputAzureDataExplorer.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputAzureDataExplorer.UseRoundRobinDNS)
				items.OutputAzureDataExplorer.ValidateDatabaseSettings = types.BoolPointerValue(itemsItem.OutputAzureDataExplorer.ValidateDatabaseSettings)
			}
			if itemsItem.OutputAzureEventhub != nil {
				items.OutputAzureEventhub = &tfTypes.OutputAzureEventhub{}
				if itemsItem.OutputAzureEventhub.Ack != nil {
					items.OutputAzureEventhub.Ack = types.Int64Value(int64(*itemsItem.OutputAzureEventhub.Ack))
				} else {
					items.OutputAzureEventhub.Ack = types.Int64Null()
				}
				items.OutputAzureEventhub.AuthenticationTimeout = types.Float64PointerValue(itemsItem.OutputAzureEventhub.AuthenticationTimeout)
				items.OutputAzureEventhub.BackoffRate = types.Float64PointerValue(itemsItem.OutputAzureEventhub.BackoffRate)
				items.OutputAzureEventhub.Brokers = make([]types.String, 0, len(itemsItem.OutputAzureEventhub.Brokers))
				for _, v := range itemsItem.OutputAzureEventhub.Brokers {
					items.OutputAzureEventhub.Brokers = append(items.OutputAzureEventhub.Brokers, types.StringValue(v))
				}
				items.OutputAzureEventhub.ConnectionTimeout = types.Float64PointerValue(itemsItem.OutputAzureEventhub.ConnectionTimeout)
				items.OutputAzureEventhub.Description = types.StringPointerValue(itemsItem.OutputAzureEventhub.Description)
				items.OutputAzureEventhub.Environment = types.StringPointerValue(itemsItem.OutputAzureEventhub.Environment)
				items.OutputAzureEventhub.FlushEventCount = types.Float64PointerValue(itemsItem.OutputAzureEventhub.FlushEventCount)
				items.OutputAzureEventhub.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputAzureEventhub.FlushPeriodSec)
				if itemsItem.OutputAzureEventhub.Format != nil {
					items.OutputAzureEventhub.Format = types.StringValue(string(*itemsItem.OutputAzureEventhub.Format))
				} else {
					items.OutputAzureEventhub.Format = types.StringNull()
				}
				items.OutputAzureEventhub.ID = types.StringPointerValue(itemsItem.OutputAzureEventhub.ID)
				items.OutputAzureEventhub.InitialBackoff = types.Float64PointerValue(itemsItem.OutputAzureEventhub.InitialBackoff)
				items.OutputAzureEventhub.MaxBackOff = types.Float64PointerValue(itemsItem.OutputAzureEventhub.MaxBackOff)
				items.OutputAzureEventhub.MaxRecordSizeKB = types.Float64PointerValue(itemsItem.OutputAzureEventhub.MaxRecordSizeKB)
				items.OutputAzureEventhub.MaxRetries = types.Float64PointerValue(itemsItem.OutputAzureEventhub.MaxRetries)
				if itemsItem.OutputAzureEventhub.OnBackpressure != nil {
					items.OutputAzureEventhub.OnBackpressure = types.StringValue(string(*itemsItem.OutputAzureEventhub.OnBackpressure))
				} else {
					items.OutputAzureEventhub.OnBackpressure = types.StringNull()
				}
				items.OutputAzureEventhub.Pipeline = types.StringPointerValue(itemsItem.OutputAzureEventhub.Pipeline)
				if itemsItem.OutputAzureEventhub.PqCompress != nil {
					items.OutputAzureEventhub.PqCompress = types.StringValue(string(*itemsItem.OutputAzureEventhub.PqCompress))
				} else {
					items.OutputAzureEventhub.PqCompress = types.StringNull()
				}
				if itemsItem.OutputAzureEventhub.PqControls == nil {
					items.OutputAzureEventhub.PqControls = nil
				} else {
					items.OutputAzureEventhub.PqControls = &tfTypes.OutputAzureEventhubPqControls{}
				}
				items.OutputAzureEventhub.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputAzureEventhub.PqMaxFileSize)
				items.OutputAzureEventhub.PqMaxSize = types.StringPointerValue(itemsItem.OutputAzureEventhub.PqMaxSize)
				if itemsItem.OutputAzureEventhub.PqMode != nil {
					items.OutputAzureEventhub.PqMode = types.StringValue(string(*itemsItem.OutputAzureEventhub.PqMode))
				} else {
					items.OutputAzureEventhub.PqMode = types.StringNull()
				}
				if itemsItem.OutputAzureEventhub.PqOnBackpressure != nil {
					items.OutputAzureEventhub.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputAzureEventhub.PqOnBackpressure))
				} else {
					items.OutputAzureEventhub.PqOnBackpressure = types.StringNull()
				}
				items.OutputAzureEventhub.PqPath = types.StringPointerValue(itemsItem.OutputAzureEventhub.PqPath)
				items.OutputAzureEventhub.ReauthenticationThreshold = types.Float64PointerValue(itemsItem.OutputAzureEventhub.ReauthenticationThreshold)
				items.OutputAzureEventhub.RequestTimeout = types.Float64PointerValue(itemsItem.OutputAzureEventhub.RequestTimeout)
				if itemsItem.OutputAzureEventhub.Sasl == nil {
					items.OutputAzureEventhub.Sasl = nil
				} else {
					items.OutputAzureEventhub.Sasl = &tfTypes.OutputAzureEventhubAuthentication{}
					items.OutputAzureEventhub.Sasl.Disabled = types.BoolPointerValue(itemsItem.OutputAzureEventhub.Sasl.Disabled)
					if itemsItem.OutputAzureEventhub.Sasl.Mechanism != nil {
						items.OutputAzureEventhub.Sasl.Mechanism = types.StringValue(string(*itemsItem.OutputAzureEventhub.Sasl.Mechanism))
					} else {
						items.OutputAzureEventhub.Sasl.Mechanism = types.StringNull()
					}
				}
				items.OutputAzureEventhub.Streamtags = make([]types.String, 0, len(itemsItem.OutputAzureEventhub.Streamtags))
				for _, v := range itemsItem.OutputAzureEventhub.Streamtags {
					items.OutputAzureEventhub.Streamtags = append(items.OutputAzureEventhub.Streamtags, types.StringValue(v))
				}
				items.OutputAzureEventhub.SystemFields = make([]types.String, 0, len(itemsItem.OutputAzureEventhub.SystemFields))
				for _, v := range itemsItem.OutputAzureEventhub.SystemFields {
					items.OutputAzureEventhub.SystemFields = append(items.OutputAzureEventhub.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputAzureEventhub.TLS == nil {
					items.OutputAzureEventhub.TLS = nil
				} else {
					items.OutputAzureEventhub.TLS = &tfTypes.OutputAzureEventhubTLSSettingsClientSide{}
					items.OutputAzureEventhub.TLS.Disabled = types.BoolPointerValue(itemsItem.OutputAzureEventhub.TLS.Disabled)
					items.OutputAzureEventhub.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputAzureEventhub.TLS.RejectUnauthorized)
				}
				items.OutputAzureEventhub.Topic = types.StringValue(itemsItem.OutputAzureEventhub.Topic)
				if itemsItem.OutputAzureEventhub.Type != nil {
					items.OutputAzureEventhub.Type = types.StringValue(string(*itemsItem.OutputAzureEventhub.Type))
				} else {
					items.OutputAzureEventhub.Type = types.StringNull()
				}
			}
			if itemsItem.OutputAzureLogs != nil {
				items.OutputAzureLogs = &tfTypes.OutputAzureLogs{}
				items.OutputAzureLogs.APIURL = types.StringPointerValue(itemsItem.OutputAzureLogs.APIURL)
				if itemsItem.OutputAzureLogs.AuthType != nil {
					items.OutputAzureLogs.AuthType = types.StringValue(string(*itemsItem.OutputAzureLogs.AuthType))
				} else {
					items.OutputAzureLogs.AuthType = types.StringNull()
				}
				items.OutputAzureLogs.Compress = types.BoolPointerValue(itemsItem.OutputAzureLogs.Compress)
				items.OutputAzureLogs.Concurrency = types.Float64PointerValue(itemsItem.OutputAzureLogs.Concurrency)
				items.OutputAzureLogs.Description = types.StringPointerValue(itemsItem.OutputAzureLogs.Description)
				items.OutputAzureLogs.Environment = types.StringPointerValue(itemsItem.OutputAzureLogs.Environment)
				items.OutputAzureLogs.ExtraHTTPHeaders = []tfTypes.OutputAzureLogsExtraHTTPHeader{}

				for _, extraHTTPHeadersItem := range itemsItem.OutputAzureLogs.ExtraHTTPHeaders {
					var extraHTTPHeaders tfTypes.OutputAzureLogsExtraHTTPHeader

					extraHTTPHeaders.Name = types.StringPointerValue(extraHTTPHeadersItem.Name)
					extraHTTPHeaders.Value = types.StringValue(extraHTTPHeadersItem.Value)

					items.OutputAzureLogs.ExtraHTTPHeaders = append(items.OutputAzureLogs.ExtraHTTPHeaders, extraHTTPHeaders)
				}
				if itemsItem.OutputAzureLogs.FailedRequestLoggingMode != nil {
					items.OutputAzureLogs.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputAzureLogs.FailedRequestLoggingMode))
				} else {
					items.OutputAzureLogs.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputAzureLogs.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputAzureLogs.FlushPeriodSec)
				items.OutputAzureLogs.ID = types.StringPointerValue(itemsItem.OutputAzureLogs.ID)
				items.OutputAzureLogs.KeypairSecret = types.StringPointerValue(itemsItem.OutputAzureLogs.KeypairSecret)
				items.OutputAzureLogs.LogType = types.StringPointerValue(itemsItem.OutputAzureLogs.LogType)
				items.OutputAzureLogs.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputAzureLogs.MaxPayloadEvents)
				items.OutputAzureLogs.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputAzureLogs.MaxPayloadSizeKB)
				if itemsItem.OutputAzureLogs.OnBackpressure != nil {
					items.OutputAzureLogs.OnBackpressure = types.StringValue(string(*itemsItem.OutputAzureLogs.OnBackpressure))
				} else {
					items.OutputAzureLogs.OnBackpressure = types.StringNull()
				}
				items.OutputAzureLogs.Pipeline = types.StringPointerValue(itemsItem.OutputAzureLogs.Pipeline)
				if itemsItem.OutputAzureLogs.PqCompress != nil {
					items.OutputAzureLogs.PqCompress = types.StringValue(string(*itemsItem.OutputAzureLogs.PqCompress))
				} else {
					items.OutputAzureLogs.PqCompress = types.StringNull()
				}
				if itemsItem.OutputAzureLogs.PqControls == nil {
					items.OutputAzureLogs.PqControls = nil
				} else {
					items.OutputAzureLogs.PqControls = &tfTypes.OutputAzureLogsPqControls{}
				}
				items.OutputAzureLogs.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputAzureLogs.PqMaxFileSize)
				items.OutputAzureLogs.PqMaxSize = types.StringPointerValue(itemsItem.OutputAzureLogs.PqMaxSize)
				if itemsItem.OutputAzureLogs.PqMode != nil {
					items.OutputAzureLogs.PqMode = types.StringValue(string(*itemsItem.OutputAzureLogs.PqMode))
				} else {
					items.OutputAzureLogs.PqMode = types.StringNull()
				}
				if itemsItem.OutputAzureLogs.PqOnBackpressure != nil {
					items.OutputAzureLogs.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputAzureLogs.PqOnBackpressure))
				} else {
					items.OutputAzureLogs.PqOnBackpressure = types.StringNull()
				}
				items.OutputAzureLogs.PqPath = types.StringPointerValue(itemsItem.OutputAzureLogs.PqPath)
				items.OutputAzureLogs.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputAzureLogs.RejectUnauthorized)
				items.OutputAzureLogs.ResourceID = types.StringPointerValue(itemsItem.OutputAzureLogs.ResourceID)
				items.OutputAzureLogs.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputAzureLogs.ResponseHonorRetryAfterHeader)
				items.OutputAzureLogs.ResponseRetrySettings = []tfTypes.OutputAzureLogsResponseRetrySetting{}

				for _, responseRetrySettingsItem1 := range itemsItem.OutputAzureLogs.ResponseRetrySettings {
					var responseRetrySettings1 tfTypes.OutputAzureLogsResponseRetrySetting

					responseRetrySettings1.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem1.BackoffRate)
					responseRetrySettings1.HTTPStatus = types.Float64Value(responseRetrySettingsItem1.HTTPStatus)
					responseRetrySettings1.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem1.InitialBackoff)
					responseRetrySettings1.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem1.MaxBackoff)

					items.OutputAzureLogs.ResponseRetrySettings = append(items.OutputAzureLogs.ResponseRetrySettings, responseRetrySettings1)
				}
				items.OutputAzureLogs.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputAzureLogs.SafeHeaders))
				for _, v := range itemsItem.OutputAzureLogs.SafeHeaders {
					items.OutputAzureLogs.SafeHeaders = append(items.OutputAzureLogs.SafeHeaders, types.StringValue(v))
				}
				items.OutputAzureLogs.Streamtags = make([]types.String, 0, len(itemsItem.OutputAzureLogs.Streamtags))
				for _, v := range itemsItem.OutputAzureLogs.Streamtags {
					items.OutputAzureLogs.Streamtags = append(items.OutputAzureLogs.Streamtags, types.StringValue(v))
				}
				items.OutputAzureLogs.SystemFields = make([]types.String, 0, len(itemsItem.OutputAzureLogs.SystemFields))
				for _, v := range itemsItem.OutputAzureLogs.SystemFields {
					items.OutputAzureLogs.SystemFields = append(items.OutputAzureLogs.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputAzureLogs.TimeoutRetrySettings == nil {
					items.OutputAzureLogs.TimeoutRetrySettings = nil
				} else {
					items.OutputAzureLogs.TimeoutRetrySettings = &tfTypes.OutputAzureLogsTimeoutRetrySettings{}
					items.OutputAzureLogs.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputAzureLogs.TimeoutRetrySettings.BackoffRate)
					items.OutputAzureLogs.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputAzureLogs.TimeoutRetrySettings.InitialBackoff)
					items.OutputAzureLogs.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputAzureLogs.TimeoutRetrySettings.MaxBackoff)
					items.OutputAzureLogs.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputAzureLogs.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputAzureLogs.TimeoutSec = types.Float64PointerValue(itemsItem.OutputAzureLogs.TimeoutSec)
				items.OutputAzureLogs.Type = types.StringValue(string(itemsItem.OutputAzureLogs.Type))
				items.OutputAzureLogs.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputAzureLogs.UseRoundRobinDNS)
				items.OutputAzureLogs.WorkspaceID = types.StringPointerValue(itemsItem.OutputAzureLogs.WorkspaceID)
				items.OutputAzureLogs.WorkspaceKey = types.StringPointerValue(itemsItem.OutputAzureLogs.WorkspaceKey)
			}
			if itemsItem.OutputClickHouse != nil {
				items.OutputClickHouse = &tfTypes.OutputClickHouse{}
				items.OutputClickHouse.AsyncInserts = types.BoolPointerValue(itemsItem.OutputClickHouse.AsyncInserts)
				items.OutputClickHouse.AuthHeaderExpr = types.StringPointerValue(itemsItem.OutputClickHouse.AuthHeaderExpr)
				if itemsItem.OutputClickHouse.AuthType != nil {
					items.OutputClickHouse.AuthType = types.StringValue(string(*itemsItem.OutputClickHouse.AuthType))
				} else {
					items.OutputClickHouse.AuthType = types.StringNull()
				}
				items.OutputClickHouse.ColumnMappings = []tfTypes.OutputClickHouseColumnMapping{}

				for _, columnMappingsItem := range itemsItem.OutputClickHouse.ColumnMappings {
					var columnMappings tfTypes.OutputClickHouseColumnMapping

					columnMappings.ColumnName = types.StringValue(columnMappingsItem.ColumnName)
					columnMappings.ColumnType = types.StringPointerValue(columnMappingsItem.ColumnType)
					columnMappings.ColumnValueExpression = types.StringValue(columnMappingsItem.ColumnValueExpression)

					items.OutputClickHouse.ColumnMappings = append(items.OutputClickHouse.ColumnMappings, columnMappings)
				}
				items.OutputClickHouse.Compress = types.BoolPointerValue(itemsItem.OutputClickHouse.Compress)
				items.OutputClickHouse.Concurrency = types.Float64PointerValue(itemsItem.OutputClickHouse.Concurrency)
				items.OutputClickHouse.CredentialsSecret = types.StringPointerValue(itemsItem.OutputClickHouse.CredentialsSecret)
				items.OutputClickHouse.Database = types.StringValue(itemsItem.OutputClickHouse.Database)
				items.OutputClickHouse.DescribeTable = types.StringPointerValue(itemsItem.OutputClickHouse.DescribeTable)
				items.OutputClickHouse.Description = types.StringPointerValue(itemsItem.OutputClickHouse.Description)
				items.OutputClickHouse.DumpFormatErrorsToDisk = types.BoolPointerValue(itemsItem.OutputClickHouse.DumpFormatErrorsToDisk)
				items.OutputClickHouse.Environment = types.StringPointerValue(itemsItem.OutputClickHouse.Environment)
				items.OutputClickHouse.ExcludeMappingFields = make([]types.String, 0, len(itemsItem.OutputClickHouse.ExcludeMappingFields))
				for _, v := range itemsItem.OutputClickHouse.ExcludeMappingFields {
					items.OutputClickHouse.ExcludeMappingFields = append(items.OutputClickHouse.ExcludeMappingFields, types.StringValue(v))
				}
				items.OutputClickHouse.ExtraHTTPHeaders = []tfTypes.OutputClickHouseExtraHTTPHeader{}

				for _, extraHTTPHeadersItem1 := range itemsItem.OutputClickHouse.ExtraHTTPHeaders {
					var extraHTTPHeaders1 tfTypes.OutputClickHouseExtraHTTPHeader

					extraHTTPHeaders1.Name = types.StringPointerValue(extraHTTPHeadersItem1.Name)
					extraHTTPHeaders1.Value = types.StringValue(extraHTTPHeadersItem1.Value)

					items.OutputClickHouse.ExtraHTTPHeaders = append(items.OutputClickHouse.ExtraHTTPHeaders, extraHTTPHeaders1)
				}
				if itemsItem.OutputClickHouse.FailedRequestLoggingMode != nil {
					items.OutputClickHouse.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputClickHouse.FailedRequestLoggingMode))
				} else {
					items.OutputClickHouse.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputClickHouse.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputClickHouse.FlushPeriodSec)
				if itemsItem.OutputClickHouse.Format != nil {
					items.OutputClickHouse.Format = types.StringValue(string(*itemsItem.OutputClickHouse.Format))
				} else {
					items.OutputClickHouse.Format = types.StringNull()
				}
				items.OutputClickHouse.ID = types.StringPointerValue(itemsItem.OutputClickHouse.ID)
				items.OutputClickHouse.LoginURL = types.StringPointerValue(itemsItem.OutputClickHouse.LoginURL)
				if itemsItem.OutputClickHouse.MappingType != nil {
					items.OutputClickHouse.MappingType = types.StringValue(string(*itemsItem.OutputClickHouse.MappingType))
				} else {
					items.OutputClickHouse.MappingType = types.StringNull()
				}
				items.OutputClickHouse.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputClickHouse.MaxPayloadEvents)
				items.OutputClickHouse.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputClickHouse.MaxPayloadSizeKB)
				items.OutputClickHouse.OauthHeaders = []tfTypes.OutputClickHouseOauthHeader{}

				for _, oauthHeadersItem := range itemsItem.OutputClickHouse.OauthHeaders {
					var oauthHeaders tfTypes.OutputClickHouseOauthHeader

					oauthHeaders.Name = types.StringValue(oauthHeadersItem.Name)
					oauthHeaders.Value = types.StringValue(oauthHeadersItem.Value)

					items.OutputClickHouse.OauthHeaders = append(items.OutputClickHouse.OauthHeaders, oauthHeaders)
				}
				items.OutputClickHouse.OauthParams = []tfTypes.OutputClickHouseOauthParam{}

				for _, oauthParamsItem := range itemsItem.OutputClickHouse.OauthParams {
					var oauthParams tfTypes.OutputClickHouseOauthParam

					oauthParams.Name = types.StringValue(oauthParamsItem.Name)
					oauthParams.Value = types.StringValue(oauthParamsItem.Value)

					items.OutputClickHouse.OauthParams = append(items.OutputClickHouse.OauthParams, oauthParams)
				}
				if itemsItem.OutputClickHouse.OnBackpressure != nil {
					items.OutputClickHouse.OnBackpressure = types.StringValue(string(*itemsItem.OutputClickHouse.OnBackpressure))
				} else {
					items.OutputClickHouse.OnBackpressure = types.StringNull()
				}
				items.OutputClickHouse.Password = types.StringPointerValue(itemsItem.OutputClickHouse.Password)
				items.OutputClickHouse.Pipeline = types.StringPointerValue(itemsItem.OutputClickHouse.Pipeline)
				if itemsItem.OutputClickHouse.PqCompress != nil {
					items.OutputClickHouse.PqCompress = types.StringValue(string(*itemsItem.OutputClickHouse.PqCompress))
				} else {
					items.OutputClickHouse.PqCompress = types.StringNull()
				}
				if itemsItem.OutputClickHouse.PqControls == nil {
					items.OutputClickHouse.PqControls = nil
				} else {
					items.OutputClickHouse.PqControls = &tfTypes.OutputClickHousePqControls{}
				}
				items.OutputClickHouse.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputClickHouse.PqMaxFileSize)
				items.OutputClickHouse.PqMaxSize = types.StringPointerValue(itemsItem.OutputClickHouse.PqMaxSize)
				if itemsItem.OutputClickHouse.PqMode != nil {
					items.OutputClickHouse.PqMode = types.StringValue(string(*itemsItem.OutputClickHouse.PqMode))
				} else {
					items.OutputClickHouse.PqMode = types.StringNull()
				}
				if itemsItem.OutputClickHouse.PqOnBackpressure != nil {
					items.OutputClickHouse.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputClickHouse.PqOnBackpressure))
				} else {
					items.OutputClickHouse.PqOnBackpressure = types.StringNull()
				}
				items.OutputClickHouse.PqPath = types.StringPointerValue(itemsItem.OutputClickHouse.PqPath)
				items.OutputClickHouse.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputClickHouse.RejectUnauthorized)
				items.OutputClickHouse.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputClickHouse.ResponseHonorRetryAfterHeader)
				items.OutputClickHouse.ResponseRetrySettings = []tfTypes.OutputClickHouseResponseRetrySetting{}

				for _, responseRetrySettingsItem2 := range itemsItem.OutputClickHouse.ResponseRetrySettings {
					var responseRetrySettings2 tfTypes.OutputClickHouseResponseRetrySetting

					responseRetrySettings2.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem2.BackoffRate)
					responseRetrySettings2.HTTPStatus = types.Float64Value(responseRetrySettingsItem2.HTTPStatus)
					responseRetrySettings2.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem2.InitialBackoff)
					responseRetrySettings2.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem2.MaxBackoff)

					items.OutputClickHouse.ResponseRetrySettings = append(items.OutputClickHouse.ResponseRetrySettings, responseRetrySettings2)
				}
				items.OutputClickHouse.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputClickHouse.SafeHeaders))
				for _, v := range itemsItem.OutputClickHouse.SafeHeaders {
					items.OutputClickHouse.SafeHeaders = append(items.OutputClickHouse.SafeHeaders, types.StringValue(v))
				}
				items.OutputClickHouse.Secret = types.StringPointerValue(itemsItem.OutputClickHouse.Secret)
				items.OutputClickHouse.SecretParamName = types.StringPointerValue(itemsItem.OutputClickHouse.SecretParamName)
				items.OutputClickHouse.SQLUsername = types.StringPointerValue(itemsItem.OutputClickHouse.SQLUsername)
				items.OutputClickHouse.Streamtags = make([]types.String, 0, len(itemsItem.OutputClickHouse.Streamtags))
				for _, v := range itemsItem.OutputClickHouse.Streamtags {
					items.OutputClickHouse.Streamtags = append(items.OutputClickHouse.Streamtags, types.StringValue(v))
				}
				items.OutputClickHouse.SystemFields = make([]types.String, 0, len(itemsItem.OutputClickHouse.SystemFields))
				for _, v := range itemsItem.OutputClickHouse.SystemFields {
					items.OutputClickHouse.SystemFields = append(items.OutputClickHouse.SystemFields, types.StringValue(v))
				}
				items.OutputClickHouse.TableName = types.StringValue(itemsItem.OutputClickHouse.TableName)
				items.OutputClickHouse.TextSecret = types.StringPointerValue(itemsItem.OutputClickHouse.TextSecret)
				if itemsItem.OutputClickHouse.TimeoutRetrySettings == nil {
					items.OutputClickHouse.TimeoutRetrySettings = nil
				} else {
					items.OutputClickHouse.TimeoutRetrySettings = &tfTypes.OutputClickHouseTimeoutRetrySettings{}
					items.OutputClickHouse.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputClickHouse.TimeoutRetrySettings.BackoffRate)
					items.OutputClickHouse.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputClickHouse.TimeoutRetrySettings.InitialBackoff)
					items.OutputClickHouse.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputClickHouse.TimeoutRetrySettings.MaxBackoff)
					items.OutputClickHouse.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputClickHouse.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputClickHouse.TimeoutSec = types.Float64PointerValue(itemsItem.OutputClickHouse.TimeoutSec)
				if itemsItem.OutputClickHouse.TLS == nil {
					items.OutputClickHouse.TLS = nil
				} else {
					items.OutputClickHouse.TLS = &tfTypes.OutputClickHouseTLSSettingsClientSide{}
					items.OutputClickHouse.TLS.CaPath = types.StringPointerValue(itemsItem.OutputClickHouse.TLS.CaPath)
					items.OutputClickHouse.TLS.CertificateName = types.StringPointerValue(itemsItem.OutputClickHouse.TLS.CertificateName)
					items.OutputClickHouse.TLS.CertPath = types.StringPointerValue(itemsItem.OutputClickHouse.TLS.CertPath)
					items.OutputClickHouse.TLS.Disabled = types.BoolPointerValue(itemsItem.OutputClickHouse.TLS.Disabled)
					if itemsItem.OutputClickHouse.TLS.MaxVersion != nil {
						items.OutputClickHouse.TLS.MaxVersion = types.StringValue(string(*itemsItem.OutputClickHouse.TLS.MaxVersion))
					} else {
						items.OutputClickHouse.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.OutputClickHouse.TLS.MinVersion != nil {
						items.OutputClickHouse.TLS.MinVersion = types.StringValue(string(*itemsItem.OutputClickHouse.TLS.MinVersion))
					} else {
						items.OutputClickHouse.TLS.MinVersion = types.StringNull()
					}
					items.OutputClickHouse.TLS.Passphrase = types.StringPointerValue(itemsItem.OutputClickHouse.TLS.Passphrase)
					items.OutputClickHouse.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.OutputClickHouse.TLS.PrivKeyPath)
					items.OutputClickHouse.TLS.Servername = types.StringPointerValue(itemsItem.OutputClickHouse.TLS.Servername)
				}
				items.OutputClickHouse.Token = types.StringPointerValue(itemsItem.OutputClickHouse.Token)
				items.OutputClickHouse.TokenAttributeName = types.StringPointerValue(itemsItem.OutputClickHouse.TokenAttributeName)
				items.OutputClickHouse.TokenTimeoutSecs = types.Float64PointerValue(itemsItem.OutputClickHouse.TokenTimeoutSecs)
				if itemsItem.OutputClickHouse.Type != nil {
					items.OutputClickHouse.Type = types.StringValue(string(*itemsItem.OutputClickHouse.Type))
				} else {
					items.OutputClickHouse.Type = types.StringNull()
				}
				items.OutputClickHouse.URL = types.StringValue(itemsItem.OutputClickHouse.URL)
				items.OutputClickHouse.Username = types.StringPointerValue(itemsItem.OutputClickHouse.Username)
				items.OutputClickHouse.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputClickHouse.UseRoundRobinDNS)
				items.OutputClickHouse.WaitForAsyncInserts = types.BoolPointerValue(itemsItem.OutputClickHouse.WaitForAsyncInserts)
			}
			if itemsItem.OutputCloudwatch != nil {
				items.OutputCloudwatch = &tfTypes.OutputCloudwatch{}
				items.OutputCloudwatch.AssumeRoleArn = types.StringPointerValue(itemsItem.OutputCloudwatch.AssumeRoleArn)
				items.OutputCloudwatch.AssumeRoleExternalID = types.StringPointerValue(itemsItem.OutputCloudwatch.AssumeRoleExternalID)
				items.OutputCloudwatch.AwsAPIKey = types.StringPointerValue(itemsItem.OutputCloudwatch.AwsAPIKey)
				if itemsItem.OutputCloudwatch.AwsAuthenticationMethod != nil {
					items.OutputCloudwatch.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.OutputCloudwatch.AwsAuthenticationMethod))
				} else {
					items.OutputCloudwatch.AwsAuthenticationMethod = types.StringNull()
				}
				items.OutputCloudwatch.AwsSecret = types.StringPointerValue(itemsItem.OutputCloudwatch.AwsSecret)
				items.OutputCloudwatch.AwsSecretKey = types.StringPointerValue(itemsItem.OutputCloudwatch.AwsSecretKey)
				items.OutputCloudwatch.Description = types.StringPointerValue(itemsItem.OutputCloudwatch.Description)
				items.OutputCloudwatch.DurationSeconds = types.Float64PointerValue(itemsItem.OutputCloudwatch.DurationSeconds)
				items.OutputCloudwatch.EnableAssumeRole = types.BoolPointerValue(itemsItem.OutputCloudwatch.EnableAssumeRole)
				items.OutputCloudwatch.Endpoint = types.StringPointerValue(itemsItem.OutputCloudwatch.Endpoint)
				items.OutputCloudwatch.Environment = types.StringPointerValue(itemsItem.OutputCloudwatch.Environment)
				items.OutputCloudwatch.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputCloudwatch.FlushPeriodSec)
				items.OutputCloudwatch.ID = types.StringPointerValue(itemsItem.OutputCloudwatch.ID)
				items.OutputCloudwatch.LogGroupName = types.StringValue(itemsItem.OutputCloudwatch.LogGroupName)
				items.OutputCloudwatch.LogStreamName = types.StringValue(itemsItem.OutputCloudwatch.LogStreamName)
				items.OutputCloudwatch.MaxQueueSize = types.Float64PointerValue(itemsItem.OutputCloudwatch.MaxQueueSize)
				items.OutputCloudwatch.MaxRecordSizeKB = types.Float64PointerValue(itemsItem.OutputCloudwatch.MaxRecordSizeKB)
				if itemsItem.OutputCloudwatch.OnBackpressure != nil {
					items.OutputCloudwatch.OnBackpressure = types.StringValue(string(*itemsItem.OutputCloudwatch.OnBackpressure))
				} else {
					items.OutputCloudwatch.OnBackpressure = types.StringNull()
				}
				items.OutputCloudwatch.Pipeline = types.StringPointerValue(itemsItem.OutputCloudwatch.Pipeline)
				if itemsItem.OutputCloudwatch.PqCompress != nil {
					items.OutputCloudwatch.PqCompress = types.StringValue(string(*itemsItem.OutputCloudwatch.PqCompress))
				} else {
					items.OutputCloudwatch.PqCompress = types.StringNull()
				}
				if itemsItem.OutputCloudwatch.PqControls == nil {
					items.OutputCloudwatch.PqControls = nil
				} else {
					items.OutputCloudwatch.PqControls = &tfTypes.OutputCloudwatchPqControls{}
				}
				items.OutputCloudwatch.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputCloudwatch.PqMaxFileSize)
				items.OutputCloudwatch.PqMaxSize = types.StringPointerValue(itemsItem.OutputCloudwatch.PqMaxSize)
				if itemsItem.OutputCloudwatch.PqMode != nil {
					items.OutputCloudwatch.PqMode = types.StringValue(string(*itemsItem.OutputCloudwatch.PqMode))
				} else {
					items.OutputCloudwatch.PqMode = types.StringNull()
				}
				if itemsItem.OutputCloudwatch.PqOnBackpressure != nil {
					items.OutputCloudwatch.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputCloudwatch.PqOnBackpressure))
				} else {
					items.OutputCloudwatch.PqOnBackpressure = types.StringNull()
				}
				items.OutputCloudwatch.PqPath = types.StringPointerValue(itemsItem.OutputCloudwatch.PqPath)
				items.OutputCloudwatch.Region = types.StringValue(itemsItem.OutputCloudwatch.Region)
				items.OutputCloudwatch.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputCloudwatch.RejectUnauthorized)
				items.OutputCloudwatch.ReuseConnections = types.BoolPointerValue(itemsItem.OutputCloudwatch.ReuseConnections)
				items.OutputCloudwatch.Streamtags = make([]types.String, 0, len(itemsItem.OutputCloudwatch.Streamtags))
				for _, v := range itemsItem.OutputCloudwatch.Streamtags {
					items.OutputCloudwatch.Streamtags = append(items.OutputCloudwatch.Streamtags, types.StringValue(v))
				}
				items.OutputCloudwatch.SystemFields = make([]types.String, 0, len(itemsItem.OutputCloudwatch.SystemFields))
				for _, v := range itemsItem.OutputCloudwatch.SystemFields {
					items.OutputCloudwatch.SystemFields = append(items.OutputCloudwatch.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputCloudwatch.Type != nil {
					items.OutputCloudwatch.Type = types.StringValue(string(*itemsItem.OutputCloudwatch.Type))
				} else {
					items.OutputCloudwatch.Type = types.StringNull()
				}
			}
			if itemsItem.OutputConfluentCloud != nil {
				items.OutputConfluentCloud = &tfTypes.OutputConfluentCloud{}
				if itemsItem.OutputConfluentCloud.Ack != nil {
					items.OutputConfluentCloud.Ack = types.Int64Value(int64(*itemsItem.OutputConfluentCloud.Ack))
				} else {
					items.OutputConfluentCloud.Ack = types.Int64Null()
				}
				items.OutputConfluentCloud.AuthenticationTimeout = types.Float64PointerValue(itemsItem.OutputConfluentCloud.AuthenticationTimeout)
				items.OutputConfluentCloud.BackoffRate = types.Float64PointerValue(itemsItem.OutputConfluentCloud.BackoffRate)
				items.OutputConfluentCloud.Brokers = make([]types.String, 0, len(itemsItem.OutputConfluentCloud.Brokers))
				for _, v := range itemsItem.OutputConfluentCloud.Brokers {
					items.OutputConfluentCloud.Brokers = append(items.OutputConfluentCloud.Brokers, types.StringValue(v))
				}
				if itemsItem.OutputConfluentCloud.Compression != nil {
					items.OutputConfluentCloud.Compression = types.StringValue(string(*itemsItem.OutputConfluentCloud.Compression))
				} else {
					items.OutputConfluentCloud.Compression = types.StringNull()
				}
				items.OutputConfluentCloud.ConnectionTimeout = types.Float64PointerValue(itemsItem.OutputConfluentCloud.ConnectionTimeout)
				items.OutputConfluentCloud.Description = types.StringPointerValue(itemsItem.OutputConfluentCloud.Description)
				items.OutputConfluentCloud.Environment = types.StringPointerValue(itemsItem.OutputConfluentCloud.Environment)
				items.OutputConfluentCloud.FlushEventCount = types.Float64PointerValue(itemsItem.OutputConfluentCloud.FlushEventCount)
				items.OutputConfluentCloud.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputConfluentCloud.FlushPeriodSec)
				if itemsItem.OutputConfluentCloud.Format != nil {
					items.OutputConfluentCloud.Format = types.StringValue(string(*itemsItem.OutputConfluentCloud.Format))
				} else {
					items.OutputConfluentCloud.Format = types.StringNull()
				}
				items.OutputConfluentCloud.ID = types.StringPointerValue(itemsItem.OutputConfluentCloud.ID)
				items.OutputConfluentCloud.InitialBackoff = types.Float64PointerValue(itemsItem.OutputConfluentCloud.InitialBackoff)
				if itemsItem.OutputConfluentCloud.KafkaSchemaRegistry == nil {
					items.OutputConfluentCloud.KafkaSchemaRegistry = nil
				} else {
					items.OutputConfluentCloud.KafkaSchemaRegistry = &tfTypes.OutputConfluentCloudKafkaSchemaRegistryAuthentication{}
					if itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.Auth == nil {
						items.OutputConfluentCloud.KafkaSchemaRegistry.Auth = nil
					} else {
						items.OutputConfluentCloud.KafkaSchemaRegistry.Auth = &tfTypes.OutputConfluentCloudAuth{}
						items.OutputConfluentCloud.KafkaSchemaRegistry.Auth.CredentialsSecret = types.StringPointerValue(itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.Auth.CredentialsSecret)
						items.OutputConfluentCloud.KafkaSchemaRegistry.Auth.Disabled = types.BoolPointerValue(itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.Auth.Disabled)
					}
					items.OutputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout = types.Float64PointerValue(itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout)
					items.OutputConfluentCloud.KafkaSchemaRegistry.DefaultKeySchemaID = types.Float64PointerValue(itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.DefaultKeySchemaID)
					items.OutputConfluentCloud.KafkaSchemaRegistry.DefaultValueSchemaID = types.Float64PointerValue(itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.DefaultValueSchemaID)
					items.OutputConfluentCloud.KafkaSchemaRegistry.Disabled = types.BoolPointerValue(itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.Disabled)
					items.OutputConfluentCloud.KafkaSchemaRegistry.MaxRetries = types.Float64PointerValue(itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.MaxRetries)
					items.OutputConfluentCloud.KafkaSchemaRegistry.RequestTimeout = types.Float64PointerValue(itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.RequestTimeout)
					items.OutputConfluentCloud.KafkaSchemaRegistry.SchemaRegistryURL = types.StringPointerValue(itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.SchemaRegistryURL)
					if itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.TLS == nil {
						items.OutputConfluentCloud.KafkaSchemaRegistry.TLS = nil
					} else {
						items.OutputConfluentCloud.KafkaSchemaRegistry.TLS = &tfTypes.OutputConfluentCloudKafkaSchemaRegistryTLSSettingsClientSide{}
						items.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CaPath = types.StringPointerValue(itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CaPath)
						items.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CertificateName = types.StringPointerValue(itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CertificateName)
						items.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CertPath = types.StringPointerValue(itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CertPath)
						items.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Disabled = types.BoolPointerValue(itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Disabled)
						if itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion != nil {
							items.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion = types.StringValue(string(*itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion))
						} else {
							items.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion = types.StringNull()
						}
						if itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion != nil {
							items.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion = types.StringValue(string(*itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion))
						} else {
							items.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion = types.StringNull()
						}
						items.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Passphrase = types.StringPointerValue(itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Passphrase)
						items.OutputConfluentCloud.KafkaSchemaRegistry.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.TLS.PrivKeyPath)
						items.OutputConfluentCloud.KafkaSchemaRegistry.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.TLS.RejectUnauthorized)
						items.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Servername = types.StringPointerValue(itemsItem.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Servername)
					}
				}
				items.OutputConfluentCloud.MaxBackOff = types.Float64PointerValue(itemsItem.OutputConfluentCloud.MaxBackOff)
				items.OutputConfluentCloud.MaxRecordSizeKB = types.Float64PointerValue(itemsItem.OutputConfluentCloud.MaxRecordSizeKB)
				items.OutputConfluentCloud.MaxRetries = types.Float64PointerValue(itemsItem.OutputConfluentCloud.MaxRetries)
				if itemsItem.OutputConfluentCloud.OnBackpressure != nil {
					items.OutputConfluentCloud.OnBackpressure = types.StringValue(string(*itemsItem.OutputConfluentCloud.OnBackpressure))
				} else {
					items.OutputConfluentCloud.OnBackpressure = types.StringNull()
				}
				items.OutputConfluentCloud.Pipeline = types.StringPointerValue(itemsItem.OutputConfluentCloud.Pipeline)
				if itemsItem.OutputConfluentCloud.PqCompress != nil {
					items.OutputConfluentCloud.PqCompress = types.StringValue(string(*itemsItem.OutputConfluentCloud.PqCompress))
				} else {
					items.OutputConfluentCloud.PqCompress = types.StringNull()
				}
				if itemsItem.OutputConfluentCloud.PqControls == nil {
					items.OutputConfluentCloud.PqControls = nil
				} else {
					items.OutputConfluentCloud.PqControls = &tfTypes.OutputConfluentCloudPqControls{}
				}
				items.OutputConfluentCloud.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputConfluentCloud.PqMaxFileSize)
				items.OutputConfluentCloud.PqMaxSize = types.StringPointerValue(itemsItem.OutputConfluentCloud.PqMaxSize)
				if itemsItem.OutputConfluentCloud.PqMode != nil {
					items.OutputConfluentCloud.PqMode = types.StringValue(string(*itemsItem.OutputConfluentCloud.PqMode))
				} else {
					items.OutputConfluentCloud.PqMode = types.StringNull()
				}
				if itemsItem.OutputConfluentCloud.PqOnBackpressure != nil {
					items.OutputConfluentCloud.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputConfluentCloud.PqOnBackpressure))
				} else {
					items.OutputConfluentCloud.PqOnBackpressure = types.StringNull()
				}
				items.OutputConfluentCloud.PqPath = types.StringPointerValue(itemsItem.OutputConfluentCloud.PqPath)
				items.OutputConfluentCloud.ProtobufLibraryID = types.StringPointerValue(itemsItem.OutputConfluentCloud.ProtobufLibraryID)
				items.OutputConfluentCloud.ReauthenticationThreshold = types.Float64PointerValue(itemsItem.OutputConfluentCloud.ReauthenticationThreshold)
				items.OutputConfluentCloud.RequestTimeout = types.Float64PointerValue(itemsItem.OutputConfluentCloud.RequestTimeout)
				if itemsItem.OutputConfluentCloud.Sasl == nil {
					items.OutputConfluentCloud.Sasl = nil
				} else {
					items.OutputConfluentCloud.Sasl = &tfTypes.OutputConfluentCloudAuthentication{}
					items.OutputConfluentCloud.Sasl.Disabled = types.BoolPointerValue(itemsItem.OutputConfluentCloud.Sasl.Disabled)
					if itemsItem.OutputConfluentCloud.Sasl.Mechanism != nil {
						items.OutputConfluentCloud.Sasl.Mechanism = types.StringValue(string(*itemsItem.OutputConfluentCloud.Sasl.Mechanism))
					} else {
						items.OutputConfluentCloud.Sasl.Mechanism = types.StringNull()
					}
				}
				items.OutputConfluentCloud.Streamtags = make([]types.String, 0, len(itemsItem.OutputConfluentCloud.Streamtags))
				for _, v := range itemsItem.OutputConfluentCloud.Streamtags {
					items.OutputConfluentCloud.Streamtags = append(items.OutputConfluentCloud.Streamtags, types.StringValue(v))
				}
				items.OutputConfluentCloud.SystemFields = make([]types.String, 0, len(itemsItem.OutputConfluentCloud.SystemFields))
				for _, v := range itemsItem.OutputConfluentCloud.SystemFields {
					items.OutputConfluentCloud.SystemFields = append(items.OutputConfluentCloud.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputConfluentCloud.TLS == nil {
					items.OutputConfluentCloud.TLS = nil
				} else {
					items.OutputConfluentCloud.TLS = &tfTypes.OutputConfluentCloudTLSSettingsClientSide{}
					items.OutputConfluentCloud.TLS.CaPath = types.StringPointerValue(itemsItem.OutputConfluentCloud.TLS.CaPath)
					items.OutputConfluentCloud.TLS.CertificateName = types.StringPointerValue(itemsItem.OutputConfluentCloud.TLS.CertificateName)
					items.OutputConfluentCloud.TLS.CertPath = types.StringPointerValue(itemsItem.OutputConfluentCloud.TLS.CertPath)
					items.OutputConfluentCloud.TLS.Disabled = types.BoolPointerValue(itemsItem.OutputConfluentCloud.TLS.Disabled)
					if itemsItem.OutputConfluentCloud.TLS.MaxVersion != nil {
						items.OutputConfluentCloud.TLS.MaxVersion = types.StringValue(string(*itemsItem.OutputConfluentCloud.TLS.MaxVersion))
					} else {
						items.OutputConfluentCloud.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.OutputConfluentCloud.TLS.MinVersion != nil {
						items.OutputConfluentCloud.TLS.MinVersion = types.StringValue(string(*itemsItem.OutputConfluentCloud.TLS.MinVersion))
					} else {
						items.OutputConfluentCloud.TLS.MinVersion = types.StringNull()
					}
					items.OutputConfluentCloud.TLS.Passphrase = types.StringPointerValue(itemsItem.OutputConfluentCloud.TLS.Passphrase)
					items.OutputConfluentCloud.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.OutputConfluentCloud.TLS.PrivKeyPath)
					items.OutputConfluentCloud.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputConfluentCloud.TLS.RejectUnauthorized)
					items.OutputConfluentCloud.TLS.Servername = types.StringPointerValue(itemsItem.OutputConfluentCloud.TLS.Servername)
				}
				items.OutputConfluentCloud.Topic = types.StringValue(itemsItem.OutputConfluentCloud.Topic)
				if itemsItem.OutputConfluentCloud.Type != nil {
					items.OutputConfluentCloud.Type = types.StringValue(string(*itemsItem.OutputConfluentCloud.Type))
				} else {
					items.OutputConfluentCloud.Type = types.StringNull()
				}
			}
			if itemsItem.OutputCriblHTTP != nil {
				items.OutputCriblHTTP = &tfTypes.OutputCriblHTTP{}
				if itemsItem.OutputCriblHTTP.Compression != nil {
					items.OutputCriblHTTP.Compression = types.StringValue(string(*itemsItem.OutputCriblHTTP.Compression))
				} else {
					items.OutputCriblHTTP.Compression = types.StringNull()
				}
				items.OutputCriblHTTP.Concurrency = types.Float64PointerValue(itemsItem.OutputCriblHTTP.Concurrency)
				items.OutputCriblHTTP.Description = types.StringPointerValue(itemsItem.OutputCriblHTTP.Description)
				items.OutputCriblHTTP.DNSResolvePeriodSec = types.Float64PointerValue(itemsItem.OutputCriblHTTP.DNSResolvePeriodSec)
				items.OutputCriblHTTP.Environment = types.StringPointerValue(itemsItem.OutputCriblHTTP.Environment)
				items.OutputCriblHTTP.ExcludeFields = make([]types.String, 0, len(itemsItem.OutputCriblHTTP.ExcludeFields))
				for _, v := range itemsItem.OutputCriblHTTP.ExcludeFields {
					items.OutputCriblHTTP.ExcludeFields = append(items.OutputCriblHTTP.ExcludeFields, types.StringValue(v))
				}
				items.OutputCriblHTTP.ExcludeSelf = types.BoolPointerValue(itemsItem.OutputCriblHTTP.ExcludeSelf)
				items.OutputCriblHTTP.ExtraHTTPHeaders = []tfTypes.OutputCriblHTTPExtraHTTPHeader{}

				for _, extraHTTPHeadersItem2 := range itemsItem.OutputCriblHTTP.ExtraHTTPHeaders {
					var extraHTTPHeaders2 tfTypes.OutputCriblHTTPExtraHTTPHeader

					extraHTTPHeaders2.Name = types.StringPointerValue(extraHTTPHeadersItem2.Name)
					extraHTTPHeaders2.Value = types.StringValue(extraHTTPHeadersItem2.Value)

					items.OutputCriblHTTP.ExtraHTTPHeaders = append(items.OutputCriblHTTP.ExtraHTTPHeaders, extraHTTPHeaders2)
				}
				if itemsItem.OutputCriblHTTP.FailedRequestLoggingMode != nil {
					items.OutputCriblHTTP.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputCriblHTTP.FailedRequestLoggingMode))
				} else {
					items.OutputCriblHTTP.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputCriblHTTP.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputCriblHTTP.FlushPeriodSec)
				items.OutputCriblHTTP.ID = types.StringValue(itemsItem.OutputCriblHTTP.ID)
				items.OutputCriblHTTP.LoadBalanced = types.BoolPointerValue(itemsItem.OutputCriblHTTP.LoadBalanced)
				items.OutputCriblHTTP.LoadBalanceStatsPeriodSec = types.Float64PointerValue(itemsItem.OutputCriblHTTP.LoadBalanceStatsPeriodSec)
				items.OutputCriblHTTP.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputCriblHTTP.MaxPayloadEvents)
				items.OutputCriblHTTP.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputCriblHTTP.MaxPayloadSizeKB)
				if itemsItem.OutputCriblHTTP.OnBackpressure != nil {
					items.OutputCriblHTTP.OnBackpressure = types.StringValue(string(*itemsItem.OutputCriblHTTP.OnBackpressure))
				} else {
					items.OutputCriblHTTP.OnBackpressure = types.StringNull()
				}
				items.OutputCriblHTTP.Pipeline = types.StringPointerValue(itemsItem.OutputCriblHTTP.Pipeline)
				if itemsItem.OutputCriblHTTP.PqCompress != nil {
					items.OutputCriblHTTP.PqCompress = types.StringValue(string(*itemsItem.OutputCriblHTTP.PqCompress))
				} else {
					items.OutputCriblHTTP.PqCompress = types.StringNull()
				}
				if itemsItem.OutputCriblHTTP.PqControls == nil {
					items.OutputCriblHTTP.PqControls = nil
				} else {
					items.OutputCriblHTTP.PqControls = &tfTypes.OutputCriblHTTPPqControls{}
				}
				items.OutputCriblHTTP.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputCriblHTTP.PqMaxFileSize)
				items.OutputCriblHTTP.PqMaxSize = types.StringPointerValue(itemsItem.OutputCriblHTTP.PqMaxSize)
				if itemsItem.OutputCriblHTTP.PqMode != nil {
					items.OutputCriblHTTP.PqMode = types.StringValue(string(*itemsItem.OutputCriblHTTP.PqMode))
				} else {
					items.OutputCriblHTTP.PqMode = types.StringNull()
				}
				if itemsItem.OutputCriblHTTP.PqOnBackpressure != nil {
					items.OutputCriblHTTP.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputCriblHTTP.PqOnBackpressure))
				} else {
					items.OutputCriblHTTP.PqOnBackpressure = types.StringNull()
				}
				items.OutputCriblHTTP.PqPath = types.StringPointerValue(itemsItem.OutputCriblHTTP.PqPath)
				items.OutputCriblHTTP.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputCriblHTTP.RejectUnauthorized)
				items.OutputCriblHTTP.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputCriblHTTP.ResponseHonorRetryAfterHeader)
				items.OutputCriblHTTP.ResponseRetrySettings = []tfTypes.OutputCriblHTTPResponseRetrySetting{}

				for _, responseRetrySettingsItem3 := range itemsItem.OutputCriblHTTP.ResponseRetrySettings {
					var responseRetrySettings3 tfTypes.OutputCriblHTTPResponseRetrySetting

					responseRetrySettings3.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem3.BackoffRate)
					responseRetrySettings3.HTTPStatus = types.Float64Value(responseRetrySettingsItem3.HTTPStatus)
					responseRetrySettings3.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem3.InitialBackoff)
					responseRetrySettings3.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem3.MaxBackoff)

					items.OutputCriblHTTP.ResponseRetrySettings = append(items.OutputCriblHTTP.ResponseRetrySettings, responseRetrySettings3)
				}
				items.OutputCriblHTTP.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputCriblHTTP.SafeHeaders))
				for _, v := range itemsItem.OutputCriblHTTP.SafeHeaders {
					items.OutputCriblHTTP.SafeHeaders = append(items.OutputCriblHTTP.SafeHeaders, types.StringValue(v))
				}
				items.OutputCriblHTTP.Streamtags = make([]types.String, 0, len(itemsItem.OutputCriblHTTP.Streamtags))
				for _, v := range itemsItem.OutputCriblHTTP.Streamtags {
					items.OutputCriblHTTP.Streamtags = append(items.OutputCriblHTTP.Streamtags, types.StringValue(v))
				}
				items.OutputCriblHTTP.SystemFields = make([]types.String, 0, len(itemsItem.OutputCriblHTTP.SystemFields))
				for _, v := range itemsItem.OutputCriblHTTP.SystemFields {
					items.OutputCriblHTTP.SystemFields = append(items.OutputCriblHTTP.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputCriblHTTP.TimeoutRetrySettings == nil {
					items.OutputCriblHTTP.TimeoutRetrySettings = nil
				} else {
					items.OutputCriblHTTP.TimeoutRetrySettings = &tfTypes.OutputCriblHTTPTimeoutRetrySettings{}
					items.OutputCriblHTTP.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputCriblHTTP.TimeoutRetrySettings.BackoffRate)
					items.OutputCriblHTTP.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputCriblHTTP.TimeoutRetrySettings.InitialBackoff)
					items.OutputCriblHTTP.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputCriblHTTP.TimeoutRetrySettings.MaxBackoff)
					items.OutputCriblHTTP.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputCriblHTTP.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputCriblHTTP.TimeoutSec = types.Float64PointerValue(itemsItem.OutputCriblHTTP.TimeoutSec)
				if itemsItem.OutputCriblHTTP.TLS == nil {
					items.OutputCriblHTTP.TLS = nil
				} else {
					items.OutputCriblHTTP.TLS = &tfTypes.OutputCriblHTTPTLSSettingsClientSide{}
					items.OutputCriblHTTP.TLS.CaPath = types.StringPointerValue(itemsItem.OutputCriblHTTP.TLS.CaPath)
					items.OutputCriblHTTP.TLS.CertificateName = types.StringPointerValue(itemsItem.OutputCriblHTTP.TLS.CertificateName)
					items.OutputCriblHTTP.TLS.CertPath = types.StringPointerValue(itemsItem.OutputCriblHTTP.TLS.CertPath)
					items.OutputCriblHTTP.TLS.Disabled = types.BoolPointerValue(itemsItem.OutputCriblHTTP.TLS.Disabled)
					if itemsItem.OutputCriblHTTP.TLS.MaxVersion != nil {
						items.OutputCriblHTTP.TLS.MaxVersion = types.StringValue(string(*itemsItem.OutputCriblHTTP.TLS.MaxVersion))
					} else {
						items.OutputCriblHTTP.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.OutputCriblHTTP.TLS.MinVersion != nil {
						items.OutputCriblHTTP.TLS.MinVersion = types.StringValue(string(*itemsItem.OutputCriblHTTP.TLS.MinVersion))
					} else {
						items.OutputCriblHTTP.TLS.MinVersion = types.StringNull()
					}
					items.OutputCriblHTTP.TLS.Passphrase = types.StringPointerValue(itemsItem.OutputCriblHTTP.TLS.Passphrase)
					items.OutputCriblHTTP.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.OutputCriblHTTP.TLS.PrivKeyPath)
					items.OutputCriblHTTP.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputCriblHTTP.TLS.RejectUnauthorized)
					items.OutputCriblHTTP.TLS.Servername = types.StringPointerValue(itemsItem.OutputCriblHTTP.TLS.Servername)
				}
				items.OutputCriblHTTP.TokenTTLMinutes = types.Float64PointerValue(itemsItem.OutputCriblHTTP.TokenTTLMinutes)
				items.OutputCriblHTTP.Type = types.StringValue(string(itemsItem.OutputCriblHTTP.Type))
				items.OutputCriblHTTP.URL = types.StringPointerValue(itemsItem.OutputCriblHTTP.URL)
				items.OutputCriblHTTP.Urls = []tfTypes.OutputCriblHTTPURL{}

				for _, urlsItem := range itemsItem.OutputCriblHTTP.Urls {
					var urls tfTypes.OutputCriblHTTPURL

					urls.URL = types.StringValue(urlsItem.URL)
					urls.Weight = types.Float64PointerValue(urlsItem.Weight)

					items.OutputCriblHTTP.Urls = append(items.OutputCriblHTTP.Urls, urls)
				}
				items.OutputCriblHTTP.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputCriblHTTP.UseRoundRobinDNS)
			}
			if itemsItem.OutputCriblLake != nil {
				items.OutputCriblLake = &tfTypes.OutputCriblLake{}
				items.OutputCriblLake.Description = types.StringPointerValue(itemsItem.OutputCriblLake.Description)
				items.OutputCriblLake.DestPath = types.StringPointerValue(itemsItem.OutputCriblLake.DestPath)
				items.OutputCriblLake.ID = types.StringValue(itemsItem.OutputCriblLake.ID)
				items.OutputCriblLake.Type = types.StringValue(string(itemsItem.OutputCriblLake.Type))
			}
			if itemsItem.OutputCriblTCP != nil {
				items.OutputCriblTCP = &tfTypes.OutputCriblTCP{}
				if itemsItem.OutputCriblTCP.Compression != nil {
					items.OutputCriblTCP.Compression = types.StringValue(string(*itemsItem.OutputCriblTCP.Compression))
				} else {
					items.OutputCriblTCP.Compression = types.StringNull()
				}
				items.OutputCriblTCP.ConnectionTimeout = types.Float64PointerValue(itemsItem.OutputCriblTCP.ConnectionTimeout)
				items.OutputCriblTCP.Description = types.StringPointerValue(itemsItem.OutputCriblTCP.Description)
				items.OutputCriblTCP.DNSResolvePeriodSec = types.Float64PointerValue(itemsItem.OutputCriblTCP.DNSResolvePeriodSec)
				items.OutputCriblTCP.Environment = types.StringPointerValue(itemsItem.OutputCriblTCP.Environment)
				items.OutputCriblTCP.ExcludeFields = make([]types.String, 0, len(itemsItem.OutputCriblTCP.ExcludeFields))
				for _, v := range itemsItem.OutputCriblTCP.ExcludeFields {
					items.OutputCriblTCP.ExcludeFields = append(items.OutputCriblTCP.ExcludeFields, types.StringValue(v))
				}
				items.OutputCriblTCP.ExcludeSelf = types.BoolPointerValue(itemsItem.OutputCriblTCP.ExcludeSelf)
				items.OutputCriblTCP.Host = types.StringPointerValue(itemsItem.OutputCriblTCP.Host)
				items.OutputCriblTCP.Hosts = []tfTypes.OutputCriblTCPHost{}

				for _, hostsItem := range itemsItem.OutputCriblTCP.Hosts {
					var hosts tfTypes.OutputCriblTCPHost

					hosts.Host = types.StringValue(hostsItem.Host)
					hosts.Port = types.Float64PointerValue(hostsItem.Port)
					hosts.Servername = types.StringPointerValue(hostsItem.Servername)
					if hostsItem.TLS != nil {
						hosts.TLS = types.StringValue(string(*hostsItem.TLS))
					} else {
						hosts.TLS = types.StringNull()
					}
					hosts.Weight = types.Float64PointerValue(hostsItem.Weight)

					items.OutputCriblTCP.Hosts = append(items.OutputCriblTCP.Hosts, hosts)
				}
				items.OutputCriblTCP.ID = types.StringValue(itemsItem.OutputCriblTCP.ID)
				items.OutputCriblTCP.LoadBalanced = types.BoolPointerValue(itemsItem.OutputCriblTCP.LoadBalanced)
				items.OutputCriblTCP.LoadBalanceStatsPeriodSec = types.Float64PointerValue(itemsItem.OutputCriblTCP.LoadBalanceStatsPeriodSec)
				items.OutputCriblTCP.LogFailedRequests = types.BoolPointerValue(itemsItem.OutputCriblTCP.LogFailedRequests)
				items.OutputCriblTCP.MaxConcurrentSenders = types.Float64PointerValue(itemsItem.OutputCriblTCP.MaxConcurrentSenders)
				if itemsItem.OutputCriblTCP.OnBackpressure != nil {
					items.OutputCriblTCP.OnBackpressure = types.StringValue(string(*itemsItem.OutputCriblTCP.OnBackpressure))
				} else {
					items.OutputCriblTCP.OnBackpressure = types.StringNull()
				}
				items.OutputCriblTCP.Pipeline = types.StringPointerValue(itemsItem.OutputCriblTCP.Pipeline)
				items.OutputCriblTCP.Port = types.Float64PointerValue(itemsItem.OutputCriblTCP.Port)
				if itemsItem.OutputCriblTCP.PqCompress != nil {
					items.OutputCriblTCP.PqCompress = types.StringValue(string(*itemsItem.OutputCriblTCP.PqCompress))
				} else {
					items.OutputCriblTCP.PqCompress = types.StringNull()
				}
				if itemsItem.OutputCriblTCP.PqControls == nil {
					items.OutputCriblTCP.PqControls = nil
				} else {
					items.OutputCriblTCP.PqControls = &tfTypes.OutputCriblTCPPqControls{}
				}
				items.OutputCriblTCP.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputCriblTCP.PqMaxFileSize)
				items.OutputCriblTCP.PqMaxSize = types.StringPointerValue(itemsItem.OutputCriblTCP.PqMaxSize)
				if itemsItem.OutputCriblTCP.PqMode != nil {
					items.OutputCriblTCP.PqMode = types.StringValue(string(*itemsItem.OutputCriblTCP.PqMode))
				} else {
					items.OutputCriblTCP.PqMode = types.StringNull()
				}
				if itemsItem.OutputCriblTCP.PqOnBackpressure != nil {
					items.OutputCriblTCP.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputCriblTCP.PqOnBackpressure))
				} else {
					items.OutputCriblTCP.PqOnBackpressure = types.StringNull()
				}
				items.OutputCriblTCP.PqPath = types.StringPointerValue(itemsItem.OutputCriblTCP.PqPath)
				items.OutputCriblTCP.Streamtags = make([]types.String, 0, len(itemsItem.OutputCriblTCP.Streamtags))
				for _, v := range itemsItem.OutputCriblTCP.Streamtags {
					items.OutputCriblTCP.Streamtags = append(items.OutputCriblTCP.Streamtags, types.StringValue(v))
				}
				items.OutputCriblTCP.SystemFields = make([]types.String, 0, len(itemsItem.OutputCriblTCP.SystemFields))
				for _, v := range itemsItem.OutputCriblTCP.SystemFields {
					items.OutputCriblTCP.SystemFields = append(items.OutputCriblTCP.SystemFields, types.StringValue(v))
				}
				items.OutputCriblTCP.ThrottleRatePerSec = types.StringPointerValue(itemsItem.OutputCriblTCP.ThrottleRatePerSec)
				if itemsItem.OutputCriblTCP.TLS == nil {
					items.OutputCriblTCP.TLS = nil
				} else {
					items.OutputCriblTCP.TLS = &tfTypes.OutputCriblTCPTLSSettingsClientSide{}
					items.OutputCriblTCP.TLS.CaPath = types.StringPointerValue(itemsItem.OutputCriblTCP.TLS.CaPath)
					items.OutputCriblTCP.TLS.CertificateName = types.StringPointerValue(itemsItem.OutputCriblTCP.TLS.CertificateName)
					items.OutputCriblTCP.TLS.CertPath = types.StringPointerValue(itemsItem.OutputCriblTCP.TLS.CertPath)
					items.OutputCriblTCP.TLS.Disabled = types.BoolPointerValue(itemsItem.OutputCriblTCP.TLS.Disabled)
					if itemsItem.OutputCriblTCP.TLS.MaxVersion != nil {
						items.OutputCriblTCP.TLS.MaxVersion = types.StringValue(string(*itemsItem.OutputCriblTCP.TLS.MaxVersion))
					} else {
						items.OutputCriblTCP.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.OutputCriblTCP.TLS.MinVersion != nil {
						items.OutputCriblTCP.TLS.MinVersion = types.StringValue(string(*itemsItem.OutputCriblTCP.TLS.MinVersion))
					} else {
						items.OutputCriblTCP.TLS.MinVersion = types.StringNull()
					}
					items.OutputCriblTCP.TLS.Passphrase = types.StringPointerValue(itemsItem.OutputCriblTCP.TLS.Passphrase)
					items.OutputCriblTCP.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.OutputCriblTCP.TLS.PrivKeyPath)
					items.OutputCriblTCP.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputCriblTCP.TLS.RejectUnauthorized)
					items.OutputCriblTCP.TLS.Servername = types.StringPointerValue(itemsItem.OutputCriblTCP.TLS.Servername)
				}
				items.OutputCriblTCP.TokenTTLMinutes = types.Float64PointerValue(itemsItem.OutputCriblTCP.TokenTTLMinutes)
				items.OutputCriblTCP.Type = types.StringValue(string(itemsItem.OutputCriblTCP.Type))
				items.OutputCriblTCP.WriteTimeout = types.Float64PointerValue(itemsItem.OutputCriblTCP.WriteTimeout)
			}
			if itemsItem.OutputCrowdstrikeNextGenSiem != nil {
				items.OutputCrowdstrikeNextGenSiem = &tfTypes.OutputCrowdstrikeNextGenSiem{}
				if itemsItem.OutputCrowdstrikeNextGenSiem.AuthType != nil {
					items.OutputCrowdstrikeNextGenSiem.AuthType = types.StringValue(string(*itemsItem.OutputCrowdstrikeNextGenSiem.AuthType))
				} else {
					items.OutputCrowdstrikeNextGenSiem.AuthType = types.StringNull()
				}
				items.OutputCrowdstrikeNextGenSiem.Compress = types.BoolPointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.Compress)
				items.OutputCrowdstrikeNextGenSiem.Concurrency = types.Float64PointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.Concurrency)
				items.OutputCrowdstrikeNextGenSiem.Description = types.StringPointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.Description)
				items.OutputCrowdstrikeNextGenSiem.Environment = types.StringPointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.Environment)
				items.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders = []tfTypes.OutputCrowdstrikeNextGenSiemExtraHTTPHeader{}

				for _, extraHTTPHeadersItem3 := range itemsItem.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders {
					var extraHTTPHeaders3 tfTypes.OutputCrowdstrikeNextGenSiemExtraHTTPHeader

					extraHTTPHeaders3.Name = types.StringPointerValue(extraHTTPHeadersItem3.Name)
					extraHTTPHeaders3.Value = types.StringValue(extraHTTPHeadersItem3.Value)

					items.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders = append(items.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders, extraHTTPHeaders3)
				}
				if itemsItem.OutputCrowdstrikeNextGenSiem.FailedRequestLoggingMode != nil {
					items.OutputCrowdstrikeNextGenSiem.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputCrowdstrikeNextGenSiem.FailedRequestLoggingMode))
				} else {
					items.OutputCrowdstrikeNextGenSiem.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputCrowdstrikeNextGenSiem.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.FlushPeriodSec)
				if itemsItem.OutputCrowdstrikeNextGenSiem.Format != nil {
					items.OutputCrowdstrikeNextGenSiem.Format = types.StringValue(string(*itemsItem.OutputCrowdstrikeNextGenSiem.Format))
				} else {
					items.OutputCrowdstrikeNextGenSiem.Format = types.StringNull()
				}
				items.OutputCrowdstrikeNextGenSiem.ID = types.StringPointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.ID)
				items.OutputCrowdstrikeNextGenSiem.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.MaxPayloadEvents)
				items.OutputCrowdstrikeNextGenSiem.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.MaxPayloadSizeKB)
				if itemsItem.OutputCrowdstrikeNextGenSiem.OnBackpressure != nil {
					items.OutputCrowdstrikeNextGenSiem.OnBackpressure = types.StringValue(string(*itemsItem.OutputCrowdstrikeNextGenSiem.OnBackpressure))
				} else {
					items.OutputCrowdstrikeNextGenSiem.OnBackpressure = types.StringNull()
				}
				items.OutputCrowdstrikeNextGenSiem.Pipeline = types.StringPointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.Pipeline)
				if itemsItem.OutputCrowdstrikeNextGenSiem.PqCompress != nil {
					items.OutputCrowdstrikeNextGenSiem.PqCompress = types.StringValue(string(*itemsItem.OutputCrowdstrikeNextGenSiem.PqCompress))
				} else {
					items.OutputCrowdstrikeNextGenSiem.PqCompress = types.StringNull()
				}
				if itemsItem.OutputCrowdstrikeNextGenSiem.PqControls == nil {
					items.OutputCrowdstrikeNextGenSiem.PqControls = nil
				} else {
					items.OutputCrowdstrikeNextGenSiem.PqControls = &tfTypes.OutputCrowdstrikeNextGenSiemPqControls{}
				}
				items.OutputCrowdstrikeNextGenSiem.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.PqMaxFileSize)
				items.OutputCrowdstrikeNextGenSiem.PqMaxSize = types.StringPointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.PqMaxSize)
				if itemsItem.OutputCrowdstrikeNextGenSiem.PqMode != nil {
					items.OutputCrowdstrikeNextGenSiem.PqMode = types.StringValue(string(*itemsItem.OutputCrowdstrikeNextGenSiem.PqMode))
				} else {
					items.OutputCrowdstrikeNextGenSiem.PqMode = types.StringNull()
				}
				if itemsItem.OutputCrowdstrikeNextGenSiem.PqOnBackpressure != nil {
					items.OutputCrowdstrikeNextGenSiem.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputCrowdstrikeNextGenSiem.PqOnBackpressure))
				} else {
					items.OutputCrowdstrikeNextGenSiem.PqOnBackpressure = types.StringNull()
				}
				items.OutputCrowdstrikeNextGenSiem.PqPath = types.StringPointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.PqPath)
				items.OutputCrowdstrikeNextGenSiem.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.RejectUnauthorized)
				items.OutputCrowdstrikeNextGenSiem.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.ResponseHonorRetryAfterHeader)
				items.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings = []tfTypes.OutputCrowdstrikeNextGenSiemResponseRetrySetting{}

				for _, responseRetrySettingsItem4 := range itemsItem.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings {
					var responseRetrySettings4 tfTypes.OutputCrowdstrikeNextGenSiemResponseRetrySetting

					responseRetrySettings4.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem4.BackoffRate)
					responseRetrySettings4.HTTPStatus = types.Float64Value(responseRetrySettingsItem4.HTTPStatus)
					responseRetrySettings4.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem4.InitialBackoff)
					responseRetrySettings4.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem4.MaxBackoff)

					items.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings = append(items.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings, responseRetrySettings4)
				}
				items.OutputCrowdstrikeNextGenSiem.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputCrowdstrikeNextGenSiem.SafeHeaders))
				for _, v := range itemsItem.OutputCrowdstrikeNextGenSiem.SafeHeaders {
					items.OutputCrowdstrikeNextGenSiem.SafeHeaders = append(items.OutputCrowdstrikeNextGenSiem.SafeHeaders, types.StringValue(v))
				}
				items.OutputCrowdstrikeNextGenSiem.Streamtags = make([]types.String, 0, len(itemsItem.OutputCrowdstrikeNextGenSiem.Streamtags))
				for _, v := range itemsItem.OutputCrowdstrikeNextGenSiem.Streamtags {
					items.OutputCrowdstrikeNextGenSiem.Streamtags = append(items.OutputCrowdstrikeNextGenSiem.Streamtags, types.StringValue(v))
				}
				items.OutputCrowdstrikeNextGenSiem.SystemFields = make([]types.String, 0, len(itemsItem.OutputCrowdstrikeNextGenSiem.SystemFields))
				for _, v := range itemsItem.OutputCrowdstrikeNextGenSiem.SystemFields {
					items.OutputCrowdstrikeNextGenSiem.SystemFields = append(items.OutputCrowdstrikeNextGenSiem.SystemFields, types.StringValue(v))
				}
				items.OutputCrowdstrikeNextGenSiem.TextSecret = types.StringPointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.TextSecret)
				if itemsItem.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings == nil {
					items.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings = nil
				} else {
					items.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings = &tfTypes.OutputCrowdstrikeNextGenSiemTimeoutRetrySettings{}
					items.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.BackoffRate)
					items.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.InitialBackoff)
					items.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.MaxBackoff)
					items.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputCrowdstrikeNextGenSiem.TimeoutSec = types.Float64PointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.TimeoutSec)
				items.OutputCrowdstrikeNextGenSiem.Token = types.StringPointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.Token)
				if itemsItem.OutputCrowdstrikeNextGenSiem.Type != nil {
					items.OutputCrowdstrikeNextGenSiem.Type = types.StringValue(string(*itemsItem.OutputCrowdstrikeNextGenSiem.Type))
				} else {
					items.OutputCrowdstrikeNextGenSiem.Type = types.StringNull()
				}
				items.OutputCrowdstrikeNextGenSiem.URL = types.StringValue(itemsItem.OutputCrowdstrikeNextGenSiem.URL)
				items.OutputCrowdstrikeNextGenSiem.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputCrowdstrikeNextGenSiem.UseRoundRobinDNS)
			}
			if itemsItem.OutputDatadog != nil {
				items.OutputDatadog = &tfTypes.OutputDatadog{}
				items.OutputDatadog.AllowAPIKeyFromEvents = types.BoolPointerValue(itemsItem.OutputDatadog.AllowAPIKeyFromEvents)
				items.OutputDatadog.APIKey = types.StringPointerValue(itemsItem.OutputDatadog.APIKey)
				if itemsItem.OutputDatadog.AuthType != nil {
					items.OutputDatadog.AuthType = types.StringValue(string(*itemsItem.OutputDatadog.AuthType))
				} else {
					items.OutputDatadog.AuthType = types.StringNull()
				}
				items.OutputDatadog.BatchByTags = types.BoolPointerValue(itemsItem.OutputDatadog.BatchByTags)
				items.OutputDatadog.Compress = types.BoolPointerValue(itemsItem.OutputDatadog.Compress)
				items.OutputDatadog.Concurrency = types.Float64PointerValue(itemsItem.OutputDatadog.Concurrency)
				if itemsItem.OutputDatadog.ContentType != nil {
					items.OutputDatadog.ContentType = types.StringValue(string(*itemsItem.OutputDatadog.ContentType))
				} else {
					items.OutputDatadog.ContentType = types.StringNull()
				}
				items.OutputDatadog.CustomURL = types.StringPointerValue(itemsItem.OutputDatadog.CustomURL)
				items.OutputDatadog.Description = types.StringPointerValue(itemsItem.OutputDatadog.Description)
				items.OutputDatadog.Environment = types.StringPointerValue(itemsItem.OutputDatadog.Environment)
				items.OutputDatadog.ExtraHTTPHeaders = []tfTypes.OutputDatadogExtraHTTPHeader{}

				for _, extraHTTPHeadersItem4 := range itemsItem.OutputDatadog.ExtraHTTPHeaders {
					var extraHTTPHeaders4 tfTypes.OutputDatadogExtraHTTPHeader

					extraHTTPHeaders4.Name = types.StringPointerValue(extraHTTPHeadersItem4.Name)
					extraHTTPHeaders4.Value = types.StringValue(extraHTTPHeadersItem4.Value)

					items.OutputDatadog.ExtraHTTPHeaders = append(items.OutputDatadog.ExtraHTTPHeaders, extraHTTPHeaders4)
				}
				if itemsItem.OutputDatadog.FailedRequestLoggingMode != nil {
					items.OutputDatadog.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputDatadog.FailedRequestLoggingMode))
				} else {
					items.OutputDatadog.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputDatadog.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputDatadog.FlushPeriodSec)
				items.OutputDatadog.Host = types.StringPointerValue(itemsItem.OutputDatadog.Host)
				items.OutputDatadog.ID = types.StringValue(itemsItem.OutputDatadog.ID)
				items.OutputDatadog.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputDatadog.MaxPayloadEvents)
				items.OutputDatadog.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputDatadog.MaxPayloadSizeKB)
				items.OutputDatadog.Message = types.StringPointerValue(itemsItem.OutputDatadog.Message)
				if itemsItem.OutputDatadog.OnBackpressure != nil {
					items.OutputDatadog.OnBackpressure = types.StringValue(string(*itemsItem.OutputDatadog.OnBackpressure))
				} else {
					items.OutputDatadog.OnBackpressure = types.StringNull()
				}
				items.OutputDatadog.Pipeline = types.StringPointerValue(itemsItem.OutputDatadog.Pipeline)
				if itemsItem.OutputDatadog.PqCompress != nil {
					items.OutputDatadog.PqCompress = types.StringValue(string(*itemsItem.OutputDatadog.PqCompress))
				} else {
					items.OutputDatadog.PqCompress = types.StringNull()
				}
				if itemsItem.OutputDatadog.PqControls == nil {
					items.OutputDatadog.PqControls = nil
				} else {
					items.OutputDatadog.PqControls = &tfTypes.OutputDatadogPqControls{}
				}
				items.OutputDatadog.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputDatadog.PqMaxFileSize)
				items.OutputDatadog.PqMaxSize = types.StringPointerValue(itemsItem.OutputDatadog.PqMaxSize)
				if itemsItem.OutputDatadog.PqMode != nil {
					items.OutputDatadog.PqMode = types.StringValue(string(*itemsItem.OutputDatadog.PqMode))
				} else {
					items.OutputDatadog.PqMode = types.StringNull()
				}
				if itemsItem.OutputDatadog.PqOnBackpressure != nil {
					items.OutputDatadog.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputDatadog.PqOnBackpressure))
				} else {
					items.OutputDatadog.PqOnBackpressure = types.StringNull()
				}
				items.OutputDatadog.PqPath = types.StringPointerValue(itemsItem.OutputDatadog.PqPath)
				items.OutputDatadog.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputDatadog.RejectUnauthorized)
				items.OutputDatadog.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputDatadog.ResponseHonorRetryAfterHeader)
				items.OutputDatadog.ResponseRetrySettings = []tfTypes.OutputDatadogResponseRetrySetting{}

				for _, responseRetrySettingsItem5 := range itemsItem.OutputDatadog.ResponseRetrySettings {
					var responseRetrySettings5 tfTypes.OutputDatadogResponseRetrySetting

					responseRetrySettings5.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem5.BackoffRate)
					responseRetrySettings5.HTTPStatus = types.Float64Value(responseRetrySettingsItem5.HTTPStatus)
					responseRetrySettings5.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem5.InitialBackoff)
					responseRetrySettings5.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem5.MaxBackoff)

					items.OutputDatadog.ResponseRetrySettings = append(items.OutputDatadog.ResponseRetrySettings, responseRetrySettings5)
				}
				items.OutputDatadog.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputDatadog.SafeHeaders))
				for _, v := range itemsItem.OutputDatadog.SafeHeaders {
					items.OutputDatadog.SafeHeaders = append(items.OutputDatadog.SafeHeaders, types.StringValue(v))
				}
				items.OutputDatadog.SendCountersAsCount = types.BoolPointerValue(itemsItem.OutputDatadog.SendCountersAsCount)
				items.OutputDatadog.Service = types.StringPointerValue(itemsItem.OutputDatadog.Service)
				if itemsItem.OutputDatadog.Severity != nil {
					items.OutputDatadog.Severity = types.StringValue(string(*itemsItem.OutputDatadog.Severity))
				} else {
					items.OutputDatadog.Severity = types.StringNull()
				}
				if itemsItem.OutputDatadog.Site != nil {
					items.OutputDatadog.Site = types.StringValue(string(*itemsItem.OutputDatadog.Site))
				} else {
					items.OutputDatadog.Site = types.StringNull()
				}
				items.OutputDatadog.Source = types.StringPointerValue(itemsItem.OutputDatadog.Source)
				items.OutputDatadog.Streamtags = make([]types.String, 0, len(itemsItem.OutputDatadog.Streamtags))
				for _, v := range itemsItem.OutputDatadog.Streamtags {
					items.OutputDatadog.Streamtags = append(items.OutputDatadog.Streamtags, types.StringValue(v))
				}
				items.OutputDatadog.SystemFields = make([]types.String, 0, len(itemsItem.OutputDatadog.SystemFields))
				for _, v := range itemsItem.OutputDatadog.SystemFields {
					items.OutputDatadog.SystemFields = append(items.OutputDatadog.SystemFields, types.StringValue(v))
				}
				items.OutputDatadog.Tags = make([]types.String, 0, len(itemsItem.OutputDatadog.Tags))
				for _, v := range itemsItem.OutputDatadog.Tags {
					items.OutputDatadog.Tags = append(items.OutputDatadog.Tags, types.StringValue(v))
				}
				items.OutputDatadog.TextSecret = types.StringPointerValue(itemsItem.OutputDatadog.TextSecret)
				if itemsItem.OutputDatadog.TimeoutRetrySettings == nil {
					items.OutputDatadog.TimeoutRetrySettings = nil
				} else {
					items.OutputDatadog.TimeoutRetrySettings = &tfTypes.OutputDatadogTimeoutRetrySettings{}
					items.OutputDatadog.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputDatadog.TimeoutRetrySettings.BackoffRate)
					items.OutputDatadog.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputDatadog.TimeoutRetrySettings.InitialBackoff)
					items.OutputDatadog.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputDatadog.TimeoutRetrySettings.MaxBackoff)
					items.OutputDatadog.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputDatadog.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputDatadog.TimeoutSec = types.Float64PointerValue(itemsItem.OutputDatadog.TimeoutSec)
				items.OutputDatadog.TotalMemoryLimitKB = types.Float64PointerValue(itemsItem.OutputDatadog.TotalMemoryLimitKB)
				items.OutputDatadog.Type = types.StringValue(string(itemsItem.OutputDatadog.Type))
				items.OutputDatadog.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputDatadog.UseRoundRobinDNS)
			}
			if itemsItem.OutputDataset != nil {
				items.OutputDataset = &tfTypes.OutputDataset{}
				items.OutputDataset.APIKey = types.StringPointerValue(itemsItem.OutputDataset.APIKey)
				if itemsItem.OutputDataset.AuthType != nil {
					items.OutputDataset.AuthType = types.StringValue(string(*itemsItem.OutputDataset.AuthType))
				} else {
					items.OutputDataset.AuthType = types.StringNull()
				}
				items.OutputDataset.Compress = types.BoolPointerValue(itemsItem.OutputDataset.Compress)
				items.OutputDataset.Concurrency = types.Float64PointerValue(itemsItem.OutputDataset.Concurrency)
				items.OutputDataset.CustomURL = types.StringPointerValue(itemsItem.OutputDataset.CustomURL)
				if itemsItem.OutputDataset.DefaultSeverity != nil {
					items.OutputDataset.DefaultSeverity = types.StringValue(string(*itemsItem.OutputDataset.DefaultSeverity))
				} else {
					items.OutputDataset.DefaultSeverity = types.StringNull()
				}
				items.OutputDataset.Description = types.StringPointerValue(itemsItem.OutputDataset.Description)
				items.OutputDataset.Environment = types.StringPointerValue(itemsItem.OutputDataset.Environment)
				items.OutputDataset.ExcludeFields = make([]types.String, 0, len(itemsItem.OutputDataset.ExcludeFields))
				for _, v := range itemsItem.OutputDataset.ExcludeFields {
					items.OutputDataset.ExcludeFields = append(items.OutputDataset.ExcludeFields, types.StringValue(v))
				}
				items.OutputDataset.ExtraHTTPHeaders = []tfTypes.OutputDatasetExtraHTTPHeader{}

				for _, extraHTTPHeadersItem5 := range itemsItem.OutputDataset.ExtraHTTPHeaders {
					var extraHTTPHeaders5 tfTypes.OutputDatasetExtraHTTPHeader

					extraHTTPHeaders5.Name = types.StringPointerValue(extraHTTPHeadersItem5.Name)
					extraHTTPHeaders5.Value = types.StringValue(extraHTTPHeadersItem5.Value)

					items.OutputDataset.ExtraHTTPHeaders = append(items.OutputDataset.ExtraHTTPHeaders, extraHTTPHeaders5)
				}
				if itemsItem.OutputDataset.FailedRequestLoggingMode != nil {
					items.OutputDataset.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputDataset.FailedRequestLoggingMode))
				} else {
					items.OutputDataset.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputDataset.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputDataset.FlushPeriodSec)
				items.OutputDataset.ID = types.StringValue(itemsItem.OutputDataset.ID)
				items.OutputDataset.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputDataset.MaxPayloadEvents)
				items.OutputDataset.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputDataset.MaxPayloadSizeKB)
				items.OutputDataset.MessageField = types.StringPointerValue(itemsItem.OutputDataset.MessageField)
				if itemsItem.OutputDataset.OnBackpressure != nil {
					items.OutputDataset.OnBackpressure = types.StringValue(string(*itemsItem.OutputDataset.OnBackpressure))
				} else {
					items.OutputDataset.OnBackpressure = types.StringNull()
				}
				items.OutputDataset.Pipeline = types.StringPointerValue(itemsItem.OutputDataset.Pipeline)
				if itemsItem.OutputDataset.PqCompress != nil {
					items.OutputDataset.PqCompress = types.StringValue(string(*itemsItem.OutputDataset.PqCompress))
				} else {
					items.OutputDataset.PqCompress = types.StringNull()
				}
				if itemsItem.OutputDataset.PqControls == nil {
					items.OutputDataset.PqControls = nil
				} else {
					items.OutputDataset.PqControls = &tfTypes.OutputDatasetPqControls{}
				}
				items.OutputDataset.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputDataset.PqMaxFileSize)
				items.OutputDataset.PqMaxSize = types.StringPointerValue(itemsItem.OutputDataset.PqMaxSize)
				if itemsItem.OutputDataset.PqMode != nil {
					items.OutputDataset.PqMode = types.StringValue(string(*itemsItem.OutputDataset.PqMode))
				} else {
					items.OutputDataset.PqMode = types.StringNull()
				}
				if itemsItem.OutputDataset.PqOnBackpressure != nil {
					items.OutputDataset.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputDataset.PqOnBackpressure))
				} else {
					items.OutputDataset.PqOnBackpressure = types.StringNull()
				}
				items.OutputDataset.PqPath = types.StringPointerValue(itemsItem.OutputDataset.PqPath)
				items.OutputDataset.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputDataset.RejectUnauthorized)
				items.OutputDataset.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputDataset.ResponseHonorRetryAfterHeader)
				items.OutputDataset.ResponseRetrySettings = []tfTypes.OutputDatasetResponseRetrySetting{}

				for _, responseRetrySettingsItem6 := range itemsItem.OutputDataset.ResponseRetrySettings {
					var responseRetrySettings6 tfTypes.OutputDatasetResponseRetrySetting

					responseRetrySettings6.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem6.BackoffRate)
					responseRetrySettings6.HTTPStatus = types.Float64Value(responseRetrySettingsItem6.HTTPStatus)
					responseRetrySettings6.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem6.InitialBackoff)
					responseRetrySettings6.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem6.MaxBackoff)

					items.OutputDataset.ResponseRetrySettings = append(items.OutputDataset.ResponseRetrySettings, responseRetrySettings6)
				}
				items.OutputDataset.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputDataset.SafeHeaders))
				for _, v := range itemsItem.OutputDataset.SafeHeaders {
					items.OutputDataset.SafeHeaders = append(items.OutputDataset.SafeHeaders, types.StringValue(v))
				}
				items.OutputDataset.ServerHostField = types.StringPointerValue(itemsItem.OutputDataset.ServerHostField)
				if itemsItem.OutputDataset.Site != nil {
					items.OutputDataset.Site = types.StringValue(string(*itemsItem.OutputDataset.Site))
				} else {
					items.OutputDataset.Site = types.StringNull()
				}
				items.OutputDataset.Streamtags = make([]types.String, 0, len(itemsItem.OutputDataset.Streamtags))
				for _, v := range itemsItem.OutputDataset.Streamtags {
					items.OutputDataset.Streamtags = append(items.OutputDataset.Streamtags, types.StringValue(v))
				}
				items.OutputDataset.SystemFields = make([]types.String, 0, len(itemsItem.OutputDataset.SystemFields))
				for _, v := range itemsItem.OutputDataset.SystemFields {
					items.OutputDataset.SystemFields = append(items.OutputDataset.SystemFields, types.StringValue(v))
				}
				items.OutputDataset.TextSecret = types.StringPointerValue(itemsItem.OutputDataset.TextSecret)
				if itemsItem.OutputDataset.TimeoutRetrySettings == nil {
					items.OutputDataset.TimeoutRetrySettings = nil
				} else {
					items.OutputDataset.TimeoutRetrySettings = &tfTypes.OutputDatasetTimeoutRetrySettings{}
					items.OutputDataset.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputDataset.TimeoutRetrySettings.BackoffRate)
					items.OutputDataset.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputDataset.TimeoutRetrySettings.InitialBackoff)
					items.OutputDataset.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputDataset.TimeoutRetrySettings.MaxBackoff)
					items.OutputDataset.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputDataset.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputDataset.TimeoutSec = types.Float64PointerValue(itemsItem.OutputDataset.TimeoutSec)
				items.OutputDataset.TimestampField = types.StringPointerValue(itemsItem.OutputDataset.TimestampField)
				items.OutputDataset.TotalMemoryLimitKB = types.Float64PointerValue(itemsItem.OutputDataset.TotalMemoryLimitKB)
				items.OutputDataset.Type = types.StringValue(string(itemsItem.OutputDataset.Type))
				items.OutputDataset.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputDataset.UseRoundRobinDNS)
			}
			if itemsItem.OutputDefault != nil {
				items.OutputDefault = &tfTypes.OutputDefault{}
				items.OutputDefault.DefaultID = types.StringValue(itemsItem.OutputDefault.DefaultID)
				items.OutputDefault.Environment = types.StringPointerValue(itemsItem.OutputDefault.Environment)
				items.OutputDefault.ID = types.StringPointerValue(itemsItem.OutputDefault.ID)
				items.OutputDefault.Pipeline = types.StringPointerValue(itemsItem.OutputDefault.Pipeline)
				items.OutputDefault.Streamtags = make([]types.String, 0, len(itemsItem.OutputDefault.Streamtags))
				for _, v := range itemsItem.OutputDefault.Streamtags {
					items.OutputDefault.Streamtags = append(items.OutputDefault.Streamtags, types.StringValue(v))
				}
				items.OutputDefault.SystemFields = make([]types.String, 0, len(itemsItem.OutputDefault.SystemFields))
				for _, v := range itemsItem.OutputDefault.SystemFields {
					items.OutputDefault.SystemFields = append(items.OutputDefault.SystemFields, types.StringValue(v))
				}
				items.OutputDefault.Type = types.StringValue(string(itemsItem.OutputDefault.Type))
			}
			if itemsItem.OutputDevnull != nil {
				items.OutputDevnull = &tfTypes.OutputDevnull{}
				items.OutputDevnull.Environment = types.StringPointerValue(itemsItem.OutputDevnull.Environment)
				items.OutputDevnull.ID = types.StringValue(itemsItem.OutputDevnull.ID)
				items.OutputDevnull.Pipeline = types.StringPointerValue(itemsItem.OutputDevnull.Pipeline)
				items.OutputDevnull.Streamtags = make([]types.String, 0, len(itemsItem.OutputDevnull.Streamtags))
				for _, v := range itemsItem.OutputDevnull.Streamtags {
					items.OutputDevnull.Streamtags = append(items.OutputDevnull.Streamtags, types.StringValue(v))
				}
				items.OutputDevnull.SystemFields = make([]types.String, 0, len(itemsItem.OutputDevnull.SystemFields))
				for _, v := range itemsItem.OutputDevnull.SystemFields {
					items.OutputDevnull.SystemFields = append(items.OutputDevnull.SystemFields, types.StringValue(v))
				}
				items.OutputDevnull.Type = types.StringValue(string(itemsItem.OutputDevnull.Type))
			}
			if itemsItem.OutputDiskSpool != nil {
				items.OutputDiskSpool = &tfTypes.OutputDiskSpool{}
				if itemsItem.OutputDiskSpool.Compress != nil {
					items.OutputDiskSpool.Compress = types.StringValue(string(*itemsItem.OutputDiskSpool.Compress))
				} else {
					items.OutputDiskSpool.Compress = types.StringNull()
				}
				items.OutputDiskSpool.Description = types.StringPointerValue(itemsItem.OutputDiskSpool.Description)
				items.OutputDiskSpool.Environment = types.StringPointerValue(itemsItem.OutputDiskSpool.Environment)
				items.OutputDiskSpool.ID = types.StringValue(itemsItem.OutputDiskSpool.ID)
				items.OutputDiskSpool.MaxDataSize = types.StringPointerValue(itemsItem.OutputDiskSpool.MaxDataSize)
				items.OutputDiskSpool.MaxDataTime = types.StringPointerValue(itemsItem.OutputDiskSpool.MaxDataTime)
				items.OutputDiskSpool.PartitionExpr = types.StringPointerValue(itemsItem.OutputDiskSpool.PartitionExpr)
				items.OutputDiskSpool.Pipeline = types.StringPointerValue(itemsItem.OutputDiskSpool.Pipeline)
				items.OutputDiskSpool.Streamtags = make([]types.String, 0, len(itemsItem.OutputDiskSpool.Streamtags))
				for _, v := range itemsItem.OutputDiskSpool.Streamtags {
					items.OutputDiskSpool.Streamtags = append(items.OutputDiskSpool.Streamtags, types.StringValue(v))
				}
				items.OutputDiskSpool.SystemFields = make([]types.String, 0, len(itemsItem.OutputDiskSpool.SystemFields))
				for _, v := range itemsItem.OutputDiskSpool.SystemFields {
					items.OutputDiskSpool.SystemFields = append(items.OutputDiskSpool.SystemFields, types.StringValue(v))
				}
				items.OutputDiskSpool.TimeWindow = types.StringPointerValue(itemsItem.OutputDiskSpool.TimeWindow)
				items.OutputDiskSpool.Type = types.StringValue(string(itemsItem.OutputDiskSpool.Type))
			}
			if itemsItem.OutputDlS3 != nil {
				items.OutputDlS3 = &tfTypes.OutputDlS3{}
				items.OutputDlS3.AddIDToStagePath = types.BoolPointerValue(itemsItem.OutputDlS3.AddIDToStagePath)
				items.OutputDlS3.AssumeRoleArn = types.StringPointerValue(itemsItem.OutputDlS3.AssumeRoleArn)
				items.OutputDlS3.AssumeRoleExternalID = types.StringPointerValue(itemsItem.OutputDlS3.AssumeRoleExternalID)
				items.OutputDlS3.AutomaticSchema = types.BoolPointerValue(itemsItem.OutputDlS3.AutomaticSchema)
				items.OutputDlS3.AwsAPIKey = types.StringPointerValue(itemsItem.OutputDlS3.AwsAPIKey)
				if itemsItem.OutputDlS3.AwsAuthenticationMethod != nil {
					items.OutputDlS3.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.OutputDlS3.AwsAuthenticationMethod))
				} else {
					items.OutputDlS3.AwsAuthenticationMethod = types.StringNull()
				}
				items.OutputDlS3.AwsSecret = types.StringPointerValue(itemsItem.OutputDlS3.AwsSecret)
				items.OutputDlS3.AwsSecretKey = types.StringPointerValue(itemsItem.OutputDlS3.AwsSecretKey)
				items.OutputDlS3.BaseFileName = types.StringPointerValue(itemsItem.OutputDlS3.BaseFileName)
				items.OutputDlS3.Bucket = types.StringValue(itemsItem.OutputDlS3.Bucket)
				if itemsItem.OutputDlS3.Compress != nil {
					items.OutputDlS3.Compress = types.StringValue(string(*itemsItem.OutputDlS3.Compress))
				} else {
					items.OutputDlS3.Compress = types.StringNull()
				}
				if itemsItem.OutputDlS3.CompressionLevel != nil {
					items.OutputDlS3.CompressionLevel = types.StringValue(string(*itemsItem.OutputDlS3.CompressionLevel))
				} else {
					items.OutputDlS3.CompressionLevel = types.StringNull()
				}
				items.OutputDlS3.DeadletterEnabled = types.BoolPointerValue(itemsItem.OutputDlS3.DeadletterEnabled)
				items.OutputDlS3.DeadletterPath = types.StringPointerValue(itemsItem.OutputDlS3.DeadletterPath)
				items.OutputDlS3.Description = types.StringPointerValue(itemsItem.OutputDlS3.Description)
				items.OutputDlS3.DestPath = types.StringPointerValue(itemsItem.OutputDlS3.DestPath)
				items.OutputDlS3.DurationSeconds = types.Float64PointerValue(itemsItem.OutputDlS3.DurationSeconds)
				items.OutputDlS3.EmptyDirCleanupSec = types.Float64PointerValue(itemsItem.OutputDlS3.EmptyDirCleanupSec)
				items.OutputDlS3.EnableAssumeRole = types.BoolPointerValue(itemsItem.OutputDlS3.EnableAssumeRole)
				items.OutputDlS3.EnablePageChecksum = types.BoolPointerValue(itemsItem.OutputDlS3.EnablePageChecksum)
				items.OutputDlS3.EnableStatistics = types.BoolPointerValue(itemsItem.OutputDlS3.EnableStatistics)
				items.OutputDlS3.EnableWritePageIndex = types.BoolPointerValue(itemsItem.OutputDlS3.EnableWritePageIndex)
				items.OutputDlS3.Endpoint = types.StringPointerValue(itemsItem.OutputDlS3.Endpoint)
				items.OutputDlS3.Environment = types.StringPointerValue(itemsItem.OutputDlS3.Environment)
				items.OutputDlS3.FileNameSuffix = types.StringPointerValue(itemsItem.OutputDlS3.FileNameSuffix)
				if itemsItem.OutputDlS3.Format != nil {
					items.OutputDlS3.Format = types.StringValue(string(*itemsItem.OutputDlS3.Format))
				} else {
					items.OutputDlS3.Format = types.StringNull()
				}
				items.OutputDlS3.HeaderLine = types.StringPointerValue(itemsItem.OutputDlS3.HeaderLine)
				items.OutputDlS3.ID = types.StringPointerValue(itemsItem.OutputDlS3.ID)
				items.OutputDlS3.KeyValueMetadata = []tfTypes.OutputDlS3KeyValueMetadatum{}

				for _, keyValueMetadataItem1 := range itemsItem.OutputDlS3.KeyValueMetadata {
					var keyValueMetadata1 tfTypes.OutputDlS3KeyValueMetadatum

					keyValueMetadata1.Key = types.StringPointerValue(keyValueMetadataItem1.Key)
					keyValueMetadata1.Value = types.StringValue(keyValueMetadataItem1.Value)

					items.OutputDlS3.KeyValueMetadata = append(items.OutputDlS3.KeyValueMetadata, keyValueMetadata1)
				}
				items.OutputDlS3.KmsKeyID = types.StringPointerValue(itemsItem.OutputDlS3.KmsKeyID)
				items.OutputDlS3.MaxClosingFilesToBackpressure = types.Float64PointerValue(itemsItem.OutputDlS3.MaxClosingFilesToBackpressure)
				items.OutputDlS3.MaxConcurrentFileParts = types.Float64PointerValue(itemsItem.OutputDlS3.MaxConcurrentFileParts)
				items.OutputDlS3.MaxFileIdleTimeSec = types.Float64PointerValue(itemsItem.OutputDlS3.MaxFileIdleTimeSec)
				items.OutputDlS3.MaxFileOpenTimeSec = types.Float64PointerValue(itemsItem.OutputDlS3.MaxFileOpenTimeSec)
				items.OutputDlS3.MaxFileSizeMB = types.Float64PointerValue(itemsItem.OutputDlS3.MaxFileSizeMB)
				items.OutputDlS3.MaxOpenFiles = types.Float64PointerValue(itemsItem.OutputDlS3.MaxOpenFiles)
				items.OutputDlS3.MaxRetryNum = types.Float64PointerValue(itemsItem.OutputDlS3.MaxRetryNum)
				if itemsItem.OutputDlS3.ObjectACL != nil {
					items.OutputDlS3.ObjectACL = types.StringValue(string(*itemsItem.OutputDlS3.ObjectACL))
				} else {
					items.OutputDlS3.ObjectACL = types.StringNull()
				}
				if itemsItem.OutputDlS3.OnDiskFullBackpressure != nil {
					items.OutputDlS3.OnDiskFullBackpressure = types.StringValue(string(*itemsItem.OutputDlS3.OnDiskFullBackpressure))
				} else {
					items.OutputDlS3.OnDiskFullBackpressure = types.StringNull()
				}
				if itemsItem.OutputDlS3.ParquetDataPageVersion != nil {
					items.OutputDlS3.ParquetDataPageVersion = types.StringValue(string(*itemsItem.OutputDlS3.ParquetDataPageVersion))
				} else {
					items.OutputDlS3.ParquetDataPageVersion = types.StringNull()
				}
				items.OutputDlS3.ParquetPageSize = types.StringPointerValue(itemsItem.OutputDlS3.ParquetPageSize)
				items.OutputDlS3.ParquetRowGroupLength = types.Float64PointerValue(itemsItem.OutputDlS3.ParquetRowGroupLength)
				if itemsItem.OutputDlS3.ParquetVersion != nil {
					items.OutputDlS3.ParquetVersion = types.StringValue(string(*itemsItem.OutputDlS3.ParquetVersion))
				} else {
					items.OutputDlS3.ParquetVersion = types.StringNull()
				}
				items.OutputDlS3.PartitioningFields = make([]types.String, 0, len(itemsItem.OutputDlS3.PartitioningFields))
				for _, v := range itemsItem.OutputDlS3.PartitioningFields {
					items.OutputDlS3.PartitioningFields = append(items.OutputDlS3.PartitioningFields, types.StringValue(v))
				}
				items.OutputDlS3.Pipeline = types.StringPointerValue(itemsItem.OutputDlS3.Pipeline)
				items.OutputDlS3.Region = types.StringPointerValue(itemsItem.OutputDlS3.Region)
				items.OutputDlS3.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputDlS3.RejectUnauthorized)
				items.OutputDlS3.RemoveEmptyDirs = types.BoolPointerValue(itemsItem.OutputDlS3.RemoveEmptyDirs)
				items.OutputDlS3.ReuseConnections = types.BoolPointerValue(itemsItem.OutputDlS3.ReuseConnections)
				if itemsItem.OutputDlS3.ServerSideEncryption != nil {
					items.OutputDlS3.ServerSideEncryption = types.StringValue(string(*itemsItem.OutputDlS3.ServerSideEncryption))
				} else {
					items.OutputDlS3.ServerSideEncryption = types.StringNull()
				}
				items.OutputDlS3.ShouldLogInvalidRows = types.BoolPointerValue(itemsItem.OutputDlS3.ShouldLogInvalidRows)
				if itemsItem.OutputDlS3.SignatureVersion != nil {
					items.OutputDlS3.SignatureVersion = types.StringValue(string(*itemsItem.OutputDlS3.SignatureVersion))
				} else {
					items.OutputDlS3.SignatureVersion = types.StringNull()
				}
				items.OutputDlS3.StagePath = types.StringPointerValue(itemsItem.OutputDlS3.StagePath)
				if itemsItem.OutputDlS3.StorageClass != nil {
					items.OutputDlS3.StorageClass = types.StringValue(string(*itemsItem.OutputDlS3.StorageClass))
				} else {
					items.OutputDlS3.StorageClass = types.StringNull()
				}
				items.OutputDlS3.Streamtags = make([]types.String, 0, len(itemsItem.OutputDlS3.Streamtags))
				for _, v := range itemsItem.OutputDlS3.Streamtags {
					items.OutputDlS3.Streamtags = append(items.OutputDlS3.Streamtags, types.StringValue(v))
				}
				items.OutputDlS3.SystemFields = make([]types.String, 0, len(itemsItem.OutputDlS3.SystemFields))
				for _, v := range itemsItem.OutputDlS3.SystemFields {
					items.OutputDlS3.SystemFields = append(items.OutputDlS3.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputDlS3.Type != nil {
					items.OutputDlS3.Type = types.StringValue(string(*itemsItem.OutputDlS3.Type))
				} else {
					items.OutputDlS3.Type = types.StringNull()
				}
				items.OutputDlS3.VerifyPermissions = types.BoolPointerValue(itemsItem.OutputDlS3.VerifyPermissions)
				items.OutputDlS3.WriteHighWaterMark = types.Float64PointerValue(itemsItem.OutputDlS3.WriteHighWaterMark)
			}
			if itemsItem.OutputDynatraceHTTP != nil {
				items.OutputDynatraceHTTP = &tfTypes.OutputDynatraceHTTP{}
				items.OutputDynatraceHTTP.ActiveGateDomain = types.StringPointerValue(itemsItem.OutputDynatraceHTTP.ActiveGateDomain)
				if itemsItem.OutputDynatraceHTTP.AuthType != nil {
					items.OutputDynatraceHTTP.AuthType = types.StringValue(string(*itemsItem.OutputDynatraceHTTP.AuthType))
				} else {
					items.OutputDynatraceHTTP.AuthType = types.StringNull()
				}
				items.OutputDynatraceHTTP.Compress = types.BoolPointerValue(itemsItem.OutputDynatraceHTTP.Compress)
				items.OutputDynatraceHTTP.Concurrency = types.Float64PointerValue(itemsItem.OutputDynatraceHTTP.Concurrency)
				items.OutputDynatraceHTTP.Description = types.StringPointerValue(itemsItem.OutputDynatraceHTTP.Description)
				if itemsItem.OutputDynatraceHTTP.Endpoint != nil {
					items.OutputDynatraceHTTP.Endpoint = types.StringValue(string(*itemsItem.OutputDynatraceHTTP.Endpoint))
				} else {
					items.OutputDynatraceHTTP.Endpoint = types.StringNull()
				}
				items.OutputDynatraceHTTP.Environment = types.StringPointerValue(itemsItem.OutputDynatraceHTTP.Environment)
				items.OutputDynatraceHTTP.EnvironmentID = types.StringPointerValue(itemsItem.OutputDynatraceHTTP.EnvironmentID)
				items.OutputDynatraceHTTP.ExtraHTTPHeaders = []tfTypes.OutputDynatraceHTTPExtraHTTPHeader{}

				for _, extraHTTPHeadersItem6 := range itemsItem.OutputDynatraceHTTP.ExtraHTTPHeaders {
					var extraHTTPHeaders6 tfTypes.OutputDynatraceHTTPExtraHTTPHeader

					extraHTTPHeaders6.Name = types.StringPointerValue(extraHTTPHeadersItem6.Name)
					extraHTTPHeaders6.Value = types.StringValue(extraHTTPHeadersItem6.Value)

					items.OutputDynatraceHTTP.ExtraHTTPHeaders = append(items.OutputDynatraceHTTP.ExtraHTTPHeaders, extraHTTPHeaders6)
				}
				if itemsItem.OutputDynatraceHTTP.FailedRequestLoggingMode != nil {
					items.OutputDynatraceHTTP.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputDynatraceHTTP.FailedRequestLoggingMode))
				} else {
					items.OutputDynatraceHTTP.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputDynatraceHTTP.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputDynatraceHTTP.FlushPeriodSec)
				if itemsItem.OutputDynatraceHTTP.Format != nil {
					items.OutputDynatraceHTTP.Format = types.StringValue(string(*itemsItem.OutputDynatraceHTTP.Format))
				} else {
					items.OutputDynatraceHTTP.Format = types.StringNull()
				}
				items.OutputDynatraceHTTP.ID = types.StringPointerValue(itemsItem.OutputDynatraceHTTP.ID)
				items.OutputDynatraceHTTP.KeepAlive = types.BoolPointerValue(itemsItem.OutputDynatraceHTTP.KeepAlive)
				items.OutputDynatraceHTTP.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputDynatraceHTTP.MaxPayloadEvents)
				items.OutputDynatraceHTTP.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputDynatraceHTTP.MaxPayloadSizeKB)
				if itemsItem.OutputDynatraceHTTP.Method != nil {
					items.OutputDynatraceHTTP.Method = types.StringValue(string(*itemsItem.OutputDynatraceHTTP.Method))
				} else {
					items.OutputDynatraceHTTP.Method = types.StringNull()
				}
				if itemsItem.OutputDynatraceHTTP.OnBackpressure != nil {
					items.OutputDynatraceHTTP.OnBackpressure = types.StringValue(string(*itemsItem.OutputDynatraceHTTP.OnBackpressure))
				} else {
					items.OutputDynatraceHTTP.OnBackpressure = types.StringNull()
				}
				items.OutputDynatraceHTTP.Pipeline = types.StringPointerValue(itemsItem.OutputDynatraceHTTP.Pipeline)
				if itemsItem.OutputDynatraceHTTP.PqCompress != nil {
					items.OutputDynatraceHTTP.PqCompress = types.StringValue(string(*itemsItem.OutputDynatraceHTTP.PqCompress))
				} else {
					items.OutputDynatraceHTTP.PqCompress = types.StringNull()
				}
				if itemsItem.OutputDynatraceHTTP.PqControls == nil {
					items.OutputDynatraceHTTP.PqControls = nil
				} else {
					items.OutputDynatraceHTTP.PqControls = &tfTypes.OutputDynatraceHTTPPqControls{}
				}
				items.OutputDynatraceHTTP.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputDynatraceHTTP.PqMaxFileSize)
				items.OutputDynatraceHTTP.PqMaxSize = types.StringPointerValue(itemsItem.OutputDynatraceHTTP.PqMaxSize)
				if itemsItem.OutputDynatraceHTTP.PqMode != nil {
					items.OutputDynatraceHTTP.PqMode = types.StringValue(string(*itemsItem.OutputDynatraceHTTP.PqMode))
				} else {
					items.OutputDynatraceHTTP.PqMode = types.StringNull()
				}
				if itemsItem.OutputDynatraceHTTP.PqOnBackpressure != nil {
					items.OutputDynatraceHTTP.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputDynatraceHTTP.PqOnBackpressure))
				} else {
					items.OutputDynatraceHTTP.PqOnBackpressure = types.StringNull()
				}
				items.OutputDynatraceHTTP.PqPath = types.StringPointerValue(itemsItem.OutputDynatraceHTTP.PqPath)
				items.OutputDynatraceHTTP.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputDynatraceHTTP.RejectUnauthorized)
				items.OutputDynatraceHTTP.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputDynatraceHTTP.ResponseHonorRetryAfterHeader)
				items.OutputDynatraceHTTP.ResponseRetrySettings = []tfTypes.OutputDynatraceHTTPResponseRetrySetting{}

				for _, responseRetrySettingsItem7 := range itemsItem.OutputDynatraceHTTP.ResponseRetrySettings {
					var responseRetrySettings7 tfTypes.OutputDynatraceHTTPResponseRetrySetting

					responseRetrySettings7.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem7.BackoffRate)
					responseRetrySettings7.HTTPStatus = types.Float64Value(responseRetrySettingsItem7.HTTPStatus)
					responseRetrySettings7.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem7.InitialBackoff)
					responseRetrySettings7.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem7.MaxBackoff)

					items.OutputDynatraceHTTP.ResponseRetrySettings = append(items.OutputDynatraceHTTP.ResponseRetrySettings, responseRetrySettings7)
				}
				items.OutputDynatraceHTTP.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputDynatraceHTTP.SafeHeaders))
				for _, v := range itemsItem.OutputDynatraceHTTP.SafeHeaders {
					items.OutputDynatraceHTTP.SafeHeaders = append(items.OutputDynatraceHTTP.SafeHeaders, types.StringValue(v))
				}
				items.OutputDynatraceHTTP.Streamtags = make([]types.String, 0, len(itemsItem.OutputDynatraceHTTP.Streamtags))
				for _, v := range itemsItem.OutputDynatraceHTTP.Streamtags {
					items.OutputDynatraceHTTP.Streamtags = append(items.OutputDynatraceHTTP.Streamtags, types.StringValue(v))
				}
				items.OutputDynatraceHTTP.SystemFields = make([]types.String, 0, len(itemsItem.OutputDynatraceHTTP.SystemFields))
				for _, v := range itemsItem.OutputDynatraceHTTP.SystemFields {
					items.OutputDynatraceHTTP.SystemFields = append(items.OutputDynatraceHTTP.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputDynatraceHTTP.TelemetryType != nil {
					items.OutputDynatraceHTTP.TelemetryType = types.StringValue(string(*itemsItem.OutputDynatraceHTTP.TelemetryType))
				} else {
					items.OutputDynatraceHTTP.TelemetryType = types.StringNull()
				}
				items.OutputDynatraceHTTP.TextSecret = types.StringPointerValue(itemsItem.OutputDynatraceHTTP.TextSecret)
				if itemsItem.OutputDynatraceHTTP.TimeoutRetrySettings == nil {
					items.OutputDynatraceHTTP.TimeoutRetrySettings = nil
				} else {
					items.OutputDynatraceHTTP.TimeoutRetrySettings = &tfTypes.OutputDynatraceHTTPTimeoutRetrySettings{}
					items.OutputDynatraceHTTP.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputDynatraceHTTP.TimeoutRetrySettings.BackoffRate)
					items.OutputDynatraceHTTP.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputDynatraceHTTP.TimeoutRetrySettings.InitialBackoff)
					items.OutputDynatraceHTTP.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputDynatraceHTTP.TimeoutRetrySettings.MaxBackoff)
					items.OutputDynatraceHTTP.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputDynatraceHTTP.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputDynatraceHTTP.TimeoutSec = types.Float64PointerValue(itemsItem.OutputDynatraceHTTP.TimeoutSec)
				items.OutputDynatraceHTTP.Token = types.StringPointerValue(itemsItem.OutputDynatraceHTTP.Token)
				items.OutputDynatraceHTTP.TotalMemoryLimitKB = types.Float64PointerValue(itemsItem.OutputDynatraceHTTP.TotalMemoryLimitKB)
				if itemsItem.OutputDynatraceHTTP.Type != nil {
					items.OutputDynatraceHTTP.Type = types.StringValue(string(*itemsItem.OutputDynatraceHTTP.Type))
				} else {
					items.OutputDynatraceHTTP.Type = types.StringNull()
				}
				items.OutputDynatraceHTTP.URL = types.StringPointerValue(itemsItem.OutputDynatraceHTTP.URL)
				items.OutputDynatraceHTTP.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputDynatraceHTTP.UseRoundRobinDNS)
			}
			if itemsItem.OutputDynatraceOtlp != nil {
				items.OutputDynatraceOtlp = &tfTypes.OutputDynatraceOtlp{}
				items.OutputDynatraceOtlp.AuthTokenName = types.StringPointerValue(itemsItem.OutputDynatraceOtlp.AuthTokenName)
				if itemsItem.OutputDynatraceOtlp.Compress != nil {
					items.OutputDynatraceOtlp.Compress = types.StringValue(string(*itemsItem.OutputDynatraceOtlp.Compress))
				} else {
					items.OutputDynatraceOtlp.Compress = types.StringNull()
				}
				items.OutputDynatraceOtlp.Concurrency = types.Float64PointerValue(itemsItem.OutputDynatraceOtlp.Concurrency)
				items.OutputDynatraceOtlp.ConnectionTimeout = types.Float64PointerValue(itemsItem.OutputDynatraceOtlp.ConnectionTimeout)
				items.OutputDynatraceOtlp.Description = types.StringPointerValue(itemsItem.OutputDynatraceOtlp.Description)
				items.OutputDynatraceOtlp.Endpoint = types.StringPointerValue(itemsItem.OutputDynatraceOtlp.Endpoint)
				if itemsItem.OutputDynatraceOtlp.EndpointType != nil {
					items.OutputDynatraceOtlp.EndpointType = types.StringValue(string(*itemsItem.OutputDynatraceOtlp.EndpointType))
				} else {
					items.OutputDynatraceOtlp.EndpointType = types.StringNull()
				}
				items.OutputDynatraceOtlp.Environment = types.StringPointerValue(itemsItem.OutputDynatraceOtlp.Environment)
				items.OutputDynatraceOtlp.ExtraHTTPHeaders = []tfTypes.OutputDynatraceOtlpExtraHTTPHeader{}

				for _, extraHTTPHeadersItem7 := range itemsItem.OutputDynatraceOtlp.ExtraHTTPHeaders {
					var extraHTTPHeaders7 tfTypes.OutputDynatraceOtlpExtraHTTPHeader

					extraHTTPHeaders7.Name = types.StringPointerValue(extraHTTPHeadersItem7.Name)
					extraHTTPHeaders7.Value = types.StringValue(extraHTTPHeadersItem7.Value)

					items.OutputDynatraceOtlp.ExtraHTTPHeaders = append(items.OutputDynatraceOtlp.ExtraHTTPHeaders, extraHTTPHeaders7)
				}
				if itemsItem.OutputDynatraceOtlp.FailedRequestLoggingMode != nil {
					items.OutputDynatraceOtlp.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputDynatraceOtlp.FailedRequestLoggingMode))
				} else {
					items.OutputDynatraceOtlp.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputDynatraceOtlp.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputDynatraceOtlp.FlushPeriodSec)
				if itemsItem.OutputDynatraceOtlp.HTTPCompress != nil {
					items.OutputDynatraceOtlp.HTTPCompress = types.StringValue(string(*itemsItem.OutputDynatraceOtlp.HTTPCompress))
				} else {
					items.OutputDynatraceOtlp.HTTPCompress = types.StringNull()
				}
				items.OutputDynatraceOtlp.HTTPLogsEndpointOverride = types.StringPointerValue(itemsItem.OutputDynatraceOtlp.HTTPLogsEndpointOverride)
				items.OutputDynatraceOtlp.HTTPMetricsEndpointOverride = types.StringPointerValue(itemsItem.OutputDynatraceOtlp.HTTPMetricsEndpointOverride)
				items.OutputDynatraceOtlp.HTTPTracesEndpointOverride = types.StringPointerValue(itemsItem.OutputDynatraceOtlp.HTTPTracesEndpointOverride)
				items.OutputDynatraceOtlp.ID = types.StringPointerValue(itemsItem.OutputDynatraceOtlp.ID)
				items.OutputDynatraceOtlp.KeepAlive = types.BoolPointerValue(itemsItem.OutputDynatraceOtlp.KeepAlive)
				items.OutputDynatraceOtlp.KeepAliveTime = types.Float64PointerValue(itemsItem.OutputDynatraceOtlp.KeepAliveTime)
				items.OutputDynatraceOtlp.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputDynatraceOtlp.MaxPayloadSizeKB)
				items.OutputDynatraceOtlp.Metadata = []tfTypes.OutputDynatraceOtlpMetadatum{}

				for _, metadataItem := range itemsItem.OutputDynatraceOtlp.Metadata {
					var metadata tfTypes.OutputDynatraceOtlpMetadatum

					metadata.Key = types.StringPointerValue(metadataItem.Key)
					metadata.Value = types.StringValue(metadataItem.Value)

					items.OutputDynatraceOtlp.Metadata = append(items.OutputDynatraceOtlp.Metadata, metadata)
				}
				if itemsItem.OutputDynatraceOtlp.OnBackpressure != nil {
					items.OutputDynatraceOtlp.OnBackpressure = types.StringValue(string(*itemsItem.OutputDynatraceOtlp.OnBackpressure))
				} else {
					items.OutputDynatraceOtlp.OnBackpressure = types.StringNull()
				}
				if itemsItem.OutputDynatraceOtlp.OtlpVersion != nil {
					items.OutputDynatraceOtlp.OtlpVersion = types.StringValue(string(*itemsItem.OutputDynatraceOtlp.OtlpVersion))
				} else {
					items.OutputDynatraceOtlp.OtlpVersion = types.StringNull()
				}
				items.OutputDynatraceOtlp.Pipeline = types.StringPointerValue(itemsItem.OutputDynatraceOtlp.Pipeline)
				if itemsItem.OutputDynatraceOtlp.PqCompress != nil {
					items.OutputDynatraceOtlp.PqCompress = types.StringValue(string(*itemsItem.OutputDynatraceOtlp.PqCompress))
				} else {
					items.OutputDynatraceOtlp.PqCompress = types.StringNull()
				}
				if itemsItem.OutputDynatraceOtlp.PqControls == nil {
					items.OutputDynatraceOtlp.PqControls = nil
				} else {
					items.OutputDynatraceOtlp.PqControls = &tfTypes.OutputDynatraceOtlpPqControls{}
				}
				items.OutputDynatraceOtlp.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputDynatraceOtlp.PqMaxFileSize)
				items.OutputDynatraceOtlp.PqMaxSize = types.StringPointerValue(itemsItem.OutputDynatraceOtlp.PqMaxSize)
				if itemsItem.OutputDynatraceOtlp.PqMode != nil {
					items.OutputDynatraceOtlp.PqMode = types.StringValue(string(*itemsItem.OutputDynatraceOtlp.PqMode))
				} else {
					items.OutputDynatraceOtlp.PqMode = types.StringNull()
				}
				if itemsItem.OutputDynatraceOtlp.PqOnBackpressure != nil {
					items.OutputDynatraceOtlp.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputDynatraceOtlp.PqOnBackpressure))
				} else {
					items.OutputDynatraceOtlp.PqOnBackpressure = types.StringNull()
				}
				items.OutputDynatraceOtlp.PqPath = types.StringPointerValue(itemsItem.OutputDynatraceOtlp.PqPath)
				if itemsItem.OutputDynatraceOtlp.Protocol != nil {
					items.OutputDynatraceOtlp.Protocol = types.StringValue(string(*itemsItem.OutputDynatraceOtlp.Protocol))
				} else {
					items.OutputDynatraceOtlp.Protocol = types.StringNull()
				}
				items.OutputDynatraceOtlp.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputDynatraceOtlp.RejectUnauthorized)
				items.OutputDynatraceOtlp.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputDynatraceOtlp.ResponseHonorRetryAfterHeader)
				items.OutputDynatraceOtlp.ResponseRetrySettings = []tfTypes.OutputDynatraceOtlpResponseRetrySetting{}

				for _, responseRetrySettingsItem8 := range itemsItem.OutputDynatraceOtlp.ResponseRetrySettings {
					var responseRetrySettings8 tfTypes.OutputDynatraceOtlpResponseRetrySetting

					responseRetrySettings8.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem8.BackoffRate)
					responseRetrySettings8.HTTPStatus = types.Float64Value(responseRetrySettingsItem8.HTTPStatus)
					responseRetrySettings8.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem8.InitialBackoff)
					responseRetrySettings8.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem8.MaxBackoff)

					items.OutputDynatraceOtlp.ResponseRetrySettings = append(items.OutputDynatraceOtlp.ResponseRetrySettings, responseRetrySettings8)
				}
				items.OutputDynatraceOtlp.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputDynatraceOtlp.SafeHeaders))
				for _, v := range itemsItem.OutputDynatraceOtlp.SafeHeaders {
					items.OutputDynatraceOtlp.SafeHeaders = append(items.OutputDynatraceOtlp.SafeHeaders, types.StringValue(v))
				}
				items.OutputDynatraceOtlp.Streamtags = make([]types.String, 0, len(itemsItem.OutputDynatraceOtlp.Streamtags))
				for _, v := range itemsItem.OutputDynatraceOtlp.Streamtags {
					items.OutputDynatraceOtlp.Streamtags = append(items.OutputDynatraceOtlp.Streamtags, types.StringValue(v))
				}
				items.OutputDynatraceOtlp.SystemFields = make([]types.String, 0, len(itemsItem.OutputDynatraceOtlp.SystemFields))
				for _, v := range itemsItem.OutputDynatraceOtlp.SystemFields {
					items.OutputDynatraceOtlp.SystemFields = append(items.OutputDynatraceOtlp.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputDynatraceOtlp.TimeoutRetrySettings == nil {
					items.OutputDynatraceOtlp.TimeoutRetrySettings = nil
				} else {
					items.OutputDynatraceOtlp.TimeoutRetrySettings = &tfTypes.OutputDynatraceOtlpTimeoutRetrySettings{}
					items.OutputDynatraceOtlp.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputDynatraceOtlp.TimeoutRetrySettings.BackoffRate)
					items.OutputDynatraceOtlp.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputDynatraceOtlp.TimeoutRetrySettings.InitialBackoff)
					items.OutputDynatraceOtlp.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputDynatraceOtlp.TimeoutRetrySettings.MaxBackoff)
					items.OutputDynatraceOtlp.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputDynatraceOtlp.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputDynatraceOtlp.TimeoutSec = types.Float64PointerValue(itemsItem.OutputDynatraceOtlp.TimeoutSec)
				items.OutputDynatraceOtlp.TokenSecret = types.StringValue(itemsItem.OutputDynatraceOtlp.TokenSecret)
				if itemsItem.OutputDynatraceOtlp.Type != nil {
					items.OutputDynatraceOtlp.Type = types.StringValue(string(*itemsItem.OutputDynatraceOtlp.Type))
				} else {
					items.OutputDynatraceOtlp.Type = types.StringNull()
				}
				items.OutputDynatraceOtlp.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputDynatraceOtlp.UseRoundRobinDNS)
			}
			if itemsItem.OutputElastic != nil {
				items.OutputElastic = &tfTypes.OutputElastic{}
				if itemsItem.OutputElastic.Auth == nil {
					items.OutputElastic.Auth = nil
				} else {
					items.OutputElastic.Auth = &tfTypes.OutputElasticAuth{}
					if itemsItem.OutputElastic.Auth.AuthType != nil {
						items.OutputElastic.Auth.AuthType = types.StringValue(string(*itemsItem.OutputElastic.Auth.AuthType))
					} else {
						items.OutputElastic.Auth.AuthType = types.StringNull()
					}
					items.OutputElastic.Auth.Disabled = types.BoolPointerValue(itemsItem.OutputElastic.Auth.Disabled)
				}
				items.OutputElastic.Compress = types.BoolPointerValue(itemsItem.OutputElastic.Compress)
				items.OutputElastic.Concurrency = types.Float64PointerValue(itemsItem.OutputElastic.Concurrency)
				items.OutputElastic.Description = types.StringPointerValue(itemsItem.OutputElastic.Description)
				items.OutputElastic.DNSResolvePeriodSec = types.Float64PointerValue(itemsItem.OutputElastic.DNSResolvePeriodSec)
				items.OutputElastic.DocType = types.StringPointerValue(itemsItem.OutputElastic.DocType)
				items.OutputElastic.ElasticPipeline = types.StringPointerValue(itemsItem.OutputElastic.ElasticPipeline)
				if itemsItem.OutputElastic.ElasticVersion != nil {
					items.OutputElastic.ElasticVersion = types.StringValue(string(*itemsItem.OutputElastic.ElasticVersion))
				} else {
					items.OutputElastic.ElasticVersion = types.StringNull()
				}
				items.OutputElastic.Environment = types.StringPointerValue(itemsItem.OutputElastic.Environment)
				items.OutputElastic.ExcludeSelf = types.BoolPointerValue(itemsItem.OutputElastic.ExcludeSelf)
				items.OutputElastic.ExtraHTTPHeaders = []tfTypes.OutputElasticExtraHTTPHeader{}

				for _, extraHTTPHeadersItem8 := range itemsItem.OutputElastic.ExtraHTTPHeaders {
					var extraHTTPHeaders8 tfTypes.OutputElasticExtraHTTPHeader

					extraHTTPHeaders8.Name = types.StringPointerValue(extraHTTPHeadersItem8.Name)
					extraHTTPHeaders8.Value = types.StringValue(extraHTTPHeadersItem8.Value)

					items.OutputElastic.ExtraHTTPHeaders = append(items.OutputElastic.ExtraHTTPHeaders, extraHTTPHeaders8)
				}
				items.OutputElastic.ExtraParams = []tfTypes.OutputElasticExtraParam{}

				for _, extraParamsItem := range itemsItem.OutputElastic.ExtraParams {
					var extraParams tfTypes.OutputElasticExtraParam

					extraParams.Name = types.StringValue(extraParamsItem.Name)
					extraParams.Value = types.StringValue(extraParamsItem.Value)

					items.OutputElastic.ExtraParams = append(items.OutputElastic.ExtraParams, extraParams)
				}
				if itemsItem.OutputElastic.FailedRequestLoggingMode != nil {
					items.OutputElastic.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputElastic.FailedRequestLoggingMode))
				} else {
					items.OutputElastic.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputElastic.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputElastic.FlushPeriodSec)
				items.OutputElastic.ID = types.StringPointerValue(itemsItem.OutputElastic.ID)
				items.OutputElastic.IncludeDocID = types.BoolPointerValue(itemsItem.OutputElastic.IncludeDocID)
				items.OutputElastic.Index = types.StringValue(itemsItem.OutputElastic.Index)
				items.OutputElastic.LoadBalanced = types.BoolPointerValue(itemsItem.OutputElastic.LoadBalanced)
				items.OutputElastic.LoadBalanceStatsPeriodSec = types.Float64PointerValue(itemsItem.OutputElastic.LoadBalanceStatsPeriodSec)
				items.OutputElastic.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputElastic.MaxPayloadEvents)
				items.OutputElastic.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputElastic.MaxPayloadSizeKB)
				if itemsItem.OutputElastic.OnBackpressure != nil {
					items.OutputElastic.OnBackpressure = types.StringValue(string(*itemsItem.OutputElastic.OnBackpressure))
				} else {
					items.OutputElastic.OnBackpressure = types.StringNull()
				}
				items.OutputElastic.Pipeline = types.StringPointerValue(itemsItem.OutputElastic.Pipeline)
				if itemsItem.OutputElastic.PqCompress != nil {
					items.OutputElastic.PqCompress = types.StringValue(string(*itemsItem.OutputElastic.PqCompress))
				} else {
					items.OutputElastic.PqCompress = types.StringNull()
				}
				if itemsItem.OutputElastic.PqControls == nil {
					items.OutputElastic.PqControls = nil
				} else {
					items.OutputElastic.PqControls = &tfTypes.OutputElasticPqControls{}
				}
				items.OutputElastic.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputElastic.PqMaxFileSize)
				items.OutputElastic.PqMaxSize = types.StringPointerValue(itemsItem.OutputElastic.PqMaxSize)
				if itemsItem.OutputElastic.PqMode != nil {
					items.OutputElastic.PqMode = types.StringValue(string(*itemsItem.OutputElastic.PqMode))
				} else {
					items.OutputElastic.PqMode = types.StringNull()
				}
				if itemsItem.OutputElastic.PqOnBackpressure != nil {
					items.OutputElastic.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputElastic.PqOnBackpressure))
				} else {
					items.OutputElastic.PqOnBackpressure = types.StringNull()
				}
				items.OutputElastic.PqPath = types.StringPointerValue(itemsItem.OutputElastic.PqPath)
				items.OutputElastic.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputElastic.RejectUnauthorized)
				items.OutputElastic.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputElastic.ResponseHonorRetryAfterHeader)
				items.OutputElastic.ResponseRetrySettings = []tfTypes.OutputElasticResponseRetrySetting{}

				for _, responseRetrySettingsItem9 := range itemsItem.OutputElastic.ResponseRetrySettings {
					var responseRetrySettings9 tfTypes.OutputElasticResponseRetrySetting

					responseRetrySettings9.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem9.BackoffRate)
					responseRetrySettings9.HTTPStatus = types.Float64Value(responseRetrySettingsItem9.HTTPStatus)
					responseRetrySettings9.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem9.InitialBackoff)
					responseRetrySettings9.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem9.MaxBackoff)

					items.OutputElastic.ResponseRetrySettings = append(items.OutputElastic.ResponseRetrySettings, responseRetrySettings9)
				}
				items.OutputElastic.RetryPartialErrors = types.BoolPointerValue(itemsItem.OutputElastic.RetryPartialErrors)
				items.OutputElastic.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputElastic.SafeHeaders))
				for _, v := range itemsItem.OutputElastic.SafeHeaders {
					items.OutputElastic.SafeHeaders = append(items.OutputElastic.SafeHeaders, types.StringValue(v))
				}
				items.OutputElastic.Streamtags = make([]types.String, 0, len(itemsItem.OutputElastic.Streamtags))
				for _, v := range itemsItem.OutputElastic.Streamtags {
					items.OutputElastic.Streamtags = append(items.OutputElastic.Streamtags, types.StringValue(v))
				}
				items.OutputElastic.SystemFields = make([]types.String, 0, len(itemsItem.OutputElastic.SystemFields))
				for _, v := range itemsItem.OutputElastic.SystemFields {
					items.OutputElastic.SystemFields = append(items.OutputElastic.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputElastic.TimeoutRetrySettings == nil {
					items.OutputElastic.TimeoutRetrySettings = nil
				} else {
					items.OutputElastic.TimeoutRetrySettings = &tfTypes.OutputElasticTimeoutRetrySettings{}
					items.OutputElastic.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputElastic.TimeoutRetrySettings.BackoffRate)
					items.OutputElastic.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputElastic.TimeoutRetrySettings.InitialBackoff)
					items.OutputElastic.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputElastic.TimeoutRetrySettings.MaxBackoff)
					items.OutputElastic.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputElastic.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputElastic.TimeoutSec = types.Float64PointerValue(itemsItem.OutputElastic.TimeoutSec)
				items.OutputElastic.Type = types.StringValue(string(itemsItem.OutputElastic.Type))
				items.OutputElastic.URL = types.StringPointerValue(itemsItem.OutputElastic.URL)
				items.OutputElastic.Urls = []tfTypes.OutputElasticURL{}

				for _, urlsItem1 := range itemsItem.OutputElastic.Urls {
					var urls1 tfTypes.OutputElasticURL

					urls1.URL = types.StringValue(urlsItem1.URL)
					urls1.Weight = types.Float64PointerValue(urlsItem1.Weight)

					items.OutputElastic.Urls = append(items.OutputElastic.Urls, urls1)
				}
				items.OutputElastic.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputElastic.UseRoundRobinDNS)
				if itemsItem.OutputElastic.WriteAction != nil {
					items.OutputElastic.WriteAction = types.StringValue(string(*itemsItem.OutputElastic.WriteAction))
				} else {
					items.OutputElastic.WriteAction = types.StringNull()
				}
			}
			if itemsItem.OutputElasticCloud != nil {
				items.OutputElasticCloud = &tfTypes.OutputElasticCloud{}
				if itemsItem.OutputElasticCloud.Auth == nil {
					items.OutputElasticCloud.Auth = nil
				} else {
					items.OutputElasticCloud.Auth = &tfTypes.OutputElasticCloudAuth{}
					if itemsItem.OutputElasticCloud.Auth.AuthType != nil {
						items.OutputElasticCloud.Auth.AuthType = types.StringValue(string(*itemsItem.OutputElasticCloud.Auth.AuthType))
					} else {
						items.OutputElasticCloud.Auth.AuthType = types.StringNull()
					}
					items.OutputElasticCloud.Auth.Disabled = types.BoolPointerValue(itemsItem.OutputElasticCloud.Auth.Disabled)
				}
				items.OutputElasticCloud.Compress = types.BoolPointerValue(itemsItem.OutputElasticCloud.Compress)
				items.OutputElasticCloud.Concurrency = types.Float64PointerValue(itemsItem.OutputElasticCloud.Concurrency)
				items.OutputElasticCloud.Description = types.StringPointerValue(itemsItem.OutputElasticCloud.Description)
				items.OutputElasticCloud.ElasticPipeline = types.StringPointerValue(itemsItem.OutputElasticCloud.ElasticPipeline)
				items.OutputElasticCloud.Environment = types.StringPointerValue(itemsItem.OutputElasticCloud.Environment)
				items.OutputElasticCloud.ExtraHTTPHeaders = []tfTypes.OutputElasticCloudExtraHTTPHeader{}

				for _, extraHTTPHeadersItem9 := range itemsItem.OutputElasticCloud.ExtraHTTPHeaders {
					var extraHTTPHeaders9 tfTypes.OutputElasticCloudExtraHTTPHeader

					extraHTTPHeaders9.Name = types.StringPointerValue(extraHTTPHeadersItem9.Name)
					extraHTTPHeaders9.Value = types.StringValue(extraHTTPHeadersItem9.Value)

					items.OutputElasticCloud.ExtraHTTPHeaders = append(items.OutputElasticCloud.ExtraHTTPHeaders, extraHTTPHeaders9)
				}
				items.OutputElasticCloud.ExtraParams = []tfTypes.OutputElasticCloudExtraParam{}

				for _, extraParamsItem1 := range itemsItem.OutputElasticCloud.ExtraParams {
					var extraParams1 tfTypes.OutputElasticCloudExtraParam

					extraParams1.Name = types.StringValue(extraParamsItem1.Name)
					extraParams1.Value = types.StringValue(extraParamsItem1.Value)

					items.OutputElasticCloud.ExtraParams = append(items.OutputElasticCloud.ExtraParams, extraParams1)
				}
				if itemsItem.OutputElasticCloud.FailedRequestLoggingMode != nil {
					items.OutputElasticCloud.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputElasticCloud.FailedRequestLoggingMode))
				} else {
					items.OutputElasticCloud.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputElasticCloud.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputElasticCloud.FlushPeriodSec)
				items.OutputElasticCloud.ID = types.StringPointerValue(itemsItem.OutputElasticCloud.ID)
				items.OutputElasticCloud.IncludeDocID = types.BoolPointerValue(itemsItem.OutputElasticCloud.IncludeDocID)
				items.OutputElasticCloud.Index = types.StringValue(itemsItem.OutputElasticCloud.Index)
				items.OutputElasticCloud.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputElasticCloud.MaxPayloadEvents)
				items.OutputElasticCloud.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputElasticCloud.MaxPayloadSizeKB)
				if itemsItem.OutputElasticCloud.OnBackpressure != nil {
					items.OutputElasticCloud.OnBackpressure = types.StringValue(string(*itemsItem.OutputElasticCloud.OnBackpressure))
				} else {
					items.OutputElasticCloud.OnBackpressure = types.StringNull()
				}
				items.OutputElasticCloud.Pipeline = types.StringPointerValue(itemsItem.OutputElasticCloud.Pipeline)
				if itemsItem.OutputElasticCloud.PqCompress != nil {
					items.OutputElasticCloud.PqCompress = types.StringValue(string(*itemsItem.OutputElasticCloud.PqCompress))
				} else {
					items.OutputElasticCloud.PqCompress = types.StringNull()
				}
				if itemsItem.OutputElasticCloud.PqControls == nil {
					items.OutputElasticCloud.PqControls = nil
				} else {
					items.OutputElasticCloud.PqControls = &tfTypes.OutputElasticCloudPqControls{}
				}
				items.OutputElasticCloud.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputElasticCloud.PqMaxFileSize)
				items.OutputElasticCloud.PqMaxSize = types.StringPointerValue(itemsItem.OutputElasticCloud.PqMaxSize)
				if itemsItem.OutputElasticCloud.PqMode != nil {
					items.OutputElasticCloud.PqMode = types.StringValue(string(*itemsItem.OutputElasticCloud.PqMode))
				} else {
					items.OutputElasticCloud.PqMode = types.StringNull()
				}
				if itemsItem.OutputElasticCloud.PqOnBackpressure != nil {
					items.OutputElasticCloud.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputElasticCloud.PqOnBackpressure))
				} else {
					items.OutputElasticCloud.PqOnBackpressure = types.StringNull()
				}
				items.OutputElasticCloud.PqPath = types.StringPointerValue(itemsItem.OutputElasticCloud.PqPath)
				items.OutputElasticCloud.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputElasticCloud.RejectUnauthorized)
				items.OutputElasticCloud.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputElasticCloud.ResponseHonorRetryAfterHeader)
				items.OutputElasticCloud.ResponseRetrySettings = []tfTypes.OutputElasticCloudResponseRetrySetting{}

				for _, responseRetrySettingsItem10 := range itemsItem.OutputElasticCloud.ResponseRetrySettings {
					var responseRetrySettings10 tfTypes.OutputElasticCloudResponseRetrySetting

					responseRetrySettings10.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem10.BackoffRate)
					responseRetrySettings10.HTTPStatus = types.Float64Value(responseRetrySettingsItem10.HTTPStatus)
					responseRetrySettings10.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem10.InitialBackoff)
					responseRetrySettings10.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem10.MaxBackoff)

					items.OutputElasticCloud.ResponseRetrySettings = append(items.OutputElasticCloud.ResponseRetrySettings, responseRetrySettings10)
				}
				items.OutputElasticCloud.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputElasticCloud.SafeHeaders))
				for _, v := range itemsItem.OutputElasticCloud.SafeHeaders {
					items.OutputElasticCloud.SafeHeaders = append(items.OutputElasticCloud.SafeHeaders, types.StringValue(v))
				}
				items.OutputElasticCloud.Streamtags = make([]types.String, 0, len(itemsItem.OutputElasticCloud.Streamtags))
				for _, v := range itemsItem.OutputElasticCloud.Streamtags {
					items.OutputElasticCloud.Streamtags = append(items.OutputElasticCloud.Streamtags, types.StringValue(v))
				}
				items.OutputElasticCloud.SystemFields = make([]types.String, 0, len(itemsItem.OutputElasticCloud.SystemFields))
				for _, v := range itemsItem.OutputElasticCloud.SystemFields {
					items.OutputElasticCloud.SystemFields = append(items.OutputElasticCloud.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputElasticCloud.TimeoutRetrySettings == nil {
					items.OutputElasticCloud.TimeoutRetrySettings = nil
				} else {
					items.OutputElasticCloud.TimeoutRetrySettings = &tfTypes.OutputElasticCloudTimeoutRetrySettings{}
					items.OutputElasticCloud.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputElasticCloud.TimeoutRetrySettings.BackoffRate)
					items.OutputElasticCloud.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputElasticCloud.TimeoutRetrySettings.InitialBackoff)
					items.OutputElasticCloud.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputElasticCloud.TimeoutRetrySettings.MaxBackoff)
					items.OutputElasticCloud.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputElasticCloud.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputElasticCloud.TimeoutSec = types.Float64PointerValue(itemsItem.OutputElasticCloud.TimeoutSec)
				if itemsItem.OutputElasticCloud.Type != nil {
					items.OutputElasticCloud.Type = types.StringValue(string(*itemsItem.OutputElasticCloud.Type))
				} else {
					items.OutputElasticCloud.Type = types.StringNull()
				}
				items.OutputElasticCloud.URL = types.StringValue(itemsItem.OutputElasticCloud.URL)
			}
			if itemsItem.OutputExabeam != nil {
				items.OutputExabeam = &tfTypes.OutputExabeam{}
				items.OutputExabeam.AddIDToStagePath = types.BoolPointerValue(itemsItem.OutputExabeam.AddIDToStagePath)
				items.OutputExabeam.AwsAPIKey = types.StringPointerValue(itemsItem.OutputExabeam.AwsAPIKey)
				items.OutputExabeam.AwsSecretKey = types.StringPointerValue(itemsItem.OutputExabeam.AwsSecretKey)
				items.OutputExabeam.Bucket = types.StringValue(itemsItem.OutputExabeam.Bucket)
				items.OutputExabeam.CollectorInstanceID = types.StringValue(itemsItem.OutputExabeam.CollectorInstanceID)
				items.OutputExabeam.DeadletterEnabled = types.BoolPointerValue(itemsItem.OutputExabeam.DeadletterEnabled)
				items.OutputExabeam.DeadletterPath = types.StringPointerValue(itemsItem.OutputExabeam.DeadletterPath)
				items.OutputExabeam.Description = types.StringPointerValue(itemsItem.OutputExabeam.Description)
				items.OutputExabeam.EmptyDirCleanupSec = types.Float64PointerValue(itemsItem.OutputExabeam.EmptyDirCleanupSec)
				items.OutputExabeam.EncodedConfiguration = types.StringPointerValue(itemsItem.OutputExabeam.EncodedConfiguration)
				items.OutputExabeam.Endpoint = types.StringPointerValue(itemsItem.OutputExabeam.Endpoint)
				items.OutputExabeam.Environment = types.StringPointerValue(itemsItem.OutputExabeam.Environment)
				items.OutputExabeam.ID = types.StringPointerValue(itemsItem.OutputExabeam.ID)
				items.OutputExabeam.MaxFileIdleTimeSec = types.Float64PointerValue(itemsItem.OutputExabeam.MaxFileIdleTimeSec)
				items.OutputExabeam.MaxFileOpenTimeSec = types.Float64PointerValue(itemsItem.OutputExabeam.MaxFileOpenTimeSec)
				items.OutputExabeam.MaxFileSizeMB = types.Float64PointerValue(itemsItem.OutputExabeam.MaxFileSizeMB)
				items.OutputExabeam.MaxOpenFiles = types.Float64PointerValue(itemsItem.OutputExabeam.MaxOpenFiles)
				items.OutputExabeam.MaxRetryNum = types.Float64PointerValue(itemsItem.OutputExabeam.MaxRetryNum)
				if itemsItem.OutputExabeam.ObjectACL != nil {
					items.OutputExabeam.ObjectACL = types.StringValue(string(*itemsItem.OutputExabeam.ObjectACL))
				} else {
					items.OutputExabeam.ObjectACL = types.StringNull()
				}
				if itemsItem.OutputExabeam.OnBackpressure != nil {
					items.OutputExabeam.OnBackpressure = types.StringValue(string(*itemsItem.OutputExabeam.OnBackpressure))
				} else {
					items.OutputExabeam.OnBackpressure = types.StringNull()
				}
				if itemsItem.OutputExabeam.OnDiskFullBackpressure != nil {
					items.OutputExabeam.OnDiskFullBackpressure = types.StringValue(string(*itemsItem.OutputExabeam.OnDiskFullBackpressure))
				} else {
					items.OutputExabeam.OnDiskFullBackpressure = types.StringNull()
				}
				items.OutputExabeam.Pipeline = types.StringPointerValue(itemsItem.OutputExabeam.Pipeline)
				items.OutputExabeam.Region = types.StringValue(itemsItem.OutputExabeam.Region)
				items.OutputExabeam.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputExabeam.RejectUnauthorized)
				items.OutputExabeam.RemoveEmptyDirs = types.BoolPointerValue(itemsItem.OutputExabeam.RemoveEmptyDirs)
				items.OutputExabeam.ReuseConnections = types.BoolPointerValue(itemsItem.OutputExabeam.ReuseConnections)
				if itemsItem.OutputExabeam.SignatureVersion != nil {
					items.OutputExabeam.SignatureVersion = types.StringValue(string(*itemsItem.OutputExabeam.SignatureVersion))
				} else {
					items.OutputExabeam.SignatureVersion = types.StringNull()
				}
				items.OutputExabeam.SiteID = types.StringPointerValue(itemsItem.OutputExabeam.SiteID)
				items.OutputExabeam.SiteName = types.StringPointerValue(itemsItem.OutputExabeam.SiteName)
				items.OutputExabeam.StagePath = types.StringPointerValue(itemsItem.OutputExabeam.StagePath)
				if itemsItem.OutputExabeam.StorageClass != nil {
					items.OutputExabeam.StorageClass = types.StringValue(string(*itemsItem.OutputExabeam.StorageClass))
				} else {
					items.OutputExabeam.StorageClass = types.StringNull()
				}
				items.OutputExabeam.Streamtags = make([]types.String, 0, len(itemsItem.OutputExabeam.Streamtags))
				for _, v := range itemsItem.OutputExabeam.Streamtags {
					items.OutputExabeam.Streamtags = append(items.OutputExabeam.Streamtags, types.StringValue(v))
				}
				items.OutputExabeam.SystemFields = make([]types.String, 0, len(itemsItem.OutputExabeam.SystemFields))
				for _, v := range itemsItem.OutputExabeam.SystemFields {
					items.OutputExabeam.SystemFields = append(items.OutputExabeam.SystemFields, types.StringValue(v))
				}
				items.OutputExabeam.TimezoneOffset = types.StringPointerValue(itemsItem.OutputExabeam.TimezoneOffset)
				if itemsItem.OutputExabeam.Type != nil {
					items.OutputExabeam.Type = types.StringValue(string(*itemsItem.OutputExabeam.Type))
				} else {
					items.OutputExabeam.Type = types.StringNull()
				}
			}
			if itemsItem.OutputFilesystem != nil {
				items.OutputFilesystem = &tfTypes.OutputFilesystem{}
				items.OutputFilesystem.AddIDToStagePath = types.BoolPointerValue(itemsItem.OutputFilesystem.AddIDToStagePath)
				items.OutputFilesystem.AutomaticSchema = types.BoolPointerValue(itemsItem.OutputFilesystem.AutomaticSchema)
				items.OutputFilesystem.BaseFileName = types.StringPointerValue(itemsItem.OutputFilesystem.BaseFileName)
				if itemsItem.OutputFilesystem.Compress != nil {
					items.OutputFilesystem.Compress = types.StringValue(string(*itemsItem.OutputFilesystem.Compress))
				} else {
					items.OutputFilesystem.Compress = types.StringNull()
				}
				if itemsItem.OutputFilesystem.CompressionLevel != nil {
					items.OutputFilesystem.CompressionLevel = types.StringValue(string(*itemsItem.OutputFilesystem.CompressionLevel))
				} else {
					items.OutputFilesystem.CompressionLevel = types.StringNull()
				}
				items.OutputFilesystem.DeadletterEnabled = types.BoolPointerValue(itemsItem.OutputFilesystem.DeadletterEnabled)
				items.OutputFilesystem.DeadletterPath = types.StringPointerValue(itemsItem.OutputFilesystem.DeadletterPath)
				items.OutputFilesystem.Description = types.StringPointerValue(itemsItem.OutputFilesystem.Description)
				items.OutputFilesystem.DestPath = types.StringValue(itemsItem.OutputFilesystem.DestPath)
				items.OutputFilesystem.EmptyDirCleanupSec = types.Float64PointerValue(itemsItem.OutputFilesystem.EmptyDirCleanupSec)
				items.OutputFilesystem.EnablePageChecksum = types.BoolPointerValue(itemsItem.OutputFilesystem.EnablePageChecksum)
				items.OutputFilesystem.EnableStatistics = types.BoolPointerValue(itemsItem.OutputFilesystem.EnableStatistics)
				items.OutputFilesystem.EnableWritePageIndex = types.BoolPointerValue(itemsItem.OutputFilesystem.EnableWritePageIndex)
				items.OutputFilesystem.Environment = types.StringPointerValue(itemsItem.OutputFilesystem.Environment)
				items.OutputFilesystem.FileNameSuffix = types.StringPointerValue(itemsItem.OutputFilesystem.FileNameSuffix)
				if itemsItem.OutputFilesystem.Format != nil {
					items.OutputFilesystem.Format = types.StringValue(string(*itemsItem.OutputFilesystem.Format))
				} else {
					items.OutputFilesystem.Format = types.StringNull()
				}
				items.OutputFilesystem.HeaderLine = types.StringPointerValue(itemsItem.OutputFilesystem.HeaderLine)
				items.OutputFilesystem.ID = types.StringPointerValue(itemsItem.OutputFilesystem.ID)
				items.OutputFilesystem.KeyValueMetadata = []tfTypes.OutputFilesystemKeyValueMetadatum{}

				for _, keyValueMetadataItem2 := range itemsItem.OutputFilesystem.KeyValueMetadata {
					var keyValueMetadata2 tfTypes.OutputFilesystemKeyValueMetadatum

					keyValueMetadata2.Key = types.StringPointerValue(keyValueMetadataItem2.Key)
					keyValueMetadata2.Value = types.StringValue(keyValueMetadataItem2.Value)

					items.OutputFilesystem.KeyValueMetadata = append(items.OutputFilesystem.KeyValueMetadata, keyValueMetadata2)
				}
				items.OutputFilesystem.MaxFileIdleTimeSec = types.Float64PointerValue(itemsItem.OutputFilesystem.MaxFileIdleTimeSec)
				items.OutputFilesystem.MaxFileOpenTimeSec = types.Float64PointerValue(itemsItem.OutputFilesystem.MaxFileOpenTimeSec)
				items.OutputFilesystem.MaxFileSizeMB = types.Float64PointerValue(itemsItem.OutputFilesystem.MaxFileSizeMB)
				items.OutputFilesystem.MaxOpenFiles = types.Float64PointerValue(itemsItem.OutputFilesystem.MaxOpenFiles)
				items.OutputFilesystem.MaxRetryNum = types.Float64PointerValue(itemsItem.OutputFilesystem.MaxRetryNum)
				if itemsItem.OutputFilesystem.OnBackpressure != nil {
					items.OutputFilesystem.OnBackpressure = types.StringValue(string(*itemsItem.OutputFilesystem.OnBackpressure))
				} else {
					items.OutputFilesystem.OnBackpressure = types.StringNull()
				}
				if itemsItem.OutputFilesystem.OnDiskFullBackpressure != nil {
					items.OutputFilesystem.OnDiskFullBackpressure = types.StringValue(string(*itemsItem.OutputFilesystem.OnDiskFullBackpressure))
				} else {
					items.OutputFilesystem.OnDiskFullBackpressure = types.StringNull()
				}
				if itemsItem.OutputFilesystem.ParquetDataPageVersion != nil {
					items.OutputFilesystem.ParquetDataPageVersion = types.StringValue(string(*itemsItem.OutputFilesystem.ParquetDataPageVersion))
				} else {
					items.OutputFilesystem.ParquetDataPageVersion = types.StringNull()
				}
				items.OutputFilesystem.ParquetPageSize = types.StringPointerValue(itemsItem.OutputFilesystem.ParquetPageSize)
				items.OutputFilesystem.ParquetRowGroupLength = types.Float64PointerValue(itemsItem.OutputFilesystem.ParquetRowGroupLength)
				if itemsItem.OutputFilesystem.ParquetVersion != nil {
					items.OutputFilesystem.ParquetVersion = types.StringValue(string(*itemsItem.OutputFilesystem.ParquetVersion))
				} else {
					items.OutputFilesystem.ParquetVersion = types.StringNull()
				}
				items.OutputFilesystem.PartitionExpr = types.StringPointerValue(itemsItem.OutputFilesystem.PartitionExpr)
				items.OutputFilesystem.Pipeline = types.StringPointerValue(itemsItem.OutputFilesystem.Pipeline)
				items.OutputFilesystem.RemoveEmptyDirs = types.BoolPointerValue(itemsItem.OutputFilesystem.RemoveEmptyDirs)
				items.OutputFilesystem.ShouldLogInvalidRows = types.BoolPointerValue(itemsItem.OutputFilesystem.ShouldLogInvalidRows)
				items.OutputFilesystem.StagePath = types.StringPointerValue(itemsItem.OutputFilesystem.StagePath)
				items.OutputFilesystem.Streamtags = make([]types.String, 0, len(itemsItem.OutputFilesystem.Streamtags))
				for _, v := range itemsItem.OutputFilesystem.Streamtags {
					items.OutputFilesystem.Streamtags = append(items.OutputFilesystem.Streamtags, types.StringValue(v))
				}
				items.OutputFilesystem.SystemFields = make([]types.String, 0, len(itemsItem.OutputFilesystem.SystemFields))
				for _, v := range itemsItem.OutputFilesystem.SystemFields {
					items.OutputFilesystem.SystemFields = append(items.OutputFilesystem.SystemFields, types.StringValue(v))
				}
				items.OutputFilesystem.Type = types.StringValue(string(itemsItem.OutputFilesystem.Type))
				items.OutputFilesystem.WriteHighWaterMark = types.Float64PointerValue(itemsItem.OutputFilesystem.WriteHighWaterMark)
			}
			if itemsItem.OutputGoogleChronicle != nil {
				items.OutputGoogleChronicle = &tfTypes.OutputGoogleChronicle{}
				items.OutputGoogleChronicle.APIKey = types.StringPointerValue(itemsItem.OutputGoogleChronicle.APIKey)
				items.OutputGoogleChronicle.APIKeySecret = types.StringPointerValue(itemsItem.OutputGoogleChronicle.APIKeySecret)
				if itemsItem.OutputGoogleChronicle.APIVersion != nil {
					items.OutputGoogleChronicle.APIVersion = types.StringValue(string(*itemsItem.OutputGoogleChronicle.APIVersion))
				} else {
					items.OutputGoogleChronicle.APIVersion = types.StringNull()
				}
				if itemsItem.OutputGoogleChronicle.AuthenticationMethod != nil {
					items.OutputGoogleChronicle.AuthenticationMethod = types.StringValue(string(*itemsItem.OutputGoogleChronicle.AuthenticationMethod))
				} else {
					items.OutputGoogleChronicle.AuthenticationMethod = types.StringNull()
				}
				items.OutputGoogleChronicle.Compress = types.BoolPointerValue(itemsItem.OutputGoogleChronicle.Compress)
				items.OutputGoogleChronicle.Concurrency = types.Float64PointerValue(itemsItem.OutputGoogleChronicle.Concurrency)
				items.OutputGoogleChronicle.CustomerID = types.StringPointerValue(itemsItem.OutputGoogleChronicle.CustomerID)
				items.OutputGoogleChronicle.CustomLabels = []tfTypes.CustomLabel{}

				for _, customLabelsItem := range itemsItem.OutputGoogleChronicle.CustomLabels {
					var customLabels tfTypes.CustomLabel

					customLabels.Key = types.StringValue(customLabelsItem.Key)
					customLabels.Value = types.StringValue(customLabelsItem.Value)

					items.OutputGoogleChronicle.CustomLabels = append(items.OutputGoogleChronicle.CustomLabels, customLabels)
				}
				items.OutputGoogleChronicle.Description = types.StringPointerValue(itemsItem.OutputGoogleChronicle.Description)
				items.OutputGoogleChronicle.Environment = types.StringPointerValue(itemsItem.OutputGoogleChronicle.Environment)
				items.OutputGoogleChronicle.ExtraHTTPHeaders = []tfTypes.OutputGoogleChronicleExtraHTTPHeader{}

				for _, extraHTTPHeadersItem10 := range itemsItem.OutputGoogleChronicle.ExtraHTTPHeaders {
					var extraHTTPHeaders10 tfTypes.OutputGoogleChronicleExtraHTTPHeader

					extraHTTPHeaders10.Name = types.StringPointerValue(extraHTTPHeadersItem10.Name)
					extraHTTPHeaders10.Value = types.StringValue(extraHTTPHeadersItem10.Value)

					items.OutputGoogleChronicle.ExtraHTTPHeaders = append(items.OutputGoogleChronicle.ExtraHTTPHeaders, extraHTTPHeaders10)
				}
				items.OutputGoogleChronicle.ExtraLogTypes = []tfTypes.ExtraLogType{}

				for _, extraLogTypesItem := range itemsItem.OutputGoogleChronicle.ExtraLogTypes {
					var extraLogTypes tfTypes.ExtraLogType

					extraLogTypes.Description = types.StringPointerValue(extraLogTypesItem.Description)
					extraLogTypes.LogType = types.StringValue(extraLogTypesItem.LogType)

					items.OutputGoogleChronicle.ExtraLogTypes = append(items.OutputGoogleChronicle.ExtraLogTypes, extraLogTypes)
				}
				if itemsItem.OutputGoogleChronicle.FailedRequestLoggingMode != nil {
					items.OutputGoogleChronicle.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputGoogleChronicle.FailedRequestLoggingMode))
				} else {
					items.OutputGoogleChronicle.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputGoogleChronicle.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputGoogleChronicle.FlushPeriodSec)
				items.OutputGoogleChronicle.ID = types.StringPointerValue(itemsItem.OutputGoogleChronicle.ID)
				if itemsItem.OutputGoogleChronicle.LogFormatType != nil {
					items.OutputGoogleChronicle.LogFormatType = types.StringValue(string(*itemsItem.OutputGoogleChronicle.LogFormatType))
				} else {
					items.OutputGoogleChronicle.LogFormatType = types.StringNull()
				}
				items.OutputGoogleChronicle.LogTextField = types.StringPointerValue(itemsItem.OutputGoogleChronicle.LogTextField)
				items.OutputGoogleChronicle.LogType = types.StringPointerValue(itemsItem.OutputGoogleChronicle.LogType)
				items.OutputGoogleChronicle.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputGoogleChronicle.MaxPayloadEvents)
				items.OutputGoogleChronicle.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputGoogleChronicle.MaxPayloadSizeKB)
				items.OutputGoogleChronicle.Namespace = types.StringPointerValue(itemsItem.OutputGoogleChronicle.Namespace)
				if itemsItem.OutputGoogleChronicle.OnBackpressure != nil {
					items.OutputGoogleChronicle.OnBackpressure = types.StringValue(string(*itemsItem.OutputGoogleChronicle.OnBackpressure))
				} else {
					items.OutputGoogleChronicle.OnBackpressure = types.StringNull()
				}
				items.OutputGoogleChronicle.Pipeline = types.StringPointerValue(itemsItem.OutputGoogleChronicle.Pipeline)
				if itemsItem.OutputGoogleChronicle.PqCompress != nil {
					items.OutputGoogleChronicle.PqCompress = types.StringValue(string(*itemsItem.OutputGoogleChronicle.PqCompress))
				} else {
					items.OutputGoogleChronicle.PqCompress = types.StringNull()
				}
				if itemsItem.OutputGoogleChronicle.PqControls == nil {
					items.OutputGoogleChronicle.PqControls = nil
				} else {
					items.OutputGoogleChronicle.PqControls = &tfTypes.OutputGoogleChroniclePqControls{}
				}
				items.OutputGoogleChronicle.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputGoogleChronicle.PqMaxFileSize)
				items.OutputGoogleChronicle.PqMaxSize = types.StringPointerValue(itemsItem.OutputGoogleChronicle.PqMaxSize)
				if itemsItem.OutputGoogleChronicle.PqMode != nil {
					items.OutputGoogleChronicle.PqMode = types.StringValue(string(*itemsItem.OutputGoogleChronicle.PqMode))
				} else {
					items.OutputGoogleChronicle.PqMode = types.StringNull()
				}
				if itemsItem.OutputGoogleChronicle.PqOnBackpressure != nil {
					items.OutputGoogleChronicle.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputGoogleChronicle.PqOnBackpressure))
				} else {
					items.OutputGoogleChronicle.PqOnBackpressure = types.StringNull()
				}
				items.OutputGoogleChronicle.PqPath = types.StringPointerValue(itemsItem.OutputGoogleChronicle.PqPath)
				items.OutputGoogleChronicle.Region = types.StringPointerValue(itemsItem.OutputGoogleChronicle.Region)
				items.OutputGoogleChronicle.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputGoogleChronicle.RejectUnauthorized)
				items.OutputGoogleChronicle.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputGoogleChronicle.ResponseHonorRetryAfterHeader)
				items.OutputGoogleChronicle.ResponseRetrySettings = []tfTypes.OutputGoogleChronicleResponseRetrySetting{}

				for _, responseRetrySettingsItem11 := range itemsItem.OutputGoogleChronicle.ResponseRetrySettings {
					var responseRetrySettings11 tfTypes.OutputGoogleChronicleResponseRetrySetting

					responseRetrySettings11.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem11.BackoffRate)
					responseRetrySettings11.HTTPStatus = types.Float64Value(responseRetrySettingsItem11.HTTPStatus)
					responseRetrySettings11.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem11.InitialBackoff)
					responseRetrySettings11.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem11.MaxBackoff)

					items.OutputGoogleChronicle.ResponseRetrySettings = append(items.OutputGoogleChronicle.ResponseRetrySettings, responseRetrySettings11)
				}
				items.OutputGoogleChronicle.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputGoogleChronicle.SafeHeaders))
				for _, v := range itemsItem.OutputGoogleChronicle.SafeHeaders {
					items.OutputGoogleChronicle.SafeHeaders = append(items.OutputGoogleChronicle.SafeHeaders, types.StringValue(v))
				}
				items.OutputGoogleChronicle.ServiceAccountCredentials = types.StringPointerValue(itemsItem.OutputGoogleChronicle.ServiceAccountCredentials)
				items.OutputGoogleChronicle.ServiceAccountCredentialsSecret = types.StringPointerValue(itemsItem.OutputGoogleChronicle.ServiceAccountCredentialsSecret)
				items.OutputGoogleChronicle.Streamtags = make([]types.String, 0, len(itemsItem.OutputGoogleChronicle.Streamtags))
				for _, v := range itemsItem.OutputGoogleChronicle.Streamtags {
					items.OutputGoogleChronicle.Streamtags = append(items.OutputGoogleChronicle.Streamtags, types.StringValue(v))
				}
				items.OutputGoogleChronicle.SystemFields = make([]types.String, 0, len(itemsItem.OutputGoogleChronicle.SystemFields))
				for _, v := range itemsItem.OutputGoogleChronicle.SystemFields {
					items.OutputGoogleChronicle.SystemFields = append(items.OutputGoogleChronicle.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputGoogleChronicle.TimeoutRetrySettings == nil {
					items.OutputGoogleChronicle.TimeoutRetrySettings = nil
				} else {
					items.OutputGoogleChronicle.TimeoutRetrySettings = &tfTypes.OutputGoogleChronicleTimeoutRetrySettings{}
					items.OutputGoogleChronicle.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputGoogleChronicle.TimeoutRetrySettings.BackoffRate)
					items.OutputGoogleChronicle.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputGoogleChronicle.TimeoutRetrySettings.InitialBackoff)
					items.OutputGoogleChronicle.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputGoogleChronicle.TimeoutRetrySettings.MaxBackoff)
					items.OutputGoogleChronicle.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputGoogleChronicle.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputGoogleChronicle.TimeoutSec = types.Float64PointerValue(itemsItem.OutputGoogleChronicle.TimeoutSec)
				items.OutputGoogleChronicle.TotalMemoryLimitKB = types.Float64PointerValue(itemsItem.OutputGoogleChronicle.TotalMemoryLimitKB)
				items.OutputGoogleChronicle.Type = types.StringValue(string(itemsItem.OutputGoogleChronicle.Type))
				items.OutputGoogleChronicle.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputGoogleChronicle.UseRoundRobinDNS)
			}
			if itemsItem.OutputGoogleCloudLogging != nil {
				items.OutputGoogleCloudLogging = &tfTypes.OutputGoogleCloudLogging{}
				items.OutputGoogleCloudLogging.CacheFillBytesExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.CacheFillBytesExpression)
				items.OutputGoogleCloudLogging.CacheHitExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.CacheHitExpression)
				items.OutputGoogleCloudLogging.CacheLookupExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.CacheLookupExpression)
				items.OutputGoogleCloudLogging.CacheValidatedExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.CacheValidatedExpression)
				items.OutputGoogleCloudLogging.Concurrency = types.Float64PointerValue(itemsItem.OutputGoogleCloudLogging.Concurrency)
				items.OutputGoogleCloudLogging.ConnectionTimeout = types.Float64PointerValue(itemsItem.OutputGoogleCloudLogging.ConnectionTimeout)
				items.OutputGoogleCloudLogging.Description = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.Description)
				items.OutputGoogleCloudLogging.Environment = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.Environment)
				items.OutputGoogleCloudLogging.FileExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.FileExpression)
				items.OutputGoogleCloudLogging.FirstExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.FirstExpression)
				items.OutputGoogleCloudLogging.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputGoogleCloudLogging.FlushPeriodSec)
				items.OutputGoogleCloudLogging.FunctionExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.FunctionExpression)
				if itemsItem.OutputGoogleCloudLogging.GoogleAuthMethod != nil {
					items.OutputGoogleCloudLogging.GoogleAuthMethod = types.StringValue(string(*itemsItem.OutputGoogleCloudLogging.GoogleAuthMethod))
				} else {
					items.OutputGoogleCloudLogging.GoogleAuthMethod = types.StringNull()
				}
				items.OutputGoogleCloudLogging.ID = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.ID)
				items.OutputGoogleCloudLogging.IDExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.IDExpression)
				items.OutputGoogleCloudLogging.IndexExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.IndexExpression)
				items.OutputGoogleCloudLogging.InsertIDExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.InsertIDExpression)
				items.OutputGoogleCloudLogging.LastExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.LastExpression)
				items.OutputGoogleCloudLogging.LatencyExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.LatencyExpression)
				items.OutputGoogleCloudLogging.LineExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.LineExpression)
				items.OutputGoogleCloudLogging.LogLabels = []tfTypes.LogLabel{}

				for _, logLabelsItem := range itemsItem.OutputGoogleCloudLogging.LogLabels {
					var logLabels tfTypes.LogLabel

					logLabels.Label = types.StringValue(logLabelsItem.Label)
					logLabels.ValueExpression = types.StringValue(logLabelsItem.ValueExpression)

					items.OutputGoogleCloudLogging.LogLabels = append(items.OutputGoogleCloudLogging.LogLabels, logLabels)
				}
				items.OutputGoogleCloudLogging.LogLocationExpression = types.StringValue(itemsItem.OutputGoogleCloudLogging.LogLocationExpression)
				items.OutputGoogleCloudLogging.LogLocationType = types.StringValue(string(itemsItem.OutputGoogleCloudLogging.LogLocationType))
				items.OutputGoogleCloudLogging.LogNameExpression = types.StringValue(itemsItem.OutputGoogleCloudLogging.LogNameExpression)
				items.OutputGoogleCloudLogging.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputGoogleCloudLogging.MaxPayloadEvents)
				items.OutputGoogleCloudLogging.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputGoogleCloudLogging.MaxPayloadSizeKB)
				if itemsItem.OutputGoogleCloudLogging.OnBackpressure != nil {
					items.OutputGoogleCloudLogging.OnBackpressure = types.StringValue(string(*itemsItem.OutputGoogleCloudLogging.OnBackpressure))
				} else {
					items.OutputGoogleCloudLogging.OnBackpressure = types.StringNull()
				}
				items.OutputGoogleCloudLogging.PayloadExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.PayloadExpression)
				if itemsItem.OutputGoogleCloudLogging.PayloadFormat != nil {
					items.OutputGoogleCloudLogging.PayloadFormat = types.StringValue(string(*itemsItem.OutputGoogleCloudLogging.PayloadFormat))
				} else {
					items.OutputGoogleCloudLogging.PayloadFormat = types.StringNull()
				}
				items.OutputGoogleCloudLogging.Pipeline = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.Pipeline)
				if itemsItem.OutputGoogleCloudLogging.PqCompress != nil {
					items.OutputGoogleCloudLogging.PqCompress = types.StringValue(string(*itemsItem.OutputGoogleCloudLogging.PqCompress))
				} else {
					items.OutputGoogleCloudLogging.PqCompress = types.StringNull()
				}
				if itemsItem.OutputGoogleCloudLogging.PqControls == nil {
					items.OutputGoogleCloudLogging.PqControls = nil
				} else {
					items.OutputGoogleCloudLogging.PqControls = &tfTypes.OutputGoogleCloudLoggingPqControls{}
				}
				items.OutputGoogleCloudLogging.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.PqMaxFileSize)
				items.OutputGoogleCloudLogging.PqMaxSize = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.PqMaxSize)
				if itemsItem.OutputGoogleCloudLogging.PqMode != nil {
					items.OutputGoogleCloudLogging.PqMode = types.StringValue(string(*itemsItem.OutputGoogleCloudLogging.PqMode))
				} else {
					items.OutputGoogleCloudLogging.PqMode = types.StringNull()
				}
				if itemsItem.OutputGoogleCloudLogging.PqOnBackpressure != nil {
					items.OutputGoogleCloudLogging.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputGoogleCloudLogging.PqOnBackpressure))
				} else {
					items.OutputGoogleCloudLogging.PqOnBackpressure = types.StringNull()
				}
				items.OutputGoogleCloudLogging.PqPath = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.PqPath)
				items.OutputGoogleCloudLogging.ProducerExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.ProducerExpression)
				items.OutputGoogleCloudLogging.ProtocolExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.ProtocolExpression)
				items.OutputGoogleCloudLogging.RefererExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.RefererExpression)
				items.OutputGoogleCloudLogging.RemoteIPExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.RemoteIPExpression)
				items.OutputGoogleCloudLogging.RequestMethodExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.RequestMethodExpression)
				items.OutputGoogleCloudLogging.RequestSizeExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.RequestSizeExpression)
				items.OutputGoogleCloudLogging.RequestURLExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.RequestURLExpression)
				items.OutputGoogleCloudLogging.ResourceTypeExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.ResourceTypeExpression)
				items.OutputGoogleCloudLogging.ResourceTypeLabels = []tfTypes.ResourceTypeLabel{}

				for _, resourceTypeLabelsItem := range itemsItem.OutputGoogleCloudLogging.ResourceTypeLabels {
					var resourceTypeLabels tfTypes.ResourceTypeLabel

					resourceTypeLabels.Label = types.StringValue(resourceTypeLabelsItem.Label)
					resourceTypeLabels.ValueExpression = types.StringValue(resourceTypeLabelsItem.ValueExpression)

					items.OutputGoogleCloudLogging.ResourceTypeLabels = append(items.OutputGoogleCloudLogging.ResourceTypeLabels, resourceTypeLabels)
				}
				items.OutputGoogleCloudLogging.ResponseSizeExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.ResponseSizeExpression)
				items.OutputGoogleCloudLogging.Secret = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.Secret)
				items.OutputGoogleCloudLogging.ServerIPExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.ServerIPExpression)
				items.OutputGoogleCloudLogging.ServiceAccountCredentials = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.ServiceAccountCredentials)
				items.OutputGoogleCloudLogging.SeverityExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.SeverityExpression)
				items.OutputGoogleCloudLogging.SpanIDExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.SpanIDExpression)
				items.OutputGoogleCloudLogging.StatusExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.StatusExpression)
				items.OutputGoogleCloudLogging.Streamtags = make([]types.String, 0, len(itemsItem.OutputGoogleCloudLogging.Streamtags))
				for _, v := range itemsItem.OutputGoogleCloudLogging.Streamtags {
					items.OutputGoogleCloudLogging.Streamtags = append(items.OutputGoogleCloudLogging.Streamtags, types.StringValue(v))
				}
				items.OutputGoogleCloudLogging.SystemFields = make([]types.String, 0, len(itemsItem.OutputGoogleCloudLogging.SystemFields))
				for _, v := range itemsItem.OutputGoogleCloudLogging.SystemFields {
					items.OutputGoogleCloudLogging.SystemFields = append(items.OutputGoogleCloudLogging.SystemFields, types.StringValue(v))
				}
				items.OutputGoogleCloudLogging.ThrottleRateReqPerSec = types.Int64PointerValue(itemsItem.OutputGoogleCloudLogging.ThrottleRateReqPerSec)
				items.OutputGoogleCloudLogging.TimeoutSec = types.Float64PointerValue(itemsItem.OutputGoogleCloudLogging.TimeoutSec)
				items.OutputGoogleCloudLogging.TotalMemoryLimitKB = types.Float64PointerValue(itemsItem.OutputGoogleCloudLogging.TotalMemoryLimitKB)
				items.OutputGoogleCloudLogging.TotalSplitsExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.TotalSplitsExpression)
				items.OutputGoogleCloudLogging.TraceExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.TraceExpression)
				items.OutputGoogleCloudLogging.TraceSampledExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.TraceSampledExpression)
				if itemsItem.OutputGoogleCloudLogging.Type != nil {
					items.OutputGoogleCloudLogging.Type = types.StringValue(string(*itemsItem.OutputGoogleCloudLogging.Type))
				} else {
					items.OutputGoogleCloudLogging.Type = types.StringNull()
				}
				items.OutputGoogleCloudLogging.UIDExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.UIDExpression)
				items.OutputGoogleCloudLogging.UserAgentExpression = types.StringPointerValue(itemsItem.OutputGoogleCloudLogging.UserAgentExpression)
			}
			if itemsItem.OutputGoogleCloudStorage != nil {
				items.OutputGoogleCloudStorage = &tfTypes.OutputGoogleCloudStorage{}
				items.OutputGoogleCloudStorage.AddIDToStagePath = types.BoolPointerValue(itemsItem.OutputGoogleCloudStorage.AddIDToStagePath)
				items.OutputGoogleCloudStorage.AutomaticSchema = types.BoolPointerValue(itemsItem.OutputGoogleCloudStorage.AutomaticSchema)
				items.OutputGoogleCloudStorage.AwsAPIKey = types.StringPointerValue(itemsItem.OutputGoogleCloudStorage.AwsAPIKey)
				if itemsItem.OutputGoogleCloudStorage.AwsAuthenticationMethod != nil {
					items.OutputGoogleCloudStorage.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.OutputGoogleCloudStorage.AwsAuthenticationMethod))
				} else {
					items.OutputGoogleCloudStorage.AwsAuthenticationMethod = types.StringNull()
				}
				items.OutputGoogleCloudStorage.AwsSecret = types.StringPointerValue(itemsItem.OutputGoogleCloudStorage.AwsSecret)
				items.OutputGoogleCloudStorage.AwsSecretKey = types.StringPointerValue(itemsItem.OutputGoogleCloudStorage.AwsSecretKey)
				items.OutputGoogleCloudStorage.BaseFileName = types.StringPointerValue(itemsItem.OutputGoogleCloudStorage.BaseFileName)
				items.OutputGoogleCloudStorage.Bucket = types.StringValue(itemsItem.OutputGoogleCloudStorage.Bucket)
				if itemsItem.OutputGoogleCloudStorage.Compress != nil {
					items.OutputGoogleCloudStorage.Compress = types.StringValue(string(*itemsItem.OutputGoogleCloudStorage.Compress))
				} else {
					items.OutputGoogleCloudStorage.Compress = types.StringNull()
				}
				if itemsItem.OutputGoogleCloudStorage.CompressionLevel != nil {
					items.OutputGoogleCloudStorage.CompressionLevel = types.StringValue(string(*itemsItem.OutputGoogleCloudStorage.CompressionLevel))
				} else {
					items.OutputGoogleCloudStorage.CompressionLevel = types.StringNull()
				}
				items.OutputGoogleCloudStorage.DeadletterEnabled = types.BoolPointerValue(itemsItem.OutputGoogleCloudStorage.DeadletterEnabled)
				items.OutputGoogleCloudStorage.DeadletterPath = types.StringPointerValue(itemsItem.OutputGoogleCloudStorage.DeadletterPath)
				items.OutputGoogleCloudStorage.Description = types.StringPointerValue(itemsItem.OutputGoogleCloudStorage.Description)
				items.OutputGoogleCloudStorage.DestPath = types.StringPointerValue(itemsItem.OutputGoogleCloudStorage.DestPath)
				items.OutputGoogleCloudStorage.EmptyDirCleanupSec = types.Float64PointerValue(itemsItem.OutputGoogleCloudStorage.EmptyDirCleanupSec)
				items.OutputGoogleCloudStorage.EnablePageChecksum = types.BoolPointerValue(itemsItem.OutputGoogleCloudStorage.EnablePageChecksum)
				items.OutputGoogleCloudStorage.EnableStatistics = types.BoolPointerValue(itemsItem.OutputGoogleCloudStorage.EnableStatistics)
				items.OutputGoogleCloudStorage.EnableWritePageIndex = types.BoolPointerValue(itemsItem.OutputGoogleCloudStorage.EnableWritePageIndex)
				items.OutputGoogleCloudStorage.Endpoint = types.StringPointerValue(itemsItem.OutputGoogleCloudStorage.Endpoint)
				items.OutputGoogleCloudStorage.Environment = types.StringPointerValue(itemsItem.OutputGoogleCloudStorage.Environment)
				items.OutputGoogleCloudStorage.FileNameSuffix = types.StringPointerValue(itemsItem.OutputGoogleCloudStorage.FileNameSuffix)
				if itemsItem.OutputGoogleCloudStorage.Format != nil {
					items.OutputGoogleCloudStorage.Format = types.StringValue(string(*itemsItem.OutputGoogleCloudStorage.Format))
				} else {
					items.OutputGoogleCloudStorage.Format = types.StringNull()
				}
				items.OutputGoogleCloudStorage.HeaderLine = types.StringPointerValue(itemsItem.OutputGoogleCloudStorage.HeaderLine)
				items.OutputGoogleCloudStorage.ID = types.StringPointerValue(itemsItem.OutputGoogleCloudStorage.ID)
				items.OutputGoogleCloudStorage.KeyValueMetadata = []tfTypes.OutputGoogleCloudStorageKeyValueMetadatum{}

				for _, keyValueMetadataItem3 := range itemsItem.OutputGoogleCloudStorage.KeyValueMetadata {
					var keyValueMetadata3 tfTypes.OutputGoogleCloudStorageKeyValueMetadatum

					keyValueMetadata3.Key = types.StringPointerValue(keyValueMetadataItem3.Key)
					keyValueMetadata3.Value = types.StringValue(keyValueMetadataItem3.Value)

					items.OutputGoogleCloudStorage.KeyValueMetadata = append(items.OutputGoogleCloudStorage.KeyValueMetadata, keyValueMetadata3)
				}
				items.OutputGoogleCloudStorage.MaxFileIdleTimeSec = types.Float64PointerValue(itemsItem.OutputGoogleCloudStorage.MaxFileIdleTimeSec)
				items.OutputGoogleCloudStorage.MaxFileOpenTimeSec = types.Float64PointerValue(itemsItem.OutputGoogleCloudStorage.MaxFileOpenTimeSec)
				items.OutputGoogleCloudStorage.MaxFileSizeMB = types.Float64PointerValue(itemsItem.OutputGoogleCloudStorage.MaxFileSizeMB)
				items.OutputGoogleCloudStorage.MaxOpenFiles = types.Float64PointerValue(itemsItem.OutputGoogleCloudStorage.MaxOpenFiles)
				items.OutputGoogleCloudStorage.MaxRetryNum = types.Float64PointerValue(itemsItem.OutputGoogleCloudStorage.MaxRetryNum)
				if itemsItem.OutputGoogleCloudStorage.ObjectACL != nil {
					items.OutputGoogleCloudStorage.ObjectACL = types.StringValue(string(*itemsItem.OutputGoogleCloudStorage.ObjectACL))
				} else {
					items.OutputGoogleCloudStorage.ObjectACL = types.StringNull()
				}
				if itemsItem.OutputGoogleCloudStorage.OnBackpressure != nil {
					items.OutputGoogleCloudStorage.OnBackpressure = types.StringValue(string(*itemsItem.OutputGoogleCloudStorage.OnBackpressure))
				} else {
					items.OutputGoogleCloudStorage.OnBackpressure = types.StringNull()
				}
				if itemsItem.OutputGoogleCloudStorage.OnDiskFullBackpressure != nil {
					items.OutputGoogleCloudStorage.OnDiskFullBackpressure = types.StringValue(string(*itemsItem.OutputGoogleCloudStorage.OnDiskFullBackpressure))
				} else {
					items.OutputGoogleCloudStorage.OnDiskFullBackpressure = types.StringNull()
				}
				if itemsItem.OutputGoogleCloudStorage.ParquetDataPageVersion != nil {
					items.OutputGoogleCloudStorage.ParquetDataPageVersion = types.StringValue(string(*itemsItem.OutputGoogleCloudStorage.ParquetDataPageVersion))
				} else {
					items.OutputGoogleCloudStorage.ParquetDataPageVersion = types.StringNull()
				}
				items.OutputGoogleCloudStorage.ParquetPageSize = types.StringPointerValue(itemsItem.OutputGoogleCloudStorage.ParquetPageSize)
				items.OutputGoogleCloudStorage.ParquetRowGroupLength = types.Float64PointerValue(itemsItem.OutputGoogleCloudStorage.ParquetRowGroupLength)
				if itemsItem.OutputGoogleCloudStorage.ParquetVersion != nil {
					items.OutputGoogleCloudStorage.ParquetVersion = types.StringValue(string(*itemsItem.OutputGoogleCloudStorage.ParquetVersion))
				} else {
					items.OutputGoogleCloudStorage.ParquetVersion = types.StringNull()
				}
				items.OutputGoogleCloudStorage.PartitionExpr = types.StringPointerValue(itemsItem.OutputGoogleCloudStorage.PartitionExpr)
				items.OutputGoogleCloudStorage.Pipeline = types.StringPointerValue(itemsItem.OutputGoogleCloudStorage.Pipeline)
				items.OutputGoogleCloudStorage.Region = types.StringValue(itemsItem.OutputGoogleCloudStorage.Region)
				items.OutputGoogleCloudStorage.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputGoogleCloudStorage.RejectUnauthorized)
				items.OutputGoogleCloudStorage.RemoveEmptyDirs = types.BoolPointerValue(itemsItem.OutputGoogleCloudStorage.RemoveEmptyDirs)
				items.OutputGoogleCloudStorage.ReuseConnections = types.BoolPointerValue(itemsItem.OutputGoogleCloudStorage.ReuseConnections)
				items.OutputGoogleCloudStorage.ShouldLogInvalidRows = types.BoolPointerValue(itemsItem.OutputGoogleCloudStorage.ShouldLogInvalidRows)
				if itemsItem.OutputGoogleCloudStorage.SignatureVersion != nil {
					items.OutputGoogleCloudStorage.SignatureVersion = types.StringValue(string(*itemsItem.OutputGoogleCloudStorage.SignatureVersion))
				} else {
					items.OutputGoogleCloudStorage.SignatureVersion = types.StringNull()
				}
				items.OutputGoogleCloudStorage.StagePath = types.StringPointerValue(itemsItem.OutputGoogleCloudStorage.StagePath)
				if itemsItem.OutputGoogleCloudStorage.StorageClass != nil {
					items.OutputGoogleCloudStorage.StorageClass = types.StringValue(string(*itemsItem.OutputGoogleCloudStorage.StorageClass))
				} else {
					items.OutputGoogleCloudStorage.StorageClass = types.StringNull()
				}
				items.OutputGoogleCloudStorage.Streamtags = make([]types.String, 0, len(itemsItem.OutputGoogleCloudStorage.Streamtags))
				for _, v := range itemsItem.OutputGoogleCloudStorage.Streamtags {
					items.OutputGoogleCloudStorage.Streamtags = append(items.OutputGoogleCloudStorage.Streamtags, types.StringValue(v))
				}
				items.OutputGoogleCloudStorage.SystemFields = make([]types.String, 0, len(itemsItem.OutputGoogleCloudStorage.SystemFields))
				for _, v := range itemsItem.OutputGoogleCloudStorage.SystemFields {
					items.OutputGoogleCloudStorage.SystemFields = append(items.OutputGoogleCloudStorage.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputGoogleCloudStorage.Type != nil {
					items.OutputGoogleCloudStorage.Type = types.StringValue(string(*itemsItem.OutputGoogleCloudStorage.Type))
				} else {
					items.OutputGoogleCloudStorage.Type = types.StringNull()
				}
				items.OutputGoogleCloudStorage.VerifyPermissions = types.BoolPointerValue(itemsItem.OutputGoogleCloudStorage.VerifyPermissions)
				items.OutputGoogleCloudStorage.WriteHighWaterMark = types.Float64PointerValue(itemsItem.OutputGoogleCloudStorage.WriteHighWaterMark)
			}
			if itemsItem.OutputGooglePubsub != nil {
				items.OutputGooglePubsub = &tfTypes.OutputGooglePubsub{}
				items.OutputGooglePubsub.BatchSize = types.Float64PointerValue(itemsItem.OutputGooglePubsub.BatchSize)
				items.OutputGooglePubsub.BatchTimeout = types.Float64PointerValue(itemsItem.OutputGooglePubsub.BatchTimeout)
				items.OutputGooglePubsub.CreateTopic = types.BoolPointerValue(itemsItem.OutputGooglePubsub.CreateTopic)
				items.OutputGooglePubsub.Description = types.StringPointerValue(itemsItem.OutputGooglePubsub.Description)
				items.OutputGooglePubsub.Environment = types.StringPointerValue(itemsItem.OutputGooglePubsub.Environment)
				items.OutputGooglePubsub.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputGooglePubsub.FlushPeriodSec)
				if itemsItem.OutputGooglePubsub.GoogleAuthMethod != nil {
					items.OutputGooglePubsub.GoogleAuthMethod = types.StringValue(string(*itemsItem.OutputGooglePubsub.GoogleAuthMethod))
				} else {
					items.OutputGooglePubsub.GoogleAuthMethod = types.StringNull()
				}
				items.OutputGooglePubsub.ID = types.StringPointerValue(itemsItem.OutputGooglePubsub.ID)
				items.OutputGooglePubsub.MaxInProgress = types.Float64PointerValue(itemsItem.OutputGooglePubsub.MaxInProgress)
				items.OutputGooglePubsub.MaxQueueSize = types.Float64PointerValue(itemsItem.OutputGooglePubsub.MaxQueueSize)
				items.OutputGooglePubsub.MaxRecordSizeKB = types.Float64PointerValue(itemsItem.OutputGooglePubsub.MaxRecordSizeKB)
				if itemsItem.OutputGooglePubsub.OnBackpressure != nil {
					items.OutputGooglePubsub.OnBackpressure = types.StringValue(string(*itemsItem.OutputGooglePubsub.OnBackpressure))
				} else {
					items.OutputGooglePubsub.OnBackpressure = types.StringNull()
				}
				items.OutputGooglePubsub.OrderedDelivery = types.BoolPointerValue(itemsItem.OutputGooglePubsub.OrderedDelivery)
				items.OutputGooglePubsub.Pipeline = types.StringPointerValue(itemsItem.OutputGooglePubsub.Pipeline)
				if itemsItem.OutputGooglePubsub.PqCompress != nil {
					items.OutputGooglePubsub.PqCompress = types.StringValue(string(*itemsItem.OutputGooglePubsub.PqCompress))
				} else {
					items.OutputGooglePubsub.PqCompress = types.StringNull()
				}
				if itemsItem.OutputGooglePubsub.PqControls == nil {
					items.OutputGooglePubsub.PqControls = nil
				} else {
					items.OutputGooglePubsub.PqControls = &tfTypes.OutputGooglePubsubPqControls{}
				}
				items.OutputGooglePubsub.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputGooglePubsub.PqMaxFileSize)
				items.OutputGooglePubsub.PqMaxSize = types.StringPointerValue(itemsItem.OutputGooglePubsub.PqMaxSize)
				if itemsItem.OutputGooglePubsub.PqMode != nil {
					items.OutputGooglePubsub.PqMode = types.StringValue(string(*itemsItem.OutputGooglePubsub.PqMode))
				} else {
					items.OutputGooglePubsub.PqMode = types.StringNull()
				}
				if itemsItem.OutputGooglePubsub.PqOnBackpressure != nil {
					items.OutputGooglePubsub.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputGooglePubsub.PqOnBackpressure))
				} else {
					items.OutputGooglePubsub.PqOnBackpressure = types.StringNull()
				}
				items.OutputGooglePubsub.PqPath = types.StringPointerValue(itemsItem.OutputGooglePubsub.PqPath)
				items.OutputGooglePubsub.Region = types.StringPointerValue(itemsItem.OutputGooglePubsub.Region)
				items.OutputGooglePubsub.Secret = types.StringPointerValue(itemsItem.OutputGooglePubsub.Secret)
				items.OutputGooglePubsub.ServiceAccountCredentials = types.StringPointerValue(itemsItem.OutputGooglePubsub.ServiceAccountCredentials)
				items.OutputGooglePubsub.Streamtags = make([]types.String, 0, len(itemsItem.OutputGooglePubsub.Streamtags))
				for _, v := range itemsItem.OutputGooglePubsub.Streamtags {
					items.OutputGooglePubsub.Streamtags = append(items.OutputGooglePubsub.Streamtags, types.StringValue(v))
				}
				items.OutputGooglePubsub.SystemFields = make([]types.String, 0, len(itemsItem.OutputGooglePubsub.SystemFields))
				for _, v := range itemsItem.OutputGooglePubsub.SystemFields {
					items.OutputGooglePubsub.SystemFields = append(items.OutputGooglePubsub.SystemFields, types.StringValue(v))
				}
				items.OutputGooglePubsub.TopicName = types.StringValue(itemsItem.OutputGooglePubsub.TopicName)
				items.OutputGooglePubsub.Type = types.StringValue(string(itemsItem.OutputGooglePubsub.Type))
			}
			if itemsItem.OutputGrafanaCloud != nil {
				items.OutputGrafanaCloud = &tfTypes.OutputGrafanaCloud{}
				if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1 != nil {
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1 = &tfTypes.OutputGrafanaCloudGrafanaCloud1{}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Compress = types.BoolPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Compress)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Concurrency = types.Float64PointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Concurrency)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Description = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Description)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Environment = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Environment)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ExtraHTTPHeaders = []tfTypes.OutputGrafanaCloudExtraHTTPHeader1{}

					for _, extraHTTPHeadersItem11 := range itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ExtraHTTPHeaders {
						var extraHTTPHeaders11 tfTypes.OutputGrafanaCloudExtraHTTPHeader1

						extraHTTPHeaders11.Name = types.StringPointerValue(extraHTTPHeadersItem11.Name)
						extraHTTPHeaders11.Value = types.StringValue(extraHTTPHeadersItem11.Value)

						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ExtraHTTPHeaders = append(items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ExtraHTTPHeaders, extraHTTPHeaders11)
					}
					if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.FailedRequestLoggingMode != nil {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.FailedRequestLoggingMode))
					} else {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.FailedRequestLoggingMode = types.StringNull()
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.FlushPeriodSec)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ID = types.StringValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ID)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Labels = []tfTypes.OutputGrafanaCloudLabel1{}

					for _, labelsItem := range itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Labels {
						var labels tfTypes.OutputGrafanaCloudLabel1

						labels.Name = types.StringPointerValue(labelsItem.Name)
						labels.Value = types.StringValue(labelsItem.Value)

						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Labels = append(items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Labels, labels)
					}
					if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth == nil {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth = nil
					} else {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth = &tfTypes.OutputGrafanaCloudLokiAuth1{}
						if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.AuthType != nil {
							items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.AuthType = types.StringValue(string(*itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.AuthType))
						} else {
							items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.AuthType = types.StringNull()
						}
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.CredentialsSecret = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.CredentialsSecret)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.Password = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.Password)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.TextSecret = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.TextSecret)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.Token = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.Token)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.Username = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiAuth.Username)
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiURL = types.StringValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.LokiURL)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.MaxPayloadEvents)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.MaxPayloadSizeKB)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Message = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Message)
					if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.MessageFormat != nil {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.MessageFormat = types.StringValue(string(*itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.MessageFormat))
					} else {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.MessageFormat = types.StringNull()
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.MetricRenameExpr = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.MetricRenameExpr)
					if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.OnBackpressure != nil {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.OnBackpressure = types.StringValue(string(*itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.OnBackpressure))
					} else {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.OnBackpressure = types.StringNull()
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Pipeline = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Pipeline)
					if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqCompress != nil {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqCompress = types.StringValue(string(*itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqCompress))
					} else {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqCompress = types.StringNull()
					}
					if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqControls == nil {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqControls = nil
					} else {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqControls = &tfTypes.OutputGrafanaCloudPqControls1{}
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqMaxFileSize)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqMaxSize = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqMaxSize)
					if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqMode != nil {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqMode = types.StringValue(string(*itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqMode))
					} else {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqMode = types.StringNull()
					}
					if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqOnBackpressure != nil {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqOnBackpressure))
					} else {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqOnBackpressure = types.StringNull()
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqPath = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PqPath)
					if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth == nil {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth = nil
					} else {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth = &tfTypes.OutputGrafanaCloudPrometheusAuth1{}
						if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.AuthType != nil {
							items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.AuthType = types.StringValue(string(*itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.AuthType))
						} else {
							items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.AuthType = types.StringNull()
						}
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.CredentialsSecret = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.CredentialsSecret)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.Password = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.Password)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.TextSecret = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.TextSecret)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.Token = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.Token)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.Username = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusAuth.Username)
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusURL = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.PrometheusURL)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.RejectUnauthorized)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseHonorRetryAfterHeader)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseRetrySettings = []tfTypes.OutputGrafanaCloudResponseRetrySetting1{}

					for _, responseRetrySettingsItem12 := range itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseRetrySettings {
						var responseRetrySettings12 tfTypes.OutputGrafanaCloudResponseRetrySetting1

						responseRetrySettings12.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem12.BackoffRate)
						responseRetrySettings12.HTTPStatus = types.Float64Value(responseRetrySettingsItem12.HTTPStatus)
						responseRetrySettings12.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem12.InitialBackoff)
						responseRetrySettings12.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem12.MaxBackoff)

						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseRetrySettings = append(items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.ResponseRetrySettings, responseRetrySettings12)
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.SafeHeaders))
					for _, v := range itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.SafeHeaders {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.SafeHeaders = append(items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.SafeHeaders, types.StringValue(v))
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Streamtags = make([]types.String, 0, len(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Streamtags))
					for _, v := range itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Streamtags {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Streamtags = append(items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Streamtags, types.StringValue(v))
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.SystemFields = make([]types.String, 0, len(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.SystemFields))
					for _, v := range itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.SystemFields {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.SystemFields = append(items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.SystemFields, types.StringValue(v))
					}
					if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings == nil {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings = nil
					} else {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings = &tfTypes.OutputGrafanaCloudTimeoutRetrySettings1{}
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings.BackoffRate)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings.InitialBackoff)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings.MaxBackoff)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutRetrySettings.TimeoutRetry)
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutSec = types.Float64PointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.TimeoutSec)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Type = types.StringValue(string(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.Type))
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud1.UseRoundRobinDNS)
				}
				if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2 != nil {
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2 = &tfTypes.OutputGrafanaCloudGrafanaCloud2{}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Compress = types.BoolPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Compress)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Concurrency = types.Float64PointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Concurrency)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Description = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Description)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Environment = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Environment)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ExtraHTTPHeaders = []tfTypes.OutputGrafanaCloudExtraHTTPHeader2{}

					for _, extraHTTPHeadersItem12 := range itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ExtraHTTPHeaders {
						var extraHTTPHeaders12 tfTypes.OutputGrafanaCloudExtraHTTPHeader2

						extraHTTPHeaders12.Name = types.StringPointerValue(extraHTTPHeadersItem12.Name)
						extraHTTPHeaders12.Value = types.StringValue(extraHTTPHeadersItem12.Value)

						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ExtraHTTPHeaders = append(items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ExtraHTTPHeaders, extraHTTPHeaders12)
					}
					if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.FailedRequestLoggingMode != nil {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.FailedRequestLoggingMode))
					} else {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.FailedRequestLoggingMode = types.StringNull()
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.FlushPeriodSec)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ID = types.StringValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ID)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Labels = []tfTypes.OutputGrafanaCloudLabel2{}

					for _, labelsItem1 := range itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Labels {
						var labels1 tfTypes.OutputGrafanaCloudLabel2

						labels1.Name = types.StringPointerValue(labelsItem1.Name)
						labels1.Value = types.StringValue(labelsItem1.Value)

						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Labels = append(items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Labels, labels1)
					}
					if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth == nil {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth = nil
					} else {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth = &tfTypes.OutputGrafanaCloudLokiAuth2{}
						if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.AuthType != nil {
							items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.AuthType = types.StringValue(string(*itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.AuthType))
						} else {
							items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.AuthType = types.StringNull()
						}
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.CredentialsSecret = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.CredentialsSecret)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.Password = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.Password)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.TextSecret = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.TextSecret)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.Token = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.Token)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.Username = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiAuth.Username)
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiURL = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.LokiURL)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.MaxPayloadEvents)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.MaxPayloadSizeKB)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Message = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Message)
					if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.MessageFormat != nil {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.MessageFormat = types.StringValue(string(*itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.MessageFormat))
					} else {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.MessageFormat = types.StringNull()
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.MetricRenameExpr = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.MetricRenameExpr)
					if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.OnBackpressure != nil {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.OnBackpressure = types.StringValue(string(*itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.OnBackpressure))
					} else {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.OnBackpressure = types.StringNull()
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Pipeline = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Pipeline)
					if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqCompress != nil {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqCompress = types.StringValue(string(*itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqCompress))
					} else {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqCompress = types.StringNull()
					}
					if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqControls == nil {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqControls = nil
					} else {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqControls = &tfTypes.OutputGrafanaCloudPqControls2{}
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqMaxFileSize)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqMaxSize = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqMaxSize)
					if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqMode != nil {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqMode = types.StringValue(string(*itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqMode))
					} else {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqMode = types.StringNull()
					}
					if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqOnBackpressure != nil {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqOnBackpressure))
					} else {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqOnBackpressure = types.StringNull()
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqPath = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PqPath)
					if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth == nil {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth = nil
					} else {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth = &tfTypes.OutputGrafanaCloudPrometheusAuth2{}
						if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.AuthType != nil {
							items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.AuthType = types.StringValue(string(*itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.AuthType))
						} else {
							items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.AuthType = types.StringNull()
						}
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.CredentialsSecret = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.CredentialsSecret)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.Password = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.Password)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.TextSecret = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.TextSecret)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.Token = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.Token)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.Username = types.StringPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusAuth.Username)
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusURL = types.StringValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.PrometheusURL)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.RejectUnauthorized)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseHonorRetryAfterHeader)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseRetrySettings = []tfTypes.OutputGrafanaCloudResponseRetrySetting2{}

					for _, responseRetrySettingsItem13 := range itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseRetrySettings {
						var responseRetrySettings13 tfTypes.OutputGrafanaCloudResponseRetrySetting2

						responseRetrySettings13.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem13.BackoffRate)
						responseRetrySettings13.HTTPStatus = types.Float64Value(responseRetrySettingsItem13.HTTPStatus)
						responseRetrySettings13.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem13.InitialBackoff)
						responseRetrySettings13.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem13.MaxBackoff)

						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseRetrySettings = append(items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.ResponseRetrySettings, responseRetrySettings13)
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.SafeHeaders))
					for _, v := range itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.SafeHeaders {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.SafeHeaders = append(items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.SafeHeaders, types.StringValue(v))
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Streamtags = make([]types.String, 0, len(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Streamtags))
					for _, v := range itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Streamtags {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Streamtags = append(items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Streamtags, types.StringValue(v))
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.SystemFields = make([]types.String, 0, len(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.SystemFields))
					for _, v := range itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.SystemFields {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.SystemFields = append(items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.SystemFields, types.StringValue(v))
					}
					if itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings == nil {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings = nil
					} else {
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings = &tfTypes.OutputGrafanaCloudTimeoutRetrySettings2{}
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings.BackoffRate)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings.InitialBackoff)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings.MaxBackoff)
						items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutRetrySettings.TimeoutRetry)
					}
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutSec = types.Float64PointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.TimeoutSec)
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Type = types.StringValue(string(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.Type))
					items.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputGrafanaCloud.OutputGrafanaCloudGrafanaCloud2.UseRoundRobinDNS)
				}
			}
			if itemsItem.OutputGraphite != nil {
				items.OutputGraphite = &tfTypes.OutputGraphite{}
				items.OutputGraphite.ConnectionTimeout = types.Float64PointerValue(itemsItem.OutputGraphite.ConnectionTimeout)
				items.OutputGraphite.Description = types.StringPointerValue(itemsItem.OutputGraphite.Description)
				items.OutputGraphite.DNSResolvePeriodSec = types.Float64PointerValue(itemsItem.OutputGraphite.DNSResolvePeriodSec)
				items.OutputGraphite.Environment = types.StringPointerValue(itemsItem.OutputGraphite.Environment)
				items.OutputGraphite.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputGraphite.FlushPeriodSec)
				items.OutputGraphite.Host = types.StringValue(itemsItem.OutputGraphite.Host)
				items.OutputGraphite.ID = types.StringPointerValue(itemsItem.OutputGraphite.ID)
				items.OutputGraphite.Mtu = types.Float64PointerValue(itemsItem.OutputGraphite.Mtu)
				if itemsItem.OutputGraphite.OnBackpressure != nil {
					items.OutputGraphite.OnBackpressure = types.StringValue(string(*itemsItem.OutputGraphite.OnBackpressure))
				} else {
					items.OutputGraphite.OnBackpressure = types.StringNull()
				}
				items.OutputGraphite.Pipeline = types.StringPointerValue(itemsItem.OutputGraphite.Pipeline)
				items.OutputGraphite.Port = types.Float64PointerValue(itemsItem.OutputGraphite.Port)
				if itemsItem.OutputGraphite.PqCompress != nil {
					items.OutputGraphite.PqCompress = types.StringValue(string(*itemsItem.OutputGraphite.PqCompress))
				} else {
					items.OutputGraphite.PqCompress = types.StringNull()
				}
				if itemsItem.OutputGraphite.PqControls == nil {
					items.OutputGraphite.PqControls = nil
				} else {
					items.OutputGraphite.PqControls = &tfTypes.OutputGraphitePqControls{}
				}
				items.OutputGraphite.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputGraphite.PqMaxFileSize)
				items.OutputGraphite.PqMaxSize = types.StringPointerValue(itemsItem.OutputGraphite.PqMaxSize)
				if itemsItem.OutputGraphite.PqMode != nil {
					items.OutputGraphite.PqMode = types.StringValue(string(*itemsItem.OutputGraphite.PqMode))
				} else {
					items.OutputGraphite.PqMode = types.StringNull()
				}
				if itemsItem.OutputGraphite.PqOnBackpressure != nil {
					items.OutputGraphite.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputGraphite.PqOnBackpressure))
				} else {
					items.OutputGraphite.PqOnBackpressure = types.StringNull()
				}
				items.OutputGraphite.PqPath = types.StringPointerValue(itemsItem.OutputGraphite.PqPath)
				if itemsItem.OutputGraphite.Protocol != nil {
					items.OutputGraphite.Protocol = types.StringValue(string(*itemsItem.OutputGraphite.Protocol))
				} else {
					items.OutputGraphite.Protocol = types.StringNull()
				}
				items.OutputGraphite.Streamtags = make([]types.String, 0, len(itemsItem.OutputGraphite.Streamtags))
				for _, v := range itemsItem.OutputGraphite.Streamtags {
					items.OutputGraphite.Streamtags = append(items.OutputGraphite.Streamtags, types.StringValue(v))
				}
				items.OutputGraphite.SystemFields = make([]types.String, 0, len(itemsItem.OutputGraphite.SystemFields))
				for _, v := range itemsItem.OutputGraphite.SystemFields {
					items.OutputGraphite.SystemFields = append(items.OutputGraphite.SystemFields, types.StringValue(v))
				}
				items.OutputGraphite.ThrottleRatePerSec = types.StringPointerValue(itemsItem.OutputGraphite.ThrottleRatePerSec)
				if itemsItem.OutputGraphite.Type != nil {
					items.OutputGraphite.Type = types.StringValue(string(*itemsItem.OutputGraphite.Type))
				} else {
					items.OutputGraphite.Type = types.StringNull()
				}
				items.OutputGraphite.WriteTimeout = types.Float64PointerValue(itemsItem.OutputGraphite.WriteTimeout)
			}
			if itemsItem.OutputHoneycomb != nil {
				items.OutputHoneycomb = &tfTypes.OutputHoneycomb{}
				if itemsItem.OutputHoneycomb.AuthType != nil {
					items.OutputHoneycomb.AuthType = types.StringValue(string(*itemsItem.OutputHoneycomb.AuthType))
				} else {
					items.OutputHoneycomb.AuthType = types.StringNull()
				}
				items.OutputHoneycomb.Compress = types.BoolPointerValue(itemsItem.OutputHoneycomb.Compress)
				items.OutputHoneycomb.Concurrency = types.Float64PointerValue(itemsItem.OutputHoneycomb.Concurrency)
				items.OutputHoneycomb.Dataset = types.StringValue(itemsItem.OutputHoneycomb.Dataset)
				items.OutputHoneycomb.Description = types.StringPointerValue(itemsItem.OutputHoneycomb.Description)
				items.OutputHoneycomb.Environment = types.StringPointerValue(itemsItem.OutputHoneycomb.Environment)
				items.OutputHoneycomb.ExtraHTTPHeaders = []tfTypes.OutputHoneycombExtraHTTPHeader{}

				for _, extraHTTPHeadersItem13 := range itemsItem.OutputHoneycomb.ExtraHTTPHeaders {
					var extraHTTPHeaders13 tfTypes.OutputHoneycombExtraHTTPHeader

					extraHTTPHeaders13.Name = types.StringPointerValue(extraHTTPHeadersItem13.Name)
					extraHTTPHeaders13.Value = types.StringValue(extraHTTPHeadersItem13.Value)

					items.OutputHoneycomb.ExtraHTTPHeaders = append(items.OutputHoneycomb.ExtraHTTPHeaders, extraHTTPHeaders13)
				}
				if itemsItem.OutputHoneycomb.FailedRequestLoggingMode != nil {
					items.OutputHoneycomb.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputHoneycomb.FailedRequestLoggingMode))
				} else {
					items.OutputHoneycomb.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputHoneycomb.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputHoneycomb.FlushPeriodSec)
				items.OutputHoneycomb.ID = types.StringPointerValue(itemsItem.OutputHoneycomb.ID)
				items.OutputHoneycomb.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputHoneycomb.MaxPayloadEvents)
				items.OutputHoneycomb.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputHoneycomb.MaxPayloadSizeKB)
				if itemsItem.OutputHoneycomb.OnBackpressure != nil {
					items.OutputHoneycomb.OnBackpressure = types.StringValue(string(*itemsItem.OutputHoneycomb.OnBackpressure))
				} else {
					items.OutputHoneycomb.OnBackpressure = types.StringNull()
				}
				items.OutputHoneycomb.Pipeline = types.StringPointerValue(itemsItem.OutputHoneycomb.Pipeline)
				if itemsItem.OutputHoneycomb.PqCompress != nil {
					items.OutputHoneycomb.PqCompress = types.StringValue(string(*itemsItem.OutputHoneycomb.PqCompress))
				} else {
					items.OutputHoneycomb.PqCompress = types.StringNull()
				}
				if itemsItem.OutputHoneycomb.PqControls == nil {
					items.OutputHoneycomb.PqControls = nil
				} else {
					items.OutputHoneycomb.PqControls = &tfTypes.OutputHoneycombPqControls{}
				}
				items.OutputHoneycomb.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputHoneycomb.PqMaxFileSize)
				items.OutputHoneycomb.PqMaxSize = types.StringPointerValue(itemsItem.OutputHoneycomb.PqMaxSize)
				if itemsItem.OutputHoneycomb.PqMode != nil {
					items.OutputHoneycomb.PqMode = types.StringValue(string(*itemsItem.OutputHoneycomb.PqMode))
				} else {
					items.OutputHoneycomb.PqMode = types.StringNull()
				}
				if itemsItem.OutputHoneycomb.PqOnBackpressure != nil {
					items.OutputHoneycomb.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputHoneycomb.PqOnBackpressure))
				} else {
					items.OutputHoneycomb.PqOnBackpressure = types.StringNull()
				}
				items.OutputHoneycomb.PqPath = types.StringPointerValue(itemsItem.OutputHoneycomb.PqPath)
				items.OutputHoneycomb.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputHoneycomb.RejectUnauthorized)
				items.OutputHoneycomb.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputHoneycomb.ResponseHonorRetryAfterHeader)
				items.OutputHoneycomb.ResponseRetrySettings = []tfTypes.OutputHoneycombResponseRetrySetting{}

				for _, responseRetrySettingsItem14 := range itemsItem.OutputHoneycomb.ResponseRetrySettings {
					var responseRetrySettings14 tfTypes.OutputHoneycombResponseRetrySetting

					responseRetrySettings14.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem14.BackoffRate)
					responseRetrySettings14.HTTPStatus = types.Float64Value(responseRetrySettingsItem14.HTTPStatus)
					responseRetrySettings14.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem14.InitialBackoff)
					responseRetrySettings14.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem14.MaxBackoff)

					items.OutputHoneycomb.ResponseRetrySettings = append(items.OutputHoneycomb.ResponseRetrySettings, responseRetrySettings14)
				}
				items.OutputHoneycomb.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputHoneycomb.SafeHeaders))
				for _, v := range itemsItem.OutputHoneycomb.SafeHeaders {
					items.OutputHoneycomb.SafeHeaders = append(items.OutputHoneycomb.SafeHeaders, types.StringValue(v))
				}
				items.OutputHoneycomb.Streamtags = make([]types.String, 0, len(itemsItem.OutputHoneycomb.Streamtags))
				for _, v := range itemsItem.OutputHoneycomb.Streamtags {
					items.OutputHoneycomb.Streamtags = append(items.OutputHoneycomb.Streamtags, types.StringValue(v))
				}
				items.OutputHoneycomb.SystemFields = make([]types.String, 0, len(itemsItem.OutputHoneycomb.SystemFields))
				for _, v := range itemsItem.OutputHoneycomb.SystemFields {
					items.OutputHoneycomb.SystemFields = append(items.OutputHoneycomb.SystemFields, types.StringValue(v))
				}
				items.OutputHoneycomb.Team = types.StringPointerValue(itemsItem.OutputHoneycomb.Team)
				items.OutputHoneycomb.TextSecret = types.StringPointerValue(itemsItem.OutputHoneycomb.TextSecret)
				if itemsItem.OutputHoneycomb.TimeoutRetrySettings == nil {
					items.OutputHoneycomb.TimeoutRetrySettings = nil
				} else {
					items.OutputHoneycomb.TimeoutRetrySettings = &tfTypes.OutputHoneycombTimeoutRetrySettings{}
					items.OutputHoneycomb.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputHoneycomb.TimeoutRetrySettings.BackoffRate)
					items.OutputHoneycomb.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputHoneycomb.TimeoutRetrySettings.InitialBackoff)
					items.OutputHoneycomb.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputHoneycomb.TimeoutRetrySettings.MaxBackoff)
					items.OutputHoneycomb.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputHoneycomb.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputHoneycomb.TimeoutSec = types.Float64PointerValue(itemsItem.OutputHoneycomb.TimeoutSec)
				items.OutputHoneycomb.Type = types.StringValue(string(itemsItem.OutputHoneycomb.Type))
				items.OutputHoneycomb.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputHoneycomb.UseRoundRobinDNS)
			}
			if itemsItem.OutputHumioHec != nil {
				items.OutputHumioHec = &tfTypes.OutputHumioHec{}
				if itemsItem.OutputHumioHec.AuthType != nil {
					items.OutputHumioHec.AuthType = types.StringValue(string(*itemsItem.OutputHumioHec.AuthType))
				} else {
					items.OutputHumioHec.AuthType = types.StringNull()
				}
				items.OutputHumioHec.Compress = types.BoolPointerValue(itemsItem.OutputHumioHec.Compress)
				items.OutputHumioHec.Concurrency = types.Float64PointerValue(itemsItem.OutputHumioHec.Concurrency)
				items.OutputHumioHec.Description = types.StringPointerValue(itemsItem.OutputHumioHec.Description)
				items.OutputHumioHec.Environment = types.StringPointerValue(itemsItem.OutputHumioHec.Environment)
				items.OutputHumioHec.ExtraHTTPHeaders = []tfTypes.OutputHumioHecExtraHTTPHeader{}

				for _, extraHTTPHeadersItem14 := range itemsItem.OutputHumioHec.ExtraHTTPHeaders {
					var extraHTTPHeaders14 tfTypes.OutputHumioHecExtraHTTPHeader

					extraHTTPHeaders14.Name = types.StringPointerValue(extraHTTPHeadersItem14.Name)
					extraHTTPHeaders14.Value = types.StringValue(extraHTTPHeadersItem14.Value)

					items.OutputHumioHec.ExtraHTTPHeaders = append(items.OutputHumioHec.ExtraHTTPHeaders, extraHTTPHeaders14)
				}
				if itemsItem.OutputHumioHec.FailedRequestLoggingMode != nil {
					items.OutputHumioHec.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputHumioHec.FailedRequestLoggingMode))
				} else {
					items.OutputHumioHec.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputHumioHec.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputHumioHec.FlushPeriodSec)
				if itemsItem.OutputHumioHec.Format != nil {
					items.OutputHumioHec.Format = types.StringValue(string(*itemsItem.OutputHumioHec.Format))
				} else {
					items.OutputHumioHec.Format = types.StringNull()
				}
				items.OutputHumioHec.ID = types.StringPointerValue(itemsItem.OutputHumioHec.ID)
				items.OutputHumioHec.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputHumioHec.MaxPayloadEvents)
				items.OutputHumioHec.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputHumioHec.MaxPayloadSizeKB)
				if itemsItem.OutputHumioHec.OnBackpressure != nil {
					items.OutputHumioHec.OnBackpressure = types.StringValue(string(*itemsItem.OutputHumioHec.OnBackpressure))
				} else {
					items.OutputHumioHec.OnBackpressure = types.StringNull()
				}
				items.OutputHumioHec.Pipeline = types.StringPointerValue(itemsItem.OutputHumioHec.Pipeline)
				if itemsItem.OutputHumioHec.PqCompress != nil {
					items.OutputHumioHec.PqCompress = types.StringValue(string(*itemsItem.OutputHumioHec.PqCompress))
				} else {
					items.OutputHumioHec.PqCompress = types.StringNull()
				}
				if itemsItem.OutputHumioHec.PqControls == nil {
					items.OutputHumioHec.PqControls = nil
				} else {
					items.OutputHumioHec.PqControls = &tfTypes.OutputHumioHecPqControls{}
				}
				items.OutputHumioHec.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputHumioHec.PqMaxFileSize)
				items.OutputHumioHec.PqMaxSize = types.StringPointerValue(itemsItem.OutputHumioHec.PqMaxSize)
				if itemsItem.OutputHumioHec.PqMode != nil {
					items.OutputHumioHec.PqMode = types.StringValue(string(*itemsItem.OutputHumioHec.PqMode))
				} else {
					items.OutputHumioHec.PqMode = types.StringNull()
				}
				if itemsItem.OutputHumioHec.PqOnBackpressure != nil {
					items.OutputHumioHec.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputHumioHec.PqOnBackpressure))
				} else {
					items.OutputHumioHec.PqOnBackpressure = types.StringNull()
				}
				items.OutputHumioHec.PqPath = types.StringPointerValue(itemsItem.OutputHumioHec.PqPath)
				items.OutputHumioHec.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputHumioHec.RejectUnauthorized)
				items.OutputHumioHec.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputHumioHec.ResponseHonorRetryAfterHeader)
				items.OutputHumioHec.ResponseRetrySettings = []tfTypes.OutputHumioHecResponseRetrySetting{}

				for _, responseRetrySettingsItem15 := range itemsItem.OutputHumioHec.ResponseRetrySettings {
					var responseRetrySettings15 tfTypes.OutputHumioHecResponseRetrySetting

					responseRetrySettings15.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem15.BackoffRate)
					responseRetrySettings15.HTTPStatus = types.Float64Value(responseRetrySettingsItem15.HTTPStatus)
					responseRetrySettings15.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem15.InitialBackoff)
					responseRetrySettings15.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem15.MaxBackoff)

					items.OutputHumioHec.ResponseRetrySettings = append(items.OutputHumioHec.ResponseRetrySettings, responseRetrySettings15)
				}
				items.OutputHumioHec.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputHumioHec.SafeHeaders))
				for _, v := range itemsItem.OutputHumioHec.SafeHeaders {
					items.OutputHumioHec.SafeHeaders = append(items.OutputHumioHec.SafeHeaders, types.StringValue(v))
				}
				items.OutputHumioHec.Streamtags = make([]types.String, 0, len(itemsItem.OutputHumioHec.Streamtags))
				for _, v := range itemsItem.OutputHumioHec.Streamtags {
					items.OutputHumioHec.Streamtags = append(items.OutputHumioHec.Streamtags, types.StringValue(v))
				}
				items.OutputHumioHec.SystemFields = make([]types.String, 0, len(itemsItem.OutputHumioHec.SystemFields))
				for _, v := range itemsItem.OutputHumioHec.SystemFields {
					items.OutputHumioHec.SystemFields = append(items.OutputHumioHec.SystemFields, types.StringValue(v))
				}
				items.OutputHumioHec.TextSecret = types.StringPointerValue(itemsItem.OutputHumioHec.TextSecret)
				if itemsItem.OutputHumioHec.TimeoutRetrySettings == nil {
					items.OutputHumioHec.TimeoutRetrySettings = nil
				} else {
					items.OutputHumioHec.TimeoutRetrySettings = &tfTypes.OutputHumioHecTimeoutRetrySettings{}
					items.OutputHumioHec.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputHumioHec.TimeoutRetrySettings.BackoffRate)
					items.OutputHumioHec.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputHumioHec.TimeoutRetrySettings.InitialBackoff)
					items.OutputHumioHec.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputHumioHec.TimeoutRetrySettings.MaxBackoff)
					items.OutputHumioHec.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputHumioHec.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputHumioHec.TimeoutSec = types.Float64PointerValue(itemsItem.OutputHumioHec.TimeoutSec)
				items.OutputHumioHec.Token = types.StringPointerValue(itemsItem.OutputHumioHec.Token)
				if itemsItem.OutputHumioHec.Type != nil {
					items.OutputHumioHec.Type = types.StringValue(string(*itemsItem.OutputHumioHec.Type))
				} else {
					items.OutputHumioHec.Type = types.StringNull()
				}
				items.OutputHumioHec.URL = types.StringPointerValue(itemsItem.OutputHumioHec.URL)
				items.OutputHumioHec.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputHumioHec.UseRoundRobinDNS)
			}
			if itemsItem.OutputInfluxdb != nil {
				items.OutputInfluxdb = &tfTypes.OutputInfluxdb{}
				items.OutputInfluxdb.AuthHeaderExpr = types.StringPointerValue(itemsItem.OutputInfluxdb.AuthHeaderExpr)
				if itemsItem.OutputInfluxdb.AuthType != nil {
					items.OutputInfluxdb.AuthType = types.StringValue(string(*itemsItem.OutputInfluxdb.AuthType))
				} else {
					items.OutputInfluxdb.AuthType = types.StringNull()
				}
				items.OutputInfluxdb.Bucket = types.StringPointerValue(itemsItem.OutputInfluxdb.Bucket)
				items.OutputInfluxdb.Compress = types.BoolPointerValue(itemsItem.OutputInfluxdb.Compress)
				items.OutputInfluxdb.Concurrency = types.Float64PointerValue(itemsItem.OutputInfluxdb.Concurrency)
				items.OutputInfluxdb.CredentialsSecret = types.StringPointerValue(itemsItem.OutputInfluxdb.CredentialsSecret)
				items.OutputInfluxdb.Database = types.StringPointerValue(itemsItem.OutputInfluxdb.Database)
				items.OutputInfluxdb.Description = types.StringPointerValue(itemsItem.OutputInfluxdb.Description)
				items.OutputInfluxdb.DynamicValueFieldName = types.BoolPointerValue(itemsItem.OutputInfluxdb.DynamicValueFieldName)
				items.OutputInfluxdb.Environment = types.StringPointerValue(itemsItem.OutputInfluxdb.Environment)
				items.OutputInfluxdb.ExtraHTTPHeaders = []tfTypes.OutputInfluxdbExtraHTTPHeader{}

				for _, extraHTTPHeadersItem15 := range itemsItem.OutputInfluxdb.ExtraHTTPHeaders {
					var extraHTTPHeaders15 tfTypes.OutputInfluxdbExtraHTTPHeader

					extraHTTPHeaders15.Name = types.StringPointerValue(extraHTTPHeadersItem15.Name)
					extraHTTPHeaders15.Value = types.StringValue(extraHTTPHeadersItem15.Value)

					items.OutputInfluxdb.ExtraHTTPHeaders = append(items.OutputInfluxdb.ExtraHTTPHeaders, extraHTTPHeaders15)
				}
				if itemsItem.OutputInfluxdb.FailedRequestLoggingMode != nil {
					items.OutputInfluxdb.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputInfluxdb.FailedRequestLoggingMode))
				} else {
					items.OutputInfluxdb.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputInfluxdb.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputInfluxdb.FlushPeriodSec)
				items.OutputInfluxdb.ID = types.StringPointerValue(itemsItem.OutputInfluxdb.ID)
				items.OutputInfluxdb.LoginURL = types.StringPointerValue(itemsItem.OutputInfluxdb.LoginURL)
				items.OutputInfluxdb.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputInfluxdb.MaxPayloadEvents)
				items.OutputInfluxdb.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputInfluxdb.MaxPayloadSizeKB)
				items.OutputInfluxdb.OauthHeaders = []tfTypes.OutputInfluxdbOauthHeader{}

				for _, oauthHeadersItem1 := range itemsItem.OutputInfluxdb.OauthHeaders {
					var oauthHeaders1 tfTypes.OutputInfluxdbOauthHeader

					oauthHeaders1.Name = types.StringValue(oauthHeadersItem1.Name)
					oauthHeaders1.Value = types.StringValue(oauthHeadersItem1.Value)

					items.OutputInfluxdb.OauthHeaders = append(items.OutputInfluxdb.OauthHeaders, oauthHeaders1)
				}
				items.OutputInfluxdb.OauthParams = []tfTypes.OutputInfluxdbOauthParam{}

				for _, oauthParamsItem1 := range itemsItem.OutputInfluxdb.OauthParams {
					var oauthParams1 tfTypes.OutputInfluxdbOauthParam

					oauthParams1.Name = types.StringValue(oauthParamsItem1.Name)
					oauthParams1.Value = types.StringValue(oauthParamsItem1.Value)

					items.OutputInfluxdb.OauthParams = append(items.OutputInfluxdb.OauthParams, oauthParams1)
				}
				if itemsItem.OutputInfluxdb.OnBackpressure != nil {
					items.OutputInfluxdb.OnBackpressure = types.StringValue(string(*itemsItem.OutputInfluxdb.OnBackpressure))
				} else {
					items.OutputInfluxdb.OnBackpressure = types.StringNull()
				}
				items.OutputInfluxdb.Org = types.StringPointerValue(itemsItem.OutputInfluxdb.Org)
				items.OutputInfluxdb.Password = types.StringPointerValue(itemsItem.OutputInfluxdb.Password)
				items.OutputInfluxdb.Pipeline = types.StringPointerValue(itemsItem.OutputInfluxdb.Pipeline)
				if itemsItem.OutputInfluxdb.PqCompress != nil {
					items.OutputInfluxdb.PqCompress = types.StringValue(string(*itemsItem.OutputInfluxdb.PqCompress))
				} else {
					items.OutputInfluxdb.PqCompress = types.StringNull()
				}
				if itemsItem.OutputInfluxdb.PqControls == nil {
					items.OutputInfluxdb.PqControls = nil
				} else {
					items.OutputInfluxdb.PqControls = &tfTypes.OutputInfluxdbPqControls{}
				}
				items.OutputInfluxdb.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputInfluxdb.PqMaxFileSize)
				items.OutputInfluxdb.PqMaxSize = types.StringPointerValue(itemsItem.OutputInfluxdb.PqMaxSize)
				if itemsItem.OutputInfluxdb.PqMode != nil {
					items.OutputInfluxdb.PqMode = types.StringValue(string(*itemsItem.OutputInfluxdb.PqMode))
				} else {
					items.OutputInfluxdb.PqMode = types.StringNull()
				}
				if itemsItem.OutputInfluxdb.PqOnBackpressure != nil {
					items.OutputInfluxdb.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputInfluxdb.PqOnBackpressure))
				} else {
					items.OutputInfluxdb.PqOnBackpressure = types.StringNull()
				}
				items.OutputInfluxdb.PqPath = types.StringPointerValue(itemsItem.OutputInfluxdb.PqPath)
				items.OutputInfluxdb.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputInfluxdb.RejectUnauthorized)
				items.OutputInfluxdb.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputInfluxdb.ResponseHonorRetryAfterHeader)
				items.OutputInfluxdb.ResponseRetrySettings = []tfTypes.OutputInfluxdbResponseRetrySetting{}

				for _, responseRetrySettingsItem16 := range itemsItem.OutputInfluxdb.ResponseRetrySettings {
					var responseRetrySettings16 tfTypes.OutputInfluxdbResponseRetrySetting

					responseRetrySettings16.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem16.BackoffRate)
					responseRetrySettings16.HTTPStatus = types.Float64Value(responseRetrySettingsItem16.HTTPStatus)
					responseRetrySettings16.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem16.InitialBackoff)
					responseRetrySettings16.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem16.MaxBackoff)

					items.OutputInfluxdb.ResponseRetrySettings = append(items.OutputInfluxdb.ResponseRetrySettings, responseRetrySettings16)
				}
				items.OutputInfluxdb.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputInfluxdb.SafeHeaders))
				for _, v := range itemsItem.OutputInfluxdb.SafeHeaders {
					items.OutputInfluxdb.SafeHeaders = append(items.OutputInfluxdb.SafeHeaders, types.StringValue(v))
				}
				items.OutputInfluxdb.Secret = types.StringPointerValue(itemsItem.OutputInfluxdb.Secret)
				items.OutputInfluxdb.SecretParamName = types.StringPointerValue(itemsItem.OutputInfluxdb.SecretParamName)
				items.OutputInfluxdb.Streamtags = make([]types.String, 0, len(itemsItem.OutputInfluxdb.Streamtags))
				for _, v := range itemsItem.OutputInfluxdb.Streamtags {
					items.OutputInfluxdb.Streamtags = append(items.OutputInfluxdb.Streamtags, types.StringValue(v))
				}
				items.OutputInfluxdb.SystemFields = make([]types.String, 0, len(itemsItem.OutputInfluxdb.SystemFields))
				for _, v := range itemsItem.OutputInfluxdb.SystemFields {
					items.OutputInfluxdb.SystemFields = append(items.OutputInfluxdb.SystemFields, types.StringValue(v))
				}
				items.OutputInfluxdb.TextSecret = types.StringPointerValue(itemsItem.OutputInfluxdb.TextSecret)
				if itemsItem.OutputInfluxdb.TimeoutRetrySettings == nil {
					items.OutputInfluxdb.TimeoutRetrySettings = nil
				} else {
					items.OutputInfluxdb.TimeoutRetrySettings = &tfTypes.OutputInfluxdbTimeoutRetrySettings{}
					items.OutputInfluxdb.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputInfluxdb.TimeoutRetrySettings.BackoffRate)
					items.OutputInfluxdb.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputInfluxdb.TimeoutRetrySettings.InitialBackoff)
					items.OutputInfluxdb.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputInfluxdb.TimeoutRetrySettings.MaxBackoff)
					items.OutputInfluxdb.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputInfluxdb.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputInfluxdb.TimeoutSec = types.Float64PointerValue(itemsItem.OutputInfluxdb.TimeoutSec)
				if itemsItem.OutputInfluxdb.TimestampPrecision != nil {
					items.OutputInfluxdb.TimestampPrecision = types.StringValue(string(*itemsItem.OutputInfluxdb.TimestampPrecision))
				} else {
					items.OutputInfluxdb.TimestampPrecision = types.StringNull()
				}
				items.OutputInfluxdb.Token = types.StringPointerValue(itemsItem.OutputInfluxdb.Token)
				items.OutputInfluxdb.TokenAttributeName = types.StringPointerValue(itemsItem.OutputInfluxdb.TokenAttributeName)
				items.OutputInfluxdb.TokenTimeoutSecs = types.Float64PointerValue(itemsItem.OutputInfluxdb.TokenTimeoutSecs)
				items.OutputInfluxdb.Type = types.StringValue(string(itemsItem.OutputInfluxdb.Type))
				items.OutputInfluxdb.URL = types.StringValue(itemsItem.OutputInfluxdb.URL)
				items.OutputInfluxdb.Username = types.StringPointerValue(itemsItem.OutputInfluxdb.Username)
				items.OutputInfluxdb.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputInfluxdb.UseRoundRobinDNS)
				items.OutputInfluxdb.UseV2API = types.BoolPointerValue(itemsItem.OutputInfluxdb.UseV2API)
				items.OutputInfluxdb.ValueFieldName = types.StringPointerValue(itemsItem.OutputInfluxdb.ValueFieldName)
			}
			if itemsItem.OutputKafka != nil {
				items.OutputKafka = &tfTypes.OutputKafka{}
				if itemsItem.OutputKafka.Ack != nil {
					items.OutputKafka.Ack = types.Int64Value(int64(*itemsItem.OutputKafka.Ack))
				} else {
					items.OutputKafka.Ack = types.Int64Null()
				}
				items.OutputKafka.AuthenticationTimeout = types.Float64PointerValue(itemsItem.OutputKafka.AuthenticationTimeout)
				items.OutputKafka.BackoffRate = types.Float64PointerValue(itemsItem.OutputKafka.BackoffRate)
				items.OutputKafka.Brokers = make([]types.String, 0, len(itemsItem.OutputKafka.Brokers))
				for _, v := range itemsItem.OutputKafka.Brokers {
					items.OutputKafka.Brokers = append(items.OutputKafka.Brokers, types.StringValue(v))
				}
				if itemsItem.OutputKafka.Compression != nil {
					items.OutputKafka.Compression = types.StringValue(string(*itemsItem.OutputKafka.Compression))
				} else {
					items.OutputKafka.Compression = types.StringNull()
				}
				items.OutputKafka.ConnectionTimeout = types.Float64PointerValue(itemsItem.OutputKafka.ConnectionTimeout)
				items.OutputKafka.Description = types.StringPointerValue(itemsItem.OutputKafka.Description)
				items.OutputKafka.Environment = types.StringPointerValue(itemsItem.OutputKafka.Environment)
				items.OutputKafka.FlushEventCount = types.Float64PointerValue(itemsItem.OutputKafka.FlushEventCount)
				items.OutputKafka.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputKafka.FlushPeriodSec)
				if itemsItem.OutputKafka.Format != nil {
					items.OutputKafka.Format = types.StringValue(string(*itemsItem.OutputKafka.Format))
				} else {
					items.OutputKafka.Format = types.StringNull()
				}
				items.OutputKafka.ID = types.StringPointerValue(itemsItem.OutputKafka.ID)
				items.OutputKafka.InitialBackoff = types.Float64PointerValue(itemsItem.OutputKafka.InitialBackoff)
				if itemsItem.OutputKafka.KafkaSchemaRegistry == nil {
					items.OutputKafka.KafkaSchemaRegistry = nil
				} else {
					items.OutputKafka.KafkaSchemaRegistry = &tfTypes.OutputKafkaKafkaSchemaRegistryAuthentication{}
					if itemsItem.OutputKafka.KafkaSchemaRegistry.Auth == nil {
						items.OutputKafka.KafkaSchemaRegistry.Auth = nil
					} else {
						items.OutputKafka.KafkaSchemaRegistry.Auth = &tfTypes.OutputKafkaAuth{}
						items.OutputKafka.KafkaSchemaRegistry.Auth.CredentialsSecret = types.StringPointerValue(itemsItem.OutputKafka.KafkaSchemaRegistry.Auth.CredentialsSecret)
						items.OutputKafka.KafkaSchemaRegistry.Auth.Disabled = types.BoolPointerValue(itemsItem.OutputKafka.KafkaSchemaRegistry.Auth.Disabled)
					}
					items.OutputKafka.KafkaSchemaRegistry.ConnectionTimeout = types.Float64PointerValue(itemsItem.OutputKafka.KafkaSchemaRegistry.ConnectionTimeout)
					items.OutputKafka.KafkaSchemaRegistry.DefaultKeySchemaID = types.Float64PointerValue(itemsItem.OutputKafka.KafkaSchemaRegistry.DefaultKeySchemaID)
					items.OutputKafka.KafkaSchemaRegistry.DefaultValueSchemaID = types.Float64PointerValue(itemsItem.OutputKafka.KafkaSchemaRegistry.DefaultValueSchemaID)
					items.OutputKafka.KafkaSchemaRegistry.Disabled = types.BoolPointerValue(itemsItem.OutputKafka.KafkaSchemaRegistry.Disabled)
					items.OutputKafka.KafkaSchemaRegistry.MaxRetries = types.Float64PointerValue(itemsItem.OutputKafka.KafkaSchemaRegistry.MaxRetries)
					items.OutputKafka.KafkaSchemaRegistry.RequestTimeout = types.Float64PointerValue(itemsItem.OutputKafka.KafkaSchemaRegistry.RequestTimeout)
					items.OutputKafka.KafkaSchemaRegistry.SchemaRegistryURL = types.StringPointerValue(itemsItem.OutputKafka.KafkaSchemaRegistry.SchemaRegistryURL)
					if itemsItem.OutputKafka.KafkaSchemaRegistry.TLS == nil {
						items.OutputKafka.KafkaSchemaRegistry.TLS = nil
					} else {
						items.OutputKafka.KafkaSchemaRegistry.TLS = &tfTypes.OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide{}
						items.OutputKafka.KafkaSchemaRegistry.TLS.CaPath = types.StringPointerValue(itemsItem.OutputKafka.KafkaSchemaRegistry.TLS.CaPath)
						items.OutputKafka.KafkaSchemaRegistry.TLS.CertificateName = types.StringPointerValue(itemsItem.OutputKafka.KafkaSchemaRegistry.TLS.CertificateName)
						items.OutputKafka.KafkaSchemaRegistry.TLS.CertPath = types.StringPointerValue(itemsItem.OutputKafka.KafkaSchemaRegistry.TLS.CertPath)
						items.OutputKafka.KafkaSchemaRegistry.TLS.Disabled = types.BoolPointerValue(itemsItem.OutputKafka.KafkaSchemaRegistry.TLS.Disabled)
						if itemsItem.OutputKafka.KafkaSchemaRegistry.TLS.MaxVersion != nil {
							items.OutputKafka.KafkaSchemaRegistry.TLS.MaxVersion = types.StringValue(string(*itemsItem.OutputKafka.KafkaSchemaRegistry.TLS.MaxVersion))
						} else {
							items.OutputKafka.KafkaSchemaRegistry.TLS.MaxVersion = types.StringNull()
						}
						if itemsItem.OutputKafka.KafkaSchemaRegistry.TLS.MinVersion != nil {
							items.OutputKafka.KafkaSchemaRegistry.TLS.MinVersion = types.StringValue(string(*itemsItem.OutputKafka.KafkaSchemaRegistry.TLS.MinVersion))
						} else {
							items.OutputKafka.KafkaSchemaRegistry.TLS.MinVersion = types.StringNull()
						}
						items.OutputKafka.KafkaSchemaRegistry.TLS.Passphrase = types.StringPointerValue(itemsItem.OutputKafka.KafkaSchemaRegistry.TLS.Passphrase)
						items.OutputKafka.KafkaSchemaRegistry.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.OutputKafka.KafkaSchemaRegistry.TLS.PrivKeyPath)
						items.OutputKafka.KafkaSchemaRegistry.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputKafka.KafkaSchemaRegistry.TLS.RejectUnauthorized)
						items.OutputKafka.KafkaSchemaRegistry.TLS.Servername = types.StringPointerValue(itemsItem.OutputKafka.KafkaSchemaRegistry.TLS.Servername)
					}
				}
				items.OutputKafka.MaxBackOff = types.Float64PointerValue(itemsItem.OutputKafka.MaxBackOff)
				items.OutputKafka.MaxRecordSizeKB = types.Float64PointerValue(itemsItem.OutputKafka.MaxRecordSizeKB)
				items.OutputKafka.MaxRetries = types.Float64PointerValue(itemsItem.OutputKafka.MaxRetries)
				if itemsItem.OutputKafka.OnBackpressure != nil {
					items.OutputKafka.OnBackpressure = types.StringValue(string(*itemsItem.OutputKafka.OnBackpressure))
				} else {
					items.OutputKafka.OnBackpressure = types.StringNull()
				}
				items.OutputKafka.Pipeline = types.StringPointerValue(itemsItem.OutputKafka.Pipeline)
				if itemsItem.OutputKafka.PqCompress != nil {
					items.OutputKafka.PqCompress = types.StringValue(string(*itemsItem.OutputKafka.PqCompress))
				} else {
					items.OutputKafka.PqCompress = types.StringNull()
				}
				if itemsItem.OutputKafka.PqControls == nil {
					items.OutputKafka.PqControls = nil
				} else {
					items.OutputKafka.PqControls = &tfTypes.OutputKafkaPqControls{}
				}
				items.OutputKafka.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputKafka.PqMaxFileSize)
				items.OutputKafka.PqMaxSize = types.StringPointerValue(itemsItem.OutputKafka.PqMaxSize)
				if itemsItem.OutputKafka.PqMode != nil {
					items.OutputKafka.PqMode = types.StringValue(string(*itemsItem.OutputKafka.PqMode))
				} else {
					items.OutputKafka.PqMode = types.StringNull()
				}
				if itemsItem.OutputKafka.PqOnBackpressure != nil {
					items.OutputKafka.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputKafka.PqOnBackpressure))
				} else {
					items.OutputKafka.PqOnBackpressure = types.StringNull()
				}
				items.OutputKafka.PqPath = types.StringPointerValue(itemsItem.OutputKafka.PqPath)
				items.OutputKafka.ProtobufLibraryID = types.StringPointerValue(itemsItem.OutputKafka.ProtobufLibraryID)
				items.OutputKafka.ReauthenticationThreshold = types.Float64PointerValue(itemsItem.OutputKafka.ReauthenticationThreshold)
				items.OutputKafka.RequestTimeout = types.Float64PointerValue(itemsItem.OutputKafka.RequestTimeout)
				if itemsItem.OutputKafka.Sasl == nil {
					items.OutputKafka.Sasl = nil
				} else {
					items.OutputKafka.Sasl = &tfTypes.OutputKafkaAuthentication{}
					items.OutputKafka.Sasl.Disabled = types.BoolPointerValue(itemsItem.OutputKafka.Sasl.Disabled)
					if itemsItem.OutputKafka.Sasl.Mechanism != nil {
						items.OutputKafka.Sasl.Mechanism = types.StringValue(string(*itemsItem.OutputKafka.Sasl.Mechanism))
					} else {
						items.OutputKafka.Sasl.Mechanism = types.StringNull()
					}
				}
				items.OutputKafka.Streamtags = make([]types.String, 0, len(itemsItem.OutputKafka.Streamtags))
				for _, v := range itemsItem.OutputKafka.Streamtags {
					items.OutputKafka.Streamtags = append(items.OutputKafka.Streamtags, types.StringValue(v))
				}
				items.OutputKafka.SystemFields = make([]types.String, 0, len(itemsItem.OutputKafka.SystemFields))
				for _, v := range itemsItem.OutputKafka.SystemFields {
					items.OutputKafka.SystemFields = append(items.OutputKafka.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputKafka.TLS == nil {
					items.OutputKafka.TLS = nil
				} else {
					items.OutputKafka.TLS = &tfTypes.OutputKafkaTLSSettingsClientSide{}
					items.OutputKafka.TLS.CaPath = types.StringPointerValue(itemsItem.OutputKafka.TLS.CaPath)
					items.OutputKafka.TLS.CertificateName = types.StringPointerValue(itemsItem.OutputKafka.TLS.CertificateName)
					items.OutputKafka.TLS.CertPath = types.StringPointerValue(itemsItem.OutputKafka.TLS.CertPath)
					items.OutputKafka.TLS.Disabled = types.BoolPointerValue(itemsItem.OutputKafka.TLS.Disabled)
					if itemsItem.OutputKafka.TLS.MaxVersion != nil {
						items.OutputKafka.TLS.MaxVersion = types.StringValue(string(*itemsItem.OutputKafka.TLS.MaxVersion))
					} else {
						items.OutputKafka.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.OutputKafka.TLS.MinVersion != nil {
						items.OutputKafka.TLS.MinVersion = types.StringValue(string(*itemsItem.OutputKafka.TLS.MinVersion))
					} else {
						items.OutputKafka.TLS.MinVersion = types.StringNull()
					}
					items.OutputKafka.TLS.Passphrase = types.StringPointerValue(itemsItem.OutputKafka.TLS.Passphrase)
					items.OutputKafka.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.OutputKafka.TLS.PrivKeyPath)
					items.OutputKafka.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputKafka.TLS.RejectUnauthorized)
					items.OutputKafka.TLS.Servername = types.StringPointerValue(itemsItem.OutputKafka.TLS.Servername)
				}
				items.OutputKafka.Topic = types.StringValue(itemsItem.OutputKafka.Topic)
				if itemsItem.OutputKafka.Type != nil {
					items.OutputKafka.Type = types.StringValue(string(*itemsItem.OutputKafka.Type))
				} else {
					items.OutputKafka.Type = types.StringNull()
				}
			}
			if itemsItem.OutputKinesis != nil {
				items.OutputKinesis = &tfTypes.OutputKinesis{}
				items.OutputKinesis.AsNdjson = types.BoolPointerValue(itemsItem.OutputKinesis.AsNdjson)
				items.OutputKinesis.AssumeRoleArn = types.StringPointerValue(itemsItem.OutputKinesis.AssumeRoleArn)
				items.OutputKinesis.AssumeRoleExternalID = types.StringPointerValue(itemsItem.OutputKinesis.AssumeRoleExternalID)
				items.OutputKinesis.AwsAPIKey = types.StringPointerValue(itemsItem.OutputKinesis.AwsAPIKey)
				if itemsItem.OutputKinesis.AwsAuthenticationMethod != nil {
					items.OutputKinesis.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.OutputKinesis.AwsAuthenticationMethod))
				} else {
					items.OutputKinesis.AwsAuthenticationMethod = types.StringNull()
				}
				items.OutputKinesis.AwsSecret = types.StringPointerValue(itemsItem.OutputKinesis.AwsSecret)
				items.OutputKinesis.AwsSecretKey = types.StringPointerValue(itemsItem.OutputKinesis.AwsSecretKey)
				if itemsItem.OutputKinesis.Compression != nil {
					items.OutputKinesis.Compression = types.StringValue(string(*itemsItem.OutputKinesis.Compression))
				} else {
					items.OutputKinesis.Compression = types.StringNull()
				}
				items.OutputKinesis.Concurrency = types.Float64PointerValue(itemsItem.OutputKinesis.Concurrency)
				items.OutputKinesis.Description = types.StringPointerValue(itemsItem.OutputKinesis.Description)
				items.OutputKinesis.DurationSeconds = types.Float64PointerValue(itemsItem.OutputKinesis.DurationSeconds)
				items.OutputKinesis.EnableAssumeRole = types.BoolPointerValue(itemsItem.OutputKinesis.EnableAssumeRole)
				items.OutputKinesis.Endpoint = types.StringPointerValue(itemsItem.OutputKinesis.Endpoint)
				items.OutputKinesis.Environment = types.StringPointerValue(itemsItem.OutputKinesis.Environment)
				items.OutputKinesis.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputKinesis.FlushPeriodSec)
				items.OutputKinesis.ID = types.StringPointerValue(itemsItem.OutputKinesis.ID)
				items.OutputKinesis.MaxRecordSizeKB = types.Float64PointerValue(itemsItem.OutputKinesis.MaxRecordSizeKB)
				if itemsItem.OutputKinesis.OnBackpressure != nil {
					items.OutputKinesis.OnBackpressure = types.StringValue(string(*itemsItem.OutputKinesis.OnBackpressure))
				} else {
					items.OutputKinesis.OnBackpressure = types.StringNull()
				}
				items.OutputKinesis.Pipeline = types.StringPointerValue(itemsItem.OutputKinesis.Pipeline)
				if itemsItem.OutputKinesis.PqCompress != nil {
					items.OutputKinesis.PqCompress = types.StringValue(string(*itemsItem.OutputKinesis.PqCompress))
				} else {
					items.OutputKinesis.PqCompress = types.StringNull()
				}
				if itemsItem.OutputKinesis.PqControls == nil {
					items.OutputKinesis.PqControls = nil
				} else {
					items.OutputKinesis.PqControls = &tfTypes.OutputKinesisPqControls{}
				}
				items.OutputKinesis.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputKinesis.PqMaxFileSize)
				items.OutputKinesis.PqMaxSize = types.StringPointerValue(itemsItem.OutputKinesis.PqMaxSize)
				if itemsItem.OutputKinesis.PqMode != nil {
					items.OutputKinesis.PqMode = types.StringValue(string(*itemsItem.OutputKinesis.PqMode))
				} else {
					items.OutputKinesis.PqMode = types.StringNull()
				}
				if itemsItem.OutputKinesis.PqOnBackpressure != nil {
					items.OutputKinesis.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputKinesis.PqOnBackpressure))
				} else {
					items.OutputKinesis.PqOnBackpressure = types.StringNull()
				}
				items.OutputKinesis.PqPath = types.StringPointerValue(itemsItem.OutputKinesis.PqPath)
				items.OutputKinesis.Region = types.StringValue(itemsItem.OutputKinesis.Region)
				items.OutputKinesis.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputKinesis.RejectUnauthorized)
				items.OutputKinesis.ReuseConnections = types.BoolPointerValue(itemsItem.OutputKinesis.ReuseConnections)
				if itemsItem.OutputKinesis.SignatureVersion != nil {
					items.OutputKinesis.SignatureVersion = types.StringValue(string(*itemsItem.OutputKinesis.SignatureVersion))
				} else {
					items.OutputKinesis.SignatureVersion = types.StringNull()
				}
				items.OutputKinesis.StreamName = types.StringValue(itemsItem.OutputKinesis.StreamName)
				items.OutputKinesis.Streamtags = make([]types.String, 0, len(itemsItem.OutputKinesis.Streamtags))
				for _, v := range itemsItem.OutputKinesis.Streamtags {
					items.OutputKinesis.Streamtags = append(items.OutputKinesis.Streamtags, types.StringValue(v))
				}
				items.OutputKinesis.SystemFields = make([]types.String, 0, len(itemsItem.OutputKinesis.SystemFields))
				for _, v := range itemsItem.OutputKinesis.SystemFields {
					items.OutputKinesis.SystemFields = append(items.OutputKinesis.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputKinesis.Type != nil {
					items.OutputKinesis.Type = types.StringValue(string(*itemsItem.OutputKinesis.Type))
				} else {
					items.OutputKinesis.Type = types.StringNull()
				}
				items.OutputKinesis.UseListShards = types.BoolPointerValue(itemsItem.OutputKinesis.UseListShards)
			}
			if itemsItem.OutputLoki != nil {
				items.OutputLoki = &tfTypes.OutputLoki{}
				if itemsItem.OutputLoki.AuthType != nil {
					items.OutputLoki.AuthType = types.StringValue(string(*itemsItem.OutputLoki.AuthType))
				} else {
					items.OutputLoki.AuthType = types.StringNull()
				}
				items.OutputLoki.Compress = types.BoolPointerValue(itemsItem.OutputLoki.Compress)
				items.OutputLoki.Concurrency = types.Float64PointerValue(itemsItem.OutputLoki.Concurrency)
				items.OutputLoki.CredentialsSecret = types.StringPointerValue(itemsItem.OutputLoki.CredentialsSecret)
				items.OutputLoki.Description = types.StringPointerValue(itemsItem.OutputLoki.Description)
				items.OutputLoki.Environment = types.StringPointerValue(itemsItem.OutputLoki.Environment)
				items.OutputLoki.ExtraHTTPHeaders = []tfTypes.OutputLokiExtraHTTPHeader{}

				for _, extraHTTPHeadersItem16 := range itemsItem.OutputLoki.ExtraHTTPHeaders {
					var extraHTTPHeaders16 tfTypes.OutputLokiExtraHTTPHeader

					extraHTTPHeaders16.Name = types.StringPointerValue(extraHTTPHeadersItem16.Name)
					extraHTTPHeaders16.Value = types.StringValue(extraHTTPHeadersItem16.Value)

					items.OutputLoki.ExtraHTTPHeaders = append(items.OutputLoki.ExtraHTTPHeaders, extraHTTPHeaders16)
				}
				if itemsItem.OutputLoki.FailedRequestLoggingMode != nil {
					items.OutputLoki.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputLoki.FailedRequestLoggingMode))
				} else {
					items.OutputLoki.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputLoki.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputLoki.FlushPeriodSec)
				items.OutputLoki.ID = types.StringPointerValue(itemsItem.OutputLoki.ID)
				items.OutputLoki.Labels = []tfTypes.OutputLokiLabel{}

				for _, labelsItem2 := range itemsItem.OutputLoki.Labels {
					var labels2 tfTypes.OutputLokiLabel

					labels2.Name = types.StringPointerValue(labelsItem2.Name)
					labels2.Value = types.StringValue(labelsItem2.Value)

					items.OutputLoki.Labels = append(items.OutputLoki.Labels, labels2)
				}
				items.OutputLoki.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputLoki.MaxPayloadEvents)
				items.OutputLoki.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputLoki.MaxPayloadSizeKB)
				items.OutputLoki.Message = types.StringPointerValue(itemsItem.OutputLoki.Message)
				if itemsItem.OutputLoki.MessageFormat != nil {
					items.OutputLoki.MessageFormat = types.StringValue(string(*itemsItem.OutputLoki.MessageFormat))
				} else {
					items.OutputLoki.MessageFormat = types.StringNull()
				}
				if itemsItem.OutputLoki.OnBackpressure != nil {
					items.OutputLoki.OnBackpressure = types.StringValue(string(*itemsItem.OutputLoki.OnBackpressure))
				} else {
					items.OutputLoki.OnBackpressure = types.StringNull()
				}
				items.OutputLoki.Password = types.StringPointerValue(itemsItem.OutputLoki.Password)
				items.OutputLoki.Pipeline = types.StringPointerValue(itemsItem.OutputLoki.Pipeline)
				if itemsItem.OutputLoki.PqCompress != nil {
					items.OutputLoki.PqCompress = types.StringValue(string(*itemsItem.OutputLoki.PqCompress))
				} else {
					items.OutputLoki.PqCompress = types.StringNull()
				}
				if itemsItem.OutputLoki.PqControls == nil {
					items.OutputLoki.PqControls = nil
				} else {
					items.OutputLoki.PqControls = &tfTypes.OutputLokiPqControls{}
				}
				items.OutputLoki.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputLoki.PqMaxFileSize)
				items.OutputLoki.PqMaxSize = types.StringPointerValue(itemsItem.OutputLoki.PqMaxSize)
				if itemsItem.OutputLoki.PqMode != nil {
					items.OutputLoki.PqMode = types.StringValue(string(*itemsItem.OutputLoki.PqMode))
				} else {
					items.OutputLoki.PqMode = types.StringNull()
				}
				if itemsItem.OutputLoki.PqOnBackpressure != nil {
					items.OutputLoki.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputLoki.PqOnBackpressure))
				} else {
					items.OutputLoki.PqOnBackpressure = types.StringNull()
				}
				items.OutputLoki.PqPath = types.StringPointerValue(itemsItem.OutputLoki.PqPath)
				items.OutputLoki.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputLoki.RejectUnauthorized)
				items.OutputLoki.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputLoki.ResponseHonorRetryAfterHeader)
				items.OutputLoki.ResponseRetrySettings = []tfTypes.OutputLokiResponseRetrySetting{}

				for _, responseRetrySettingsItem17 := range itemsItem.OutputLoki.ResponseRetrySettings {
					var responseRetrySettings17 tfTypes.OutputLokiResponseRetrySetting

					responseRetrySettings17.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem17.BackoffRate)
					responseRetrySettings17.HTTPStatus = types.Float64Value(responseRetrySettingsItem17.HTTPStatus)
					responseRetrySettings17.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem17.InitialBackoff)
					responseRetrySettings17.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem17.MaxBackoff)

					items.OutputLoki.ResponseRetrySettings = append(items.OutputLoki.ResponseRetrySettings, responseRetrySettings17)
				}
				items.OutputLoki.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputLoki.SafeHeaders))
				for _, v := range itemsItem.OutputLoki.SafeHeaders {
					items.OutputLoki.SafeHeaders = append(items.OutputLoki.SafeHeaders, types.StringValue(v))
				}
				items.OutputLoki.Streamtags = make([]types.String, 0, len(itemsItem.OutputLoki.Streamtags))
				for _, v := range itemsItem.OutputLoki.Streamtags {
					items.OutputLoki.Streamtags = append(items.OutputLoki.Streamtags, types.StringValue(v))
				}
				items.OutputLoki.SystemFields = make([]types.String, 0, len(itemsItem.OutputLoki.SystemFields))
				for _, v := range itemsItem.OutputLoki.SystemFields {
					items.OutputLoki.SystemFields = append(items.OutputLoki.SystemFields, types.StringValue(v))
				}
				items.OutputLoki.TextSecret = types.StringPointerValue(itemsItem.OutputLoki.TextSecret)
				if itemsItem.OutputLoki.TimeoutRetrySettings == nil {
					items.OutputLoki.TimeoutRetrySettings = nil
				} else {
					items.OutputLoki.TimeoutRetrySettings = &tfTypes.OutputLokiTimeoutRetrySettings{}
					items.OutputLoki.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputLoki.TimeoutRetrySettings.BackoffRate)
					items.OutputLoki.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputLoki.TimeoutRetrySettings.InitialBackoff)
					items.OutputLoki.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputLoki.TimeoutRetrySettings.MaxBackoff)
					items.OutputLoki.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputLoki.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputLoki.TimeoutSec = types.Float64PointerValue(itemsItem.OutputLoki.TimeoutSec)
				items.OutputLoki.Token = types.StringPointerValue(itemsItem.OutputLoki.Token)
				items.OutputLoki.TotalMemoryLimitKB = types.Float64PointerValue(itemsItem.OutputLoki.TotalMemoryLimitKB)
				items.OutputLoki.Type = types.StringValue(string(itemsItem.OutputLoki.Type))
				items.OutputLoki.URL = types.StringValue(itemsItem.OutputLoki.URL)
				items.OutputLoki.Username = types.StringPointerValue(itemsItem.OutputLoki.Username)
				items.OutputLoki.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputLoki.UseRoundRobinDNS)
			}
			if itemsItem.OutputMinio != nil {
				items.OutputMinio = &tfTypes.OutputMinio{}
				items.OutputMinio.AddIDToStagePath = types.BoolPointerValue(itemsItem.OutputMinio.AddIDToStagePath)
				items.OutputMinio.AutomaticSchema = types.BoolPointerValue(itemsItem.OutputMinio.AutomaticSchema)
				items.OutputMinio.AwsAPIKey = types.StringPointerValue(itemsItem.OutputMinio.AwsAPIKey)
				if itemsItem.OutputMinio.AwsAuthenticationMethod != nil {
					items.OutputMinio.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.OutputMinio.AwsAuthenticationMethod))
				} else {
					items.OutputMinio.AwsAuthenticationMethod = types.StringNull()
				}
				items.OutputMinio.AwsSecret = types.StringPointerValue(itemsItem.OutputMinio.AwsSecret)
				items.OutputMinio.AwsSecretKey = types.StringPointerValue(itemsItem.OutputMinio.AwsSecretKey)
				items.OutputMinio.BaseFileName = types.StringPointerValue(itemsItem.OutputMinio.BaseFileName)
				items.OutputMinio.Bucket = types.StringValue(itemsItem.OutputMinio.Bucket)
				if itemsItem.OutputMinio.Compress != nil {
					items.OutputMinio.Compress = types.StringValue(string(*itemsItem.OutputMinio.Compress))
				} else {
					items.OutputMinio.Compress = types.StringNull()
				}
				if itemsItem.OutputMinio.CompressionLevel != nil {
					items.OutputMinio.CompressionLevel = types.StringValue(string(*itemsItem.OutputMinio.CompressionLevel))
				} else {
					items.OutputMinio.CompressionLevel = types.StringNull()
				}
				items.OutputMinio.DeadletterEnabled = types.BoolPointerValue(itemsItem.OutputMinio.DeadletterEnabled)
				items.OutputMinio.DeadletterPath = types.StringPointerValue(itemsItem.OutputMinio.DeadletterPath)
				items.OutputMinio.Description = types.StringPointerValue(itemsItem.OutputMinio.Description)
				items.OutputMinio.DestPath = types.StringPointerValue(itemsItem.OutputMinio.DestPath)
				items.OutputMinio.EmptyDirCleanupSec = types.Float64PointerValue(itemsItem.OutputMinio.EmptyDirCleanupSec)
				items.OutputMinio.EnablePageChecksum = types.BoolPointerValue(itemsItem.OutputMinio.EnablePageChecksum)
				items.OutputMinio.EnableStatistics = types.BoolPointerValue(itemsItem.OutputMinio.EnableStatistics)
				items.OutputMinio.EnableWritePageIndex = types.BoolPointerValue(itemsItem.OutputMinio.EnableWritePageIndex)
				items.OutputMinio.Endpoint = types.StringValue(itemsItem.OutputMinio.Endpoint)
				items.OutputMinio.Environment = types.StringPointerValue(itemsItem.OutputMinio.Environment)
				items.OutputMinio.FileNameSuffix = types.StringPointerValue(itemsItem.OutputMinio.FileNameSuffix)
				if itemsItem.OutputMinio.Format != nil {
					items.OutputMinio.Format = types.StringValue(string(*itemsItem.OutputMinio.Format))
				} else {
					items.OutputMinio.Format = types.StringNull()
				}
				items.OutputMinio.HeaderLine = types.StringPointerValue(itemsItem.OutputMinio.HeaderLine)
				items.OutputMinio.ID = types.StringPointerValue(itemsItem.OutputMinio.ID)
				items.OutputMinio.KeyValueMetadata = []tfTypes.OutputMinioKeyValueMetadatum{}

				for _, keyValueMetadataItem4 := range itemsItem.OutputMinio.KeyValueMetadata {
					var keyValueMetadata4 tfTypes.OutputMinioKeyValueMetadatum

					keyValueMetadata4.Key = types.StringPointerValue(keyValueMetadataItem4.Key)
					keyValueMetadata4.Value = types.StringValue(keyValueMetadataItem4.Value)

					items.OutputMinio.KeyValueMetadata = append(items.OutputMinio.KeyValueMetadata, keyValueMetadata4)
				}
				items.OutputMinio.MaxConcurrentFileParts = types.Float64PointerValue(itemsItem.OutputMinio.MaxConcurrentFileParts)
				items.OutputMinio.MaxFileIdleTimeSec = types.Float64PointerValue(itemsItem.OutputMinio.MaxFileIdleTimeSec)
				items.OutputMinio.MaxFileOpenTimeSec = types.Float64PointerValue(itemsItem.OutputMinio.MaxFileOpenTimeSec)
				items.OutputMinio.MaxFileSizeMB = types.Float64PointerValue(itemsItem.OutputMinio.MaxFileSizeMB)
				items.OutputMinio.MaxOpenFiles = types.Float64PointerValue(itemsItem.OutputMinio.MaxOpenFiles)
				items.OutputMinio.MaxRetryNum = types.Float64PointerValue(itemsItem.OutputMinio.MaxRetryNum)
				if itemsItem.OutputMinio.ObjectACL != nil {
					items.OutputMinio.ObjectACL = types.StringValue(string(*itemsItem.OutputMinio.ObjectACL))
				} else {
					items.OutputMinio.ObjectACL = types.StringNull()
				}
				if itemsItem.OutputMinio.OnBackpressure != nil {
					items.OutputMinio.OnBackpressure = types.StringValue(string(*itemsItem.OutputMinio.OnBackpressure))
				} else {
					items.OutputMinio.OnBackpressure = types.StringNull()
				}
				if itemsItem.OutputMinio.OnDiskFullBackpressure != nil {
					items.OutputMinio.OnDiskFullBackpressure = types.StringValue(string(*itemsItem.OutputMinio.OnDiskFullBackpressure))
				} else {
					items.OutputMinio.OnDiskFullBackpressure = types.StringNull()
				}
				if itemsItem.OutputMinio.ParquetDataPageVersion != nil {
					items.OutputMinio.ParquetDataPageVersion = types.StringValue(string(*itemsItem.OutputMinio.ParquetDataPageVersion))
				} else {
					items.OutputMinio.ParquetDataPageVersion = types.StringNull()
				}
				items.OutputMinio.ParquetPageSize = types.StringPointerValue(itemsItem.OutputMinio.ParquetPageSize)
				items.OutputMinio.ParquetRowGroupLength = types.Float64PointerValue(itemsItem.OutputMinio.ParquetRowGroupLength)
				if itemsItem.OutputMinio.ParquetVersion != nil {
					items.OutputMinio.ParquetVersion = types.StringValue(string(*itemsItem.OutputMinio.ParquetVersion))
				} else {
					items.OutputMinio.ParquetVersion = types.StringNull()
				}
				items.OutputMinio.PartitionExpr = types.StringPointerValue(itemsItem.OutputMinio.PartitionExpr)
				items.OutputMinio.Pipeline = types.StringPointerValue(itemsItem.OutputMinio.Pipeline)
				items.OutputMinio.Region = types.StringPointerValue(itemsItem.OutputMinio.Region)
				items.OutputMinio.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputMinio.RejectUnauthorized)
				items.OutputMinio.RemoveEmptyDirs = types.BoolPointerValue(itemsItem.OutputMinio.RemoveEmptyDirs)
				items.OutputMinio.ReuseConnections = types.BoolPointerValue(itemsItem.OutputMinio.ReuseConnections)
				if itemsItem.OutputMinio.ServerSideEncryption != nil {
					items.OutputMinio.ServerSideEncryption = types.StringValue(string(*itemsItem.OutputMinio.ServerSideEncryption))
				} else {
					items.OutputMinio.ServerSideEncryption = types.StringNull()
				}
				items.OutputMinio.ShouldLogInvalidRows = types.BoolPointerValue(itemsItem.OutputMinio.ShouldLogInvalidRows)
				if itemsItem.OutputMinio.SignatureVersion != nil {
					items.OutputMinio.SignatureVersion = types.StringValue(string(*itemsItem.OutputMinio.SignatureVersion))
				} else {
					items.OutputMinio.SignatureVersion = types.StringNull()
				}
				items.OutputMinio.StagePath = types.StringPointerValue(itemsItem.OutputMinio.StagePath)
				if itemsItem.OutputMinio.StorageClass != nil {
					items.OutputMinio.StorageClass = types.StringValue(string(*itemsItem.OutputMinio.StorageClass))
				} else {
					items.OutputMinio.StorageClass = types.StringNull()
				}
				items.OutputMinio.Streamtags = make([]types.String, 0, len(itemsItem.OutputMinio.Streamtags))
				for _, v := range itemsItem.OutputMinio.Streamtags {
					items.OutputMinio.Streamtags = append(items.OutputMinio.Streamtags, types.StringValue(v))
				}
				items.OutputMinio.SystemFields = make([]types.String, 0, len(itemsItem.OutputMinio.SystemFields))
				for _, v := range itemsItem.OutputMinio.SystemFields {
					items.OutputMinio.SystemFields = append(items.OutputMinio.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputMinio.Type != nil {
					items.OutputMinio.Type = types.StringValue(string(*itemsItem.OutputMinio.Type))
				} else {
					items.OutputMinio.Type = types.StringNull()
				}
				items.OutputMinio.VerifyPermissions = types.BoolPointerValue(itemsItem.OutputMinio.VerifyPermissions)
				items.OutputMinio.WriteHighWaterMark = types.Float64PointerValue(itemsItem.OutputMinio.WriteHighWaterMark)
			}
			if itemsItem.OutputMsk != nil {
				items.OutputMsk = &tfTypes.OutputMsk{}
				if itemsItem.OutputMsk.Ack != nil {
					items.OutputMsk.Ack = types.Int64Value(int64(*itemsItem.OutputMsk.Ack))
				} else {
					items.OutputMsk.Ack = types.Int64Null()
				}
				items.OutputMsk.AssumeRoleArn = types.StringPointerValue(itemsItem.OutputMsk.AssumeRoleArn)
				items.OutputMsk.AssumeRoleExternalID = types.StringPointerValue(itemsItem.OutputMsk.AssumeRoleExternalID)
				items.OutputMsk.AuthenticationTimeout = types.Float64PointerValue(itemsItem.OutputMsk.AuthenticationTimeout)
				items.OutputMsk.AwsAPIKey = types.StringPointerValue(itemsItem.OutputMsk.AwsAPIKey)
				if itemsItem.OutputMsk.AwsAuthenticationMethod != nil {
					items.OutputMsk.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.OutputMsk.AwsAuthenticationMethod))
				} else {
					items.OutputMsk.AwsAuthenticationMethod = types.StringNull()
				}
				items.OutputMsk.AwsSecret = types.StringPointerValue(itemsItem.OutputMsk.AwsSecret)
				items.OutputMsk.AwsSecretKey = types.StringPointerValue(itemsItem.OutputMsk.AwsSecretKey)
				items.OutputMsk.BackoffRate = types.Float64PointerValue(itemsItem.OutputMsk.BackoffRate)
				items.OutputMsk.Brokers = make([]types.String, 0, len(itemsItem.OutputMsk.Brokers))
				for _, v := range itemsItem.OutputMsk.Brokers {
					items.OutputMsk.Brokers = append(items.OutputMsk.Brokers, types.StringValue(v))
				}
				if itemsItem.OutputMsk.Compression != nil {
					items.OutputMsk.Compression = types.StringValue(string(*itemsItem.OutputMsk.Compression))
				} else {
					items.OutputMsk.Compression = types.StringNull()
				}
				items.OutputMsk.ConnectionTimeout = types.Float64PointerValue(itemsItem.OutputMsk.ConnectionTimeout)
				items.OutputMsk.Description = types.StringPointerValue(itemsItem.OutputMsk.Description)
				items.OutputMsk.DurationSeconds = types.Float64PointerValue(itemsItem.OutputMsk.DurationSeconds)
				items.OutputMsk.EnableAssumeRole = types.BoolPointerValue(itemsItem.OutputMsk.EnableAssumeRole)
				items.OutputMsk.Endpoint = types.StringPointerValue(itemsItem.OutputMsk.Endpoint)
				items.OutputMsk.Environment = types.StringPointerValue(itemsItem.OutputMsk.Environment)
				items.OutputMsk.FlushEventCount = types.Float64PointerValue(itemsItem.OutputMsk.FlushEventCount)
				items.OutputMsk.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputMsk.FlushPeriodSec)
				if itemsItem.OutputMsk.Format != nil {
					items.OutputMsk.Format = types.StringValue(string(*itemsItem.OutputMsk.Format))
				} else {
					items.OutputMsk.Format = types.StringNull()
				}
				items.OutputMsk.ID = types.StringPointerValue(itemsItem.OutputMsk.ID)
				items.OutputMsk.InitialBackoff = types.Float64PointerValue(itemsItem.OutputMsk.InitialBackoff)
				if itemsItem.OutputMsk.KafkaSchemaRegistry == nil {
					items.OutputMsk.KafkaSchemaRegistry = nil
				} else {
					items.OutputMsk.KafkaSchemaRegistry = &tfTypes.OutputMskKafkaSchemaRegistryAuthentication{}
					if itemsItem.OutputMsk.KafkaSchemaRegistry.Auth == nil {
						items.OutputMsk.KafkaSchemaRegistry.Auth = nil
					} else {
						items.OutputMsk.KafkaSchemaRegistry.Auth = &tfTypes.OutputMskAuth{}
						items.OutputMsk.KafkaSchemaRegistry.Auth.CredentialsSecret = types.StringPointerValue(itemsItem.OutputMsk.KafkaSchemaRegistry.Auth.CredentialsSecret)
						items.OutputMsk.KafkaSchemaRegistry.Auth.Disabled = types.BoolPointerValue(itemsItem.OutputMsk.KafkaSchemaRegistry.Auth.Disabled)
					}
					items.OutputMsk.KafkaSchemaRegistry.ConnectionTimeout = types.Float64PointerValue(itemsItem.OutputMsk.KafkaSchemaRegistry.ConnectionTimeout)
					items.OutputMsk.KafkaSchemaRegistry.DefaultKeySchemaID = types.Float64PointerValue(itemsItem.OutputMsk.KafkaSchemaRegistry.DefaultKeySchemaID)
					items.OutputMsk.KafkaSchemaRegistry.DefaultValueSchemaID = types.Float64PointerValue(itemsItem.OutputMsk.KafkaSchemaRegistry.DefaultValueSchemaID)
					items.OutputMsk.KafkaSchemaRegistry.Disabled = types.BoolPointerValue(itemsItem.OutputMsk.KafkaSchemaRegistry.Disabled)
					items.OutputMsk.KafkaSchemaRegistry.MaxRetries = types.Float64PointerValue(itemsItem.OutputMsk.KafkaSchemaRegistry.MaxRetries)
					items.OutputMsk.KafkaSchemaRegistry.RequestTimeout = types.Float64PointerValue(itemsItem.OutputMsk.KafkaSchemaRegistry.RequestTimeout)
					items.OutputMsk.KafkaSchemaRegistry.SchemaRegistryURL = types.StringPointerValue(itemsItem.OutputMsk.KafkaSchemaRegistry.SchemaRegistryURL)
					if itemsItem.OutputMsk.KafkaSchemaRegistry.TLS == nil {
						items.OutputMsk.KafkaSchemaRegistry.TLS = nil
					} else {
						items.OutputMsk.KafkaSchemaRegistry.TLS = &tfTypes.OutputMskKafkaSchemaRegistryTLSSettingsClientSide{}
						items.OutputMsk.KafkaSchemaRegistry.TLS.CaPath = types.StringPointerValue(itemsItem.OutputMsk.KafkaSchemaRegistry.TLS.CaPath)
						items.OutputMsk.KafkaSchemaRegistry.TLS.CertificateName = types.StringPointerValue(itemsItem.OutputMsk.KafkaSchemaRegistry.TLS.CertificateName)
						items.OutputMsk.KafkaSchemaRegistry.TLS.CertPath = types.StringPointerValue(itemsItem.OutputMsk.KafkaSchemaRegistry.TLS.CertPath)
						items.OutputMsk.KafkaSchemaRegistry.TLS.Disabled = types.BoolPointerValue(itemsItem.OutputMsk.KafkaSchemaRegistry.TLS.Disabled)
						if itemsItem.OutputMsk.KafkaSchemaRegistry.TLS.MaxVersion != nil {
							items.OutputMsk.KafkaSchemaRegistry.TLS.MaxVersion = types.StringValue(string(*itemsItem.OutputMsk.KafkaSchemaRegistry.TLS.MaxVersion))
						} else {
							items.OutputMsk.KafkaSchemaRegistry.TLS.MaxVersion = types.StringNull()
						}
						if itemsItem.OutputMsk.KafkaSchemaRegistry.TLS.MinVersion != nil {
							items.OutputMsk.KafkaSchemaRegistry.TLS.MinVersion = types.StringValue(string(*itemsItem.OutputMsk.KafkaSchemaRegistry.TLS.MinVersion))
						} else {
							items.OutputMsk.KafkaSchemaRegistry.TLS.MinVersion = types.StringNull()
						}
						items.OutputMsk.KafkaSchemaRegistry.TLS.Passphrase = types.StringPointerValue(itemsItem.OutputMsk.KafkaSchemaRegistry.TLS.Passphrase)
						items.OutputMsk.KafkaSchemaRegistry.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.OutputMsk.KafkaSchemaRegistry.TLS.PrivKeyPath)
						items.OutputMsk.KafkaSchemaRegistry.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputMsk.KafkaSchemaRegistry.TLS.RejectUnauthorized)
						items.OutputMsk.KafkaSchemaRegistry.TLS.Servername = types.StringPointerValue(itemsItem.OutputMsk.KafkaSchemaRegistry.TLS.Servername)
					}
				}
				items.OutputMsk.MaxBackOff = types.Float64PointerValue(itemsItem.OutputMsk.MaxBackOff)
				items.OutputMsk.MaxRecordSizeKB = types.Float64PointerValue(itemsItem.OutputMsk.MaxRecordSizeKB)
				items.OutputMsk.MaxRetries = types.Float64PointerValue(itemsItem.OutputMsk.MaxRetries)
				if itemsItem.OutputMsk.OnBackpressure != nil {
					items.OutputMsk.OnBackpressure = types.StringValue(string(*itemsItem.OutputMsk.OnBackpressure))
				} else {
					items.OutputMsk.OnBackpressure = types.StringNull()
				}
				items.OutputMsk.Pipeline = types.StringPointerValue(itemsItem.OutputMsk.Pipeline)
				if itemsItem.OutputMsk.PqCompress != nil {
					items.OutputMsk.PqCompress = types.StringValue(string(*itemsItem.OutputMsk.PqCompress))
				} else {
					items.OutputMsk.PqCompress = types.StringNull()
				}
				if itemsItem.OutputMsk.PqControls == nil {
					items.OutputMsk.PqControls = nil
				} else {
					items.OutputMsk.PqControls = &tfTypes.OutputMskPqControls{}
				}
				items.OutputMsk.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputMsk.PqMaxFileSize)
				items.OutputMsk.PqMaxSize = types.StringPointerValue(itemsItem.OutputMsk.PqMaxSize)
				if itemsItem.OutputMsk.PqMode != nil {
					items.OutputMsk.PqMode = types.StringValue(string(*itemsItem.OutputMsk.PqMode))
				} else {
					items.OutputMsk.PqMode = types.StringNull()
				}
				if itemsItem.OutputMsk.PqOnBackpressure != nil {
					items.OutputMsk.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputMsk.PqOnBackpressure))
				} else {
					items.OutputMsk.PqOnBackpressure = types.StringNull()
				}
				items.OutputMsk.PqPath = types.StringPointerValue(itemsItem.OutputMsk.PqPath)
				items.OutputMsk.ProtobufLibraryID = types.StringPointerValue(itemsItem.OutputMsk.ProtobufLibraryID)
				items.OutputMsk.ReauthenticationThreshold = types.Float64PointerValue(itemsItem.OutputMsk.ReauthenticationThreshold)
				items.OutputMsk.Region = types.StringValue(itemsItem.OutputMsk.Region)
				items.OutputMsk.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputMsk.RejectUnauthorized)
				items.OutputMsk.RequestTimeout = types.Float64PointerValue(itemsItem.OutputMsk.RequestTimeout)
				items.OutputMsk.ReuseConnections = types.BoolPointerValue(itemsItem.OutputMsk.ReuseConnections)
				if itemsItem.OutputMsk.SignatureVersion != nil {
					items.OutputMsk.SignatureVersion = types.StringValue(string(*itemsItem.OutputMsk.SignatureVersion))
				} else {
					items.OutputMsk.SignatureVersion = types.StringNull()
				}
				items.OutputMsk.Streamtags = make([]types.String, 0, len(itemsItem.OutputMsk.Streamtags))
				for _, v := range itemsItem.OutputMsk.Streamtags {
					items.OutputMsk.Streamtags = append(items.OutputMsk.Streamtags, types.StringValue(v))
				}
				items.OutputMsk.SystemFields = make([]types.String, 0, len(itemsItem.OutputMsk.SystemFields))
				for _, v := range itemsItem.OutputMsk.SystemFields {
					items.OutputMsk.SystemFields = append(items.OutputMsk.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputMsk.TLS == nil {
					items.OutputMsk.TLS = nil
				} else {
					items.OutputMsk.TLS = &tfTypes.OutputMskTLSSettingsClientSide{}
					items.OutputMsk.TLS.CaPath = types.StringPointerValue(itemsItem.OutputMsk.TLS.CaPath)
					items.OutputMsk.TLS.CertificateName = types.StringPointerValue(itemsItem.OutputMsk.TLS.CertificateName)
					items.OutputMsk.TLS.CertPath = types.StringPointerValue(itemsItem.OutputMsk.TLS.CertPath)
					items.OutputMsk.TLS.Disabled = types.BoolPointerValue(itemsItem.OutputMsk.TLS.Disabled)
					if itemsItem.OutputMsk.TLS.MaxVersion != nil {
						items.OutputMsk.TLS.MaxVersion = types.StringValue(string(*itemsItem.OutputMsk.TLS.MaxVersion))
					} else {
						items.OutputMsk.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.OutputMsk.TLS.MinVersion != nil {
						items.OutputMsk.TLS.MinVersion = types.StringValue(string(*itemsItem.OutputMsk.TLS.MinVersion))
					} else {
						items.OutputMsk.TLS.MinVersion = types.StringNull()
					}
					items.OutputMsk.TLS.Passphrase = types.StringPointerValue(itemsItem.OutputMsk.TLS.Passphrase)
					items.OutputMsk.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.OutputMsk.TLS.PrivKeyPath)
					items.OutputMsk.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputMsk.TLS.RejectUnauthorized)
					items.OutputMsk.TLS.Servername = types.StringPointerValue(itemsItem.OutputMsk.TLS.Servername)
				}
				items.OutputMsk.Topic = types.StringValue(itemsItem.OutputMsk.Topic)
				if itemsItem.OutputMsk.Type != nil {
					items.OutputMsk.Type = types.StringValue(string(*itemsItem.OutputMsk.Type))
				} else {
					items.OutputMsk.Type = types.StringNull()
				}
			}
			if itemsItem.OutputNetflow != nil {
				items.OutputNetflow = &tfTypes.OutputNetflow{}
				items.OutputNetflow.Description = types.StringPointerValue(itemsItem.OutputNetflow.Description)
				items.OutputNetflow.DNSResolvePeriodSec = types.Float64PointerValue(itemsItem.OutputNetflow.DNSResolvePeriodSec)
				items.OutputNetflow.Environment = types.StringPointerValue(itemsItem.OutputNetflow.Environment)
				items.OutputNetflow.Hosts = []tfTypes.OutputNetflowHost{}

				for _, hostsItem1 := range itemsItem.OutputNetflow.Hosts {
					var hosts1 tfTypes.OutputNetflowHost

					hosts1.Host = types.StringValue(hostsItem1.Host)
					hosts1.Port = types.Float64PointerValue(hostsItem1.Port)

					items.OutputNetflow.Hosts = append(items.OutputNetflow.Hosts, hosts1)
				}
				items.OutputNetflow.ID = types.StringPointerValue(itemsItem.OutputNetflow.ID)
				items.OutputNetflow.Pipeline = types.StringPointerValue(itemsItem.OutputNetflow.Pipeline)
				items.OutputNetflow.Streamtags = make([]types.String, 0, len(itemsItem.OutputNetflow.Streamtags))
				for _, v := range itemsItem.OutputNetflow.Streamtags {
					items.OutputNetflow.Streamtags = append(items.OutputNetflow.Streamtags, types.StringValue(v))
				}
				items.OutputNetflow.SystemFields = make([]types.String, 0, len(itemsItem.OutputNetflow.SystemFields))
				for _, v := range itemsItem.OutputNetflow.SystemFields {
					items.OutputNetflow.SystemFields = append(items.OutputNetflow.SystemFields, types.StringValue(v))
				}
				items.OutputNetflow.Type = types.StringValue(string(itemsItem.OutputNetflow.Type))
			}
			if itemsItem.OutputNewrelic != nil {
				items.OutputNewrelic = &tfTypes.OutputNewrelic{}
				items.OutputNewrelic.APIKey = types.StringPointerValue(itemsItem.OutputNewrelic.APIKey)
				if itemsItem.OutputNewrelic.AuthType != nil {
					items.OutputNewrelic.AuthType = types.StringValue(string(*itemsItem.OutputNewrelic.AuthType))
				} else {
					items.OutputNewrelic.AuthType = types.StringNull()
				}
				items.OutputNewrelic.Compress = types.BoolPointerValue(itemsItem.OutputNewrelic.Compress)
				items.OutputNewrelic.Concurrency = types.Float64PointerValue(itemsItem.OutputNewrelic.Concurrency)
				items.OutputNewrelic.CustomURL = types.StringPointerValue(itemsItem.OutputNewrelic.CustomURL)
				items.OutputNewrelic.Description = types.StringPointerValue(itemsItem.OutputNewrelic.Description)
				items.OutputNewrelic.Environment = types.StringPointerValue(itemsItem.OutputNewrelic.Environment)
				items.OutputNewrelic.ExtraHTTPHeaders = []tfTypes.OutputNewrelicExtraHTTPHeader{}

				for _, extraHTTPHeadersItem17 := range itemsItem.OutputNewrelic.ExtraHTTPHeaders {
					var extraHTTPHeaders17 tfTypes.OutputNewrelicExtraHTTPHeader

					extraHTTPHeaders17.Name = types.StringPointerValue(extraHTTPHeadersItem17.Name)
					extraHTTPHeaders17.Value = types.StringValue(extraHTTPHeadersItem17.Value)

					items.OutputNewrelic.ExtraHTTPHeaders = append(items.OutputNewrelic.ExtraHTTPHeaders, extraHTTPHeaders17)
				}
				if itemsItem.OutputNewrelic.FailedRequestLoggingMode != nil {
					items.OutputNewrelic.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputNewrelic.FailedRequestLoggingMode))
				} else {
					items.OutputNewrelic.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputNewrelic.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputNewrelic.FlushPeriodSec)
				items.OutputNewrelic.ID = types.StringValue(itemsItem.OutputNewrelic.ID)
				items.OutputNewrelic.LogType = types.StringPointerValue(itemsItem.OutputNewrelic.LogType)
				items.OutputNewrelic.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputNewrelic.MaxPayloadEvents)
				items.OutputNewrelic.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputNewrelic.MaxPayloadSizeKB)
				items.OutputNewrelic.MessageField = types.StringPointerValue(itemsItem.OutputNewrelic.MessageField)
				items.OutputNewrelic.Metadata = []tfTypes.OutputNewrelicMetadatum{}

				for _, metadataItem1 := range itemsItem.OutputNewrelic.Metadata {
					var metadata1 tfTypes.OutputNewrelicMetadatum

					metadata1.Name = types.StringValue(string(metadataItem1.Name))
					metadata1.Value = types.StringValue(metadataItem1.Value)

					items.OutputNewrelic.Metadata = append(items.OutputNewrelic.Metadata, metadata1)
				}
				if itemsItem.OutputNewrelic.OnBackpressure != nil {
					items.OutputNewrelic.OnBackpressure = types.StringValue(string(*itemsItem.OutputNewrelic.OnBackpressure))
				} else {
					items.OutputNewrelic.OnBackpressure = types.StringNull()
				}
				items.OutputNewrelic.Pipeline = types.StringPointerValue(itemsItem.OutputNewrelic.Pipeline)
				if itemsItem.OutputNewrelic.PqCompress != nil {
					items.OutputNewrelic.PqCompress = types.StringValue(string(*itemsItem.OutputNewrelic.PqCompress))
				} else {
					items.OutputNewrelic.PqCompress = types.StringNull()
				}
				if itemsItem.OutputNewrelic.PqControls == nil {
					items.OutputNewrelic.PqControls = nil
				} else {
					items.OutputNewrelic.PqControls = &tfTypes.OutputNewrelicPqControls{}
				}
				items.OutputNewrelic.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputNewrelic.PqMaxFileSize)
				items.OutputNewrelic.PqMaxSize = types.StringPointerValue(itemsItem.OutputNewrelic.PqMaxSize)
				if itemsItem.OutputNewrelic.PqMode != nil {
					items.OutputNewrelic.PqMode = types.StringValue(string(*itemsItem.OutputNewrelic.PqMode))
				} else {
					items.OutputNewrelic.PqMode = types.StringNull()
				}
				if itemsItem.OutputNewrelic.PqOnBackpressure != nil {
					items.OutputNewrelic.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputNewrelic.PqOnBackpressure))
				} else {
					items.OutputNewrelic.PqOnBackpressure = types.StringNull()
				}
				items.OutputNewrelic.PqPath = types.StringPointerValue(itemsItem.OutputNewrelic.PqPath)
				if itemsItem.OutputNewrelic.Region != nil {
					items.OutputNewrelic.Region = types.StringValue(string(*itemsItem.OutputNewrelic.Region))
				} else {
					items.OutputNewrelic.Region = types.StringNull()
				}
				items.OutputNewrelic.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputNewrelic.RejectUnauthorized)
				items.OutputNewrelic.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputNewrelic.ResponseHonorRetryAfterHeader)
				items.OutputNewrelic.ResponseRetrySettings = []tfTypes.OutputNewrelicResponseRetrySetting{}

				for _, responseRetrySettingsItem18 := range itemsItem.OutputNewrelic.ResponseRetrySettings {
					var responseRetrySettings18 tfTypes.OutputNewrelicResponseRetrySetting

					responseRetrySettings18.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem18.BackoffRate)
					responseRetrySettings18.HTTPStatus = types.Float64Value(responseRetrySettingsItem18.HTTPStatus)
					responseRetrySettings18.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem18.InitialBackoff)
					responseRetrySettings18.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem18.MaxBackoff)

					items.OutputNewrelic.ResponseRetrySettings = append(items.OutputNewrelic.ResponseRetrySettings, responseRetrySettings18)
				}
				items.OutputNewrelic.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputNewrelic.SafeHeaders))
				for _, v := range itemsItem.OutputNewrelic.SafeHeaders {
					items.OutputNewrelic.SafeHeaders = append(items.OutputNewrelic.SafeHeaders, types.StringValue(v))
				}
				items.OutputNewrelic.Streamtags = make([]types.String, 0, len(itemsItem.OutputNewrelic.Streamtags))
				for _, v := range itemsItem.OutputNewrelic.Streamtags {
					items.OutputNewrelic.Streamtags = append(items.OutputNewrelic.Streamtags, types.StringValue(v))
				}
				items.OutputNewrelic.SystemFields = make([]types.String, 0, len(itemsItem.OutputNewrelic.SystemFields))
				for _, v := range itemsItem.OutputNewrelic.SystemFields {
					items.OutputNewrelic.SystemFields = append(items.OutputNewrelic.SystemFields, types.StringValue(v))
				}
				items.OutputNewrelic.TextSecret = types.StringPointerValue(itemsItem.OutputNewrelic.TextSecret)
				if itemsItem.OutputNewrelic.TimeoutRetrySettings == nil {
					items.OutputNewrelic.TimeoutRetrySettings = nil
				} else {
					items.OutputNewrelic.TimeoutRetrySettings = &tfTypes.OutputNewrelicTimeoutRetrySettings{}
					items.OutputNewrelic.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputNewrelic.TimeoutRetrySettings.BackoffRate)
					items.OutputNewrelic.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputNewrelic.TimeoutRetrySettings.InitialBackoff)
					items.OutputNewrelic.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputNewrelic.TimeoutRetrySettings.MaxBackoff)
					items.OutputNewrelic.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputNewrelic.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputNewrelic.TimeoutSec = types.Float64PointerValue(itemsItem.OutputNewrelic.TimeoutSec)
				items.OutputNewrelic.TotalMemoryLimitKB = types.Float64PointerValue(itemsItem.OutputNewrelic.TotalMemoryLimitKB)
				items.OutputNewrelic.Type = types.StringValue(string(itemsItem.OutputNewrelic.Type))
				items.OutputNewrelic.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputNewrelic.UseRoundRobinDNS)
			}
			if itemsItem.OutputNewrelicEvents != nil {
				items.OutputNewrelicEvents = &tfTypes.OutputNewrelicEvents{}
				items.OutputNewrelicEvents.AccountID = types.StringValue(itemsItem.OutputNewrelicEvents.AccountID)
				items.OutputNewrelicEvents.APIKey = types.StringPointerValue(itemsItem.OutputNewrelicEvents.APIKey)
				if itemsItem.OutputNewrelicEvents.AuthType != nil {
					items.OutputNewrelicEvents.AuthType = types.StringValue(string(*itemsItem.OutputNewrelicEvents.AuthType))
				} else {
					items.OutputNewrelicEvents.AuthType = types.StringNull()
				}
				items.OutputNewrelicEvents.Compress = types.BoolPointerValue(itemsItem.OutputNewrelicEvents.Compress)
				items.OutputNewrelicEvents.Concurrency = types.Float64PointerValue(itemsItem.OutputNewrelicEvents.Concurrency)
				items.OutputNewrelicEvents.CustomURL = types.StringPointerValue(itemsItem.OutputNewrelicEvents.CustomURL)
				items.OutputNewrelicEvents.Description = types.StringPointerValue(itemsItem.OutputNewrelicEvents.Description)
				items.OutputNewrelicEvents.Environment = types.StringPointerValue(itemsItem.OutputNewrelicEvents.Environment)
				items.OutputNewrelicEvents.EventType = types.StringValue(itemsItem.OutputNewrelicEvents.EventType)
				items.OutputNewrelicEvents.ExtraHTTPHeaders = []tfTypes.OutputNewrelicEventsExtraHTTPHeader{}

				for _, extraHTTPHeadersItem18 := range itemsItem.OutputNewrelicEvents.ExtraHTTPHeaders {
					var extraHTTPHeaders18 tfTypes.OutputNewrelicEventsExtraHTTPHeader

					extraHTTPHeaders18.Name = types.StringPointerValue(extraHTTPHeadersItem18.Name)
					extraHTTPHeaders18.Value = types.StringValue(extraHTTPHeadersItem18.Value)

					items.OutputNewrelicEvents.ExtraHTTPHeaders = append(items.OutputNewrelicEvents.ExtraHTTPHeaders, extraHTTPHeaders18)
				}
				if itemsItem.OutputNewrelicEvents.FailedRequestLoggingMode != nil {
					items.OutputNewrelicEvents.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputNewrelicEvents.FailedRequestLoggingMode))
				} else {
					items.OutputNewrelicEvents.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputNewrelicEvents.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputNewrelicEvents.FlushPeriodSec)
				items.OutputNewrelicEvents.ID = types.StringPointerValue(itemsItem.OutputNewrelicEvents.ID)
				items.OutputNewrelicEvents.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputNewrelicEvents.MaxPayloadEvents)
				items.OutputNewrelicEvents.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputNewrelicEvents.MaxPayloadSizeKB)
				if itemsItem.OutputNewrelicEvents.OnBackpressure != nil {
					items.OutputNewrelicEvents.OnBackpressure = types.StringValue(string(*itemsItem.OutputNewrelicEvents.OnBackpressure))
				} else {
					items.OutputNewrelicEvents.OnBackpressure = types.StringNull()
				}
				items.OutputNewrelicEvents.Pipeline = types.StringPointerValue(itemsItem.OutputNewrelicEvents.Pipeline)
				if itemsItem.OutputNewrelicEvents.PqCompress != nil {
					items.OutputNewrelicEvents.PqCompress = types.StringValue(string(*itemsItem.OutputNewrelicEvents.PqCompress))
				} else {
					items.OutputNewrelicEvents.PqCompress = types.StringNull()
				}
				if itemsItem.OutputNewrelicEvents.PqControls == nil {
					items.OutputNewrelicEvents.PqControls = nil
				} else {
					items.OutputNewrelicEvents.PqControls = &tfTypes.OutputNewrelicEventsPqControls{}
				}
				items.OutputNewrelicEvents.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputNewrelicEvents.PqMaxFileSize)
				items.OutputNewrelicEvents.PqMaxSize = types.StringPointerValue(itemsItem.OutputNewrelicEvents.PqMaxSize)
				if itemsItem.OutputNewrelicEvents.PqMode != nil {
					items.OutputNewrelicEvents.PqMode = types.StringValue(string(*itemsItem.OutputNewrelicEvents.PqMode))
				} else {
					items.OutputNewrelicEvents.PqMode = types.StringNull()
				}
				if itemsItem.OutputNewrelicEvents.PqOnBackpressure != nil {
					items.OutputNewrelicEvents.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputNewrelicEvents.PqOnBackpressure))
				} else {
					items.OutputNewrelicEvents.PqOnBackpressure = types.StringNull()
				}
				items.OutputNewrelicEvents.PqPath = types.StringPointerValue(itemsItem.OutputNewrelicEvents.PqPath)
				if itemsItem.OutputNewrelicEvents.Region != nil {
					items.OutputNewrelicEvents.Region = types.StringValue(string(*itemsItem.OutputNewrelicEvents.Region))
				} else {
					items.OutputNewrelicEvents.Region = types.StringNull()
				}
				items.OutputNewrelicEvents.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputNewrelicEvents.RejectUnauthorized)
				items.OutputNewrelicEvents.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputNewrelicEvents.ResponseHonorRetryAfterHeader)
				items.OutputNewrelicEvents.ResponseRetrySettings = []tfTypes.OutputNewrelicEventsResponseRetrySetting{}

				for _, responseRetrySettingsItem19 := range itemsItem.OutputNewrelicEvents.ResponseRetrySettings {
					var responseRetrySettings19 tfTypes.OutputNewrelicEventsResponseRetrySetting

					responseRetrySettings19.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem19.BackoffRate)
					responseRetrySettings19.HTTPStatus = types.Float64Value(responseRetrySettingsItem19.HTTPStatus)
					responseRetrySettings19.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem19.InitialBackoff)
					responseRetrySettings19.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem19.MaxBackoff)

					items.OutputNewrelicEvents.ResponseRetrySettings = append(items.OutputNewrelicEvents.ResponseRetrySettings, responseRetrySettings19)
				}
				items.OutputNewrelicEvents.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputNewrelicEvents.SafeHeaders))
				for _, v := range itemsItem.OutputNewrelicEvents.SafeHeaders {
					items.OutputNewrelicEvents.SafeHeaders = append(items.OutputNewrelicEvents.SafeHeaders, types.StringValue(v))
				}
				items.OutputNewrelicEvents.Streamtags = make([]types.String, 0, len(itemsItem.OutputNewrelicEvents.Streamtags))
				for _, v := range itemsItem.OutputNewrelicEvents.Streamtags {
					items.OutputNewrelicEvents.Streamtags = append(items.OutputNewrelicEvents.Streamtags, types.StringValue(v))
				}
				items.OutputNewrelicEvents.SystemFields = make([]types.String, 0, len(itemsItem.OutputNewrelicEvents.SystemFields))
				for _, v := range itemsItem.OutputNewrelicEvents.SystemFields {
					items.OutputNewrelicEvents.SystemFields = append(items.OutputNewrelicEvents.SystemFields, types.StringValue(v))
				}
				items.OutputNewrelicEvents.TextSecret = types.StringPointerValue(itemsItem.OutputNewrelicEvents.TextSecret)
				if itemsItem.OutputNewrelicEvents.TimeoutRetrySettings == nil {
					items.OutputNewrelicEvents.TimeoutRetrySettings = nil
				} else {
					items.OutputNewrelicEvents.TimeoutRetrySettings = &tfTypes.OutputNewrelicEventsTimeoutRetrySettings{}
					items.OutputNewrelicEvents.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputNewrelicEvents.TimeoutRetrySettings.BackoffRate)
					items.OutputNewrelicEvents.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputNewrelicEvents.TimeoutRetrySettings.InitialBackoff)
					items.OutputNewrelicEvents.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputNewrelicEvents.TimeoutRetrySettings.MaxBackoff)
					items.OutputNewrelicEvents.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputNewrelicEvents.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputNewrelicEvents.TimeoutSec = types.Float64PointerValue(itemsItem.OutputNewrelicEvents.TimeoutSec)
				if itemsItem.OutputNewrelicEvents.Type != nil {
					items.OutputNewrelicEvents.Type = types.StringValue(string(*itemsItem.OutputNewrelicEvents.Type))
				} else {
					items.OutputNewrelicEvents.Type = types.StringNull()
				}
				items.OutputNewrelicEvents.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputNewrelicEvents.UseRoundRobinDNS)
			}
			if itemsItem.OutputOpenTelemetry != nil {
				items.OutputOpenTelemetry = &tfTypes.OutputOpenTelemetry{}
				items.OutputOpenTelemetry.AuthHeaderExpr = types.StringPointerValue(itemsItem.OutputOpenTelemetry.AuthHeaderExpr)
				if itemsItem.OutputOpenTelemetry.AuthType != nil {
					items.OutputOpenTelemetry.AuthType = types.StringValue(string(*itemsItem.OutputOpenTelemetry.AuthType))
				} else {
					items.OutputOpenTelemetry.AuthType = types.StringNull()
				}
				if itemsItem.OutputOpenTelemetry.Compress != nil {
					items.OutputOpenTelemetry.Compress = types.StringValue(string(*itemsItem.OutputOpenTelemetry.Compress))
				} else {
					items.OutputOpenTelemetry.Compress = types.StringNull()
				}
				items.OutputOpenTelemetry.Concurrency = types.Float64PointerValue(itemsItem.OutputOpenTelemetry.Concurrency)
				items.OutputOpenTelemetry.ConnectionTimeout = types.Float64PointerValue(itemsItem.OutputOpenTelemetry.ConnectionTimeout)
				items.OutputOpenTelemetry.CredentialsSecret = types.StringPointerValue(itemsItem.OutputOpenTelemetry.CredentialsSecret)
				items.OutputOpenTelemetry.Description = types.StringPointerValue(itemsItem.OutputOpenTelemetry.Description)
				items.OutputOpenTelemetry.Endpoint = types.StringValue(itemsItem.OutputOpenTelemetry.Endpoint)
				items.OutputOpenTelemetry.Environment = types.StringPointerValue(itemsItem.OutputOpenTelemetry.Environment)
				items.OutputOpenTelemetry.ExtraHTTPHeaders = []tfTypes.OutputOpenTelemetryExtraHTTPHeader{}

				for _, extraHTTPHeadersItem19 := range itemsItem.OutputOpenTelemetry.ExtraHTTPHeaders {
					var extraHTTPHeaders19 tfTypes.OutputOpenTelemetryExtraHTTPHeader

					extraHTTPHeaders19.Name = types.StringPointerValue(extraHTTPHeadersItem19.Name)
					extraHTTPHeaders19.Value = types.StringValue(extraHTTPHeadersItem19.Value)

					items.OutputOpenTelemetry.ExtraHTTPHeaders = append(items.OutputOpenTelemetry.ExtraHTTPHeaders, extraHTTPHeaders19)
				}
				if itemsItem.OutputOpenTelemetry.FailedRequestLoggingMode != nil {
					items.OutputOpenTelemetry.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputOpenTelemetry.FailedRequestLoggingMode))
				} else {
					items.OutputOpenTelemetry.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputOpenTelemetry.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputOpenTelemetry.FlushPeriodSec)
				if itemsItem.OutputOpenTelemetry.HTTPCompress != nil {
					items.OutputOpenTelemetry.HTTPCompress = types.StringValue(string(*itemsItem.OutputOpenTelemetry.HTTPCompress))
				} else {
					items.OutputOpenTelemetry.HTTPCompress = types.StringNull()
				}
				items.OutputOpenTelemetry.HTTPLogsEndpointOverride = types.StringPointerValue(itemsItem.OutputOpenTelemetry.HTTPLogsEndpointOverride)
				items.OutputOpenTelemetry.HTTPMetricsEndpointOverride = types.StringPointerValue(itemsItem.OutputOpenTelemetry.HTTPMetricsEndpointOverride)
				items.OutputOpenTelemetry.HTTPTracesEndpointOverride = types.StringPointerValue(itemsItem.OutputOpenTelemetry.HTTPTracesEndpointOverride)
				items.OutputOpenTelemetry.ID = types.StringPointerValue(itemsItem.OutputOpenTelemetry.ID)
				items.OutputOpenTelemetry.KeepAlive = types.BoolPointerValue(itemsItem.OutputOpenTelemetry.KeepAlive)
				items.OutputOpenTelemetry.KeepAliveTime = types.Float64PointerValue(itemsItem.OutputOpenTelemetry.KeepAliveTime)
				items.OutputOpenTelemetry.LoginURL = types.StringPointerValue(itemsItem.OutputOpenTelemetry.LoginURL)
				items.OutputOpenTelemetry.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputOpenTelemetry.MaxPayloadSizeKB)
				items.OutputOpenTelemetry.Metadata = []tfTypes.OutputOpenTelemetryMetadatum{}

				for _, metadataItem2 := range itemsItem.OutputOpenTelemetry.Metadata {
					var metadata2 tfTypes.OutputOpenTelemetryMetadatum

					metadata2.Key = types.StringPointerValue(metadataItem2.Key)
					metadata2.Value = types.StringValue(metadataItem2.Value)

					items.OutputOpenTelemetry.Metadata = append(items.OutputOpenTelemetry.Metadata, metadata2)
				}
				items.OutputOpenTelemetry.OauthHeaders = []tfTypes.OutputOpenTelemetryOauthHeader{}

				for _, oauthHeadersItem2 := range itemsItem.OutputOpenTelemetry.OauthHeaders {
					var oauthHeaders2 tfTypes.OutputOpenTelemetryOauthHeader

					oauthHeaders2.Name = types.StringValue(oauthHeadersItem2.Name)
					oauthHeaders2.Value = types.StringValue(oauthHeadersItem2.Value)

					items.OutputOpenTelemetry.OauthHeaders = append(items.OutputOpenTelemetry.OauthHeaders, oauthHeaders2)
				}
				items.OutputOpenTelemetry.OauthParams = []tfTypes.OutputOpenTelemetryOauthParam{}

				for _, oauthParamsItem2 := range itemsItem.OutputOpenTelemetry.OauthParams {
					var oauthParams2 tfTypes.OutputOpenTelemetryOauthParam

					oauthParams2.Name = types.StringValue(oauthParamsItem2.Name)
					oauthParams2.Value = types.StringValue(oauthParamsItem2.Value)

					items.OutputOpenTelemetry.OauthParams = append(items.OutputOpenTelemetry.OauthParams, oauthParams2)
				}
				if itemsItem.OutputOpenTelemetry.OnBackpressure != nil {
					items.OutputOpenTelemetry.OnBackpressure = types.StringValue(string(*itemsItem.OutputOpenTelemetry.OnBackpressure))
				} else {
					items.OutputOpenTelemetry.OnBackpressure = types.StringNull()
				}
				if itemsItem.OutputOpenTelemetry.OtlpVersion != nil {
					items.OutputOpenTelemetry.OtlpVersion = types.StringValue(string(*itemsItem.OutputOpenTelemetry.OtlpVersion))
				} else {
					items.OutputOpenTelemetry.OtlpVersion = types.StringNull()
				}
				items.OutputOpenTelemetry.Password = types.StringPointerValue(itemsItem.OutputOpenTelemetry.Password)
				items.OutputOpenTelemetry.Pipeline = types.StringPointerValue(itemsItem.OutputOpenTelemetry.Pipeline)
				if itemsItem.OutputOpenTelemetry.PqCompress != nil {
					items.OutputOpenTelemetry.PqCompress = types.StringValue(string(*itemsItem.OutputOpenTelemetry.PqCompress))
				} else {
					items.OutputOpenTelemetry.PqCompress = types.StringNull()
				}
				if itemsItem.OutputOpenTelemetry.PqControls == nil {
					items.OutputOpenTelemetry.PqControls = nil
				} else {
					items.OutputOpenTelemetry.PqControls = &tfTypes.OutputOpenTelemetryPqControls{}
				}
				items.OutputOpenTelemetry.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputOpenTelemetry.PqMaxFileSize)
				items.OutputOpenTelemetry.PqMaxSize = types.StringPointerValue(itemsItem.OutputOpenTelemetry.PqMaxSize)
				if itemsItem.OutputOpenTelemetry.PqMode != nil {
					items.OutputOpenTelemetry.PqMode = types.StringValue(string(*itemsItem.OutputOpenTelemetry.PqMode))
				} else {
					items.OutputOpenTelemetry.PqMode = types.StringNull()
				}
				if itemsItem.OutputOpenTelemetry.PqOnBackpressure != nil {
					items.OutputOpenTelemetry.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputOpenTelemetry.PqOnBackpressure))
				} else {
					items.OutputOpenTelemetry.PqOnBackpressure = types.StringNull()
				}
				items.OutputOpenTelemetry.PqPath = types.StringPointerValue(itemsItem.OutputOpenTelemetry.PqPath)
				if itemsItem.OutputOpenTelemetry.Protocol != nil {
					items.OutputOpenTelemetry.Protocol = types.StringValue(string(*itemsItem.OutputOpenTelemetry.Protocol))
				} else {
					items.OutputOpenTelemetry.Protocol = types.StringNull()
				}
				items.OutputOpenTelemetry.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputOpenTelemetry.RejectUnauthorized)
				items.OutputOpenTelemetry.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputOpenTelemetry.ResponseHonorRetryAfterHeader)
				items.OutputOpenTelemetry.ResponseRetrySettings = []tfTypes.OutputOpenTelemetryResponseRetrySetting{}

				for _, responseRetrySettingsItem20 := range itemsItem.OutputOpenTelemetry.ResponseRetrySettings {
					var responseRetrySettings20 tfTypes.OutputOpenTelemetryResponseRetrySetting

					responseRetrySettings20.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem20.BackoffRate)
					responseRetrySettings20.HTTPStatus = types.Float64Value(responseRetrySettingsItem20.HTTPStatus)
					responseRetrySettings20.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem20.InitialBackoff)
					responseRetrySettings20.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem20.MaxBackoff)

					items.OutputOpenTelemetry.ResponseRetrySettings = append(items.OutputOpenTelemetry.ResponseRetrySettings, responseRetrySettings20)
				}
				items.OutputOpenTelemetry.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputOpenTelemetry.SafeHeaders))
				for _, v := range itemsItem.OutputOpenTelemetry.SafeHeaders {
					items.OutputOpenTelemetry.SafeHeaders = append(items.OutputOpenTelemetry.SafeHeaders, types.StringValue(v))
				}
				items.OutputOpenTelemetry.Secret = types.StringPointerValue(itemsItem.OutputOpenTelemetry.Secret)
				items.OutputOpenTelemetry.SecretParamName = types.StringPointerValue(itemsItem.OutputOpenTelemetry.SecretParamName)
				items.OutputOpenTelemetry.Streamtags = make([]types.String, 0, len(itemsItem.OutputOpenTelemetry.Streamtags))
				for _, v := range itemsItem.OutputOpenTelemetry.Streamtags {
					items.OutputOpenTelemetry.Streamtags = append(items.OutputOpenTelemetry.Streamtags, types.StringValue(v))
				}
				items.OutputOpenTelemetry.SystemFields = make([]types.String, 0, len(itemsItem.OutputOpenTelemetry.SystemFields))
				for _, v := range itemsItem.OutputOpenTelemetry.SystemFields {
					items.OutputOpenTelemetry.SystemFields = append(items.OutputOpenTelemetry.SystemFields, types.StringValue(v))
				}
				items.OutputOpenTelemetry.TextSecret = types.StringPointerValue(itemsItem.OutputOpenTelemetry.TextSecret)
				if itemsItem.OutputOpenTelemetry.TimeoutRetrySettings == nil {
					items.OutputOpenTelemetry.TimeoutRetrySettings = nil
				} else {
					items.OutputOpenTelemetry.TimeoutRetrySettings = &tfTypes.OutputOpenTelemetryTimeoutRetrySettings{}
					items.OutputOpenTelemetry.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputOpenTelemetry.TimeoutRetrySettings.BackoffRate)
					items.OutputOpenTelemetry.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputOpenTelemetry.TimeoutRetrySettings.InitialBackoff)
					items.OutputOpenTelemetry.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputOpenTelemetry.TimeoutRetrySettings.MaxBackoff)
					items.OutputOpenTelemetry.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputOpenTelemetry.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputOpenTelemetry.TimeoutSec = types.Float64PointerValue(itemsItem.OutputOpenTelemetry.TimeoutSec)
				if itemsItem.OutputOpenTelemetry.TLS == nil {
					items.OutputOpenTelemetry.TLS = nil
				} else {
					items.OutputOpenTelemetry.TLS = &tfTypes.OutputOpenTelemetryTLSSettingsClientSide{}
					items.OutputOpenTelemetry.TLS.CaPath = types.StringPointerValue(itemsItem.OutputOpenTelemetry.TLS.CaPath)
					items.OutputOpenTelemetry.TLS.CertificateName = types.StringPointerValue(itemsItem.OutputOpenTelemetry.TLS.CertificateName)
					items.OutputOpenTelemetry.TLS.CertPath = types.StringPointerValue(itemsItem.OutputOpenTelemetry.TLS.CertPath)
					items.OutputOpenTelemetry.TLS.Disabled = types.BoolPointerValue(itemsItem.OutputOpenTelemetry.TLS.Disabled)
					if itemsItem.OutputOpenTelemetry.TLS.MaxVersion != nil {
						items.OutputOpenTelemetry.TLS.MaxVersion = types.StringValue(string(*itemsItem.OutputOpenTelemetry.TLS.MaxVersion))
					} else {
						items.OutputOpenTelemetry.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.OutputOpenTelemetry.TLS.MinVersion != nil {
						items.OutputOpenTelemetry.TLS.MinVersion = types.StringValue(string(*itemsItem.OutputOpenTelemetry.TLS.MinVersion))
					} else {
						items.OutputOpenTelemetry.TLS.MinVersion = types.StringNull()
					}
					items.OutputOpenTelemetry.TLS.Passphrase = types.StringPointerValue(itemsItem.OutputOpenTelemetry.TLS.Passphrase)
					items.OutputOpenTelemetry.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.OutputOpenTelemetry.TLS.PrivKeyPath)
					items.OutputOpenTelemetry.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputOpenTelemetry.TLS.RejectUnauthorized)
				}
				items.OutputOpenTelemetry.Token = types.StringPointerValue(itemsItem.OutputOpenTelemetry.Token)
				items.OutputOpenTelemetry.TokenAttributeName = types.StringPointerValue(itemsItem.OutputOpenTelemetry.TokenAttributeName)
				items.OutputOpenTelemetry.TokenTimeoutSecs = types.Float64PointerValue(itemsItem.OutputOpenTelemetry.TokenTimeoutSecs)
				items.OutputOpenTelemetry.Type = types.StringValue(string(itemsItem.OutputOpenTelemetry.Type))
				items.OutputOpenTelemetry.Username = types.StringPointerValue(itemsItem.OutputOpenTelemetry.Username)
				items.OutputOpenTelemetry.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputOpenTelemetry.UseRoundRobinDNS)
			}
			if itemsItem.OutputPrometheus != nil {
				items.OutputPrometheus = &tfTypes.OutputPrometheus{}
				items.OutputPrometheus.AuthHeaderExpr = types.StringPointerValue(itemsItem.OutputPrometheus.AuthHeaderExpr)
				if itemsItem.OutputPrometheus.AuthType != nil {
					items.OutputPrometheus.AuthType = types.StringValue(string(*itemsItem.OutputPrometheus.AuthType))
				} else {
					items.OutputPrometheus.AuthType = types.StringNull()
				}
				items.OutputPrometheus.Concurrency = types.Float64PointerValue(itemsItem.OutputPrometheus.Concurrency)
				items.OutputPrometheus.CredentialsSecret = types.StringPointerValue(itemsItem.OutputPrometheus.CredentialsSecret)
				items.OutputPrometheus.Description = types.StringPointerValue(itemsItem.OutputPrometheus.Description)
				items.OutputPrometheus.Environment = types.StringPointerValue(itemsItem.OutputPrometheus.Environment)
				items.OutputPrometheus.ExtraHTTPHeaders = []tfTypes.OutputPrometheusExtraHTTPHeader{}

				for _, extraHTTPHeadersItem20 := range itemsItem.OutputPrometheus.ExtraHTTPHeaders {
					var extraHTTPHeaders20 tfTypes.OutputPrometheusExtraHTTPHeader

					extraHTTPHeaders20.Name = types.StringPointerValue(extraHTTPHeadersItem20.Name)
					extraHTTPHeaders20.Value = types.StringValue(extraHTTPHeadersItem20.Value)

					items.OutputPrometheus.ExtraHTTPHeaders = append(items.OutputPrometheus.ExtraHTTPHeaders, extraHTTPHeaders20)
				}
				if itemsItem.OutputPrometheus.FailedRequestLoggingMode != nil {
					items.OutputPrometheus.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputPrometheus.FailedRequestLoggingMode))
				} else {
					items.OutputPrometheus.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputPrometheus.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputPrometheus.FlushPeriodSec)
				items.OutputPrometheus.ID = types.StringPointerValue(itemsItem.OutputPrometheus.ID)
				items.OutputPrometheus.LoginURL = types.StringPointerValue(itemsItem.OutputPrometheus.LoginURL)
				items.OutputPrometheus.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputPrometheus.MaxPayloadEvents)
				items.OutputPrometheus.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputPrometheus.MaxPayloadSizeKB)
				items.OutputPrometheus.MetricRenameExpr = types.StringPointerValue(itemsItem.OutputPrometheus.MetricRenameExpr)
				items.OutputPrometheus.MetricsFlushPeriodSec = types.Float64PointerValue(itemsItem.OutputPrometheus.MetricsFlushPeriodSec)
				items.OutputPrometheus.OauthHeaders = []tfTypes.OutputPrometheusOauthHeader{}

				for _, oauthHeadersItem3 := range itemsItem.OutputPrometheus.OauthHeaders {
					var oauthHeaders3 tfTypes.OutputPrometheusOauthHeader

					oauthHeaders3.Name = types.StringValue(oauthHeadersItem3.Name)
					oauthHeaders3.Value = types.StringValue(oauthHeadersItem3.Value)

					items.OutputPrometheus.OauthHeaders = append(items.OutputPrometheus.OauthHeaders, oauthHeaders3)
				}
				items.OutputPrometheus.OauthParams = []tfTypes.OutputPrometheusOauthParam{}

				for _, oauthParamsItem3 := range itemsItem.OutputPrometheus.OauthParams {
					var oauthParams3 tfTypes.OutputPrometheusOauthParam

					oauthParams3.Name = types.StringValue(oauthParamsItem3.Name)
					oauthParams3.Value = types.StringValue(oauthParamsItem3.Value)

					items.OutputPrometheus.OauthParams = append(items.OutputPrometheus.OauthParams, oauthParams3)
				}
				if itemsItem.OutputPrometheus.OnBackpressure != nil {
					items.OutputPrometheus.OnBackpressure = types.StringValue(string(*itemsItem.OutputPrometheus.OnBackpressure))
				} else {
					items.OutputPrometheus.OnBackpressure = types.StringNull()
				}
				items.OutputPrometheus.Password = types.StringPointerValue(itemsItem.OutputPrometheus.Password)
				items.OutputPrometheus.Pipeline = types.StringPointerValue(itemsItem.OutputPrometheus.Pipeline)
				if itemsItem.OutputPrometheus.PqCompress != nil {
					items.OutputPrometheus.PqCompress = types.StringValue(string(*itemsItem.OutputPrometheus.PqCompress))
				} else {
					items.OutputPrometheus.PqCompress = types.StringNull()
				}
				if itemsItem.OutputPrometheus.PqControls == nil {
					items.OutputPrometheus.PqControls = nil
				} else {
					items.OutputPrometheus.PqControls = &tfTypes.OutputPrometheusPqControls{}
				}
				items.OutputPrometheus.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputPrometheus.PqMaxFileSize)
				items.OutputPrometheus.PqMaxSize = types.StringPointerValue(itemsItem.OutputPrometheus.PqMaxSize)
				if itemsItem.OutputPrometheus.PqMode != nil {
					items.OutputPrometheus.PqMode = types.StringValue(string(*itemsItem.OutputPrometheus.PqMode))
				} else {
					items.OutputPrometheus.PqMode = types.StringNull()
				}
				if itemsItem.OutputPrometheus.PqOnBackpressure != nil {
					items.OutputPrometheus.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputPrometheus.PqOnBackpressure))
				} else {
					items.OutputPrometheus.PqOnBackpressure = types.StringNull()
				}
				items.OutputPrometheus.PqPath = types.StringPointerValue(itemsItem.OutputPrometheus.PqPath)
				items.OutputPrometheus.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputPrometheus.RejectUnauthorized)
				items.OutputPrometheus.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputPrometheus.ResponseHonorRetryAfterHeader)
				items.OutputPrometheus.ResponseRetrySettings = []tfTypes.OutputPrometheusResponseRetrySetting{}

				for _, responseRetrySettingsItem21 := range itemsItem.OutputPrometheus.ResponseRetrySettings {
					var responseRetrySettings21 tfTypes.OutputPrometheusResponseRetrySetting

					responseRetrySettings21.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem21.BackoffRate)
					responseRetrySettings21.HTTPStatus = types.Float64Value(responseRetrySettingsItem21.HTTPStatus)
					responseRetrySettings21.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem21.InitialBackoff)
					responseRetrySettings21.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem21.MaxBackoff)

					items.OutputPrometheus.ResponseRetrySettings = append(items.OutputPrometheus.ResponseRetrySettings, responseRetrySettings21)
				}
				items.OutputPrometheus.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputPrometheus.SafeHeaders))
				for _, v := range itemsItem.OutputPrometheus.SafeHeaders {
					items.OutputPrometheus.SafeHeaders = append(items.OutputPrometheus.SafeHeaders, types.StringValue(v))
				}
				items.OutputPrometheus.Secret = types.StringPointerValue(itemsItem.OutputPrometheus.Secret)
				items.OutputPrometheus.SecretParamName = types.StringPointerValue(itemsItem.OutputPrometheus.SecretParamName)
				items.OutputPrometheus.SendMetadata = types.BoolPointerValue(itemsItem.OutputPrometheus.SendMetadata)
				items.OutputPrometheus.Streamtags = make([]types.String, 0, len(itemsItem.OutputPrometheus.Streamtags))
				for _, v := range itemsItem.OutputPrometheus.Streamtags {
					items.OutputPrometheus.Streamtags = append(items.OutputPrometheus.Streamtags, types.StringValue(v))
				}
				items.OutputPrometheus.SystemFields = make([]types.String, 0, len(itemsItem.OutputPrometheus.SystemFields))
				for _, v := range itemsItem.OutputPrometheus.SystemFields {
					items.OutputPrometheus.SystemFields = append(items.OutputPrometheus.SystemFields, types.StringValue(v))
				}
				items.OutputPrometheus.TextSecret = types.StringPointerValue(itemsItem.OutputPrometheus.TextSecret)
				if itemsItem.OutputPrometheus.TimeoutRetrySettings == nil {
					items.OutputPrometheus.TimeoutRetrySettings = nil
				} else {
					items.OutputPrometheus.TimeoutRetrySettings = &tfTypes.OutputPrometheusTimeoutRetrySettings{}
					items.OutputPrometheus.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputPrometheus.TimeoutRetrySettings.BackoffRate)
					items.OutputPrometheus.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputPrometheus.TimeoutRetrySettings.InitialBackoff)
					items.OutputPrometheus.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputPrometheus.TimeoutRetrySettings.MaxBackoff)
					items.OutputPrometheus.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputPrometheus.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputPrometheus.TimeoutSec = types.Float64PointerValue(itemsItem.OutputPrometheus.TimeoutSec)
				items.OutputPrometheus.Token = types.StringPointerValue(itemsItem.OutputPrometheus.Token)
				items.OutputPrometheus.TokenAttributeName = types.StringPointerValue(itemsItem.OutputPrometheus.TokenAttributeName)
				items.OutputPrometheus.TokenTimeoutSecs = types.Float64PointerValue(itemsItem.OutputPrometheus.TokenTimeoutSecs)
				items.OutputPrometheus.Type = types.StringValue(string(itemsItem.OutputPrometheus.Type))
				items.OutputPrometheus.URL = types.StringValue(itemsItem.OutputPrometheus.URL)
				items.OutputPrometheus.Username = types.StringPointerValue(itemsItem.OutputPrometheus.Username)
				items.OutputPrometheus.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputPrometheus.UseRoundRobinDNS)
			}
			if itemsItem.OutputRing != nil {
				items.OutputRing = &tfTypes.OutputRing{}
				if itemsItem.OutputRing.Compress != nil {
					items.OutputRing.Compress = types.StringValue(string(*itemsItem.OutputRing.Compress))
				} else {
					items.OutputRing.Compress = types.StringNull()
				}
				items.OutputRing.Description = types.StringPointerValue(itemsItem.OutputRing.Description)
				items.OutputRing.DestPath = types.StringPointerValue(itemsItem.OutputRing.DestPath)
				items.OutputRing.Environment = types.StringPointerValue(itemsItem.OutputRing.Environment)
				if itemsItem.OutputRing.Format != nil {
					items.OutputRing.Format = types.StringValue(string(*itemsItem.OutputRing.Format))
				} else {
					items.OutputRing.Format = types.StringNull()
				}
				items.OutputRing.ID = types.StringValue(itemsItem.OutputRing.ID)
				items.OutputRing.MaxDataSize = types.StringPointerValue(itemsItem.OutputRing.MaxDataSize)
				items.OutputRing.MaxDataTime = types.StringPointerValue(itemsItem.OutputRing.MaxDataTime)
				if itemsItem.OutputRing.OnBackpressure != nil {
					items.OutputRing.OnBackpressure = types.StringValue(string(*itemsItem.OutputRing.OnBackpressure))
				} else {
					items.OutputRing.OnBackpressure = types.StringNull()
				}
				items.OutputRing.PartitionExpr = types.StringPointerValue(itemsItem.OutputRing.PartitionExpr)
				items.OutputRing.Pipeline = types.StringPointerValue(itemsItem.OutputRing.Pipeline)
				items.OutputRing.Streamtags = make([]types.String, 0, len(itemsItem.OutputRing.Streamtags))
				for _, v := range itemsItem.OutputRing.Streamtags {
					items.OutputRing.Streamtags = append(items.OutputRing.Streamtags, types.StringValue(v))
				}
				items.OutputRing.SystemFields = make([]types.String, 0, len(itemsItem.OutputRing.SystemFields))
				for _, v := range itemsItem.OutputRing.SystemFields {
					items.OutputRing.SystemFields = append(items.OutputRing.SystemFields, types.StringValue(v))
				}
				items.OutputRing.Type = types.StringValue(string(itemsItem.OutputRing.Type))
			}
			if itemsItem.OutputRouter != nil {
				items.OutputRouter = &tfTypes.OutputRouter{}
				items.OutputRouter.Description = types.StringPointerValue(itemsItem.OutputRouter.Description)
				items.OutputRouter.Environment = types.StringPointerValue(itemsItem.OutputRouter.Environment)
				items.OutputRouter.ID = types.StringPointerValue(itemsItem.OutputRouter.ID)
				items.OutputRouter.Pipeline = types.StringPointerValue(itemsItem.OutputRouter.Pipeline)
				items.OutputRouter.Rules = []tfTypes.OutputRouterRule{}

				for _, rulesItem := range itemsItem.OutputRouter.Rules {
					var rules tfTypes.OutputRouterRule

					rules.Description = types.StringPointerValue(rulesItem.Description)
					rules.Filter = types.StringValue(rulesItem.Filter)
					rules.Final = types.BoolPointerValue(rulesItem.Final)
					rules.Output = types.StringValue(rulesItem.Output)

					items.OutputRouter.Rules = append(items.OutputRouter.Rules, rules)
				}
				items.OutputRouter.Streamtags = make([]types.String, 0, len(itemsItem.OutputRouter.Streamtags))
				for _, v := range itemsItem.OutputRouter.Streamtags {
					items.OutputRouter.Streamtags = append(items.OutputRouter.Streamtags, types.StringValue(v))
				}
				items.OutputRouter.SystemFields = make([]types.String, 0, len(itemsItem.OutputRouter.SystemFields))
				for _, v := range itemsItem.OutputRouter.SystemFields {
					items.OutputRouter.SystemFields = append(items.OutputRouter.SystemFields, types.StringValue(v))
				}
				items.OutputRouter.Type = types.StringValue(string(itemsItem.OutputRouter.Type))
			}
			if itemsItem.OutputS3 != nil {
				items.OutputS3 = &tfTypes.OutputS3{}
				items.OutputS3.AddIDToStagePath = types.BoolPointerValue(itemsItem.OutputS3.AddIDToStagePath)
				items.OutputS3.AssumeRoleArn = types.StringPointerValue(itemsItem.OutputS3.AssumeRoleArn)
				items.OutputS3.AssumeRoleExternalID = types.StringPointerValue(itemsItem.OutputS3.AssumeRoleExternalID)
				items.OutputS3.AutomaticSchema = types.BoolPointerValue(itemsItem.OutputS3.AutomaticSchema)
				items.OutputS3.AwsAPIKey = types.StringPointerValue(itemsItem.OutputS3.AwsAPIKey)
				if itemsItem.OutputS3.AwsAuthenticationMethod != nil {
					items.OutputS3.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.OutputS3.AwsAuthenticationMethod))
				} else {
					items.OutputS3.AwsAuthenticationMethod = types.StringNull()
				}
				items.OutputS3.AwsSecret = types.StringPointerValue(itemsItem.OutputS3.AwsSecret)
				items.OutputS3.AwsSecretKey = types.StringPointerValue(itemsItem.OutputS3.AwsSecretKey)
				items.OutputS3.BaseFileName = types.StringPointerValue(itemsItem.OutputS3.BaseFileName)
				items.OutputS3.Bucket = types.StringValue(itemsItem.OutputS3.Bucket)
				if itemsItem.OutputS3.Compress != nil {
					items.OutputS3.Compress = types.StringValue(string(*itemsItem.OutputS3.Compress))
				} else {
					items.OutputS3.Compress = types.StringNull()
				}
				if itemsItem.OutputS3.CompressionLevel != nil {
					items.OutputS3.CompressionLevel = types.StringValue(string(*itemsItem.OutputS3.CompressionLevel))
				} else {
					items.OutputS3.CompressionLevel = types.StringNull()
				}
				items.OutputS3.DeadletterEnabled = types.BoolPointerValue(itemsItem.OutputS3.DeadletterEnabled)
				items.OutputS3.DeadletterPath = types.StringPointerValue(itemsItem.OutputS3.DeadletterPath)
				items.OutputS3.Description = types.StringPointerValue(itemsItem.OutputS3.Description)
				items.OutputS3.DestPath = types.StringPointerValue(itemsItem.OutputS3.DestPath)
				items.OutputS3.DurationSeconds = types.Float64PointerValue(itemsItem.OutputS3.DurationSeconds)
				items.OutputS3.EmptyDirCleanupSec = types.Float64PointerValue(itemsItem.OutputS3.EmptyDirCleanupSec)
				items.OutputS3.EnableAssumeRole = types.BoolPointerValue(itemsItem.OutputS3.EnableAssumeRole)
				items.OutputS3.EnablePageChecksum = types.BoolPointerValue(itemsItem.OutputS3.EnablePageChecksum)
				items.OutputS3.EnableStatistics = types.BoolPointerValue(itemsItem.OutputS3.EnableStatistics)
				items.OutputS3.EnableWritePageIndex = types.BoolPointerValue(itemsItem.OutputS3.EnableWritePageIndex)
				items.OutputS3.Endpoint = types.StringPointerValue(itemsItem.OutputS3.Endpoint)
				items.OutputS3.Environment = types.StringPointerValue(itemsItem.OutputS3.Environment)
				items.OutputS3.FileNameSuffix = types.StringPointerValue(itemsItem.OutputS3.FileNameSuffix)
				if itemsItem.OutputS3.Format != nil {
					items.OutputS3.Format = types.StringValue(string(*itemsItem.OutputS3.Format))
				} else {
					items.OutputS3.Format = types.StringNull()
				}
				items.OutputS3.HeaderLine = types.StringPointerValue(itemsItem.OutputS3.HeaderLine)
				items.OutputS3.ID = types.StringPointerValue(itemsItem.OutputS3.ID)
				items.OutputS3.KeyValueMetadata = []tfTypes.OutputS3KeyValueMetadatum{}

				for _, keyValueMetadataItem5 := range itemsItem.OutputS3.KeyValueMetadata {
					var keyValueMetadata5 tfTypes.OutputS3KeyValueMetadatum

					keyValueMetadata5.Key = types.StringPointerValue(keyValueMetadataItem5.Key)
					keyValueMetadata5.Value = types.StringValue(keyValueMetadataItem5.Value)

					items.OutputS3.KeyValueMetadata = append(items.OutputS3.KeyValueMetadata, keyValueMetadata5)
				}
				items.OutputS3.KmsKeyID = types.StringPointerValue(itemsItem.OutputS3.KmsKeyID)
				items.OutputS3.MaxClosingFilesToBackpressure = types.Float64PointerValue(itemsItem.OutputS3.MaxClosingFilesToBackpressure)
				items.OutputS3.MaxConcurrentFileParts = types.Float64PointerValue(itemsItem.OutputS3.MaxConcurrentFileParts)
				items.OutputS3.MaxFileIdleTimeSec = types.Float64PointerValue(itemsItem.OutputS3.MaxFileIdleTimeSec)
				items.OutputS3.MaxFileOpenTimeSec = types.Float64PointerValue(itemsItem.OutputS3.MaxFileOpenTimeSec)
				items.OutputS3.MaxFileSizeMB = types.Float64PointerValue(itemsItem.OutputS3.MaxFileSizeMB)
				items.OutputS3.MaxOpenFiles = types.Float64PointerValue(itemsItem.OutputS3.MaxOpenFiles)
				items.OutputS3.MaxRetryNum = types.Float64PointerValue(itemsItem.OutputS3.MaxRetryNum)
				if itemsItem.OutputS3.ObjectACL != nil {
					items.OutputS3.ObjectACL = types.StringValue(string(*itemsItem.OutputS3.ObjectACL))
				} else {
					items.OutputS3.ObjectACL = types.StringNull()
				}
				if itemsItem.OutputS3.OnBackpressure != nil {
					items.OutputS3.OnBackpressure = types.StringValue(string(*itemsItem.OutputS3.OnBackpressure))
				} else {
					items.OutputS3.OnBackpressure = types.StringNull()
				}
				if itemsItem.OutputS3.OnDiskFullBackpressure != nil {
					items.OutputS3.OnDiskFullBackpressure = types.StringValue(string(*itemsItem.OutputS3.OnDiskFullBackpressure))
				} else {
					items.OutputS3.OnDiskFullBackpressure = types.StringNull()
				}
				if itemsItem.OutputS3.ParquetDataPageVersion != nil {
					items.OutputS3.ParquetDataPageVersion = types.StringValue(string(*itemsItem.OutputS3.ParquetDataPageVersion))
				} else {
					items.OutputS3.ParquetDataPageVersion = types.StringNull()
				}
				items.OutputS3.ParquetPageSize = types.StringPointerValue(itemsItem.OutputS3.ParquetPageSize)
				items.OutputS3.ParquetRowGroupLength = types.Float64PointerValue(itemsItem.OutputS3.ParquetRowGroupLength)
				if itemsItem.OutputS3.ParquetVersion != nil {
					items.OutputS3.ParquetVersion = types.StringValue(string(*itemsItem.OutputS3.ParquetVersion))
				} else {
					items.OutputS3.ParquetVersion = types.StringNull()
				}
				items.OutputS3.PartitionExpr = types.StringPointerValue(itemsItem.OutputS3.PartitionExpr)
				items.OutputS3.Pipeline = types.StringPointerValue(itemsItem.OutputS3.Pipeline)
				items.OutputS3.Region = types.StringPointerValue(itemsItem.OutputS3.Region)
				items.OutputS3.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputS3.RejectUnauthorized)
				items.OutputS3.RemoveEmptyDirs = types.BoolPointerValue(itemsItem.OutputS3.RemoveEmptyDirs)
				items.OutputS3.ReuseConnections = types.BoolPointerValue(itemsItem.OutputS3.ReuseConnections)
				if itemsItem.OutputS3.ServerSideEncryption != nil {
					items.OutputS3.ServerSideEncryption = types.StringValue(string(*itemsItem.OutputS3.ServerSideEncryption))
				} else {
					items.OutputS3.ServerSideEncryption = types.StringNull()
				}
				items.OutputS3.ShouldLogInvalidRows = types.BoolPointerValue(itemsItem.OutputS3.ShouldLogInvalidRows)
				if itemsItem.OutputS3.SignatureVersion != nil {
					items.OutputS3.SignatureVersion = types.StringValue(string(*itemsItem.OutputS3.SignatureVersion))
				} else {
					items.OutputS3.SignatureVersion = types.StringNull()
				}
				items.OutputS3.StagePath = types.StringPointerValue(itemsItem.OutputS3.StagePath)
				if itemsItem.OutputS3.StorageClass != nil {
					items.OutputS3.StorageClass = types.StringValue(string(*itemsItem.OutputS3.StorageClass))
				} else {
					items.OutputS3.StorageClass = types.StringNull()
				}
				items.OutputS3.Streamtags = make([]types.String, 0, len(itemsItem.OutputS3.Streamtags))
				for _, v := range itemsItem.OutputS3.Streamtags {
					items.OutputS3.Streamtags = append(items.OutputS3.Streamtags, types.StringValue(v))
				}
				items.OutputS3.SystemFields = make([]types.String, 0, len(itemsItem.OutputS3.SystemFields))
				for _, v := range itemsItem.OutputS3.SystemFields {
					items.OutputS3.SystemFields = append(items.OutputS3.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputS3.Type != nil {
					items.OutputS3.Type = types.StringValue(string(*itemsItem.OutputS3.Type))
				} else {
					items.OutputS3.Type = types.StringNull()
				}
				items.OutputS3.VerifyPermissions = types.BoolPointerValue(itemsItem.OutputS3.VerifyPermissions)
				items.OutputS3.WriteHighWaterMark = types.Float64PointerValue(itemsItem.OutputS3.WriteHighWaterMark)
			}
			if itemsItem.OutputSecurityLake != nil {
				items.OutputSecurityLake = &tfTypes.OutputSecurityLake{}
				items.OutputSecurityLake.AccountID = types.StringValue(itemsItem.OutputSecurityLake.AccountID)
				items.OutputSecurityLake.AddIDToStagePath = types.BoolPointerValue(itemsItem.OutputSecurityLake.AddIDToStagePath)
				items.OutputSecurityLake.AssumeRoleArn = types.StringValue(itemsItem.OutputSecurityLake.AssumeRoleArn)
				items.OutputSecurityLake.AssumeRoleExternalID = types.StringPointerValue(itemsItem.OutputSecurityLake.AssumeRoleExternalID)
				items.OutputSecurityLake.AutomaticSchema = types.BoolPointerValue(itemsItem.OutputSecurityLake.AutomaticSchema)
				items.OutputSecurityLake.AwsAPIKey = types.StringPointerValue(itemsItem.OutputSecurityLake.AwsAPIKey)
				if itemsItem.OutputSecurityLake.AwsAuthenticationMethod != nil {
					items.OutputSecurityLake.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.OutputSecurityLake.AwsAuthenticationMethod))
				} else {
					items.OutputSecurityLake.AwsAuthenticationMethod = types.StringNull()
				}
				items.OutputSecurityLake.AwsSecret = types.StringPointerValue(itemsItem.OutputSecurityLake.AwsSecret)
				items.OutputSecurityLake.AwsSecretKey = types.StringPointerValue(itemsItem.OutputSecurityLake.AwsSecretKey)
				items.OutputSecurityLake.BaseFileName = types.StringPointerValue(itemsItem.OutputSecurityLake.BaseFileName)
				items.OutputSecurityLake.Bucket = types.StringValue(itemsItem.OutputSecurityLake.Bucket)
				items.OutputSecurityLake.CustomSource = types.StringValue(itemsItem.OutputSecurityLake.CustomSource)
				items.OutputSecurityLake.DeadletterEnabled = types.BoolPointerValue(itemsItem.OutputSecurityLake.DeadletterEnabled)
				items.OutputSecurityLake.DeadletterPath = types.StringPointerValue(itemsItem.OutputSecurityLake.DeadletterPath)
				items.OutputSecurityLake.Description = types.StringPointerValue(itemsItem.OutputSecurityLake.Description)
				items.OutputSecurityLake.DurationSeconds = types.Float64PointerValue(itemsItem.OutputSecurityLake.DurationSeconds)
				items.OutputSecurityLake.EmptyDirCleanupSec = types.Float64PointerValue(itemsItem.OutputSecurityLake.EmptyDirCleanupSec)
				items.OutputSecurityLake.EnableAssumeRole = types.BoolPointerValue(itemsItem.OutputSecurityLake.EnableAssumeRole)
				items.OutputSecurityLake.EnablePageChecksum = types.BoolPointerValue(itemsItem.OutputSecurityLake.EnablePageChecksum)
				items.OutputSecurityLake.EnableStatistics = types.BoolPointerValue(itemsItem.OutputSecurityLake.EnableStatistics)
				items.OutputSecurityLake.EnableWritePageIndex = types.BoolPointerValue(itemsItem.OutputSecurityLake.EnableWritePageIndex)
				items.OutputSecurityLake.Endpoint = types.StringPointerValue(itemsItem.OutputSecurityLake.Endpoint)
				items.OutputSecurityLake.Environment = types.StringPointerValue(itemsItem.OutputSecurityLake.Environment)
				items.OutputSecurityLake.HeaderLine = types.StringPointerValue(itemsItem.OutputSecurityLake.HeaderLine)
				items.OutputSecurityLake.ID = types.StringPointerValue(itemsItem.OutputSecurityLake.ID)
				items.OutputSecurityLake.KeyValueMetadata = []tfTypes.OutputSecurityLakeKeyValueMetadatum{}

				for _, keyValueMetadataItem6 := range itemsItem.OutputSecurityLake.KeyValueMetadata {
					var keyValueMetadata6 tfTypes.OutputSecurityLakeKeyValueMetadatum

					keyValueMetadata6.Key = types.StringPointerValue(keyValueMetadataItem6.Key)
					keyValueMetadata6.Value = types.StringValue(keyValueMetadataItem6.Value)

					items.OutputSecurityLake.KeyValueMetadata = append(items.OutputSecurityLake.KeyValueMetadata, keyValueMetadata6)
				}
				items.OutputSecurityLake.KmsKeyID = types.StringPointerValue(itemsItem.OutputSecurityLake.KmsKeyID)
				items.OutputSecurityLake.MaxClosingFilesToBackpressure = types.Float64PointerValue(itemsItem.OutputSecurityLake.MaxClosingFilesToBackpressure)
				items.OutputSecurityLake.MaxConcurrentFileParts = types.Float64PointerValue(itemsItem.OutputSecurityLake.MaxConcurrentFileParts)
				items.OutputSecurityLake.MaxFileIdleTimeSec = types.Float64PointerValue(itemsItem.OutputSecurityLake.MaxFileIdleTimeSec)
				items.OutputSecurityLake.MaxFileOpenTimeSec = types.Float64PointerValue(itemsItem.OutputSecurityLake.MaxFileOpenTimeSec)
				items.OutputSecurityLake.MaxFileSizeMB = types.Float64PointerValue(itemsItem.OutputSecurityLake.MaxFileSizeMB)
				items.OutputSecurityLake.MaxOpenFiles = types.Float64PointerValue(itemsItem.OutputSecurityLake.MaxOpenFiles)
				items.OutputSecurityLake.MaxRetryNum = types.Float64PointerValue(itemsItem.OutputSecurityLake.MaxRetryNum)
				if itemsItem.OutputSecurityLake.ObjectACL != nil {
					items.OutputSecurityLake.ObjectACL = types.StringValue(string(*itemsItem.OutputSecurityLake.ObjectACL))
				} else {
					items.OutputSecurityLake.ObjectACL = types.StringNull()
				}
				if itemsItem.OutputSecurityLake.OnBackpressure != nil {
					items.OutputSecurityLake.OnBackpressure = types.StringValue(string(*itemsItem.OutputSecurityLake.OnBackpressure))
				} else {
					items.OutputSecurityLake.OnBackpressure = types.StringNull()
				}
				if itemsItem.OutputSecurityLake.OnDiskFullBackpressure != nil {
					items.OutputSecurityLake.OnDiskFullBackpressure = types.StringValue(string(*itemsItem.OutputSecurityLake.OnDiskFullBackpressure))
				} else {
					items.OutputSecurityLake.OnDiskFullBackpressure = types.StringNull()
				}
				if itemsItem.OutputSecurityLake.ParquetDataPageVersion != nil {
					items.OutputSecurityLake.ParquetDataPageVersion = types.StringValue(string(*itemsItem.OutputSecurityLake.ParquetDataPageVersion))
				} else {
					items.OutputSecurityLake.ParquetDataPageVersion = types.StringNull()
				}
				items.OutputSecurityLake.ParquetPageSize = types.StringPointerValue(itemsItem.OutputSecurityLake.ParquetPageSize)
				items.OutputSecurityLake.ParquetRowGroupLength = types.Float64PointerValue(itemsItem.OutputSecurityLake.ParquetRowGroupLength)
				items.OutputSecurityLake.ParquetSchema = types.StringPointerValue(itemsItem.OutputSecurityLake.ParquetSchema)
				if itemsItem.OutputSecurityLake.ParquetVersion != nil {
					items.OutputSecurityLake.ParquetVersion = types.StringValue(string(*itemsItem.OutputSecurityLake.ParquetVersion))
				} else {
					items.OutputSecurityLake.ParquetVersion = types.StringNull()
				}
				items.OutputSecurityLake.Pipeline = types.StringPointerValue(itemsItem.OutputSecurityLake.Pipeline)
				items.OutputSecurityLake.Region = types.StringValue(itemsItem.OutputSecurityLake.Region)
				items.OutputSecurityLake.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputSecurityLake.RejectUnauthorized)
				items.OutputSecurityLake.RemoveEmptyDirs = types.BoolPointerValue(itemsItem.OutputSecurityLake.RemoveEmptyDirs)
				items.OutputSecurityLake.ReuseConnections = types.BoolPointerValue(itemsItem.OutputSecurityLake.ReuseConnections)
				if itemsItem.OutputSecurityLake.ServerSideEncryption != nil {
					items.OutputSecurityLake.ServerSideEncryption = types.StringValue(string(*itemsItem.OutputSecurityLake.ServerSideEncryption))
				} else {
					items.OutputSecurityLake.ServerSideEncryption = types.StringNull()
				}
				items.OutputSecurityLake.ShouldLogInvalidRows = types.BoolPointerValue(itemsItem.OutputSecurityLake.ShouldLogInvalidRows)
				if itemsItem.OutputSecurityLake.SignatureVersion != nil {
					items.OutputSecurityLake.SignatureVersion = types.StringValue(string(*itemsItem.OutputSecurityLake.SignatureVersion))
				} else {
					items.OutputSecurityLake.SignatureVersion = types.StringNull()
				}
				items.OutputSecurityLake.StagePath = types.StringPointerValue(itemsItem.OutputSecurityLake.StagePath)
				if itemsItem.OutputSecurityLake.StorageClass != nil {
					items.OutputSecurityLake.StorageClass = types.StringValue(string(*itemsItem.OutputSecurityLake.StorageClass))
				} else {
					items.OutputSecurityLake.StorageClass = types.StringNull()
				}
				items.OutputSecurityLake.Streamtags = make([]types.String, 0, len(itemsItem.OutputSecurityLake.Streamtags))
				for _, v := range itemsItem.OutputSecurityLake.Streamtags {
					items.OutputSecurityLake.Streamtags = append(items.OutputSecurityLake.Streamtags, types.StringValue(v))
				}
				items.OutputSecurityLake.SystemFields = make([]types.String, 0, len(itemsItem.OutputSecurityLake.SystemFields))
				for _, v := range itemsItem.OutputSecurityLake.SystemFields {
					items.OutputSecurityLake.SystemFields = append(items.OutputSecurityLake.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputSecurityLake.Type != nil {
					items.OutputSecurityLake.Type = types.StringValue(string(*itemsItem.OutputSecurityLake.Type))
				} else {
					items.OutputSecurityLake.Type = types.StringNull()
				}
				items.OutputSecurityLake.VerifyPermissions = types.BoolPointerValue(itemsItem.OutputSecurityLake.VerifyPermissions)
				items.OutputSecurityLake.WriteHighWaterMark = types.Float64PointerValue(itemsItem.OutputSecurityLake.WriteHighWaterMark)
			}
			if itemsItem.OutputSentinel != nil {
				items.OutputSentinel = &tfTypes.OutputSentinel{}
				items.OutputSentinel.AdvancedContentType = types.StringPointerValue(itemsItem.OutputSentinel.AdvancedContentType)
				if itemsItem.OutputSentinel.AuthType != nil {
					items.OutputSentinel.AuthType = types.StringValue(string(*itemsItem.OutputSentinel.AuthType))
				} else {
					items.OutputSentinel.AuthType = types.StringNull()
				}
				items.OutputSentinel.ClientID = types.StringValue(itemsItem.OutputSentinel.ClientID)
				items.OutputSentinel.Compress = types.BoolPointerValue(itemsItem.OutputSentinel.Compress)
				items.OutputSentinel.Concurrency = types.Float64PointerValue(itemsItem.OutputSentinel.Concurrency)
				items.OutputSentinel.CustomContentType = types.StringPointerValue(itemsItem.OutputSentinel.CustomContentType)
				items.OutputSentinel.CustomDropWhenNull = types.BoolPointerValue(itemsItem.OutputSentinel.CustomDropWhenNull)
				items.OutputSentinel.CustomEventDelimiter = types.StringPointerValue(itemsItem.OutputSentinel.CustomEventDelimiter)
				items.OutputSentinel.CustomPayloadExpression = types.StringPointerValue(itemsItem.OutputSentinel.CustomPayloadExpression)
				items.OutputSentinel.CustomSourceExpression = types.StringPointerValue(itemsItem.OutputSentinel.CustomSourceExpression)
				items.OutputSentinel.DceEndpoint = types.StringPointerValue(itemsItem.OutputSentinel.DceEndpoint)
				items.OutputSentinel.DcrID = types.StringPointerValue(itemsItem.OutputSentinel.DcrID)
				items.OutputSentinel.Description = types.StringPointerValue(itemsItem.OutputSentinel.Description)
				if itemsItem.OutputSentinel.EndpointURLConfiguration != nil {
					items.OutputSentinel.EndpointURLConfiguration = types.StringValue(string(*itemsItem.OutputSentinel.EndpointURLConfiguration))
				} else {
					items.OutputSentinel.EndpointURLConfiguration = types.StringNull()
				}
				items.OutputSentinel.Environment = types.StringPointerValue(itemsItem.OutputSentinel.Environment)
				items.OutputSentinel.ExtraHTTPHeaders = []tfTypes.OutputSentinelExtraHTTPHeader{}

				for _, extraHTTPHeadersItem21 := range itemsItem.OutputSentinel.ExtraHTTPHeaders {
					var extraHTTPHeaders21 tfTypes.OutputSentinelExtraHTTPHeader

					extraHTTPHeaders21.Name = types.StringPointerValue(extraHTTPHeadersItem21.Name)
					extraHTTPHeaders21.Value = types.StringValue(extraHTTPHeadersItem21.Value)

					items.OutputSentinel.ExtraHTTPHeaders = append(items.OutputSentinel.ExtraHTTPHeaders, extraHTTPHeaders21)
				}
				if itemsItem.OutputSentinel.FailedRequestLoggingMode != nil {
					items.OutputSentinel.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputSentinel.FailedRequestLoggingMode))
				} else {
					items.OutputSentinel.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputSentinel.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputSentinel.FlushPeriodSec)
				if itemsItem.OutputSentinel.Format != nil {
					items.OutputSentinel.Format = types.StringValue(string(*itemsItem.OutputSentinel.Format))
				} else {
					items.OutputSentinel.Format = types.StringNull()
				}
				items.OutputSentinel.FormatEventCode = types.StringPointerValue(itemsItem.OutputSentinel.FormatEventCode)
				items.OutputSentinel.FormatPayloadCode = types.StringPointerValue(itemsItem.OutputSentinel.FormatPayloadCode)
				items.OutputSentinel.ID = types.StringPointerValue(itemsItem.OutputSentinel.ID)
				items.OutputSentinel.KeepAlive = types.BoolPointerValue(itemsItem.OutputSentinel.KeepAlive)
				items.OutputSentinel.LoginURL = types.StringValue(itemsItem.OutputSentinel.LoginURL)
				items.OutputSentinel.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputSentinel.MaxPayloadEvents)
				items.OutputSentinel.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputSentinel.MaxPayloadSizeKB)
				if itemsItem.OutputSentinel.OnBackpressure != nil {
					items.OutputSentinel.OnBackpressure = types.StringValue(string(*itemsItem.OutputSentinel.OnBackpressure))
				} else {
					items.OutputSentinel.OnBackpressure = types.StringNull()
				}
				items.OutputSentinel.Pipeline = types.StringPointerValue(itemsItem.OutputSentinel.Pipeline)
				if itemsItem.OutputSentinel.PqCompress != nil {
					items.OutputSentinel.PqCompress = types.StringValue(string(*itemsItem.OutputSentinel.PqCompress))
				} else {
					items.OutputSentinel.PqCompress = types.StringNull()
				}
				if itemsItem.OutputSentinel.PqControls == nil {
					items.OutputSentinel.PqControls = nil
				} else {
					items.OutputSentinel.PqControls = &tfTypes.OutputSentinelPqControls{}
				}
				items.OutputSentinel.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputSentinel.PqMaxFileSize)
				items.OutputSentinel.PqMaxSize = types.StringPointerValue(itemsItem.OutputSentinel.PqMaxSize)
				if itemsItem.OutputSentinel.PqMode != nil {
					items.OutputSentinel.PqMode = types.StringValue(string(*itemsItem.OutputSentinel.PqMode))
				} else {
					items.OutputSentinel.PqMode = types.StringNull()
				}
				if itemsItem.OutputSentinel.PqOnBackpressure != nil {
					items.OutputSentinel.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputSentinel.PqOnBackpressure))
				} else {
					items.OutputSentinel.PqOnBackpressure = types.StringNull()
				}
				items.OutputSentinel.PqPath = types.StringPointerValue(itemsItem.OutputSentinel.PqPath)
				items.OutputSentinel.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputSentinel.RejectUnauthorized)
				items.OutputSentinel.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputSentinel.ResponseHonorRetryAfterHeader)
				items.OutputSentinel.ResponseRetrySettings = []tfTypes.OutputSentinelResponseRetrySetting{}

				for _, responseRetrySettingsItem22 := range itemsItem.OutputSentinel.ResponseRetrySettings {
					var responseRetrySettings22 tfTypes.OutputSentinelResponseRetrySetting

					responseRetrySettings22.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem22.BackoffRate)
					responseRetrySettings22.HTTPStatus = types.Float64Value(responseRetrySettingsItem22.HTTPStatus)
					responseRetrySettings22.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem22.InitialBackoff)
					responseRetrySettings22.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem22.MaxBackoff)

					items.OutputSentinel.ResponseRetrySettings = append(items.OutputSentinel.ResponseRetrySettings, responseRetrySettings22)
				}
				items.OutputSentinel.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputSentinel.SafeHeaders))
				for _, v := range itemsItem.OutputSentinel.SafeHeaders {
					items.OutputSentinel.SafeHeaders = append(items.OutputSentinel.SafeHeaders, types.StringValue(v))
				}
				items.OutputSentinel.Scope = types.StringPointerValue(itemsItem.OutputSentinel.Scope)
				items.OutputSentinel.Secret = types.StringValue(itemsItem.OutputSentinel.Secret)
				items.OutputSentinel.StreamName = types.StringPointerValue(itemsItem.OutputSentinel.StreamName)
				items.OutputSentinel.Streamtags = make([]types.String, 0, len(itemsItem.OutputSentinel.Streamtags))
				for _, v := range itemsItem.OutputSentinel.Streamtags {
					items.OutputSentinel.Streamtags = append(items.OutputSentinel.Streamtags, types.StringValue(v))
				}
				items.OutputSentinel.SystemFields = make([]types.String, 0, len(itemsItem.OutputSentinel.SystemFields))
				for _, v := range itemsItem.OutputSentinel.SystemFields {
					items.OutputSentinel.SystemFields = append(items.OutputSentinel.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputSentinel.TimeoutRetrySettings == nil {
					items.OutputSentinel.TimeoutRetrySettings = nil
				} else {
					items.OutputSentinel.TimeoutRetrySettings = &tfTypes.OutputSentinelTimeoutRetrySettings{}
					items.OutputSentinel.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputSentinel.TimeoutRetrySettings.BackoffRate)
					items.OutputSentinel.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputSentinel.TimeoutRetrySettings.InitialBackoff)
					items.OutputSentinel.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputSentinel.TimeoutRetrySettings.MaxBackoff)
					items.OutputSentinel.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputSentinel.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputSentinel.TimeoutSec = types.Float64PointerValue(itemsItem.OutputSentinel.TimeoutSec)
				items.OutputSentinel.TotalMemoryLimitKB = types.Float64PointerValue(itemsItem.OutputSentinel.TotalMemoryLimitKB)
				if itemsItem.OutputSentinel.Type != nil {
					items.OutputSentinel.Type = types.StringValue(string(*itemsItem.OutputSentinel.Type))
				} else {
					items.OutputSentinel.Type = types.StringNull()
				}
				items.OutputSentinel.URL = types.StringPointerValue(itemsItem.OutputSentinel.URL)
				items.OutputSentinel.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputSentinel.UseRoundRobinDNS)
			}
			if itemsItem.OutputServiceNow != nil {
				items.OutputServiceNow = &tfTypes.OutputServiceNow{}
				items.OutputServiceNow.AuthTokenName = types.StringPointerValue(itemsItem.OutputServiceNow.AuthTokenName)
				if itemsItem.OutputServiceNow.Compress != nil {
					items.OutputServiceNow.Compress = types.StringValue(string(*itemsItem.OutputServiceNow.Compress))
				} else {
					items.OutputServiceNow.Compress = types.StringNull()
				}
				items.OutputServiceNow.Concurrency = types.Float64PointerValue(itemsItem.OutputServiceNow.Concurrency)
				items.OutputServiceNow.ConnectionTimeout = types.Float64PointerValue(itemsItem.OutputServiceNow.ConnectionTimeout)
				items.OutputServiceNow.Description = types.StringPointerValue(itemsItem.OutputServiceNow.Description)
				items.OutputServiceNow.Endpoint = types.StringPointerValue(itemsItem.OutputServiceNow.Endpoint)
				items.OutputServiceNow.Environment = types.StringPointerValue(itemsItem.OutputServiceNow.Environment)
				items.OutputServiceNow.ExtraHTTPHeaders = []tfTypes.OutputServiceNowExtraHTTPHeader{}

				for _, extraHTTPHeadersItem22 := range itemsItem.OutputServiceNow.ExtraHTTPHeaders {
					var extraHTTPHeaders22 tfTypes.OutputServiceNowExtraHTTPHeader

					extraHTTPHeaders22.Name = types.StringPointerValue(extraHTTPHeadersItem22.Name)
					extraHTTPHeaders22.Value = types.StringValue(extraHTTPHeadersItem22.Value)

					items.OutputServiceNow.ExtraHTTPHeaders = append(items.OutputServiceNow.ExtraHTTPHeaders, extraHTTPHeaders22)
				}
				if itemsItem.OutputServiceNow.FailedRequestLoggingMode != nil {
					items.OutputServiceNow.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputServiceNow.FailedRequestLoggingMode))
				} else {
					items.OutputServiceNow.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputServiceNow.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputServiceNow.FlushPeriodSec)
				if itemsItem.OutputServiceNow.HTTPCompress != nil {
					items.OutputServiceNow.HTTPCompress = types.StringValue(string(*itemsItem.OutputServiceNow.HTTPCompress))
				} else {
					items.OutputServiceNow.HTTPCompress = types.StringNull()
				}
				items.OutputServiceNow.HTTPLogsEndpointOverride = types.StringPointerValue(itemsItem.OutputServiceNow.HTTPLogsEndpointOverride)
				items.OutputServiceNow.HTTPMetricsEndpointOverride = types.StringPointerValue(itemsItem.OutputServiceNow.HTTPMetricsEndpointOverride)
				items.OutputServiceNow.HTTPTracesEndpointOverride = types.StringPointerValue(itemsItem.OutputServiceNow.HTTPTracesEndpointOverride)
				items.OutputServiceNow.ID = types.StringPointerValue(itemsItem.OutputServiceNow.ID)
				items.OutputServiceNow.KeepAlive = types.BoolPointerValue(itemsItem.OutputServiceNow.KeepAlive)
				items.OutputServiceNow.KeepAliveTime = types.Float64PointerValue(itemsItem.OutputServiceNow.KeepAliveTime)
				items.OutputServiceNow.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputServiceNow.MaxPayloadSizeKB)
				items.OutputServiceNow.Metadata = []tfTypes.OutputServiceNowMetadatum{}

				for _, metadataItem3 := range itemsItem.OutputServiceNow.Metadata {
					var metadata3 tfTypes.OutputServiceNowMetadatum

					metadata3.Key = types.StringPointerValue(metadataItem3.Key)
					metadata3.Value = types.StringValue(metadataItem3.Value)

					items.OutputServiceNow.Metadata = append(items.OutputServiceNow.Metadata, metadata3)
				}
				if itemsItem.OutputServiceNow.OnBackpressure != nil {
					items.OutputServiceNow.OnBackpressure = types.StringValue(string(*itemsItem.OutputServiceNow.OnBackpressure))
				} else {
					items.OutputServiceNow.OnBackpressure = types.StringNull()
				}
				if itemsItem.OutputServiceNow.OtlpVersion != nil {
					items.OutputServiceNow.OtlpVersion = types.StringValue(string(*itemsItem.OutputServiceNow.OtlpVersion))
				} else {
					items.OutputServiceNow.OtlpVersion = types.StringNull()
				}
				items.OutputServiceNow.Pipeline = types.StringPointerValue(itemsItem.OutputServiceNow.Pipeline)
				if itemsItem.OutputServiceNow.PqCompress != nil {
					items.OutputServiceNow.PqCompress = types.StringValue(string(*itemsItem.OutputServiceNow.PqCompress))
				} else {
					items.OutputServiceNow.PqCompress = types.StringNull()
				}
				if itemsItem.OutputServiceNow.PqControls == nil {
					items.OutputServiceNow.PqControls = nil
				} else {
					items.OutputServiceNow.PqControls = &tfTypes.OutputServiceNowPqControls{}
				}
				items.OutputServiceNow.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputServiceNow.PqMaxFileSize)
				items.OutputServiceNow.PqMaxSize = types.StringPointerValue(itemsItem.OutputServiceNow.PqMaxSize)
				if itemsItem.OutputServiceNow.PqMode != nil {
					items.OutputServiceNow.PqMode = types.StringValue(string(*itemsItem.OutputServiceNow.PqMode))
				} else {
					items.OutputServiceNow.PqMode = types.StringNull()
				}
				if itemsItem.OutputServiceNow.PqOnBackpressure != nil {
					items.OutputServiceNow.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputServiceNow.PqOnBackpressure))
				} else {
					items.OutputServiceNow.PqOnBackpressure = types.StringNull()
				}
				items.OutputServiceNow.PqPath = types.StringPointerValue(itemsItem.OutputServiceNow.PqPath)
				if itemsItem.OutputServiceNow.Protocol != nil {
					items.OutputServiceNow.Protocol = types.StringValue(string(*itemsItem.OutputServiceNow.Protocol))
				} else {
					items.OutputServiceNow.Protocol = types.StringNull()
				}
				items.OutputServiceNow.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputServiceNow.RejectUnauthorized)
				items.OutputServiceNow.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputServiceNow.ResponseHonorRetryAfterHeader)
				items.OutputServiceNow.ResponseRetrySettings = []tfTypes.OutputServiceNowResponseRetrySetting{}

				for _, responseRetrySettingsItem23 := range itemsItem.OutputServiceNow.ResponseRetrySettings {
					var responseRetrySettings23 tfTypes.OutputServiceNowResponseRetrySetting

					responseRetrySettings23.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem23.BackoffRate)
					responseRetrySettings23.HTTPStatus = types.Float64Value(responseRetrySettingsItem23.HTTPStatus)
					responseRetrySettings23.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem23.InitialBackoff)
					responseRetrySettings23.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem23.MaxBackoff)

					items.OutputServiceNow.ResponseRetrySettings = append(items.OutputServiceNow.ResponseRetrySettings, responseRetrySettings23)
				}
				items.OutputServiceNow.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputServiceNow.SafeHeaders))
				for _, v := range itemsItem.OutputServiceNow.SafeHeaders {
					items.OutputServiceNow.SafeHeaders = append(items.OutputServiceNow.SafeHeaders, types.StringValue(v))
				}
				items.OutputServiceNow.Streamtags = make([]types.String, 0, len(itemsItem.OutputServiceNow.Streamtags))
				for _, v := range itemsItem.OutputServiceNow.Streamtags {
					items.OutputServiceNow.Streamtags = append(items.OutputServiceNow.Streamtags, types.StringValue(v))
				}
				items.OutputServiceNow.SystemFields = make([]types.String, 0, len(itemsItem.OutputServiceNow.SystemFields))
				for _, v := range itemsItem.OutputServiceNow.SystemFields {
					items.OutputServiceNow.SystemFields = append(items.OutputServiceNow.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputServiceNow.TimeoutRetrySettings == nil {
					items.OutputServiceNow.TimeoutRetrySettings = nil
				} else {
					items.OutputServiceNow.TimeoutRetrySettings = &tfTypes.OutputServiceNowTimeoutRetrySettings{}
					items.OutputServiceNow.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputServiceNow.TimeoutRetrySettings.BackoffRate)
					items.OutputServiceNow.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputServiceNow.TimeoutRetrySettings.InitialBackoff)
					items.OutputServiceNow.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputServiceNow.TimeoutRetrySettings.MaxBackoff)
					items.OutputServiceNow.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputServiceNow.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputServiceNow.TimeoutSec = types.Float64PointerValue(itemsItem.OutputServiceNow.TimeoutSec)
				if itemsItem.OutputServiceNow.TLS == nil {
					items.OutputServiceNow.TLS = nil
				} else {
					items.OutputServiceNow.TLS = &tfTypes.OutputServiceNowTLSSettingsClientSide{}
					items.OutputServiceNow.TLS.CaPath = types.StringPointerValue(itemsItem.OutputServiceNow.TLS.CaPath)
					items.OutputServiceNow.TLS.CertificateName = types.StringPointerValue(itemsItem.OutputServiceNow.TLS.CertificateName)
					items.OutputServiceNow.TLS.CertPath = types.StringPointerValue(itemsItem.OutputServiceNow.TLS.CertPath)
					items.OutputServiceNow.TLS.Disabled = types.BoolPointerValue(itemsItem.OutputServiceNow.TLS.Disabled)
					if itemsItem.OutputServiceNow.TLS.MaxVersion != nil {
						items.OutputServiceNow.TLS.MaxVersion = types.StringValue(string(*itemsItem.OutputServiceNow.TLS.MaxVersion))
					} else {
						items.OutputServiceNow.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.OutputServiceNow.TLS.MinVersion != nil {
						items.OutputServiceNow.TLS.MinVersion = types.StringValue(string(*itemsItem.OutputServiceNow.TLS.MinVersion))
					} else {
						items.OutputServiceNow.TLS.MinVersion = types.StringNull()
					}
					items.OutputServiceNow.TLS.Passphrase = types.StringPointerValue(itemsItem.OutputServiceNow.TLS.Passphrase)
					items.OutputServiceNow.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.OutputServiceNow.TLS.PrivKeyPath)
					items.OutputServiceNow.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputServiceNow.TLS.RejectUnauthorized)
				}
				items.OutputServiceNow.TokenSecret = types.StringValue(itemsItem.OutputServiceNow.TokenSecret)
				if itemsItem.OutputServiceNow.Type != nil {
					items.OutputServiceNow.Type = types.StringValue(string(*itemsItem.OutputServiceNow.Type))
				} else {
					items.OutputServiceNow.Type = types.StringNull()
				}
				items.OutputServiceNow.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputServiceNow.UseRoundRobinDNS)
			}
			if itemsItem.OutputSignalfx != nil {
				items.OutputSignalfx = &tfTypes.OutputSignalfx{}
				if itemsItem.OutputSignalfx.AuthType != nil {
					items.OutputSignalfx.AuthType = types.StringValue(string(*itemsItem.OutputSignalfx.AuthType))
				} else {
					items.OutputSignalfx.AuthType = types.StringNull()
				}
				items.OutputSignalfx.Compress = types.BoolPointerValue(itemsItem.OutputSignalfx.Compress)
				items.OutputSignalfx.Concurrency = types.Float64PointerValue(itemsItem.OutputSignalfx.Concurrency)
				items.OutputSignalfx.Description = types.StringPointerValue(itemsItem.OutputSignalfx.Description)
				items.OutputSignalfx.Environment = types.StringPointerValue(itemsItem.OutputSignalfx.Environment)
				items.OutputSignalfx.ExtraHTTPHeaders = []tfTypes.OutputSignalfxExtraHTTPHeader{}

				for _, extraHTTPHeadersItem23 := range itemsItem.OutputSignalfx.ExtraHTTPHeaders {
					var extraHTTPHeaders23 tfTypes.OutputSignalfxExtraHTTPHeader

					extraHTTPHeaders23.Name = types.StringPointerValue(extraHTTPHeadersItem23.Name)
					extraHTTPHeaders23.Value = types.StringValue(extraHTTPHeadersItem23.Value)

					items.OutputSignalfx.ExtraHTTPHeaders = append(items.OutputSignalfx.ExtraHTTPHeaders, extraHTTPHeaders23)
				}
				if itemsItem.OutputSignalfx.FailedRequestLoggingMode != nil {
					items.OutputSignalfx.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputSignalfx.FailedRequestLoggingMode))
				} else {
					items.OutputSignalfx.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputSignalfx.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputSignalfx.FlushPeriodSec)
				items.OutputSignalfx.ID = types.StringPointerValue(itemsItem.OutputSignalfx.ID)
				items.OutputSignalfx.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputSignalfx.MaxPayloadEvents)
				items.OutputSignalfx.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputSignalfx.MaxPayloadSizeKB)
				if itemsItem.OutputSignalfx.OnBackpressure != nil {
					items.OutputSignalfx.OnBackpressure = types.StringValue(string(*itemsItem.OutputSignalfx.OnBackpressure))
				} else {
					items.OutputSignalfx.OnBackpressure = types.StringNull()
				}
				items.OutputSignalfx.Pipeline = types.StringPointerValue(itemsItem.OutputSignalfx.Pipeline)
				if itemsItem.OutputSignalfx.PqCompress != nil {
					items.OutputSignalfx.PqCompress = types.StringValue(string(*itemsItem.OutputSignalfx.PqCompress))
				} else {
					items.OutputSignalfx.PqCompress = types.StringNull()
				}
				if itemsItem.OutputSignalfx.PqControls == nil {
					items.OutputSignalfx.PqControls = nil
				} else {
					items.OutputSignalfx.PqControls = &tfTypes.OutputSignalfxPqControls{}
				}
				items.OutputSignalfx.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputSignalfx.PqMaxFileSize)
				items.OutputSignalfx.PqMaxSize = types.StringPointerValue(itemsItem.OutputSignalfx.PqMaxSize)
				if itemsItem.OutputSignalfx.PqMode != nil {
					items.OutputSignalfx.PqMode = types.StringValue(string(*itemsItem.OutputSignalfx.PqMode))
				} else {
					items.OutputSignalfx.PqMode = types.StringNull()
				}
				if itemsItem.OutputSignalfx.PqOnBackpressure != nil {
					items.OutputSignalfx.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputSignalfx.PqOnBackpressure))
				} else {
					items.OutputSignalfx.PqOnBackpressure = types.StringNull()
				}
				items.OutputSignalfx.PqPath = types.StringPointerValue(itemsItem.OutputSignalfx.PqPath)
				items.OutputSignalfx.Realm = types.StringPointerValue(itemsItem.OutputSignalfx.Realm)
				items.OutputSignalfx.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputSignalfx.RejectUnauthorized)
				items.OutputSignalfx.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputSignalfx.ResponseHonorRetryAfterHeader)
				items.OutputSignalfx.ResponseRetrySettings = []tfTypes.OutputSignalfxResponseRetrySetting{}

				for _, responseRetrySettingsItem24 := range itemsItem.OutputSignalfx.ResponseRetrySettings {
					var responseRetrySettings24 tfTypes.OutputSignalfxResponseRetrySetting

					responseRetrySettings24.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem24.BackoffRate)
					responseRetrySettings24.HTTPStatus = types.Float64Value(responseRetrySettingsItem24.HTTPStatus)
					responseRetrySettings24.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem24.InitialBackoff)
					responseRetrySettings24.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem24.MaxBackoff)

					items.OutputSignalfx.ResponseRetrySettings = append(items.OutputSignalfx.ResponseRetrySettings, responseRetrySettings24)
				}
				items.OutputSignalfx.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputSignalfx.SafeHeaders))
				for _, v := range itemsItem.OutputSignalfx.SafeHeaders {
					items.OutputSignalfx.SafeHeaders = append(items.OutputSignalfx.SafeHeaders, types.StringValue(v))
				}
				items.OutputSignalfx.Streamtags = make([]types.String, 0, len(itemsItem.OutputSignalfx.Streamtags))
				for _, v := range itemsItem.OutputSignalfx.Streamtags {
					items.OutputSignalfx.Streamtags = append(items.OutputSignalfx.Streamtags, types.StringValue(v))
				}
				items.OutputSignalfx.SystemFields = make([]types.String, 0, len(itemsItem.OutputSignalfx.SystemFields))
				for _, v := range itemsItem.OutputSignalfx.SystemFields {
					items.OutputSignalfx.SystemFields = append(items.OutputSignalfx.SystemFields, types.StringValue(v))
				}
				items.OutputSignalfx.TextSecret = types.StringPointerValue(itemsItem.OutputSignalfx.TextSecret)
				if itemsItem.OutputSignalfx.TimeoutRetrySettings == nil {
					items.OutputSignalfx.TimeoutRetrySettings = nil
				} else {
					items.OutputSignalfx.TimeoutRetrySettings = &tfTypes.OutputSignalfxTimeoutRetrySettings{}
					items.OutputSignalfx.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputSignalfx.TimeoutRetrySettings.BackoffRate)
					items.OutputSignalfx.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputSignalfx.TimeoutRetrySettings.InitialBackoff)
					items.OutputSignalfx.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputSignalfx.TimeoutRetrySettings.MaxBackoff)
					items.OutputSignalfx.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputSignalfx.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputSignalfx.TimeoutSec = types.Float64PointerValue(itemsItem.OutputSignalfx.TimeoutSec)
				items.OutputSignalfx.Token = types.StringPointerValue(itemsItem.OutputSignalfx.Token)
				items.OutputSignalfx.Type = types.StringValue(string(itemsItem.OutputSignalfx.Type))
				items.OutputSignalfx.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputSignalfx.UseRoundRobinDNS)
			}
			if itemsItem.OutputSnmp != nil {
				items.OutputSnmp = &tfTypes.OutputSnmp{}
				items.OutputSnmp.Description = types.StringPointerValue(itemsItem.OutputSnmp.Description)
				items.OutputSnmp.DNSResolvePeriodSec = types.Float64PointerValue(itemsItem.OutputSnmp.DNSResolvePeriodSec)
				items.OutputSnmp.Environment = types.StringPointerValue(itemsItem.OutputSnmp.Environment)
				items.OutputSnmp.Hosts = []tfTypes.OutputSnmpHost{}

				for _, hostsItem2 := range itemsItem.OutputSnmp.Hosts {
					var hosts2 tfTypes.OutputSnmpHost

					hosts2.Host = types.StringValue(hostsItem2.Host)
					hosts2.Port = types.Float64PointerValue(hostsItem2.Port)

					items.OutputSnmp.Hosts = append(items.OutputSnmp.Hosts, hosts2)
				}
				items.OutputSnmp.ID = types.StringPointerValue(itemsItem.OutputSnmp.ID)
				items.OutputSnmp.Pipeline = types.StringPointerValue(itemsItem.OutputSnmp.Pipeline)
				items.OutputSnmp.Streamtags = make([]types.String, 0, len(itemsItem.OutputSnmp.Streamtags))
				for _, v := range itemsItem.OutputSnmp.Streamtags {
					items.OutputSnmp.Streamtags = append(items.OutputSnmp.Streamtags, types.StringValue(v))
				}
				items.OutputSnmp.SystemFields = make([]types.String, 0, len(itemsItem.OutputSnmp.SystemFields))
				for _, v := range itemsItem.OutputSnmp.SystemFields {
					items.OutputSnmp.SystemFields = append(items.OutputSnmp.SystemFields, types.StringValue(v))
				}
				items.OutputSnmp.Type = types.StringValue(string(itemsItem.OutputSnmp.Type))
			}
			if itemsItem.OutputSns != nil {
				items.OutputSns = &tfTypes.OutputSns{}
				items.OutputSns.AssumeRoleArn = types.StringPointerValue(itemsItem.OutputSns.AssumeRoleArn)
				items.OutputSns.AssumeRoleExternalID = types.StringPointerValue(itemsItem.OutputSns.AssumeRoleExternalID)
				items.OutputSns.AwsAPIKey = types.StringPointerValue(itemsItem.OutputSns.AwsAPIKey)
				if itemsItem.OutputSns.AwsAuthenticationMethod != nil {
					items.OutputSns.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.OutputSns.AwsAuthenticationMethod))
				} else {
					items.OutputSns.AwsAuthenticationMethod = types.StringNull()
				}
				items.OutputSns.AwsSecret = types.StringPointerValue(itemsItem.OutputSns.AwsSecret)
				items.OutputSns.AwsSecretKey = types.StringPointerValue(itemsItem.OutputSns.AwsSecretKey)
				items.OutputSns.Description = types.StringPointerValue(itemsItem.OutputSns.Description)
				items.OutputSns.DurationSeconds = types.Float64PointerValue(itemsItem.OutputSns.DurationSeconds)
				items.OutputSns.EnableAssumeRole = types.BoolPointerValue(itemsItem.OutputSns.EnableAssumeRole)
				items.OutputSns.Endpoint = types.StringPointerValue(itemsItem.OutputSns.Endpoint)
				items.OutputSns.Environment = types.StringPointerValue(itemsItem.OutputSns.Environment)
				items.OutputSns.ID = types.StringPointerValue(itemsItem.OutputSns.ID)
				items.OutputSns.MaxRetries = types.Float64PointerValue(itemsItem.OutputSns.MaxRetries)
				items.OutputSns.MessageGroupID = types.StringValue(itemsItem.OutputSns.MessageGroupID)
				if itemsItem.OutputSns.OnBackpressure != nil {
					items.OutputSns.OnBackpressure = types.StringValue(string(*itemsItem.OutputSns.OnBackpressure))
				} else {
					items.OutputSns.OnBackpressure = types.StringNull()
				}
				items.OutputSns.Pipeline = types.StringPointerValue(itemsItem.OutputSns.Pipeline)
				if itemsItem.OutputSns.PqCompress != nil {
					items.OutputSns.PqCompress = types.StringValue(string(*itemsItem.OutputSns.PqCompress))
				} else {
					items.OutputSns.PqCompress = types.StringNull()
				}
				if itemsItem.OutputSns.PqControls == nil {
					items.OutputSns.PqControls = nil
				} else {
					items.OutputSns.PqControls = &tfTypes.OutputSnsPqControls{}
				}
				items.OutputSns.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputSns.PqMaxFileSize)
				items.OutputSns.PqMaxSize = types.StringPointerValue(itemsItem.OutputSns.PqMaxSize)
				if itemsItem.OutputSns.PqMode != nil {
					items.OutputSns.PqMode = types.StringValue(string(*itemsItem.OutputSns.PqMode))
				} else {
					items.OutputSns.PqMode = types.StringNull()
				}
				if itemsItem.OutputSns.PqOnBackpressure != nil {
					items.OutputSns.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputSns.PqOnBackpressure))
				} else {
					items.OutputSns.PqOnBackpressure = types.StringNull()
				}
				items.OutputSns.PqPath = types.StringPointerValue(itemsItem.OutputSns.PqPath)
				items.OutputSns.Region = types.StringPointerValue(itemsItem.OutputSns.Region)
				items.OutputSns.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputSns.RejectUnauthorized)
				items.OutputSns.ReuseConnections = types.BoolPointerValue(itemsItem.OutputSns.ReuseConnections)
				if itemsItem.OutputSns.SignatureVersion != nil {
					items.OutputSns.SignatureVersion = types.StringValue(string(*itemsItem.OutputSns.SignatureVersion))
				} else {
					items.OutputSns.SignatureVersion = types.StringNull()
				}
				items.OutputSns.Streamtags = make([]types.String, 0, len(itemsItem.OutputSns.Streamtags))
				for _, v := range itemsItem.OutputSns.Streamtags {
					items.OutputSns.Streamtags = append(items.OutputSns.Streamtags, types.StringValue(v))
				}
				items.OutputSns.SystemFields = make([]types.String, 0, len(itemsItem.OutputSns.SystemFields))
				for _, v := range itemsItem.OutputSns.SystemFields {
					items.OutputSns.SystemFields = append(items.OutputSns.SystemFields, types.StringValue(v))
				}
				items.OutputSns.TopicArn = types.StringValue(itemsItem.OutputSns.TopicArn)
				if itemsItem.OutputSns.Type != nil {
					items.OutputSns.Type = types.StringValue(string(*itemsItem.OutputSns.Type))
				} else {
					items.OutputSns.Type = types.StringNull()
				}
			}
			if itemsItem.OutputSplunk != nil {
				items.OutputSplunk = &tfTypes.OutputSplunk{}
				items.OutputSplunk.AuthToken = types.StringPointerValue(itemsItem.OutputSplunk.AuthToken)
				if itemsItem.OutputSplunk.AuthType != nil {
					items.OutputSplunk.AuthType = types.StringValue(string(*itemsItem.OutputSplunk.AuthType))
				} else {
					items.OutputSplunk.AuthType = types.StringNull()
				}
				if itemsItem.OutputSplunk.Compress != nil {
					items.OutputSplunk.Compress = types.StringValue(string(*itemsItem.OutputSplunk.Compress))
				} else {
					items.OutputSplunk.Compress = types.StringNull()
				}
				items.OutputSplunk.ConnectionTimeout = types.Float64PointerValue(itemsItem.OutputSplunk.ConnectionTimeout)
				items.OutputSplunk.Description = types.StringPointerValue(itemsItem.OutputSplunk.Description)
				items.OutputSplunk.EnableACK = types.BoolPointerValue(itemsItem.OutputSplunk.EnableACK)
				items.OutputSplunk.EnableMultiMetrics = types.BoolPointerValue(itemsItem.OutputSplunk.EnableMultiMetrics)
				items.OutputSplunk.Environment = types.StringPointerValue(itemsItem.OutputSplunk.Environment)
				items.OutputSplunk.Host = types.StringValue(itemsItem.OutputSplunk.Host)
				items.OutputSplunk.ID = types.StringPointerValue(itemsItem.OutputSplunk.ID)
				items.OutputSplunk.LogFailedRequests = types.BoolPointerValue(itemsItem.OutputSplunk.LogFailedRequests)
				items.OutputSplunk.MaxFailedHealthChecks = types.Float64PointerValue(itemsItem.OutputSplunk.MaxFailedHealthChecks)
				if itemsItem.OutputSplunk.MaxS2Sversion != nil {
					items.OutputSplunk.MaxS2Sversion = types.StringValue(string(*itemsItem.OutputSplunk.MaxS2Sversion))
				} else {
					items.OutputSplunk.MaxS2Sversion = types.StringNull()
				}
				if itemsItem.OutputSplunk.NestedFields != nil {
					items.OutputSplunk.NestedFields = types.StringValue(string(*itemsItem.OutputSplunk.NestedFields))
				} else {
					items.OutputSplunk.NestedFields = types.StringNull()
				}
				if itemsItem.OutputSplunk.OnBackpressure != nil {
					items.OutputSplunk.OnBackpressure = types.StringValue(string(*itemsItem.OutputSplunk.OnBackpressure))
				} else {
					items.OutputSplunk.OnBackpressure = types.StringNull()
				}
				items.OutputSplunk.Pipeline = types.StringPointerValue(itemsItem.OutputSplunk.Pipeline)
				items.OutputSplunk.Port = types.Float64PointerValue(itemsItem.OutputSplunk.Port)
				if itemsItem.OutputSplunk.PqCompress != nil {
					items.OutputSplunk.PqCompress = types.StringValue(string(*itemsItem.OutputSplunk.PqCompress))
				} else {
					items.OutputSplunk.PqCompress = types.StringNull()
				}
				if itemsItem.OutputSplunk.PqControls == nil {
					items.OutputSplunk.PqControls = nil
				} else {
					items.OutputSplunk.PqControls = &tfTypes.OutputSplunkPqControls{}
				}
				items.OutputSplunk.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputSplunk.PqMaxFileSize)
				items.OutputSplunk.PqMaxSize = types.StringPointerValue(itemsItem.OutputSplunk.PqMaxSize)
				if itemsItem.OutputSplunk.PqMode != nil {
					items.OutputSplunk.PqMode = types.StringValue(string(*itemsItem.OutputSplunk.PqMode))
				} else {
					items.OutputSplunk.PqMode = types.StringNull()
				}
				if itemsItem.OutputSplunk.PqOnBackpressure != nil {
					items.OutputSplunk.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputSplunk.PqOnBackpressure))
				} else {
					items.OutputSplunk.PqOnBackpressure = types.StringNull()
				}
				items.OutputSplunk.PqPath = types.StringPointerValue(itemsItem.OutputSplunk.PqPath)
				items.OutputSplunk.Streamtags = make([]types.String, 0, len(itemsItem.OutputSplunk.Streamtags))
				for _, v := range itemsItem.OutputSplunk.Streamtags {
					items.OutputSplunk.Streamtags = append(items.OutputSplunk.Streamtags, types.StringValue(v))
				}
				items.OutputSplunk.SystemFields = make([]types.String, 0, len(itemsItem.OutputSplunk.SystemFields))
				for _, v := range itemsItem.OutputSplunk.SystemFields {
					items.OutputSplunk.SystemFields = append(items.OutputSplunk.SystemFields, types.StringValue(v))
				}
				items.OutputSplunk.TextSecret = types.StringPointerValue(itemsItem.OutputSplunk.TextSecret)
				items.OutputSplunk.ThrottleRatePerSec = types.StringPointerValue(itemsItem.OutputSplunk.ThrottleRatePerSec)
				if itemsItem.OutputSplunk.TLS == nil {
					items.OutputSplunk.TLS = nil
				} else {
					items.OutputSplunk.TLS = &tfTypes.OutputSplunkTLSSettingsClientSide{}
					items.OutputSplunk.TLS.CaPath = types.StringPointerValue(itemsItem.OutputSplunk.TLS.CaPath)
					items.OutputSplunk.TLS.CertificateName = types.StringPointerValue(itemsItem.OutputSplunk.TLS.CertificateName)
					items.OutputSplunk.TLS.CertPath = types.StringPointerValue(itemsItem.OutputSplunk.TLS.CertPath)
					items.OutputSplunk.TLS.Disabled = types.BoolPointerValue(itemsItem.OutputSplunk.TLS.Disabled)
					if itemsItem.OutputSplunk.TLS.MaxVersion != nil {
						items.OutputSplunk.TLS.MaxVersion = types.StringValue(string(*itemsItem.OutputSplunk.TLS.MaxVersion))
					} else {
						items.OutputSplunk.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.OutputSplunk.TLS.MinVersion != nil {
						items.OutputSplunk.TLS.MinVersion = types.StringValue(string(*itemsItem.OutputSplunk.TLS.MinVersion))
					} else {
						items.OutputSplunk.TLS.MinVersion = types.StringNull()
					}
					items.OutputSplunk.TLS.Passphrase = types.StringPointerValue(itemsItem.OutputSplunk.TLS.Passphrase)
					items.OutputSplunk.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.OutputSplunk.TLS.PrivKeyPath)
					items.OutputSplunk.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputSplunk.TLS.RejectUnauthorized)
					items.OutputSplunk.TLS.Servername = types.StringPointerValue(itemsItem.OutputSplunk.TLS.Servername)
				}
				if itemsItem.OutputSplunk.Type != nil {
					items.OutputSplunk.Type = types.StringValue(string(*itemsItem.OutputSplunk.Type))
				} else {
					items.OutputSplunk.Type = types.StringNull()
				}
				items.OutputSplunk.WriteTimeout = types.Float64PointerValue(itemsItem.OutputSplunk.WriteTimeout)
			}
			if itemsItem.OutputSplunkHec != nil {
				items.OutputSplunkHec = &tfTypes.OutputSplunkHec{}
				if itemsItem.OutputSplunkHec.AuthType != nil {
					items.OutputSplunkHec.AuthType = types.StringValue(string(*itemsItem.OutputSplunkHec.AuthType))
				} else {
					items.OutputSplunkHec.AuthType = types.StringNull()
				}
				items.OutputSplunkHec.Compress = types.BoolPointerValue(itemsItem.OutputSplunkHec.Compress)
				items.OutputSplunkHec.Concurrency = types.Float64PointerValue(itemsItem.OutputSplunkHec.Concurrency)
				items.OutputSplunkHec.Description = types.StringPointerValue(itemsItem.OutputSplunkHec.Description)
				items.OutputSplunkHec.DNSResolvePeriodSec = types.Float64PointerValue(itemsItem.OutputSplunkHec.DNSResolvePeriodSec)
				items.OutputSplunkHec.EnableMultiMetrics = types.BoolPointerValue(itemsItem.OutputSplunkHec.EnableMultiMetrics)
				items.OutputSplunkHec.Environment = types.StringPointerValue(itemsItem.OutputSplunkHec.Environment)
				items.OutputSplunkHec.ExcludeSelf = types.BoolPointerValue(itemsItem.OutputSplunkHec.ExcludeSelf)
				items.OutputSplunkHec.ExtraHTTPHeaders = []tfTypes.OutputSplunkHecExtraHTTPHeader{}

				for _, extraHTTPHeadersItem24 := range itemsItem.OutputSplunkHec.ExtraHTTPHeaders {
					var extraHTTPHeaders24 tfTypes.OutputSplunkHecExtraHTTPHeader

					extraHTTPHeaders24.Name = types.StringPointerValue(extraHTTPHeadersItem24.Name)
					extraHTTPHeaders24.Value = types.StringValue(extraHTTPHeadersItem24.Value)

					items.OutputSplunkHec.ExtraHTTPHeaders = append(items.OutputSplunkHec.ExtraHTTPHeaders, extraHTTPHeaders24)
				}
				if itemsItem.OutputSplunkHec.FailedRequestLoggingMode != nil {
					items.OutputSplunkHec.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputSplunkHec.FailedRequestLoggingMode))
				} else {
					items.OutputSplunkHec.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputSplunkHec.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputSplunkHec.FlushPeriodSec)
				items.OutputSplunkHec.ID = types.StringValue(itemsItem.OutputSplunkHec.ID)
				items.OutputSplunkHec.LoadBalanced = types.BoolPointerValue(itemsItem.OutputSplunkHec.LoadBalanced)
				items.OutputSplunkHec.LoadBalanceStatsPeriodSec = types.Float64PointerValue(itemsItem.OutputSplunkHec.LoadBalanceStatsPeriodSec)
				items.OutputSplunkHec.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputSplunkHec.MaxPayloadEvents)
				items.OutputSplunkHec.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputSplunkHec.MaxPayloadSizeKB)
				items.OutputSplunkHec.NextQueue = types.StringPointerValue(itemsItem.OutputSplunkHec.NextQueue)
				if itemsItem.OutputSplunkHec.OnBackpressure != nil {
					items.OutputSplunkHec.OnBackpressure = types.StringValue(string(*itemsItem.OutputSplunkHec.OnBackpressure))
				} else {
					items.OutputSplunkHec.OnBackpressure = types.StringNull()
				}
				items.OutputSplunkHec.Pipeline = types.StringPointerValue(itemsItem.OutputSplunkHec.Pipeline)
				if itemsItem.OutputSplunkHec.PqCompress != nil {
					items.OutputSplunkHec.PqCompress = types.StringValue(string(*itemsItem.OutputSplunkHec.PqCompress))
				} else {
					items.OutputSplunkHec.PqCompress = types.StringNull()
				}
				if itemsItem.OutputSplunkHec.PqControls == nil {
					items.OutputSplunkHec.PqControls = nil
				} else {
					items.OutputSplunkHec.PqControls = &tfTypes.OutputSplunkHecPqControls{}
				}
				items.OutputSplunkHec.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputSplunkHec.PqMaxFileSize)
				items.OutputSplunkHec.PqMaxSize = types.StringPointerValue(itemsItem.OutputSplunkHec.PqMaxSize)
				if itemsItem.OutputSplunkHec.PqMode != nil {
					items.OutputSplunkHec.PqMode = types.StringValue(string(*itemsItem.OutputSplunkHec.PqMode))
				} else {
					items.OutputSplunkHec.PqMode = types.StringNull()
				}
				if itemsItem.OutputSplunkHec.PqOnBackpressure != nil {
					items.OutputSplunkHec.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputSplunkHec.PqOnBackpressure))
				} else {
					items.OutputSplunkHec.PqOnBackpressure = types.StringNull()
				}
				items.OutputSplunkHec.PqPath = types.StringPointerValue(itemsItem.OutputSplunkHec.PqPath)
				items.OutputSplunkHec.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputSplunkHec.RejectUnauthorized)
				items.OutputSplunkHec.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputSplunkHec.ResponseHonorRetryAfterHeader)
				items.OutputSplunkHec.ResponseRetrySettings = []tfTypes.OutputSplunkHecResponseRetrySetting{}

				for _, responseRetrySettingsItem25 := range itemsItem.OutputSplunkHec.ResponseRetrySettings {
					var responseRetrySettings25 tfTypes.OutputSplunkHecResponseRetrySetting

					responseRetrySettings25.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem25.BackoffRate)
					responseRetrySettings25.HTTPStatus = types.Float64Value(responseRetrySettingsItem25.HTTPStatus)
					responseRetrySettings25.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem25.InitialBackoff)
					responseRetrySettings25.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem25.MaxBackoff)

					items.OutputSplunkHec.ResponseRetrySettings = append(items.OutputSplunkHec.ResponseRetrySettings, responseRetrySettings25)
				}
				items.OutputSplunkHec.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputSplunkHec.SafeHeaders))
				for _, v := range itemsItem.OutputSplunkHec.SafeHeaders {
					items.OutputSplunkHec.SafeHeaders = append(items.OutputSplunkHec.SafeHeaders, types.StringValue(v))
				}
				items.OutputSplunkHec.Streamtags = make([]types.String, 0, len(itemsItem.OutputSplunkHec.Streamtags))
				for _, v := range itemsItem.OutputSplunkHec.Streamtags {
					items.OutputSplunkHec.Streamtags = append(items.OutputSplunkHec.Streamtags, types.StringValue(v))
				}
				items.OutputSplunkHec.SystemFields = make([]types.String, 0, len(itemsItem.OutputSplunkHec.SystemFields))
				for _, v := range itemsItem.OutputSplunkHec.SystemFields {
					items.OutputSplunkHec.SystemFields = append(items.OutputSplunkHec.SystemFields, types.StringValue(v))
				}
				items.OutputSplunkHec.TCPRouting = types.StringPointerValue(itemsItem.OutputSplunkHec.TCPRouting)
				items.OutputSplunkHec.TextSecret = types.StringPointerValue(itemsItem.OutputSplunkHec.TextSecret)
				if itemsItem.OutputSplunkHec.TimeoutRetrySettings == nil {
					items.OutputSplunkHec.TimeoutRetrySettings = nil
				} else {
					items.OutputSplunkHec.TimeoutRetrySettings = &tfTypes.OutputSplunkHecTimeoutRetrySettings{}
					items.OutputSplunkHec.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputSplunkHec.TimeoutRetrySettings.BackoffRate)
					items.OutputSplunkHec.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputSplunkHec.TimeoutRetrySettings.InitialBackoff)
					items.OutputSplunkHec.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputSplunkHec.TimeoutRetrySettings.MaxBackoff)
					items.OutputSplunkHec.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputSplunkHec.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputSplunkHec.TimeoutSec = types.Float64PointerValue(itemsItem.OutputSplunkHec.TimeoutSec)
				items.OutputSplunkHec.Token = types.StringPointerValue(itemsItem.OutputSplunkHec.Token)
				items.OutputSplunkHec.Type = types.StringValue(string(itemsItem.OutputSplunkHec.Type))
				items.OutputSplunkHec.URL = types.StringPointerValue(itemsItem.OutputSplunkHec.URL)
				items.OutputSplunkHec.Urls = []tfTypes.OutputSplunkHecURL{}

				for _, urlsItem2 := range itemsItem.OutputSplunkHec.Urls {
					var urls2 tfTypes.OutputSplunkHecURL

					urls2.URL = types.StringPointerValue(urlsItem2.URL)
					urls2.Weight = types.Float64PointerValue(urlsItem2.Weight)

					items.OutputSplunkHec.Urls = append(items.OutputSplunkHec.Urls, urls2)
				}
				items.OutputSplunkHec.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputSplunkHec.UseRoundRobinDNS)
			}
			if itemsItem.OutputSplunkLb != nil {
				items.OutputSplunkLb = &tfTypes.OutputSplunkLb{}
				items.OutputSplunkLb.AuthToken = types.StringPointerValue(itemsItem.OutputSplunkLb.AuthToken)
				if itemsItem.OutputSplunkLb.AuthType != nil {
					items.OutputSplunkLb.AuthType = types.StringValue(string(*itemsItem.OutputSplunkLb.AuthType))
				} else {
					items.OutputSplunkLb.AuthType = types.StringNull()
				}
				if itemsItem.OutputSplunkLb.Compress != nil {
					items.OutputSplunkLb.Compress = types.StringValue(string(*itemsItem.OutputSplunkLb.Compress))
				} else {
					items.OutputSplunkLb.Compress = types.StringNull()
				}
				items.OutputSplunkLb.ConnectionTimeout = types.Float64PointerValue(itemsItem.OutputSplunkLb.ConnectionTimeout)
				items.OutputSplunkLb.Description = types.StringPointerValue(itemsItem.OutputSplunkLb.Description)
				items.OutputSplunkLb.DNSResolvePeriodSec = types.Float64PointerValue(itemsItem.OutputSplunkLb.DNSResolvePeriodSec)
				items.OutputSplunkLb.EnableACK = types.BoolPointerValue(itemsItem.OutputSplunkLb.EnableACK)
				items.OutputSplunkLb.EnableMultiMetrics = types.BoolPointerValue(itemsItem.OutputSplunkLb.EnableMultiMetrics)
				items.OutputSplunkLb.Environment = types.StringPointerValue(itemsItem.OutputSplunkLb.Environment)
				items.OutputSplunkLb.ExcludeSelf = types.BoolPointerValue(itemsItem.OutputSplunkLb.ExcludeSelf)
				items.OutputSplunkLb.Hosts = []tfTypes.OutputSplunkLbHost{}

				for _, hostsItem3 := range itemsItem.OutputSplunkLb.Hosts {
					var hosts3 tfTypes.OutputSplunkLbHost

					hosts3.Host = types.StringValue(hostsItem3.Host)
					hosts3.Port = types.Float64PointerValue(hostsItem3.Port)
					hosts3.Servername = types.StringPointerValue(hostsItem3.Servername)
					if hostsItem3.TLS != nil {
						hosts3.TLS = types.StringValue(string(*hostsItem3.TLS))
					} else {
						hosts3.TLS = types.StringNull()
					}
					hosts3.Weight = types.Float64PointerValue(hostsItem3.Weight)

					items.OutputSplunkLb.Hosts = append(items.OutputSplunkLb.Hosts, hosts3)
				}
				items.OutputSplunkLb.ID = types.StringPointerValue(itemsItem.OutputSplunkLb.ID)
				items.OutputSplunkLb.IndexerDiscovery = types.BoolPointerValue(itemsItem.OutputSplunkLb.IndexerDiscovery)
				if itemsItem.OutputSplunkLb.IndexerDiscoveryConfigs == nil {
					items.OutputSplunkLb.IndexerDiscoveryConfigs = nil
				} else {
					items.OutputSplunkLb.IndexerDiscoveryConfigs = &tfTypes.IndexerDiscoveryConfigs{}
					items.OutputSplunkLb.IndexerDiscoveryConfigs.AuthToken = types.StringPointerValue(itemsItem.OutputSplunkLb.IndexerDiscoveryConfigs.AuthToken)
					items.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens = []tfTypes.OutputSplunkLbAuthToken{}

					for _, authTokensItem := range itemsItem.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens {
						var authTokens tfTypes.OutputSplunkLbAuthToken

						if authTokensItem.AuthType != nil {
							authTokens.AuthType = types.StringValue(string(*authTokensItem.AuthType))
						} else {
							authTokens.AuthType = types.StringNull()
						}

						items.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens = append(items.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens, authTokens)
					}
					if itemsItem.OutputSplunkLb.IndexerDiscoveryConfigs.AuthType != nil {
						items.OutputSplunkLb.IndexerDiscoveryConfigs.AuthType = types.StringValue(string(*itemsItem.OutputSplunkLb.IndexerDiscoveryConfigs.AuthType))
					} else {
						items.OutputSplunkLb.IndexerDiscoveryConfigs.AuthType = types.StringNull()
					}
					items.OutputSplunkLb.IndexerDiscoveryConfigs.MasterURI = types.StringValue(itemsItem.OutputSplunkLb.IndexerDiscoveryConfigs.MasterURI)
					items.OutputSplunkLb.IndexerDiscoveryConfigs.RefreshIntervalSec = types.Float64PointerValue(itemsItem.OutputSplunkLb.IndexerDiscoveryConfigs.RefreshIntervalSec)
					items.OutputSplunkLb.IndexerDiscoveryConfigs.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputSplunkLb.IndexerDiscoveryConfigs.RejectUnauthorized)
					items.OutputSplunkLb.IndexerDiscoveryConfigs.Site = types.StringPointerValue(itemsItem.OutputSplunkLb.IndexerDiscoveryConfigs.Site)
					items.OutputSplunkLb.IndexerDiscoveryConfigs.TextSecret = types.StringPointerValue(itemsItem.OutputSplunkLb.IndexerDiscoveryConfigs.TextSecret)
				}
				items.OutputSplunkLb.LoadBalanceStatsPeriodSec = types.Float64PointerValue(itemsItem.OutputSplunkLb.LoadBalanceStatsPeriodSec)
				items.OutputSplunkLb.LogFailedRequests = types.BoolPointerValue(itemsItem.OutputSplunkLb.LogFailedRequests)
				items.OutputSplunkLb.MaxConcurrentSenders = types.Float64PointerValue(itemsItem.OutputSplunkLb.MaxConcurrentSenders)
				items.OutputSplunkLb.MaxFailedHealthChecks = types.Float64PointerValue(itemsItem.OutputSplunkLb.MaxFailedHealthChecks)
				if itemsItem.OutputSplunkLb.MaxS2Sversion != nil {
					items.OutputSplunkLb.MaxS2Sversion = types.StringValue(string(*itemsItem.OutputSplunkLb.MaxS2Sversion))
				} else {
					items.OutputSplunkLb.MaxS2Sversion = types.StringNull()
				}
				if itemsItem.OutputSplunkLb.NestedFields != nil {
					items.OutputSplunkLb.NestedFields = types.StringValue(string(*itemsItem.OutputSplunkLb.NestedFields))
				} else {
					items.OutputSplunkLb.NestedFields = types.StringNull()
				}
				if itemsItem.OutputSplunkLb.OnBackpressure != nil {
					items.OutputSplunkLb.OnBackpressure = types.StringValue(string(*itemsItem.OutputSplunkLb.OnBackpressure))
				} else {
					items.OutputSplunkLb.OnBackpressure = types.StringNull()
				}
				items.OutputSplunkLb.Pipeline = types.StringPointerValue(itemsItem.OutputSplunkLb.Pipeline)
				if itemsItem.OutputSplunkLb.PqCompress != nil {
					items.OutputSplunkLb.PqCompress = types.StringValue(string(*itemsItem.OutputSplunkLb.PqCompress))
				} else {
					items.OutputSplunkLb.PqCompress = types.StringNull()
				}
				if itemsItem.OutputSplunkLb.PqControls == nil {
					items.OutputSplunkLb.PqControls = nil
				} else {
					items.OutputSplunkLb.PqControls = &tfTypes.OutputSplunkLbPqControls{}
				}
				items.OutputSplunkLb.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputSplunkLb.PqMaxFileSize)
				items.OutputSplunkLb.PqMaxSize = types.StringPointerValue(itemsItem.OutputSplunkLb.PqMaxSize)
				if itemsItem.OutputSplunkLb.PqMode != nil {
					items.OutputSplunkLb.PqMode = types.StringValue(string(*itemsItem.OutputSplunkLb.PqMode))
				} else {
					items.OutputSplunkLb.PqMode = types.StringNull()
				}
				if itemsItem.OutputSplunkLb.PqOnBackpressure != nil {
					items.OutputSplunkLb.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputSplunkLb.PqOnBackpressure))
				} else {
					items.OutputSplunkLb.PqOnBackpressure = types.StringNull()
				}
				items.OutputSplunkLb.PqPath = types.StringPointerValue(itemsItem.OutputSplunkLb.PqPath)
				items.OutputSplunkLb.SenderUnhealthyTimeAllowance = types.Float64PointerValue(itemsItem.OutputSplunkLb.SenderUnhealthyTimeAllowance)
				items.OutputSplunkLb.Streamtags = make([]types.String, 0, len(itemsItem.OutputSplunkLb.Streamtags))
				for _, v := range itemsItem.OutputSplunkLb.Streamtags {
					items.OutputSplunkLb.Streamtags = append(items.OutputSplunkLb.Streamtags, types.StringValue(v))
				}
				items.OutputSplunkLb.SystemFields = make([]types.String, 0, len(itemsItem.OutputSplunkLb.SystemFields))
				for _, v := range itemsItem.OutputSplunkLb.SystemFields {
					items.OutputSplunkLb.SystemFields = append(items.OutputSplunkLb.SystemFields, types.StringValue(v))
				}
				items.OutputSplunkLb.TextSecret = types.StringPointerValue(itemsItem.OutputSplunkLb.TextSecret)
				items.OutputSplunkLb.ThrottleRatePerSec = types.StringPointerValue(itemsItem.OutputSplunkLb.ThrottleRatePerSec)
				if itemsItem.OutputSplunkLb.TLS == nil {
					items.OutputSplunkLb.TLS = nil
				} else {
					items.OutputSplunkLb.TLS = &tfTypes.OutputSplunkLbTLSSettingsClientSide{}
					items.OutputSplunkLb.TLS.CaPath = types.StringPointerValue(itemsItem.OutputSplunkLb.TLS.CaPath)
					items.OutputSplunkLb.TLS.CertificateName = types.StringPointerValue(itemsItem.OutputSplunkLb.TLS.CertificateName)
					items.OutputSplunkLb.TLS.CertPath = types.StringPointerValue(itemsItem.OutputSplunkLb.TLS.CertPath)
					items.OutputSplunkLb.TLS.Disabled = types.BoolPointerValue(itemsItem.OutputSplunkLb.TLS.Disabled)
					if itemsItem.OutputSplunkLb.TLS.MaxVersion != nil {
						items.OutputSplunkLb.TLS.MaxVersion = types.StringValue(string(*itemsItem.OutputSplunkLb.TLS.MaxVersion))
					} else {
						items.OutputSplunkLb.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.OutputSplunkLb.TLS.MinVersion != nil {
						items.OutputSplunkLb.TLS.MinVersion = types.StringValue(string(*itemsItem.OutputSplunkLb.TLS.MinVersion))
					} else {
						items.OutputSplunkLb.TLS.MinVersion = types.StringNull()
					}
					items.OutputSplunkLb.TLS.Passphrase = types.StringPointerValue(itemsItem.OutputSplunkLb.TLS.Passphrase)
					items.OutputSplunkLb.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.OutputSplunkLb.TLS.PrivKeyPath)
					items.OutputSplunkLb.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputSplunkLb.TLS.RejectUnauthorized)
					items.OutputSplunkLb.TLS.Servername = types.StringPointerValue(itemsItem.OutputSplunkLb.TLS.Servername)
				}
				items.OutputSplunkLb.Type = types.StringValue(string(itemsItem.OutputSplunkLb.Type))
				items.OutputSplunkLb.WriteTimeout = types.Float64PointerValue(itemsItem.OutputSplunkLb.WriteTimeout)
			}
			if itemsItem.OutputSqs != nil {
				items.OutputSqs = &tfTypes.OutputSqs{}
				items.OutputSqs.AssumeRoleArn = types.StringPointerValue(itemsItem.OutputSqs.AssumeRoleArn)
				items.OutputSqs.AssumeRoleExternalID = types.StringPointerValue(itemsItem.OutputSqs.AssumeRoleExternalID)
				items.OutputSqs.AwsAccountID = types.StringPointerValue(itemsItem.OutputSqs.AwsAccountID)
				items.OutputSqs.AwsAPIKey = types.StringPointerValue(itemsItem.OutputSqs.AwsAPIKey)
				if itemsItem.OutputSqs.AwsAuthenticationMethod != nil {
					items.OutputSqs.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.OutputSqs.AwsAuthenticationMethod))
				} else {
					items.OutputSqs.AwsAuthenticationMethod = types.StringNull()
				}
				items.OutputSqs.AwsSecret = types.StringPointerValue(itemsItem.OutputSqs.AwsSecret)
				items.OutputSqs.AwsSecretKey = types.StringPointerValue(itemsItem.OutputSqs.AwsSecretKey)
				items.OutputSqs.CreateQueue = types.BoolPointerValue(itemsItem.OutputSqs.CreateQueue)
				items.OutputSqs.Description = types.StringPointerValue(itemsItem.OutputSqs.Description)
				items.OutputSqs.DurationSeconds = types.Float64PointerValue(itemsItem.OutputSqs.DurationSeconds)
				items.OutputSqs.EnableAssumeRole = types.BoolPointerValue(itemsItem.OutputSqs.EnableAssumeRole)
				items.OutputSqs.Endpoint = types.StringPointerValue(itemsItem.OutputSqs.Endpoint)
				items.OutputSqs.Environment = types.StringPointerValue(itemsItem.OutputSqs.Environment)
				items.OutputSqs.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputSqs.FlushPeriodSec)
				items.OutputSqs.ID = types.StringPointerValue(itemsItem.OutputSqs.ID)
				items.OutputSqs.MaxInProgress = types.Float64PointerValue(itemsItem.OutputSqs.MaxInProgress)
				items.OutputSqs.MaxQueueSize = types.Float64PointerValue(itemsItem.OutputSqs.MaxQueueSize)
				items.OutputSqs.MaxRecordSizeKB = types.Float64PointerValue(itemsItem.OutputSqs.MaxRecordSizeKB)
				items.OutputSqs.MessageGroupID = types.StringPointerValue(itemsItem.OutputSqs.MessageGroupID)
				if itemsItem.OutputSqs.OnBackpressure != nil {
					items.OutputSqs.OnBackpressure = types.StringValue(string(*itemsItem.OutputSqs.OnBackpressure))
				} else {
					items.OutputSqs.OnBackpressure = types.StringNull()
				}
				items.OutputSqs.Pipeline = types.StringPointerValue(itemsItem.OutputSqs.Pipeline)
				if itemsItem.OutputSqs.PqCompress != nil {
					items.OutputSqs.PqCompress = types.StringValue(string(*itemsItem.OutputSqs.PqCompress))
				} else {
					items.OutputSqs.PqCompress = types.StringNull()
				}
				if itemsItem.OutputSqs.PqControls == nil {
					items.OutputSqs.PqControls = nil
				} else {
					items.OutputSqs.PqControls = &tfTypes.OutputSqsPqControls{}
				}
				items.OutputSqs.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputSqs.PqMaxFileSize)
				items.OutputSqs.PqMaxSize = types.StringPointerValue(itemsItem.OutputSqs.PqMaxSize)
				if itemsItem.OutputSqs.PqMode != nil {
					items.OutputSqs.PqMode = types.StringValue(string(*itemsItem.OutputSqs.PqMode))
				} else {
					items.OutputSqs.PqMode = types.StringNull()
				}
				if itemsItem.OutputSqs.PqOnBackpressure != nil {
					items.OutputSqs.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputSqs.PqOnBackpressure))
				} else {
					items.OutputSqs.PqOnBackpressure = types.StringNull()
				}
				items.OutputSqs.PqPath = types.StringPointerValue(itemsItem.OutputSqs.PqPath)
				items.OutputSqs.QueueName = types.StringValue(itemsItem.OutputSqs.QueueName)
				if itemsItem.OutputSqs.QueueType != nil {
					items.OutputSqs.QueueType = types.StringValue(string(*itemsItem.OutputSqs.QueueType))
				} else {
					items.OutputSqs.QueueType = types.StringNull()
				}
				items.OutputSqs.Region = types.StringPointerValue(itemsItem.OutputSqs.Region)
				items.OutputSqs.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputSqs.RejectUnauthorized)
				items.OutputSqs.ReuseConnections = types.BoolPointerValue(itemsItem.OutputSqs.ReuseConnections)
				if itemsItem.OutputSqs.SignatureVersion != nil {
					items.OutputSqs.SignatureVersion = types.StringValue(string(*itemsItem.OutputSqs.SignatureVersion))
				} else {
					items.OutputSqs.SignatureVersion = types.StringNull()
				}
				items.OutputSqs.Streamtags = make([]types.String, 0, len(itemsItem.OutputSqs.Streamtags))
				for _, v := range itemsItem.OutputSqs.Streamtags {
					items.OutputSqs.Streamtags = append(items.OutputSqs.Streamtags, types.StringValue(v))
				}
				items.OutputSqs.SystemFields = make([]types.String, 0, len(itemsItem.OutputSqs.SystemFields))
				for _, v := range itemsItem.OutputSqs.SystemFields {
					items.OutputSqs.SystemFields = append(items.OutputSqs.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputSqs.Type != nil {
					items.OutputSqs.Type = types.StringValue(string(*itemsItem.OutputSqs.Type))
				} else {
					items.OutputSqs.Type = types.StringNull()
				}
			}
			if itemsItem.OutputStatsd != nil {
				items.OutputStatsd = &tfTypes.OutputStatsd{}
				items.OutputStatsd.ConnectionTimeout = types.Float64PointerValue(itemsItem.OutputStatsd.ConnectionTimeout)
				items.OutputStatsd.Description = types.StringPointerValue(itemsItem.OutputStatsd.Description)
				items.OutputStatsd.DNSResolvePeriodSec = types.Float64PointerValue(itemsItem.OutputStatsd.DNSResolvePeriodSec)
				items.OutputStatsd.Environment = types.StringPointerValue(itemsItem.OutputStatsd.Environment)
				items.OutputStatsd.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputStatsd.FlushPeriodSec)
				items.OutputStatsd.Host = types.StringValue(itemsItem.OutputStatsd.Host)
				items.OutputStatsd.ID = types.StringPointerValue(itemsItem.OutputStatsd.ID)
				items.OutputStatsd.Mtu = types.Float64PointerValue(itemsItem.OutputStatsd.Mtu)
				if itemsItem.OutputStatsd.OnBackpressure != nil {
					items.OutputStatsd.OnBackpressure = types.StringValue(string(*itemsItem.OutputStatsd.OnBackpressure))
				} else {
					items.OutputStatsd.OnBackpressure = types.StringNull()
				}
				items.OutputStatsd.Pipeline = types.StringPointerValue(itemsItem.OutputStatsd.Pipeline)
				items.OutputStatsd.Port = types.Float64PointerValue(itemsItem.OutputStatsd.Port)
				if itemsItem.OutputStatsd.PqCompress != nil {
					items.OutputStatsd.PqCompress = types.StringValue(string(*itemsItem.OutputStatsd.PqCompress))
				} else {
					items.OutputStatsd.PqCompress = types.StringNull()
				}
				if itemsItem.OutputStatsd.PqControls == nil {
					items.OutputStatsd.PqControls = nil
				} else {
					items.OutputStatsd.PqControls = &tfTypes.OutputStatsdPqControls{}
				}
				items.OutputStatsd.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputStatsd.PqMaxFileSize)
				items.OutputStatsd.PqMaxSize = types.StringPointerValue(itemsItem.OutputStatsd.PqMaxSize)
				if itemsItem.OutputStatsd.PqMode != nil {
					items.OutputStatsd.PqMode = types.StringValue(string(*itemsItem.OutputStatsd.PqMode))
				} else {
					items.OutputStatsd.PqMode = types.StringNull()
				}
				if itemsItem.OutputStatsd.PqOnBackpressure != nil {
					items.OutputStatsd.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputStatsd.PqOnBackpressure))
				} else {
					items.OutputStatsd.PqOnBackpressure = types.StringNull()
				}
				items.OutputStatsd.PqPath = types.StringPointerValue(itemsItem.OutputStatsd.PqPath)
				if itemsItem.OutputStatsd.Protocol != nil {
					items.OutputStatsd.Protocol = types.StringValue(string(*itemsItem.OutputStatsd.Protocol))
				} else {
					items.OutputStatsd.Protocol = types.StringNull()
				}
				items.OutputStatsd.Streamtags = make([]types.String, 0, len(itemsItem.OutputStatsd.Streamtags))
				for _, v := range itemsItem.OutputStatsd.Streamtags {
					items.OutputStatsd.Streamtags = append(items.OutputStatsd.Streamtags, types.StringValue(v))
				}
				items.OutputStatsd.SystemFields = make([]types.String, 0, len(itemsItem.OutputStatsd.SystemFields))
				for _, v := range itemsItem.OutputStatsd.SystemFields {
					items.OutputStatsd.SystemFields = append(items.OutputStatsd.SystemFields, types.StringValue(v))
				}
				items.OutputStatsd.ThrottleRatePerSec = types.StringPointerValue(itemsItem.OutputStatsd.ThrottleRatePerSec)
				if itemsItem.OutputStatsd.Type != nil {
					items.OutputStatsd.Type = types.StringValue(string(*itemsItem.OutputStatsd.Type))
				} else {
					items.OutputStatsd.Type = types.StringNull()
				}
				items.OutputStatsd.WriteTimeout = types.Float64PointerValue(itemsItem.OutputStatsd.WriteTimeout)
			}
			if itemsItem.OutputStatsdExt != nil {
				items.OutputStatsdExt = &tfTypes.OutputStatsdExt{}
				items.OutputStatsdExt.ConnectionTimeout = types.Float64PointerValue(itemsItem.OutputStatsdExt.ConnectionTimeout)
				items.OutputStatsdExt.Description = types.StringPointerValue(itemsItem.OutputStatsdExt.Description)
				items.OutputStatsdExt.DNSResolvePeriodSec = types.Float64PointerValue(itemsItem.OutputStatsdExt.DNSResolvePeriodSec)
				items.OutputStatsdExt.Environment = types.StringPointerValue(itemsItem.OutputStatsdExt.Environment)
				items.OutputStatsdExt.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputStatsdExt.FlushPeriodSec)
				items.OutputStatsdExt.Host = types.StringValue(itemsItem.OutputStatsdExt.Host)
				items.OutputStatsdExt.ID = types.StringPointerValue(itemsItem.OutputStatsdExt.ID)
				items.OutputStatsdExt.Mtu = types.Float64PointerValue(itemsItem.OutputStatsdExt.Mtu)
				if itemsItem.OutputStatsdExt.OnBackpressure != nil {
					items.OutputStatsdExt.OnBackpressure = types.StringValue(string(*itemsItem.OutputStatsdExt.OnBackpressure))
				} else {
					items.OutputStatsdExt.OnBackpressure = types.StringNull()
				}
				items.OutputStatsdExt.Pipeline = types.StringPointerValue(itemsItem.OutputStatsdExt.Pipeline)
				items.OutputStatsdExt.Port = types.Float64PointerValue(itemsItem.OutputStatsdExt.Port)
				if itemsItem.OutputStatsdExt.PqCompress != nil {
					items.OutputStatsdExt.PqCompress = types.StringValue(string(*itemsItem.OutputStatsdExt.PqCompress))
				} else {
					items.OutputStatsdExt.PqCompress = types.StringNull()
				}
				if itemsItem.OutputStatsdExt.PqControls == nil {
					items.OutputStatsdExt.PqControls = nil
				} else {
					items.OutputStatsdExt.PqControls = &tfTypes.OutputStatsdExtPqControls{}
				}
				items.OutputStatsdExt.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputStatsdExt.PqMaxFileSize)
				items.OutputStatsdExt.PqMaxSize = types.StringPointerValue(itemsItem.OutputStatsdExt.PqMaxSize)
				if itemsItem.OutputStatsdExt.PqMode != nil {
					items.OutputStatsdExt.PqMode = types.StringValue(string(*itemsItem.OutputStatsdExt.PqMode))
				} else {
					items.OutputStatsdExt.PqMode = types.StringNull()
				}
				if itemsItem.OutputStatsdExt.PqOnBackpressure != nil {
					items.OutputStatsdExt.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputStatsdExt.PqOnBackpressure))
				} else {
					items.OutputStatsdExt.PqOnBackpressure = types.StringNull()
				}
				items.OutputStatsdExt.PqPath = types.StringPointerValue(itemsItem.OutputStatsdExt.PqPath)
				if itemsItem.OutputStatsdExt.Protocol != nil {
					items.OutputStatsdExt.Protocol = types.StringValue(string(*itemsItem.OutputStatsdExt.Protocol))
				} else {
					items.OutputStatsdExt.Protocol = types.StringNull()
				}
				items.OutputStatsdExt.Streamtags = make([]types.String, 0, len(itemsItem.OutputStatsdExt.Streamtags))
				for _, v := range itemsItem.OutputStatsdExt.Streamtags {
					items.OutputStatsdExt.Streamtags = append(items.OutputStatsdExt.Streamtags, types.StringValue(v))
				}
				items.OutputStatsdExt.SystemFields = make([]types.String, 0, len(itemsItem.OutputStatsdExt.SystemFields))
				for _, v := range itemsItem.OutputStatsdExt.SystemFields {
					items.OutputStatsdExt.SystemFields = append(items.OutputStatsdExt.SystemFields, types.StringValue(v))
				}
				items.OutputStatsdExt.ThrottleRatePerSec = types.StringPointerValue(itemsItem.OutputStatsdExt.ThrottleRatePerSec)
				if itemsItem.OutputStatsdExt.Type != nil {
					items.OutputStatsdExt.Type = types.StringValue(string(*itemsItem.OutputStatsdExt.Type))
				} else {
					items.OutputStatsdExt.Type = types.StringNull()
				}
				items.OutputStatsdExt.WriteTimeout = types.Float64PointerValue(itemsItem.OutputStatsdExt.WriteTimeout)
			}
			if itemsItem.OutputSumoLogic != nil {
				items.OutputSumoLogic = &tfTypes.OutputSumoLogic{}
				items.OutputSumoLogic.Compress = types.BoolPointerValue(itemsItem.OutputSumoLogic.Compress)
				items.OutputSumoLogic.Concurrency = types.Float64PointerValue(itemsItem.OutputSumoLogic.Concurrency)
				items.OutputSumoLogic.CustomCategory = types.StringPointerValue(itemsItem.OutputSumoLogic.CustomCategory)
				items.OutputSumoLogic.CustomSource = types.StringPointerValue(itemsItem.OutputSumoLogic.CustomSource)
				items.OutputSumoLogic.Description = types.StringPointerValue(itemsItem.OutputSumoLogic.Description)
				items.OutputSumoLogic.Environment = types.StringPointerValue(itemsItem.OutputSumoLogic.Environment)
				items.OutputSumoLogic.ExtraHTTPHeaders = []tfTypes.OutputSumoLogicExtraHTTPHeader{}

				for _, extraHTTPHeadersItem25 := range itemsItem.OutputSumoLogic.ExtraHTTPHeaders {
					var extraHTTPHeaders25 tfTypes.OutputSumoLogicExtraHTTPHeader

					extraHTTPHeaders25.Name = types.StringPointerValue(extraHTTPHeadersItem25.Name)
					extraHTTPHeaders25.Value = types.StringValue(extraHTTPHeadersItem25.Value)

					items.OutputSumoLogic.ExtraHTTPHeaders = append(items.OutputSumoLogic.ExtraHTTPHeaders, extraHTTPHeaders25)
				}
				if itemsItem.OutputSumoLogic.FailedRequestLoggingMode != nil {
					items.OutputSumoLogic.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputSumoLogic.FailedRequestLoggingMode))
				} else {
					items.OutputSumoLogic.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputSumoLogic.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputSumoLogic.FlushPeriodSec)
				if itemsItem.OutputSumoLogic.Format != nil {
					items.OutputSumoLogic.Format = types.StringValue(string(*itemsItem.OutputSumoLogic.Format))
				} else {
					items.OutputSumoLogic.Format = types.StringNull()
				}
				items.OutputSumoLogic.ID = types.StringPointerValue(itemsItem.OutputSumoLogic.ID)
				items.OutputSumoLogic.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputSumoLogic.MaxPayloadEvents)
				items.OutputSumoLogic.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputSumoLogic.MaxPayloadSizeKB)
				if itemsItem.OutputSumoLogic.OnBackpressure != nil {
					items.OutputSumoLogic.OnBackpressure = types.StringValue(string(*itemsItem.OutputSumoLogic.OnBackpressure))
				} else {
					items.OutputSumoLogic.OnBackpressure = types.StringNull()
				}
				items.OutputSumoLogic.Pipeline = types.StringPointerValue(itemsItem.OutputSumoLogic.Pipeline)
				if itemsItem.OutputSumoLogic.PqCompress != nil {
					items.OutputSumoLogic.PqCompress = types.StringValue(string(*itemsItem.OutputSumoLogic.PqCompress))
				} else {
					items.OutputSumoLogic.PqCompress = types.StringNull()
				}
				if itemsItem.OutputSumoLogic.PqControls == nil {
					items.OutputSumoLogic.PqControls = nil
				} else {
					items.OutputSumoLogic.PqControls = &tfTypes.OutputSumoLogicPqControls{}
				}
				items.OutputSumoLogic.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputSumoLogic.PqMaxFileSize)
				items.OutputSumoLogic.PqMaxSize = types.StringPointerValue(itemsItem.OutputSumoLogic.PqMaxSize)
				if itemsItem.OutputSumoLogic.PqMode != nil {
					items.OutputSumoLogic.PqMode = types.StringValue(string(*itemsItem.OutputSumoLogic.PqMode))
				} else {
					items.OutputSumoLogic.PqMode = types.StringNull()
				}
				if itemsItem.OutputSumoLogic.PqOnBackpressure != nil {
					items.OutputSumoLogic.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputSumoLogic.PqOnBackpressure))
				} else {
					items.OutputSumoLogic.PqOnBackpressure = types.StringNull()
				}
				items.OutputSumoLogic.PqPath = types.StringPointerValue(itemsItem.OutputSumoLogic.PqPath)
				items.OutputSumoLogic.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputSumoLogic.RejectUnauthorized)
				items.OutputSumoLogic.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputSumoLogic.ResponseHonorRetryAfterHeader)
				items.OutputSumoLogic.ResponseRetrySettings = []tfTypes.OutputSumoLogicResponseRetrySetting{}

				for _, responseRetrySettingsItem26 := range itemsItem.OutputSumoLogic.ResponseRetrySettings {
					var responseRetrySettings26 tfTypes.OutputSumoLogicResponseRetrySetting

					responseRetrySettings26.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem26.BackoffRate)
					responseRetrySettings26.HTTPStatus = types.Float64Value(responseRetrySettingsItem26.HTTPStatus)
					responseRetrySettings26.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem26.InitialBackoff)
					responseRetrySettings26.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem26.MaxBackoff)

					items.OutputSumoLogic.ResponseRetrySettings = append(items.OutputSumoLogic.ResponseRetrySettings, responseRetrySettings26)
				}
				items.OutputSumoLogic.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputSumoLogic.SafeHeaders))
				for _, v := range itemsItem.OutputSumoLogic.SafeHeaders {
					items.OutputSumoLogic.SafeHeaders = append(items.OutputSumoLogic.SafeHeaders, types.StringValue(v))
				}
				items.OutputSumoLogic.Streamtags = make([]types.String, 0, len(itemsItem.OutputSumoLogic.Streamtags))
				for _, v := range itemsItem.OutputSumoLogic.Streamtags {
					items.OutputSumoLogic.Streamtags = append(items.OutputSumoLogic.Streamtags, types.StringValue(v))
				}
				items.OutputSumoLogic.SystemFields = make([]types.String, 0, len(itemsItem.OutputSumoLogic.SystemFields))
				for _, v := range itemsItem.OutputSumoLogic.SystemFields {
					items.OutputSumoLogic.SystemFields = append(items.OutputSumoLogic.SystemFields, types.StringValue(v))
				}
				if itemsItem.OutputSumoLogic.TimeoutRetrySettings == nil {
					items.OutputSumoLogic.TimeoutRetrySettings = nil
				} else {
					items.OutputSumoLogic.TimeoutRetrySettings = &tfTypes.OutputSumoLogicTimeoutRetrySettings{}
					items.OutputSumoLogic.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputSumoLogic.TimeoutRetrySettings.BackoffRate)
					items.OutputSumoLogic.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputSumoLogic.TimeoutRetrySettings.InitialBackoff)
					items.OutputSumoLogic.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputSumoLogic.TimeoutRetrySettings.MaxBackoff)
					items.OutputSumoLogic.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputSumoLogic.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputSumoLogic.TimeoutSec = types.Float64PointerValue(itemsItem.OutputSumoLogic.TimeoutSec)
				items.OutputSumoLogic.TotalMemoryLimitKB = types.Float64PointerValue(itemsItem.OutputSumoLogic.TotalMemoryLimitKB)
				items.OutputSumoLogic.Type = types.StringValue(string(itemsItem.OutputSumoLogic.Type))
				items.OutputSumoLogic.URL = types.StringValue(itemsItem.OutputSumoLogic.URL)
				items.OutputSumoLogic.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputSumoLogic.UseRoundRobinDNS)
			}
			if itemsItem.OutputSyslog != nil {
				items.OutputSyslog = &tfTypes.OutputSyslog{}
				items.OutputSyslog.AppName = types.StringPointerValue(itemsItem.OutputSyslog.AppName)
				items.OutputSyslog.ConnectionTimeout = types.Float64PointerValue(itemsItem.OutputSyslog.ConnectionTimeout)
				items.OutputSyslog.Description = types.StringPointerValue(itemsItem.OutputSyslog.Description)
				items.OutputSyslog.Environment = types.StringPointerValue(itemsItem.OutputSyslog.Environment)
				if itemsItem.OutputSyslog.Facility != nil {
					items.OutputSyslog.Facility = types.Int64Value(int64(*itemsItem.OutputSyslog.Facility))
				} else {
					items.OutputSyslog.Facility = types.Int64Null()
				}
				items.OutputSyslog.Host = types.StringPointerValue(itemsItem.OutputSyslog.Host)
				items.OutputSyslog.ID = types.StringValue(itemsItem.OutputSyslog.ID)
				items.OutputSyslog.LoadBalanced = types.BoolPointerValue(itemsItem.OutputSyslog.LoadBalanced)
				items.OutputSyslog.LogFailedRequests = types.BoolPointerValue(itemsItem.OutputSyslog.LogFailedRequests)
				items.OutputSyslog.MaxRecordSize = types.Float64PointerValue(itemsItem.OutputSyslog.MaxRecordSize)
				if itemsItem.OutputSyslog.MessageFormat != nil {
					items.OutputSyslog.MessageFormat = types.StringValue(string(*itemsItem.OutputSyslog.MessageFormat))
				} else {
					items.OutputSyslog.MessageFormat = types.StringNull()
				}
				items.OutputSyslog.OctetCountFraming = types.BoolPointerValue(itemsItem.OutputSyslog.OctetCountFraming)
				if itemsItem.OutputSyslog.OnBackpressure != nil {
					items.OutputSyslog.OnBackpressure = types.StringValue(string(*itemsItem.OutputSyslog.OnBackpressure))
				} else {
					items.OutputSyslog.OnBackpressure = types.StringNull()
				}
				items.OutputSyslog.Pipeline = types.StringPointerValue(itemsItem.OutputSyslog.Pipeline)
				items.OutputSyslog.Port = types.Float64PointerValue(itemsItem.OutputSyslog.Port)
				if itemsItem.OutputSyslog.PqCompress != nil {
					items.OutputSyslog.PqCompress = types.StringValue(string(*itemsItem.OutputSyslog.PqCompress))
				} else {
					items.OutputSyslog.PqCompress = types.StringNull()
				}
				if itemsItem.OutputSyslog.PqControls == nil {
					items.OutputSyslog.PqControls = nil
				} else {
					items.OutputSyslog.PqControls = &tfTypes.OutputSyslogPqControls{}
				}
				items.OutputSyslog.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputSyslog.PqMaxFileSize)
				items.OutputSyslog.PqMaxSize = types.StringPointerValue(itemsItem.OutputSyslog.PqMaxSize)
				if itemsItem.OutputSyslog.PqMode != nil {
					items.OutputSyslog.PqMode = types.StringValue(string(*itemsItem.OutputSyslog.PqMode))
				} else {
					items.OutputSyslog.PqMode = types.StringNull()
				}
				if itemsItem.OutputSyslog.PqOnBackpressure != nil {
					items.OutputSyslog.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputSyslog.PqOnBackpressure))
				} else {
					items.OutputSyslog.PqOnBackpressure = types.StringNull()
				}
				items.OutputSyslog.PqPath = types.StringPointerValue(itemsItem.OutputSyslog.PqPath)
				if itemsItem.OutputSyslog.Protocol != nil {
					items.OutputSyslog.Protocol = types.StringValue(string(*itemsItem.OutputSyslog.Protocol))
				} else {
					items.OutputSyslog.Protocol = types.StringNull()
				}
				if itemsItem.OutputSyslog.Severity != nil {
					items.OutputSyslog.Severity = types.Int64Value(int64(*itemsItem.OutputSyslog.Severity))
				} else {
					items.OutputSyslog.Severity = types.Int64Null()
				}
				items.OutputSyslog.Streamtags = make([]types.String, 0, len(itemsItem.OutputSyslog.Streamtags))
				for _, v := range itemsItem.OutputSyslog.Streamtags {
					items.OutputSyslog.Streamtags = append(items.OutputSyslog.Streamtags, types.StringValue(v))
				}
				items.OutputSyslog.SystemFields = make([]types.String, 0, len(itemsItem.OutputSyslog.SystemFields))
				for _, v := range itemsItem.OutputSyslog.SystemFields {
					items.OutputSyslog.SystemFields = append(items.OutputSyslog.SystemFields, types.StringValue(v))
				}
				items.OutputSyslog.ThrottleRatePerSec = types.StringPointerValue(itemsItem.OutputSyslog.ThrottleRatePerSec)
				if itemsItem.OutputSyslog.TimestampFormat != nil {
					items.OutputSyslog.TimestampFormat = types.StringValue(string(*itemsItem.OutputSyslog.TimestampFormat))
				} else {
					items.OutputSyslog.TimestampFormat = types.StringNull()
				}
				if itemsItem.OutputSyslog.TLS == nil {
					items.OutputSyslog.TLS = nil
				} else {
					items.OutputSyslog.TLS = &tfTypes.OutputSyslogTLSSettingsClientSide{}
					items.OutputSyslog.TLS.CaPath = types.StringPointerValue(itemsItem.OutputSyslog.TLS.CaPath)
					items.OutputSyslog.TLS.CertificateName = types.StringPointerValue(itemsItem.OutputSyslog.TLS.CertificateName)
					items.OutputSyslog.TLS.CertPath = types.StringPointerValue(itemsItem.OutputSyslog.TLS.CertPath)
					items.OutputSyslog.TLS.Disabled = types.BoolPointerValue(itemsItem.OutputSyslog.TLS.Disabled)
					if itemsItem.OutputSyslog.TLS.MaxVersion != nil {
						items.OutputSyslog.TLS.MaxVersion = types.StringValue(string(*itemsItem.OutputSyslog.TLS.MaxVersion))
					} else {
						items.OutputSyslog.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.OutputSyslog.TLS.MinVersion != nil {
						items.OutputSyslog.TLS.MinVersion = types.StringValue(string(*itemsItem.OutputSyslog.TLS.MinVersion))
					} else {
						items.OutputSyslog.TLS.MinVersion = types.StringNull()
					}
					items.OutputSyslog.TLS.Passphrase = types.StringPointerValue(itemsItem.OutputSyslog.TLS.Passphrase)
					items.OutputSyslog.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.OutputSyslog.TLS.PrivKeyPath)
					items.OutputSyslog.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputSyslog.TLS.RejectUnauthorized)
					items.OutputSyslog.TLS.Servername = types.StringPointerValue(itemsItem.OutputSyslog.TLS.Servername)
				}
				items.OutputSyslog.Type = types.StringValue(string(itemsItem.OutputSyslog.Type))
				items.OutputSyslog.UDPDNSResolvePeriodSec = types.Float64PointerValue(itemsItem.OutputSyslog.UDPDNSResolvePeriodSec)
				items.OutputSyslog.WriteTimeout = types.Float64PointerValue(itemsItem.OutputSyslog.WriteTimeout)
			}
			if itemsItem.OutputTcpjson != nil {
				items.OutputTcpjson = &tfTypes.OutputTcpjson{}
				items.OutputTcpjson.AuthToken = types.StringPointerValue(itemsItem.OutputTcpjson.AuthToken)
				if itemsItem.OutputTcpjson.AuthType != nil {
					items.OutputTcpjson.AuthType = types.StringValue(string(*itemsItem.OutputTcpjson.AuthType))
				} else {
					items.OutputTcpjson.AuthType = types.StringNull()
				}
				if itemsItem.OutputTcpjson.Compression != nil {
					items.OutputTcpjson.Compression = types.StringValue(string(*itemsItem.OutputTcpjson.Compression))
				} else {
					items.OutputTcpjson.Compression = types.StringNull()
				}
				items.OutputTcpjson.ConnectionTimeout = types.Float64PointerValue(itemsItem.OutputTcpjson.ConnectionTimeout)
				items.OutputTcpjson.Description = types.StringPointerValue(itemsItem.OutputTcpjson.Description)
				items.OutputTcpjson.DNSResolvePeriodSec = types.Float64PointerValue(itemsItem.OutputTcpjson.DNSResolvePeriodSec)
				items.OutputTcpjson.Environment = types.StringPointerValue(itemsItem.OutputTcpjson.Environment)
				items.OutputTcpjson.ExcludeSelf = types.BoolPointerValue(itemsItem.OutputTcpjson.ExcludeSelf)
				items.OutputTcpjson.Host = types.StringPointerValue(itemsItem.OutputTcpjson.Host)
				items.OutputTcpjson.Hosts = []tfTypes.OutputTcpjsonHost{}

				for _, hostsItem4 := range itemsItem.OutputTcpjson.Hosts {
					var hosts4 tfTypes.OutputTcpjsonHost

					hosts4.Host = types.StringValue(hostsItem4.Host)
					hosts4.Port = types.Float64Value(hostsItem4.Port)
					hosts4.Servername = types.StringPointerValue(hostsItem4.Servername)
					if hostsItem4.TLS != nil {
						hosts4.TLS = types.StringValue(string(*hostsItem4.TLS))
					} else {
						hosts4.TLS = types.StringNull()
					}
					hosts4.Weight = types.Float64PointerValue(hostsItem4.Weight)

					items.OutputTcpjson.Hosts = append(items.OutputTcpjson.Hosts, hosts4)
				}
				items.OutputTcpjson.ID = types.StringValue(itemsItem.OutputTcpjson.ID)
				items.OutputTcpjson.LoadBalanced = types.BoolPointerValue(itemsItem.OutputTcpjson.LoadBalanced)
				items.OutputTcpjson.LoadBalanceStatsPeriodSec = types.Float64PointerValue(itemsItem.OutputTcpjson.LoadBalanceStatsPeriodSec)
				items.OutputTcpjson.LogFailedRequests = types.BoolPointerValue(itemsItem.OutputTcpjson.LogFailedRequests)
				items.OutputTcpjson.MaxConcurrentSenders = types.Float64PointerValue(itemsItem.OutputTcpjson.MaxConcurrentSenders)
				if itemsItem.OutputTcpjson.OnBackpressure != nil {
					items.OutputTcpjson.OnBackpressure = types.StringValue(string(*itemsItem.OutputTcpjson.OnBackpressure))
				} else {
					items.OutputTcpjson.OnBackpressure = types.StringNull()
				}
				items.OutputTcpjson.Pipeline = types.StringPointerValue(itemsItem.OutputTcpjson.Pipeline)
				items.OutputTcpjson.Port = types.Float64PointerValue(itemsItem.OutputTcpjson.Port)
				if itemsItem.OutputTcpjson.PqCompress != nil {
					items.OutputTcpjson.PqCompress = types.StringValue(string(*itemsItem.OutputTcpjson.PqCompress))
				} else {
					items.OutputTcpjson.PqCompress = types.StringNull()
				}
				if itemsItem.OutputTcpjson.PqControls == nil {
					items.OutputTcpjson.PqControls = nil
				} else {
					items.OutputTcpjson.PqControls = &tfTypes.OutputTcpjsonPqControls{}
				}
				items.OutputTcpjson.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputTcpjson.PqMaxFileSize)
				items.OutputTcpjson.PqMaxSize = types.StringPointerValue(itemsItem.OutputTcpjson.PqMaxSize)
				if itemsItem.OutputTcpjson.PqMode != nil {
					items.OutputTcpjson.PqMode = types.StringValue(string(*itemsItem.OutputTcpjson.PqMode))
				} else {
					items.OutputTcpjson.PqMode = types.StringNull()
				}
				if itemsItem.OutputTcpjson.PqOnBackpressure != nil {
					items.OutputTcpjson.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputTcpjson.PqOnBackpressure))
				} else {
					items.OutputTcpjson.PqOnBackpressure = types.StringNull()
				}
				items.OutputTcpjson.PqPath = types.StringPointerValue(itemsItem.OutputTcpjson.PqPath)
				items.OutputTcpjson.SendHeader = types.BoolPointerValue(itemsItem.OutputTcpjson.SendHeader)
				items.OutputTcpjson.Streamtags = make([]types.String, 0, len(itemsItem.OutputTcpjson.Streamtags))
				for _, v := range itemsItem.OutputTcpjson.Streamtags {
					items.OutputTcpjson.Streamtags = append(items.OutputTcpjson.Streamtags, types.StringValue(v))
				}
				items.OutputTcpjson.SystemFields = make([]types.String, 0, len(itemsItem.OutputTcpjson.SystemFields))
				for _, v := range itemsItem.OutputTcpjson.SystemFields {
					items.OutputTcpjson.SystemFields = append(items.OutputTcpjson.SystemFields, types.StringValue(v))
				}
				items.OutputTcpjson.TextSecret = types.StringPointerValue(itemsItem.OutputTcpjson.TextSecret)
				items.OutputTcpjson.ThrottleRatePerSec = types.StringPointerValue(itemsItem.OutputTcpjson.ThrottleRatePerSec)
				if itemsItem.OutputTcpjson.TLS == nil {
					items.OutputTcpjson.TLS = nil
				} else {
					items.OutputTcpjson.TLS = &tfTypes.OutputTcpjsonTLSSettingsClientSide{}
					items.OutputTcpjson.TLS.CaPath = types.StringPointerValue(itemsItem.OutputTcpjson.TLS.CaPath)
					items.OutputTcpjson.TLS.CertificateName = types.StringPointerValue(itemsItem.OutputTcpjson.TLS.CertificateName)
					items.OutputTcpjson.TLS.CertPath = types.StringPointerValue(itemsItem.OutputTcpjson.TLS.CertPath)
					items.OutputTcpjson.TLS.Disabled = types.BoolPointerValue(itemsItem.OutputTcpjson.TLS.Disabled)
					if itemsItem.OutputTcpjson.TLS.MaxVersion != nil {
						items.OutputTcpjson.TLS.MaxVersion = types.StringValue(string(*itemsItem.OutputTcpjson.TLS.MaxVersion))
					} else {
						items.OutputTcpjson.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.OutputTcpjson.TLS.MinVersion != nil {
						items.OutputTcpjson.TLS.MinVersion = types.StringValue(string(*itemsItem.OutputTcpjson.TLS.MinVersion))
					} else {
						items.OutputTcpjson.TLS.MinVersion = types.StringNull()
					}
					items.OutputTcpjson.TLS.Passphrase = types.StringPointerValue(itemsItem.OutputTcpjson.TLS.Passphrase)
					items.OutputTcpjson.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.OutputTcpjson.TLS.PrivKeyPath)
					items.OutputTcpjson.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputTcpjson.TLS.RejectUnauthorized)
					items.OutputTcpjson.TLS.Servername = types.StringPointerValue(itemsItem.OutputTcpjson.TLS.Servername)
				}
				items.OutputTcpjson.TokenTTLMinutes = types.Float64PointerValue(itemsItem.OutputTcpjson.TokenTTLMinutes)
				items.OutputTcpjson.Type = types.StringValue(string(itemsItem.OutputTcpjson.Type))
				items.OutputTcpjson.WriteTimeout = types.Float64PointerValue(itemsItem.OutputTcpjson.WriteTimeout)
			}
			if itemsItem.OutputWavefront != nil {
				items.OutputWavefront = &tfTypes.OutputWavefront{}
				if itemsItem.OutputWavefront.AuthType != nil {
					items.OutputWavefront.AuthType = types.StringValue(string(*itemsItem.OutputWavefront.AuthType))
				} else {
					items.OutputWavefront.AuthType = types.StringNull()
				}
				items.OutputWavefront.Compress = types.BoolPointerValue(itemsItem.OutputWavefront.Compress)
				items.OutputWavefront.Concurrency = types.Float64PointerValue(itemsItem.OutputWavefront.Concurrency)
				items.OutputWavefront.Description = types.StringPointerValue(itemsItem.OutputWavefront.Description)
				items.OutputWavefront.Domain = types.StringPointerValue(itemsItem.OutputWavefront.Domain)
				items.OutputWavefront.Environment = types.StringPointerValue(itemsItem.OutputWavefront.Environment)
				items.OutputWavefront.ExtraHTTPHeaders = []tfTypes.OutputWavefrontExtraHTTPHeader{}

				for _, extraHTTPHeadersItem26 := range itemsItem.OutputWavefront.ExtraHTTPHeaders {
					var extraHTTPHeaders26 tfTypes.OutputWavefrontExtraHTTPHeader

					extraHTTPHeaders26.Name = types.StringPointerValue(extraHTTPHeadersItem26.Name)
					extraHTTPHeaders26.Value = types.StringValue(extraHTTPHeadersItem26.Value)

					items.OutputWavefront.ExtraHTTPHeaders = append(items.OutputWavefront.ExtraHTTPHeaders, extraHTTPHeaders26)
				}
				if itemsItem.OutputWavefront.FailedRequestLoggingMode != nil {
					items.OutputWavefront.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputWavefront.FailedRequestLoggingMode))
				} else {
					items.OutputWavefront.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputWavefront.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputWavefront.FlushPeriodSec)
				items.OutputWavefront.ID = types.StringPointerValue(itemsItem.OutputWavefront.ID)
				items.OutputWavefront.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputWavefront.MaxPayloadEvents)
				items.OutputWavefront.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputWavefront.MaxPayloadSizeKB)
				if itemsItem.OutputWavefront.OnBackpressure != nil {
					items.OutputWavefront.OnBackpressure = types.StringValue(string(*itemsItem.OutputWavefront.OnBackpressure))
				} else {
					items.OutputWavefront.OnBackpressure = types.StringNull()
				}
				items.OutputWavefront.Pipeline = types.StringPointerValue(itemsItem.OutputWavefront.Pipeline)
				if itemsItem.OutputWavefront.PqCompress != nil {
					items.OutputWavefront.PqCompress = types.StringValue(string(*itemsItem.OutputWavefront.PqCompress))
				} else {
					items.OutputWavefront.PqCompress = types.StringNull()
				}
				if itemsItem.OutputWavefront.PqControls == nil {
					items.OutputWavefront.PqControls = nil
				} else {
					items.OutputWavefront.PqControls = &tfTypes.OutputWavefrontPqControls{}
				}
				items.OutputWavefront.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputWavefront.PqMaxFileSize)
				items.OutputWavefront.PqMaxSize = types.StringPointerValue(itemsItem.OutputWavefront.PqMaxSize)
				if itemsItem.OutputWavefront.PqMode != nil {
					items.OutputWavefront.PqMode = types.StringValue(string(*itemsItem.OutputWavefront.PqMode))
				} else {
					items.OutputWavefront.PqMode = types.StringNull()
				}
				if itemsItem.OutputWavefront.PqOnBackpressure != nil {
					items.OutputWavefront.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputWavefront.PqOnBackpressure))
				} else {
					items.OutputWavefront.PqOnBackpressure = types.StringNull()
				}
				items.OutputWavefront.PqPath = types.StringPointerValue(itemsItem.OutputWavefront.PqPath)
				items.OutputWavefront.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputWavefront.RejectUnauthorized)
				items.OutputWavefront.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputWavefront.ResponseHonorRetryAfterHeader)
				items.OutputWavefront.ResponseRetrySettings = []tfTypes.OutputWavefrontResponseRetrySetting{}

				for _, responseRetrySettingsItem27 := range itemsItem.OutputWavefront.ResponseRetrySettings {
					var responseRetrySettings27 tfTypes.OutputWavefrontResponseRetrySetting

					responseRetrySettings27.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem27.BackoffRate)
					responseRetrySettings27.HTTPStatus = types.Float64Value(responseRetrySettingsItem27.HTTPStatus)
					responseRetrySettings27.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem27.InitialBackoff)
					responseRetrySettings27.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem27.MaxBackoff)

					items.OutputWavefront.ResponseRetrySettings = append(items.OutputWavefront.ResponseRetrySettings, responseRetrySettings27)
				}
				items.OutputWavefront.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputWavefront.SafeHeaders))
				for _, v := range itemsItem.OutputWavefront.SafeHeaders {
					items.OutputWavefront.SafeHeaders = append(items.OutputWavefront.SafeHeaders, types.StringValue(v))
				}
				items.OutputWavefront.Streamtags = make([]types.String, 0, len(itemsItem.OutputWavefront.Streamtags))
				for _, v := range itemsItem.OutputWavefront.Streamtags {
					items.OutputWavefront.Streamtags = append(items.OutputWavefront.Streamtags, types.StringValue(v))
				}
				items.OutputWavefront.SystemFields = make([]types.String, 0, len(itemsItem.OutputWavefront.SystemFields))
				for _, v := range itemsItem.OutputWavefront.SystemFields {
					items.OutputWavefront.SystemFields = append(items.OutputWavefront.SystemFields, types.StringValue(v))
				}
				items.OutputWavefront.TextSecret = types.StringPointerValue(itemsItem.OutputWavefront.TextSecret)
				if itemsItem.OutputWavefront.TimeoutRetrySettings == nil {
					items.OutputWavefront.TimeoutRetrySettings = nil
				} else {
					items.OutputWavefront.TimeoutRetrySettings = &tfTypes.OutputWavefrontTimeoutRetrySettings{}
					items.OutputWavefront.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputWavefront.TimeoutRetrySettings.BackoffRate)
					items.OutputWavefront.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputWavefront.TimeoutRetrySettings.InitialBackoff)
					items.OutputWavefront.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputWavefront.TimeoutRetrySettings.MaxBackoff)
					items.OutputWavefront.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputWavefront.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputWavefront.TimeoutSec = types.Float64PointerValue(itemsItem.OutputWavefront.TimeoutSec)
				items.OutputWavefront.Token = types.StringPointerValue(itemsItem.OutputWavefront.Token)
				items.OutputWavefront.Type = types.StringValue(string(itemsItem.OutputWavefront.Type))
				items.OutputWavefront.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputWavefront.UseRoundRobinDNS)
			}
			if itemsItem.OutputWebhook != nil {
				items.OutputWebhook = &tfTypes.OutputWebhook{}
				items.OutputWebhook.AdvancedContentType = types.StringPointerValue(itemsItem.OutputWebhook.AdvancedContentType)
				items.OutputWebhook.AuthHeaderExpr = types.StringPointerValue(itemsItem.OutputWebhook.AuthHeaderExpr)
				if itemsItem.OutputWebhook.AuthType != nil {
					items.OutputWebhook.AuthType = types.StringValue(string(*itemsItem.OutputWebhook.AuthType))
				} else {
					items.OutputWebhook.AuthType = types.StringNull()
				}
				items.OutputWebhook.Compress = types.BoolPointerValue(itemsItem.OutputWebhook.Compress)
				items.OutputWebhook.Concurrency = types.Float64PointerValue(itemsItem.OutputWebhook.Concurrency)
				items.OutputWebhook.CredentialsSecret = types.StringPointerValue(itemsItem.OutputWebhook.CredentialsSecret)
				items.OutputWebhook.CustomContentType = types.StringPointerValue(itemsItem.OutputWebhook.CustomContentType)
				items.OutputWebhook.CustomDropWhenNull = types.BoolPointerValue(itemsItem.OutputWebhook.CustomDropWhenNull)
				items.OutputWebhook.CustomEventDelimiter = types.StringPointerValue(itemsItem.OutputWebhook.CustomEventDelimiter)
				items.OutputWebhook.CustomPayloadExpression = types.StringPointerValue(itemsItem.OutputWebhook.CustomPayloadExpression)
				items.OutputWebhook.CustomSourceExpression = types.StringPointerValue(itemsItem.OutputWebhook.CustomSourceExpression)
				items.OutputWebhook.Description = types.StringPointerValue(itemsItem.OutputWebhook.Description)
				items.OutputWebhook.DNSResolvePeriodSec = types.Float64PointerValue(itemsItem.OutputWebhook.DNSResolvePeriodSec)
				items.OutputWebhook.Environment = types.StringPointerValue(itemsItem.OutputWebhook.Environment)
				items.OutputWebhook.ExcludeSelf = types.BoolPointerValue(itemsItem.OutputWebhook.ExcludeSelf)
				items.OutputWebhook.ExtraHTTPHeaders = []tfTypes.OutputWebhookExtraHTTPHeader{}

				for _, extraHTTPHeadersItem27 := range itemsItem.OutputWebhook.ExtraHTTPHeaders {
					var extraHTTPHeaders27 tfTypes.OutputWebhookExtraHTTPHeader

					extraHTTPHeaders27.Name = types.StringPointerValue(extraHTTPHeadersItem27.Name)
					extraHTTPHeaders27.Value = types.StringValue(extraHTTPHeadersItem27.Value)

					items.OutputWebhook.ExtraHTTPHeaders = append(items.OutputWebhook.ExtraHTTPHeaders, extraHTTPHeaders27)
				}
				if itemsItem.OutputWebhook.FailedRequestLoggingMode != nil {
					items.OutputWebhook.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputWebhook.FailedRequestLoggingMode))
				} else {
					items.OutputWebhook.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputWebhook.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputWebhook.FlushPeriodSec)
				if itemsItem.OutputWebhook.Format != nil {
					items.OutputWebhook.Format = types.StringValue(string(*itemsItem.OutputWebhook.Format))
				} else {
					items.OutputWebhook.Format = types.StringNull()
				}
				items.OutputWebhook.FormatEventCode = types.StringPointerValue(itemsItem.OutputWebhook.FormatEventCode)
				items.OutputWebhook.FormatPayloadCode = types.StringPointerValue(itemsItem.OutputWebhook.FormatPayloadCode)
				items.OutputWebhook.ID = types.StringValue(itemsItem.OutputWebhook.ID)
				items.OutputWebhook.KeepAlive = types.BoolPointerValue(itemsItem.OutputWebhook.KeepAlive)
				items.OutputWebhook.LoadBalanced = types.BoolPointerValue(itemsItem.OutputWebhook.LoadBalanced)
				items.OutputWebhook.LoadBalanceStatsPeriodSec = types.Float64PointerValue(itemsItem.OutputWebhook.LoadBalanceStatsPeriodSec)
				items.OutputWebhook.LoginURL = types.StringPointerValue(itemsItem.OutputWebhook.LoginURL)
				items.OutputWebhook.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputWebhook.MaxPayloadEvents)
				items.OutputWebhook.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputWebhook.MaxPayloadSizeKB)
				if itemsItem.OutputWebhook.Method != nil {
					items.OutputWebhook.Method = types.StringValue(string(*itemsItem.OutputWebhook.Method))
				} else {
					items.OutputWebhook.Method = types.StringNull()
				}
				items.OutputWebhook.OauthHeaders = []tfTypes.OutputWebhookOauthHeader{}

				for _, oauthHeadersItem4 := range itemsItem.OutputWebhook.OauthHeaders {
					var oauthHeaders4 tfTypes.OutputWebhookOauthHeader

					oauthHeaders4.Name = types.StringValue(oauthHeadersItem4.Name)
					oauthHeaders4.Value = types.StringValue(oauthHeadersItem4.Value)

					items.OutputWebhook.OauthHeaders = append(items.OutputWebhook.OauthHeaders, oauthHeaders4)
				}
				items.OutputWebhook.OauthParams = []tfTypes.OutputWebhookOauthParam{}

				for _, oauthParamsItem4 := range itemsItem.OutputWebhook.OauthParams {
					var oauthParams4 tfTypes.OutputWebhookOauthParam

					oauthParams4.Name = types.StringValue(oauthParamsItem4.Name)
					oauthParams4.Value = types.StringValue(oauthParamsItem4.Value)

					items.OutputWebhook.OauthParams = append(items.OutputWebhook.OauthParams, oauthParams4)
				}
				if itemsItem.OutputWebhook.OnBackpressure != nil {
					items.OutputWebhook.OnBackpressure = types.StringValue(string(*itemsItem.OutputWebhook.OnBackpressure))
				} else {
					items.OutputWebhook.OnBackpressure = types.StringNull()
				}
				items.OutputWebhook.Password = types.StringPointerValue(itemsItem.OutputWebhook.Password)
				items.OutputWebhook.Pipeline = types.StringPointerValue(itemsItem.OutputWebhook.Pipeline)
				if itemsItem.OutputWebhook.PqCompress != nil {
					items.OutputWebhook.PqCompress = types.StringValue(string(*itemsItem.OutputWebhook.PqCompress))
				} else {
					items.OutputWebhook.PqCompress = types.StringNull()
				}
				if itemsItem.OutputWebhook.PqControls == nil {
					items.OutputWebhook.PqControls = nil
				} else {
					items.OutputWebhook.PqControls = &tfTypes.OutputWebhookPqControls{}
				}
				items.OutputWebhook.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputWebhook.PqMaxFileSize)
				items.OutputWebhook.PqMaxSize = types.StringPointerValue(itemsItem.OutputWebhook.PqMaxSize)
				if itemsItem.OutputWebhook.PqMode != nil {
					items.OutputWebhook.PqMode = types.StringValue(string(*itemsItem.OutputWebhook.PqMode))
				} else {
					items.OutputWebhook.PqMode = types.StringNull()
				}
				if itemsItem.OutputWebhook.PqOnBackpressure != nil {
					items.OutputWebhook.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputWebhook.PqOnBackpressure))
				} else {
					items.OutputWebhook.PqOnBackpressure = types.StringNull()
				}
				items.OutputWebhook.PqPath = types.StringPointerValue(itemsItem.OutputWebhook.PqPath)
				items.OutputWebhook.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputWebhook.RejectUnauthorized)
				items.OutputWebhook.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputWebhook.ResponseHonorRetryAfterHeader)
				items.OutputWebhook.ResponseRetrySettings = []tfTypes.OutputWebhookResponseRetrySetting{}

				for _, responseRetrySettingsItem28 := range itemsItem.OutputWebhook.ResponseRetrySettings {
					var responseRetrySettings28 tfTypes.OutputWebhookResponseRetrySetting

					responseRetrySettings28.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem28.BackoffRate)
					responseRetrySettings28.HTTPStatus = types.Float64Value(responseRetrySettingsItem28.HTTPStatus)
					responseRetrySettings28.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem28.InitialBackoff)
					responseRetrySettings28.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem28.MaxBackoff)

					items.OutputWebhook.ResponseRetrySettings = append(items.OutputWebhook.ResponseRetrySettings, responseRetrySettings28)
				}
				items.OutputWebhook.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputWebhook.SafeHeaders))
				for _, v := range itemsItem.OutputWebhook.SafeHeaders {
					items.OutputWebhook.SafeHeaders = append(items.OutputWebhook.SafeHeaders, types.StringValue(v))
				}
				items.OutputWebhook.Secret = types.StringPointerValue(itemsItem.OutputWebhook.Secret)
				items.OutputWebhook.SecretParamName = types.StringPointerValue(itemsItem.OutputWebhook.SecretParamName)
				items.OutputWebhook.Streamtags = make([]types.String, 0, len(itemsItem.OutputWebhook.Streamtags))
				for _, v := range itemsItem.OutputWebhook.Streamtags {
					items.OutputWebhook.Streamtags = append(items.OutputWebhook.Streamtags, types.StringValue(v))
				}
				items.OutputWebhook.SystemFields = make([]types.String, 0, len(itemsItem.OutputWebhook.SystemFields))
				for _, v := range itemsItem.OutputWebhook.SystemFields {
					items.OutputWebhook.SystemFields = append(items.OutputWebhook.SystemFields, types.StringValue(v))
				}
				items.OutputWebhook.TextSecret = types.StringPointerValue(itemsItem.OutputWebhook.TextSecret)
				if itemsItem.OutputWebhook.TimeoutRetrySettings == nil {
					items.OutputWebhook.TimeoutRetrySettings = nil
				} else {
					items.OutputWebhook.TimeoutRetrySettings = &tfTypes.OutputWebhookTimeoutRetrySettings{}
					items.OutputWebhook.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputWebhook.TimeoutRetrySettings.BackoffRate)
					items.OutputWebhook.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputWebhook.TimeoutRetrySettings.InitialBackoff)
					items.OutputWebhook.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputWebhook.TimeoutRetrySettings.MaxBackoff)
					items.OutputWebhook.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputWebhook.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputWebhook.TimeoutSec = types.Float64PointerValue(itemsItem.OutputWebhook.TimeoutSec)
				if itemsItem.OutputWebhook.TLS == nil {
					items.OutputWebhook.TLS = nil
				} else {
					items.OutputWebhook.TLS = &tfTypes.OutputWebhookTLSSettingsClientSide{}
					items.OutputWebhook.TLS.CaPath = types.StringPointerValue(itemsItem.OutputWebhook.TLS.CaPath)
					items.OutputWebhook.TLS.CertificateName = types.StringPointerValue(itemsItem.OutputWebhook.TLS.CertificateName)
					items.OutputWebhook.TLS.CertPath = types.StringPointerValue(itemsItem.OutputWebhook.TLS.CertPath)
					items.OutputWebhook.TLS.Disabled = types.BoolPointerValue(itemsItem.OutputWebhook.TLS.Disabled)
					if itemsItem.OutputWebhook.TLS.MaxVersion != nil {
						items.OutputWebhook.TLS.MaxVersion = types.StringValue(string(*itemsItem.OutputWebhook.TLS.MaxVersion))
					} else {
						items.OutputWebhook.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.OutputWebhook.TLS.MinVersion != nil {
						items.OutputWebhook.TLS.MinVersion = types.StringValue(string(*itemsItem.OutputWebhook.TLS.MinVersion))
					} else {
						items.OutputWebhook.TLS.MinVersion = types.StringNull()
					}
					items.OutputWebhook.TLS.Passphrase = types.StringPointerValue(itemsItem.OutputWebhook.TLS.Passphrase)
					items.OutputWebhook.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.OutputWebhook.TLS.PrivKeyPath)
					items.OutputWebhook.TLS.Servername = types.StringPointerValue(itemsItem.OutputWebhook.TLS.Servername)
				}
				items.OutputWebhook.Token = types.StringPointerValue(itemsItem.OutputWebhook.Token)
				items.OutputWebhook.TokenAttributeName = types.StringPointerValue(itemsItem.OutputWebhook.TokenAttributeName)
				items.OutputWebhook.TokenTimeoutSecs = types.Float64PointerValue(itemsItem.OutputWebhook.TokenTimeoutSecs)
				items.OutputWebhook.TotalMemoryLimitKB = types.Float64PointerValue(itemsItem.OutputWebhook.TotalMemoryLimitKB)
				items.OutputWebhook.Type = types.StringValue(string(itemsItem.OutputWebhook.Type))
				items.OutputWebhook.URL = types.StringPointerValue(itemsItem.OutputWebhook.URL)
				items.OutputWebhook.Urls = []tfTypes.OutputWebhookURL{}

				for _, urlsItem3 := range itemsItem.OutputWebhook.Urls {
					var urls3 tfTypes.OutputWebhookURL

					urls3.URL = types.StringValue(urlsItem3.URL)
					urls3.Weight = types.Float64PointerValue(urlsItem3.Weight)

					items.OutputWebhook.Urls = append(items.OutputWebhook.Urls, urls3)
				}
				items.OutputWebhook.Username = types.StringPointerValue(itemsItem.OutputWebhook.Username)
				items.OutputWebhook.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputWebhook.UseRoundRobinDNS)
			}
			if itemsItem.OutputXsiam != nil {
				items.OutputXsiam = &tfTypes.OutputXsiam{}
				if itemsItem.OutputXsiam.AuthType != nil {
					items.OutputXsiam.AuthType = types.StringValue(string(*itemsItem.OutputXsiam.AuthType))
				} else {
					items.OutputXsiam.AuthType = types.StringNull()
				}
				items.OutputXsiam.Concurrency = types.Float64PointerValue(itemsItem.OutputXsiam.Concurrency)
				items.OutputXsiam.Description = types.StringPointerValue(itemsItem.OutputXsiam.Description)
				items.OutputXsiam.DNSResolvePeriodSec = types.Float64PointerValue(itemsItem.OutputXsiam.DNSResolvePeriodSec)
				items.OutputXsiam.Environment = types.StringPointerValue(itemsItem.OutputXsiam.Environment)
				items.OutputXsiam.ExcludeSelf = types.BoolPointerValue(itemsItem.OutputXsiam.ExcludeSelf)
				items.OutputXsiam.ExtraHTTPHeaders = []tfTypes.OutputXsiamExtraHTTPHeader{}

				for _, extraHTTPHeadersItem28 := range itemsItem.OutputXsiam.ExtraHTTPHeaders {
					var extraHTTPHeaders28 tfTypes.OutputXsiamExtraHTTPHeader

					extraHTTPHeaders28.Name = types.StringPointerValue(extraHTTPHeadersItem28.Name)
					extraHTTPHeaders28.Value = types.StringValue(extraHTTPHeadersItem28.Value)

					items.OutputXsiam.ExtraHTTPHeaders = append(items.OutputXsiam.ExtraHTTPHeaders, extraHTTPHeaders28)
				}
				if itemsItem.OutputXsiam.FailedRequestLoggingMode != nil {
					items.OutputXsiam.FailedRequestLoggingMode = types.StringValue(string(*itemsItem.OutputXsiam.FailedRequestLoggingMode))
				} else {
					items.OutputXsiam.FailedRequestLoggingMode = types.StringNull()
				}
				items.OutputXsiam.FlushPeriodSec = types.Float64PointerValue(itemsItem.OutputXsiam.FlushPeriodSec)
				items.OutputXsiam.ID = types.StringValue(itemsItem.OutputXsiam.ID)
				items.OutputXsiam.LoadBalanced = types.BoolPointerValue(itemsItem.OutputXsiam.LoadBalanced)
				items.OutputXsiam.LoadBalanceStatsPeriodSec = types.Float64PointerValue(itemsItem.OutputXsiam.LoadBalanceStatsPeriodSec)
				items.OutputXsiam.MaxPayloadEvents = types.Float64PointerValue(itemsItem.OutputXsiam.MaxPayloadEvents)
				items.OutputXsiam.MaxPayloadSizeKB = types.Float64PointerValue(itemsItem.OutputXsiam.MaxPayloadSizeKB)
				if itemsItem.OutputXsiam.OnBackpressure != nil {
					items.OutputXsiam.OnBackpressure = types.StringValue(string(*itemsItem.OutputXsiam.OnBackpressure))
				} else {
					items.OutputXsiam.OnBackpressure = types.StringNull()
				}
				items.OutputXsiam.Pipeline = types.StringPointerValue(itemsItem.OutputXsiam.Pipeline)
				if itemsItem.OutputXsiam.PqCompress != nil {
					items.OutputXsiam.PqCompress = types.StringValue(string(*itemsItem.OutputXsiam.PqCompress))
				} else {
					items.OutputXsiam.PqCompress = types.StringNull()
				}
				if itemsItem.OutputXsiam.PqControls == nil {
					items.OutputXsiam.PqControls = nil
				} else {
					items.OutputXsiam.PqControls = &tfTypes.OutputXsiamPqControls{}
				}
				items.OutputXsiam.PqMaxFileSize = types.StringPointerValue(itemsItem.OutputXsiam.PqMaxFileSize)
				items.OutputXsiam.PqMaxSize = types.StringPointerValue(itemsItem.OutputXsiam.PqMaxSize)
				if itemsItem.OutputXsiam.PqMode != nil {
					items.OutputXsiam.PqMode = types.StringValue(string(*itemsItem.OutputXsiam.PqMode))
				} else {
					items.OutputXsiam.PqMode = types.StringNull()
				}
				if itemsItem.OutputXsiam.PqOnBackpressure != nil {
					items.OutputXsiam.PqOnBackpressure = types.StringValue(string(*itemsItem.OutputXsiam.PqOnBackpressure))
				} else {
					items.OutputXsiam.PqOnBackpressure = types.StringNull()
				}
				items.OutputXsiam.PqPath = types.StringPointerValue(itemsItem.OutputXsiam.PqPath)
				items.OutputXsiam.RejectUnauthorized = types.BoolPointerValue(itemsItem.OutputXsiam.RejectUnauthorized)
				items.OutputXsiam.ResponseHonorRetryAfterHeader = types.BoolPointerValue(itemsItem.OutputXsiam.ResponseHonorRetryAfterHeader)
				items.OutputXsiam.ResponseRetrySettings = []tfTypes.OutputXsiamResponseRetrySetting{}

				for _, responseRetrySettingsItem29 := range itemsItem.OutputXsiam.ResponseRetrySettings {
					var responseRetrySettings29 tfTypes.OutputXsiamResponseRetrySetting

					responseRetrySettings29.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem29.BackoffRate)
					responseRetrySettings29.HTTPStatus = types.Float64Value(responseRetrySettingsItem29.HTTPStatus)
					responseRetrySettings29.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem29.InitialBackoff)
					responseRetrySettings29.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem29.MaxBackoff)

					items.OutputXsiam.ResponseRetrySettings = append(items.OutputXsiam.ResponseRetrySettings, responseRetrySettings29)
				}
				items.OutputXsiam.SafeHeaders = make([]types.String, 0, len(itemsItem.OutputXsiam.SafeHeaders))
				for _, v := range itemsItem.OutputXsiam.SafeHeaders {
					items.OutputXsiam.SafeHeaders = append(items.OutputXsiam.SafeHeaders, types.StringValue(v))
				}
				items.OutputXsiam.Streamtags = make([]types.String, 0, len(itemsItem.OutputXsiam.Streamtags))
				for _, v := range itemsItem.OutputXsiam.Streamtags {
					items.OutputXsiam.Streamtags = append(items.OutputXsiam.Streamtags, types.StringValue(v))
				}
				items.OutputXsiam.SystemFields = make([]types.String, 0, len(itemsItem.OutputXsiam.SystemFields))
				for _, v := range itemsItem.OutputXsiam.SystemFields {
					items.OutputXsiam.SystemFields = append(items.OutputXsiam.SystemFields, types.StringValue(v))
				}
				items.OutputXsiam.TextSecret = types.StringPointerValue(itemsItem.OutputXsiam.TextSecret)
				items.OutputXsiam.ThrottleRateReqPerSec = types.Int64PointerValue(itemsItem.OutputXsiam.ThrottleRateReqPerSec)
				if itemsItem.OutputXsiam.TimeoutRetrySettings == nil {
					items.OutputXsiam.TimeoutRetrySettings = nil
				} else {
					items.OutputXsiam.TimeoutRetrySettings = &tfTypes.OutputXsiamTimeoutRetrySettings{}
					items.OutputXsiam.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(itemsItem.OutputXsiam.TimeoutRetrySettings.BackoffRate)
					items.OutputXsiam.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(itemsItem.OutputXsiam.TimeoutRetrySettings.InitialBackoff)
					items.OutputXsiam.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(itemsItem.OutputXsiam.TimeoutRetrySettings.MaxBackoff)
					items.OutputXsiam.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(itemsItem.OutputXsiam.TimeoutRetrySettings.TimeoutRetry)
				}
				items.OutputXsiam.TimeoutSec = types.Float64PointerValue(itemsItem.OutputXsiam.TimeoutSec)
				items.OutputXsiam.Token = types.StringPointerValue(itemsItem.OutputXsiam.Token)
				items.OutputXsiam.TotalMemoryLimitKB = types.Float64PointerValue(itemsItem.OutputXsiam.TotalMemoryLimitKB)
				items.OutputXsiam.Type = types.StringValue(string(itemsItem.OutputXsiam.Type))
				items.OutputXsiam.URL = types.StringPointerValue(itemsItem.OutputXsiam.URL)
				items.OutputXsiam.Urls = []tfTypes.OutputXsiamURL{}

				for _, urlsItem4 := range itemsItem.OutputXsiam.Urls {
					var urls4 tfTypes.OutputXsiamURL

					urlResult, _ := json.Marshal(urlsItem4.URL)
					urls4.URL = jsontypes.NewNormalizedValue(string(urlResult))
					urls4.Weight = types.Float64PointerValue(urlsItem4.Weight)

					items.OutputXsiam.Urls = append(items.OutputXsiam.Urls, urls4)
				}
				items.OutputXsiam.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.OutputXsiam.UseRoundRobinDNS)
			}

			r.Items = append(r.Items, items)
		}
	}

	return diags
}

func (r *DestinationsDataSourceModel) ToOperationsListOutputRequest(ctx context.Context) (*operations.ListOutputRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.ListOutputRequest{
		GroupID: groupID,
	}

	return &out, diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk"
	"github.com/criblio/terraform-provider-criblio/internal/validators"
	speakeasy_boolvalidators "github.com/criblio/terraform-provider-criblio/internal/validators/boolvalidators"
	speakeasy_float64validators "github.com/criblio/terraform-provider-criblio/internal/validators/float64validators"
	speakeasy_listvalidators "github.com/criblio/terraform-provider-criblio/internal/validators/listvalidators"
	speakeasy_objectvalidators "github.com/criblio/terraform-provider-criblio/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/criblio/terraform-provider-criblio/internal/validators/stringvalidators"
	"github.com/hashicorp/terraform-plugin-framework-validators/float64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"regexp"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &SearchDashboardResource{}
var _ resource.ResourceWithImportState = &SearchDashboardResource{}

func NewSearchDashboardResource() resource.Resource {
	return &SearchDashboardResource{}
}

// SearchDashboardResource defines the resource implementation.
type SearchDashboardResource struct {
	// Provider configured SDK client.
	client *sdk.CriblIo
}

// SearchDashboardResourceModel describes the resource data model.
type SearchDashboardResourceModel struct {
	CacheTTLSeconds    types.Float64               `tfsdk:"cache_ttl_seconds"`
	Category           types.String                `tfsdk:"category"`
	Created            types.Float64               `tfsdk:"created"`
	CreatedBy          types.String                `tfsdk:"created_by"`
	Description        types.String                `tfsdk:"description"`
	DisplayCreatedBy   types.String                `tfsdk:"display_created_by"`
	DisplayModifiedBy  types.String                `tfsdk:"display_modified_by"`
	Elements           []tfTypes.ElementUnion      `tfsdk:"elements"`
	ID                 types.String                `tfsdk:"id"`
	Modified           types.Float64               `tfsdk:"modified"`
	ModifiedBy         types.String                `tfsdk:"modified_by"`
	Name               types.String                `tfsdk:"name"`
	PackID             types.String                `tfsdk:"pack_id"`
	RefreshRate        types.Float64               `tfsdk:"refresh_rate"`
	ResolvedDatasetIds []types.String              `tfsdk:"resolved_dataset_ids"`
	Schedule           *tfTypes.SavedQuerySchedule `tfsdk:"schedule"`
}

func (r *SearchDashboardResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_search_dashboard"
}

func (r *SearchDashboardResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SearchDashboard Resource",
		Attributes: map[string]schema.Attribute{
			"cache_ttl_seconds": schema.Float64Attribute{
				Computed: true,
				Optional: true,
			},
			"category": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"created": schema.Float64Attribute{
				Required: true,
			},
			"created_by": schema.StringAttribute{
				Required: true,
			},
			"description": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"display_created_by": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"display_modified_by": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"elements": schema.ListNestedAttribute{
				Required: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"element": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"description": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"empty": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_panel": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"horizontal_chart": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"index": schema.Float64Attribute{
									Computed: true,
									Optional: true,
								},
								"input_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"layout": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"h": schema.Float64Attribute{
											Computed:    true,
											Optional:    true,
											Description: `Not Null`,
											Validators: []validator.Float64{
												speakeasy_float64validators.NotNull(),
											},
										},
										"w": schema.Float64Attribute{
											Computed:    true,
											Optional:    true,
											Description: `Not Null`,
											Validators: []validator.Float64{
												speakeasy_float64validators.NotNull(),
											},
										},
										"x": schema.Float64Attribute{
											Computed:    true,
											Optional:    true,
											Description: `Not Null`,
											Validators: []validator.Float64{
												speakeasy_float64validators.NotNull(),
											},
										},
										"y": schema.Float64Attribute{
											Computed:    true,
											Optional:    true,
											Description: `Not Null`,
											Validators: []validator.Float64{
												speakeasy_float64validators.NotNull(),
											},
										},
									},
									Description: `Not Null`,
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
								},
								"search": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"search_query_inline": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"earliest": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"number": schema.Float64Attribute{
															Computed: true,
															Optional: true,
															Validators: []validator.Float64{
																float64validator.ConflictsWith(path.Expressions{
																	path.MatchRelative().AtParent().AtName("str"),
																}...),
															},
														},
														"str": schema.StringAttribute{
															Computed: true,
															Optional: true,
															Validators: []validator.String{
																stringvalidator.ConflictsWith(path.Expressions{
																	path.MatchRelative().AtParent().AtName("number"),
																}...),
															},
														},
													},
												},
												"latest": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"number": schema.Float64Attribute{
															Computed: true,
															Optional: true,
															Validators: []validator.Float64{
																float64validator.ConflictsWith(path.Expressions{
																	path.MatchRelative().AtParent().AtName("str"),
																}...),
															},
														},
														"str": schema.StringAttribute{
															Computed: true,
															Optional: true,
															Validators: []validator.String{
																stringvalidator.ConflictsWith(path.Expressions{
																	path.MatchRelative().AtParent().AtName("number"),
																}...),
															},
														},
													},
												},
												"parent_search_id": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"query": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"sample_rate": schema.Float64Attribute{
													Computed: true,
													Optional: true,
												},
												"timezone": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"type": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null; must be "inline"`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.OneOf("inline"),
													},
												},
											},
											Validators: []validator.Object{
												objectvalidator.ConflictsWith(path.Expressions{
													path.MatchRelative().AtParent().AtName("search_query_saved"),
													path.MatchRelative().AtParent().AtName("search_query_values"),
												}...),
											},
										},
										"search_query_saved": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"query": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"query_id": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
													},
												},
												"run_mode": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `must be one of ["newSearch", "lastRun"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"newSearch",
															"lastRun",
														),
													},
												},
												"type": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null; must be "saved"`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.OneOf("saved"),
													},
												},
											},
											Validators: []validator.Object{
												objectvalidator.ConflictsWith(path.Expressions{
													path.MatchRelative().AtParent().AtName("search_query_inline"),
													path.MatchRelative().AtParent().AtName("search_query_values"),
												}...),
											},
										},
										"search_query_values": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"type": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null; must be "values"`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.OneOf("values"),
													},
												},
												"values": schema.ListAttribute{
													Computed:    true,
													Optional:    true,
													ElementType: types.StringType,
													Description: `Not Null`,
													Validators: []validator.List{
														speakeasy_listvalidators.NotNull(),
													},
												},
											},
											Validators: []validator.Object{
												objectvalidator.ConflictsWith(path.Expressions{
													path.MatchRelative().AtParent().AtName("search_query_saved"),
													path.MatchRelative().AtParent().AtName("search_query_inline"),
												}...),
											},
										},
									},
									Description: `Not Null`,
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
								},
								"title": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null; must be one of ["chart.line", "chart.column", "chart.horizontalBar", "chart.area", "chart.scatter", "chart.pie", "chart.funnel", "chart.gauge", "chart.map", "list.events", "list.table", "counter.single", "input.timerange", "input.dropdown", "input.text", "input.number"]`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.OneOf(
											"chart.line",
											"chart.column",
											"chart.horizontalBar",
											"chart.area",
											"chart.scatter",
											"chart.pie",
											"chart.funnel",
											"chart.gauge",
											"chart.map",
											"list.events",
											"list.table",
											"counter.single",
											"input.timerange",
											"input.dropdown",
											"input.text",
											"input.number",
										),
									},
								},
								"value": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"variant": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `must be one of ["visualization", "input", "markdown"]`,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"visualization",
											"input",
											"markdown",
										),
									},
								},
							},
							Validators: []validator.Object{
								objectvalidator.ConflictsWith(path.Expressions{
									path.MatchRelative().AtParent().AtName("element_markdown"),
								}...),
							},
						},
						"element_markdown": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"description": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"empty": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_panel": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"index": schema.Float64Attribute{
									Computed: true,
									Optional: true,
								},
								"layout": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"h": schema.Float64Attribute{
											Computed:    true,
											Optional:    true,
											Description: `Not Null`,
											Validators: []validator.Float64{
												speakeasy_float64validators.NotNull(),
											},
										},
										"w": schema.Float64Attribute{
											Computed:    true,
											Optional:    true,
											Description: `Not Null`,
											Validators: []validator.Float64{
												speakeasy_float64validators.NotNull(),
											},
										},
										"x": schema.Float64Attribute{
											Computed:    true,
											Optional:    true,
											Description: `Not Null`,
											Validators: []validator.Float64{
												speakeasy_float64validators.NotNull(),
											},
										},
										"y": schema.Float64Attribute{
											Computed:    true,
											Optional:    true,
											Description: `Not Null`,
											Validators: []validator.Float64{
												speakeasy_float64validators.NotNull(),
											},
										},
									},
									Description: `Not Null`,
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
								},
								"title": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null; must be "markdown.default"`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.OneOf(
											"markdown.default",
										),
									},
								},
								"value": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"variant": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null; must be "markdown"`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.OneOf("markdown"),
									},
								},
							},
							Validators: []validator.Object{
								objectvalidator.ConflictsWith(path.Expressions{
									path.MatchRelative().AtParent().AtName("element"),
								}...),
							},
						},
					},
				},
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `Unique ID to PATCH`,
			},
			"modified": schema.Float64Attribute{
				Required: true,
			},
			"modified_by": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"name": schema.StringAttribute{
				Required: true,
			},
			"pack_id": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"refresh_rate": schema.Float64Attribute{
				Computed: true,
				Optional: true,
			},
			"resolved_dataset_ids": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
			},
			"schedule": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"cron_schedule": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"enabled": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Not Null`,
						Validators: []validator.Bool{
							speakeasy_boolvalidators.NotNull(),
						},
					},
					"keep_last_n": schema.Float64Attribute{
						Computed:    true,
						Optional:    true,
						Description: `Not Null`,
						Validators: []validator.Float64{
							speakeasy_float64validators.NotNull(),
						},
					},
					"notifications": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"disabled": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null`,
								Validators: []validator.Bool{
									speakeasy_boolvalidators.NotNull(),
								},
							},
							"items": schema.ListNestedAttribute{
								Computed: true,
								Optional: true,
								NestedObject: schema.NestedAttributeObject{
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
									Attributes: map[string]schema.Attribute{
										"condition": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The condition that triggers this notification. Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
											},
										},
										"conf": schema.SingleNestedAttribute{
											Computed:    true,
											Optional:    true,
											Description: `Configuration specific to the notification condition`,
										},
										"disabled": schema.BoolAttribute{
											Computed:    true,
											Optional:    true,
											Default:     booldefault.StaticBool(false),
											Description: `Whether the notification is disabled. Default: false`,
										},
										"group": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `Group identifier for the notification`,
										},
										"id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `Unique identifier for the notification. Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
												stringvalidator.UTF8LengthAtMost(512),
												stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
											},
										},
										"metadata": schema.ListNestedAttribute{
											Computed: true,
											Optional: true,
											NestedObject: schema.NestedAttributeObject{
												Validators: []validator.Object{
													speakeasy_objectvalidators.NotNull(),
												},
												Attributes: map[string]schema.Attribute{
													"name": schema.StringAttribute{
														Computed:    true,
														Optional:    true,
														Description: `Metadata field name. Not Null`,
														Validators: []validator.String{
															speakeasy_stringvalidators.NotNull(),
														},
													},
													"value": schema.StringAttribute{
														Computed:    true,
														Optional:    true,
														Description: `Metadata field value. Not Null`,
														Validators: []validator.String{
															speakeasy_stringvalidators.NotNull(),
														},
													},
												},
											},
											Description: `Additional metadata for the notification`,
										},
										"target_configs": schema.ListNestedAttribute{
											Computed: true,
											Optional: true,
											NestedObject: schema.NestedAttributeObject{
												Validators: []validator.Object{
													speakeasy_objectvalidators.NotNull(),
												},
												Attributes: map[string]schema.Attribute{
													"conf": schema.SingleNestedAttribute{
														Computed: true,
														Optional: true,
														Attributes: map[string]schema.Attribute{
															"body": schema.StringAttribute{
																Computed:    true,
																Optional:    true,
																Description: `Email body`,
															},
															"email_recipient": schema.SingleNestedAttribute{
																Computed: true,
																Optional: true,
																Attributes: map[string]schema.Attribute{
																	"bcc": schema.StringAttribute{
																		Computed:    true,
																		Optional:    true,
																		Description: `Bcc: Recipients' email addresses`,
																	},
																	"cc": schema.StringAttribute{
																		Computed:    true,
																		Optional:    true,
																		Description: `Cc: Recipients' email addresses`,
																	},
																	"to": schema.StringAttribute{
																		Computed:    true,
																		Optional:    true,
																		Description: `Recipients' email addresses. Not Null`,
																		Validators: []validator.String{
																			speakeasy_stringvalidators.NotNull(),
																		},
																	},
																},
															},
															"subject": schema.StringAttribute{
																Computed:    true,
																Optional:    true,
																Description: `Email subject`,
															},
														},
													},
													"id": schema.StringAttribute{
														Computed:    true,
														Optional:    true,
														Description: `ID of the notification target. Not Null`,
														Validators: []validator.String{
															speakeasy_stringvalidators.NotNull(),
															stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
														},
													},
												},
											},
											Description: `Configuration for notification targets`,
										},
										"targets": schema.ListAttribute{
											Computed:    true,
											Optional:    true,
											Default:     listdefault.StaticValue(types.ListValueMust(types.StringType, []attr.Value{})),
											ElementType: types.StringType,
											Description: `Targets to send any notifications to`,
										},
									},
								},
							},
						},
						Description: `Not Null`,
						Validators: []validator.Object{
							speakeasy_objectvalidators.NotNull(),
						},
					},
					"resume_missed": schema.BoolAttribute{
						Computed: true,
						Optional: true,
					},
					"resume_on_boot": schema.BoolAttribute{
						Computed: true,
						Optional: true,
					},
					"tz": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
			},
		},
	}
}

func (r *SearchDashboardResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.CriblIo)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.CriblIo, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SearchDashboardResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *SearchDashboardResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedSearchDashboard(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Dashboards.CreateSearchDashboard(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Items != nil && len(res.Object.Items) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSearchDashboard(ctx, &res.Object.Items[0])...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SearchDashboardResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *SearchDashboardResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetSearchDashboardByIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Dashboards.GetSearchDashboardByID(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Items != nil && len(res.Object.Items) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSearchDashboard(ctx, &res.Object.Items[0])...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SearchDashboardResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *SearchDashboardResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateSearchDashboardByIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Dashboards.UpdateSearchDashboardByID(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Items != nil && len(res.Object.Items) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSearchDashboard(ctx, &res.Object.Items[0])...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SearchDashboardResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *SearchDashboardResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteSearchDashboardByIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Dashboards.DeleteSearchDashboardByID(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *SearchDashboardResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}

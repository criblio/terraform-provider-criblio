// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk"
	"github.com/criblio/terraform-provider-criblio/internal/validators"
	speakeasy_listvalidators "github.com/criblio/terraform-provider-criblio/internal/validators/listvalidators"
	speakeasy_objectvalidators "github.com/criblio/terraform-provider-criblio/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/criblio/terraform-provider-criblio/internal/validators/stringvalidators"
	"github.com/hashicorp/terraform-plugin-framework-validators/float64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"regexp"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &SearchDatasetResource{}
var _ resource.ResourceWithImportState = &SearchDatasetResource{}

func NewSearchDatasetResource() resource.Resource {
	return &SearchDatasetResource{}
}

// SearchDatasetResource defines the resource implementation.
type SearchDatasetResource struct {
	// Provider configured SDK client.
	client *sdk.CriblIo
}

// SearchDatasetResourceModel describes the resource data model.
type SearchDatasetResourceModel struct {
	APIAwsDataset               *tfTypes.APIAwsDataset               `queryParam:"inline" tfsdk:"api_aws_dataset" tfPlanOnly:"true"`
	APIAzureDataExplorerDataset *tfTypes.APIAzureDataExplorerDataset `queryParam:"inline" tfsdk:"api_azure_data_explorer_dataset" tfPlanOnly:"true"`
	APIAzureDataset             *tfTypes.APIAzureDataset             `queryParam:"inline" tfsdk:"api_azure_dataset" tfPlanOnly:"true"`
	APIElasticSearchDataset     *tfTypes.APIElasticSearchDataset     `queryParam:"inline" tfsdk:"api_elastic_search_dataset" tfPlanOnly:"true"`
	APIGcpDataset               *tfTypes.APIGcpDataset               `queryParam:"inline" tfsdk:"api_gcp_dataset" tfPlanOnly:"true"`
	APIGoogleWorkspaceDataset   *tfTypes.APIGoogleWorkspaceDataset   `queryParam:"inline" tfsdk:"api_google_workspace_dataset" tfPlanOnly:"true"`
	APIHTTPDataset              *tfTypes.APIHTTPDataset              `queryParam:"inline" tfsdk:"apihttp_dataset" tfPlanOnly:"true"`
	APIMsGraphDataset           *tfTypes.APIMsGraphDataset           `queryParam:"inline" tfsdk:"api_ms_graph_dataset" tfPlanOnly:"true"`
	APIOktaDataset              *tfTypes.APIOktaDataset              `queryParam:"inline" tfsdk:"api_okta_dataset" tfPlanOnly:"true"`
	APIOpenSearchDataset        *tfTypes.APIOpenSearchDataset        `queryParam:"inline" tfsdk:"api_open_search_dataset" tfPlanOnly:"true"`
	APITailscaleDataset         *tfTypes.APITailscaleDataset         `queryParam:"inline" tfsdk:"api_tailscale_dataset" tfPlanOnly:"true"`
	APIZoomDataset              *tfTypes.APIZoomDataset              `queryParam:"inline" tfsdk:"api_zoom_dataset" tfPlanOnly:"true"`
	AwsSecurityLakeDataset      *tfTypes.AwsSecurityLakeDataset      `queryParam:"inline" tfsdk:"aws_security_lake_dataset" tfPlanOnly:"true"`
	AzureBlobDataset            *tfTypes.AzureBlobDataset            `queryParam:"inline" tfsdk:"azure_blob_dataset" tfPlanOnly:"true"`
	ClickHouseDataset           *tfTypes.ClickHouseDataset           `queryParam:"inline" tfsdk:"click_house_dataset" tfPlanOnly:"true"`
	CriblLeaderDataset          *tfTypes.CriblLeaderDataset          `queryParam:"inline" tfsdk:"cribl_leader_dataset" tfPlanOnly:"true"`
	Description                 types.String                         `tfsdk:"description"`
	EdgeDataset                 *tfTypes.EdgeDataset                 `queryParam:"inline" tfsdk:"edge_dataset" tfPlanOnly:"true"`
	GcsDataset                  *tfTypes.GcsDataset                  `queryParam:"inline" tfsdk:"gcs_dataset" tfPlanOnly:"true"`
	ID                          types.String                         `tfsdk:"id"`
	MetaDataset                 *tfTypes.MetaDataset                 `queryParam:"inline" tfsdk:"meta_dataset" tfPlanOnly:"true"`
	PrometheusDataset           *tfTypes.PrometheusDataset           `queryParam:"inline" tfsdk:"prometheus_dataset" tfPlanOnly:"true"`
	ProviderID                  types.String                         `tfsdk:"provider_id"`
	S3Dataset                   *tfTypes.S3Dataset                   `queryParam:"inline" tfsdk:"s3_dataset" tfPlanOnly:"true"`
	SnowflakeDataset            *tfTypes.SnowflakeDataset            `queryParam:"inline" tfsdk:"snowflake_dataset" tfPlanOnly:"true"`
	Type                        types.String                         `tfsdk:"type"`
}

func (r *SearchDatasetResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_search_dataset"
}

func (r *SearchDatasetResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SearchDataset Resource",
		Attributes: map[string]schema.Attribute{
			"api_aws_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"enabled_endpoints": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
						Description: `A list of the endpoints that are enabled in this dataset. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
							listvalidator.UniqueValues(),
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"regions": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
						Description: `A list of the AWS regions to query for this endpoint. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"api_azure_data_explorer_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"cluster": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Azure Data Explorer cluster name. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"database": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Azure Data Explorer database name. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"location": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Location (region) of the Azure Data Explorer cluster. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"table": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Name of the table to query. May be a simple name (Example: logs) or a Kusto query. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"timestamp_field": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Optional name of the field holding the timestamp of the event`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"timestamp_field_contents": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Default:     stringdefault.StaticString(`kusto_datetime`),
						Description: `Type of the data stored in the timestamp field. Default: "kusto_datetime"`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"api_azure_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"enabled_endpoints": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
						Description: `A list of the endpoints that are enabled in this dataset. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
							listvalidator.UniqueValues(),
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"subscription_ids": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
						Description: `A list of the subscription ids within the tenant to query with this dataset. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
							listvalidator.UniqueValues(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"api_elastic_search_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"index": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Name of the Elasticsearch index to search. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"timestamp_field": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Name of the field holding the timestamp of the event. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"api_gcp_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"endpoint_configs": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"endpoint_name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `GCP endpoint. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"region": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `GCP region (required for some endpoints)`,
								},
							},
						},
						Description: `A list of the endpoint configurations that are enabled in this dataset. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
							listvalidator.UniqueValues(),
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"api_google_workspace_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"enabled_endpoints": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
						Description: `A list of the endpoints that are enabled in this dataset. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
							listvalidator.UniqueValues(),
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"apihttp_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"enabled_endpoints": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
						Description: `A list of the endpoints that are enabled in this dataset. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"api_ms_graph_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"enabled_endpoints": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
						Description: `A list of the endpoints that are enabled in this dataset. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
							listvalidator.UniqueValues(),
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"api_okta_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"enabled_endpoints": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
						Description: `A list of the endpoints that are enabled in this dataset. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
							listvalidator.UniqueValues(),
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"api_open_search_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"index": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Name of the OpenSearch index to search. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"timestamp_field": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Default:     stringdefault.StaticString(`@timestamp`),
						Description: `Name of the field holding the timestamp of the event. Default: "@timestamp"`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"api_tailscale_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"enabled_endpoints": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
						Description: `A list of the endpoints that are enabled in this dataset. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
							listvalidator.UniqueValues(),
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"api_zoom_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"enabled_endpoints": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
						Description: `A list of the endpoints that are enabled in this dataset. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
							listvalidator.UniqueValues(),
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"aws_security_lake_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"filter": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Default:     stringdefault.StaticString(`true`),
						Description: `A JavaScript filter expression to be evaluated against the provided path. Default: "true"`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"path": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Default:     stringdefault.StaticString(`${vendor}/${sourceLocation}/${pathVersion}/region=${region}/accountId=${accountId}/eventDay=${_time:%Y%m%d}/`),
						Description: `The templated path under which to look for data, in each folder. Default: "${vendor}/${sourceLocation}/${pathVersion}/region=${region}/accountId=${accountId}/eventDay=${_time:%Y%m%d}/"`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"selected_buckets": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `S3 bucket name`,
									Validators: []validator.String{
										stringvalidator.UTF8LengthAtLeast(1),
									},
								},
								"region": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `AWS region where the bucket is located`,
								},
							},
						},
						Description: `A list of the buckets that should be searched by this dataset. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
							listvalidator.UniqueValues(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"azure_blob_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"container_name": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Azure Blob Storage container name. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"extra_paths": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"container_name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Name of the additional container. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.UTF8LengthAtLeast(1),
									},
								},
								"filter": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Default:     stringdefault.StaticString(`true`),
									Description: `A JavaScript filter expression to be evaluated against the provided path. Default: "true"`,
									Validators: []validator.String{
										stringvalidator.UTF8LengthAtLeast(1),
									},
								},
								"path": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Path inside the additional container`,
									Validators: []validator.String{
										stringvalidator.UTF8LengthAtLeast(1),
									},
								},
							},
						},
						Description: `Additional container paths that are included in this dataset`,
					},
					"filter": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Default:     stringdefault.StaticString(`true`),
						Description: `A JavaScript filter expression to be evaluated against the provided path. Default: "true"`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"path": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The templated path under which to look for data`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"skip_event_time_filter": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Whether to skip event time filtering`,
					},
					"storage_classes": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
						Description: `Storage classes to include in the search`,
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
							listvalidator.UniqueValues(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"click_house_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"database": schema.StringAttribute{
						Computed: true,
						Optional: true,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"table": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `May be a simple name (Example: logs) or a SQL query (Example: select * from logs). Results will be limited to 100K for tables without sorting keys and queries. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"timestamp_field": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Optional name of the column holding the timestamp of the event to query`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"cribl_leader_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"extra_paths": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"filter": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Default:     stringdefault.StaticString(`true`),
									Description: `A JavaScript filter expression to be evaluated against the provided path. Default: "true"`,
									Validators: []validator.String{
										stringvalidator.UTF8LengthAtLeast(1),
									},
								},
								"path": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The directory from which to collect data. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.UTF8LengthAtLeast(1),
									},
								},
							},
						},
						Description: `Additional paths that are included in this dataset`,
					},
					"filter": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Default:     stringdefault.StaticString(`true`),
						Description: `A JavaScript filter expression to be evaluated against the provided path. Default: "true"`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"path": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The directory from which to collect data. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Description: `Description of the dataset`,
			},
			"edge_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"filter": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Default:     stringdefault.StaticString(`true`),
						Description: `A JavaScript filter expression to be evaluated against the provided path. Default: "true"`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"fleets": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						Default:     listdefault.StaticValue(types.ListValueMust(types.StringType, []attr.Value{})),
						ElementType: types.StringType,
						Description: `Fleets to query. '*' for all`,
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"path": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The directory where data will be collected. Environment variables and templating are supported. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"gcs_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"bucket": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Google Cloud Storage bucket path. Templating is supported. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"extra_paths": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"bucket": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Google Cloud Storage bucket path. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.UTF8LengthAtLeast(1),
									},
								},
								"filter": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Default:     stringdefault.StaticString(`true`),
									Description: `A JavaScript filter expression to be evaluated against the provided path. Default: "true"`,
									Validators: []validator.String{
										stringvalidator.UTF8LengthAtLeast(1),
									},
								},
								"region": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Where the extra bucket is located`,
								},
							},
						},
						Description: `Additional bucket paths that are included in this dataset`,
					},
					"filter": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Default:     stringdefault.StaticString(`true`),
						Description: `A JavaScript filter expression to be evaluated against the provided path. Default: "true"`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"region": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Where the bucket is located`,
					},
					"skip_event_time_filter": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Whether to skip event time filtering`,
					},
					"storage_classes": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
						Description: `Storage classes to include in the search`,
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
							listvalidator.UniqueValues(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `Unique identifier for the dataset`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtMost(512),
					stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
				},
			},
			"meta_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"datasets": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
						Description: `IDs of the datasets that are searched by default. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
						},
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"prometheus_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"desired_num_data_points": schema.Float64Attribute{
						Computed:    true,
						Optional:    true,
						Default:     float64default.StaticFloat64(250),
						Description: `Number of data points you want in each result set. Defaults to 250. Can be overridden on the query with a 'step' predicate. Default: 250`,
						Validators: []validator.Float64{
							float64validator.Between(1, 11000),
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"metric_name_pattern": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Optional regular expression used to filter metric names. When defined, only metrics whose name matches this pattern will be searched.`,
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"step_mode": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Default:     stringdefault.StaticString(`exact`),
						Description: `How to calculate the "step," or time range increment per data point, for the Prometheus query request. Default: "exact"; must be one of ["exact", "nearest_unit"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"exact",
								"nearest_unit",
							),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"provider_id": schema.StringAttribute{
				Computed:    true,
				Description: `Dataset provider ID`,
			},
			"s3_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"auto_detect_region": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Whether to automatically detect the region`,
					},
					"bucket": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `S3 bucket name. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"extra_paths": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"auto_detect_region": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Whether to automatically detect the region`,
								},
								"bucket": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `S3 bucket name. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.UTF8LengthAtLeast(1),
									},
								},
								"filter": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Default:     stringdefault.StaticString(`true`),
									Description: `A JavaScript filter expression to be evaluated against the provided path. Default: "true"`,
									Validators: []validator.String{
										stringvalidator.UTF8LengthAtLeast(1),
									},
								},
								"path": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The templated path under which to look for data`,
									Validators: []validator.String{
										stringvalidator.UTF8LengthAtLeast(1),
									},
								},
								"region": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `AWS region where the bucket is located`,
								},
							},
						},
						Description: `Additional bucket paths that are included in this dataset`,
					},
					"filter": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Default:     stringdefault.StaticString(`true`),
						Description: `A JavaScript filter expression to be evaluated against the provided path. Default: "true"`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"path": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The templated path under which to look for data`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"region": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `AWS region where the bucket is located`,
					},
					"skip_event_time_filter": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Whether to skip event time filtering`,
					},
					"storage_classes": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
						Description: `Storage classes to include in the search`,
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
							listvalidator.UniqueValues(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("snowflake_dataset"),
					}...),
				},
			},
			"snowflake_dataset": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"database": schema.StringAttribute{
						Computed: true,
						Optional: true,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the dataset`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the dataset. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtMost(512),
							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
						},
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"created": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Creation timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"enable_acceleration": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Whether acceleration is enabled for this dataset. Default: false`,
							},
							"modified": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Last modification timestamp`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"tags": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Tags associated with the dataset`,
							},
						},
					},
					"provider_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider ID. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"role": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Optional Snowflake role to use when executing the statement`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"schema": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The schema in the database that contains the table(s) to query`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"table": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `May be a simple name (Example: logs) or a SQL query (Example: select * from logs). Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"timestamp_field": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Optional name of the column holding the timestamp of the event to query`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Dataset provider type, set automatically from the dataset provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"warehouse": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `If not set, uses DEFAULT_WAREHOUSE`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_dataset"),
						path.MatchRelative().AtParent().AtName("api_azure_dataset"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_gcp_dataset"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_dataset"),
						path.MatchRelative().AtParent().AtName("apihttp_dataset"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_dataset"),
						path.MatchRelative().AtParent().AtName("api_okta_dataset"),
						path.MatchRelative().AtParent().AtName("api_open_search_dataset"),
						path.MatchRelative().AtParent().AtName("api_tailscale_dataset"),
						path.MatchRelative().AtParent().AtName("api_zoom_dataset"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_dataset"),
						path.MatchRelative().AtParent().AtName("azure_blob_dataset"),
						path.MatchRelative().AtParent().AtName("click_house_dataset"),
						path.MatchRelative().AtParent().AtName("cribl_leader_dataset"),
						path.MatchRelative().AtParent().AtName("edge_dataset"),
						path.MatchRelative().AtParent().AtName("gcs_dataset"),
						path.MatchRelative().AtParent().AtName("meta_dataset"),
						path.MatchRelative().AtParent().AtName("prometheus_dataset"),
						path.MatchRelative().AtParent().AtName("s3_dataset"),
					}...),
				},
			},
			"type": schema.StringAttribute{
				Computed:    true,
				Description: `Dataset provider type, set automatically from the dataset provider`,
			},
		},
	}
}

func (r *SearchDatasetResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.CriblIo)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.CriblIo, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SearchDatasetResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *SearchDatasetResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedGenericDataset(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Datasets.CreateDataset(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Items != nil && len(res.Object.Items) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedGenericDataset(ctx, &res.Object.Items[0])...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SearchDatasetResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *SearchDatasetResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetDatasetByIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Datasets.GetDatasetByID(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Items != nil && len(res.Object.Items) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedGenericDataset(ctx, &res.Object.Items[0])...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SearchDatasetResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *SearchDatasetResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateDatasetByIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Datasets.UpdateDatasetByID(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Items != nil && len(res.Object.Items) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedGenericDataset(ctx, &res.Object.Items[0])...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SearchDatasetResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *SearchDatasetResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteDatasetByIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Datasets.DeleteDatasetByID(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *SearchDatasetResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}

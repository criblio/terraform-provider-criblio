// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *MappingRulesetDataSourceModel) RefreshFromOperationsGetAdminProductsMappingsByProductAndIDResponseBody(ctx context.Context, resp *operations.GetAdminProductsMappingsByProductAndIDResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.MappingRuleset{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.MappingRuleset

			items.Active = types.BoolPointerValue(itemsItem.Active)
			if itemsItem.Conf == nil {
				items.Conf = nil
			} else {
				items.Conf = &tfTypes.MappingRulesetConf{}
				items.Conf.Functions = []tfTypes.MappingRulesetFunctionConf{}

				for _, functionsItem := range itemsItem.Conf.Functions {
					var functions tfTypes.MappingRulesetFunctionConf

					functions.Conf.Add = []tfTypes.Add{}

					for _, addItem := range functionsItem.Conf.Add {
						var add tfTypes.Add

						add.Name = types.StringValue(addItem.Name)
						add.Value = types.StringValue(addItem.Value)

						functions.Conf.Add = append(functions.Conf.Add, add)
					}
					functions.Description = types.StringPointerValue(functionsItem.Description)
					functions.Disabled = types.BoolPointerValue(functionsItem.Disabled)
					functions.Filter = types.StringPointerValue(functionsItem.Filter)
					functions.Final = types.BoolPointerValue(functionsItem.Final)
					functions.GroupID = types.StringPointerValue(functionsItem.GroupID)
					functions.ID = types.StringValue(functionsItem.ID)

					items.Conf.Functions = append(items.Conf.Functions, functions)
				}
			}
			items.ID = types.StringValue(itemsItem.ID)

			r.Items = append(r.Items, items)
		}
	}

	return diags
}

func (r *MappingRulesetDataSourceModel) ToOperationsGetAdminProductsMappingsByProductAndIDRequest(ctx context.Context) (*operations.GetAdminProductsMappingsByProductAndIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	product := operations.GetAdminProductsMappingsByProductAndIDProduct(r.Product.ValueString())
	var id string
	id = r.ID.ValueString()

	out := operations.GetAdminProductsMappingsByProductAndIDRequest{
		Product: product,
		ID:      id,
	}

	return &out, diags
}

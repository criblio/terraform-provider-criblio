// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *MappingRulesetDataSourceModel) RefreshFromSharedMappingRuleset(ctx context.Context, resp *shared.MappingRuleset) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Active = types.BoolPointerValue(resp.Active)
	if resp.Conf == nil {
		r.Conf = nil
	} else {
		r.Conf = &tfTypes.MappingRulesetConf{}
		r.Conf.Functions = []tfTypes.MappingRulesetFunctionConf{}

		for _, functionsItem := range resp.Conf.Functions {
			var functions tfTypes.MappingRulesetFunctionConf

			functions.Conf.Add = []tfTypes.Add{}

			for _, addItem := range functionsItem.Conf.Add {
				var add tfTypes.Add

				add.Name = types.StringValue(addItem.Name)
				add.Value = types.StringValue(addItem.Value)

				functions.Conf.Add = append(functions.Conf.Add, add)
			}
			functions.Description = types.StringPointerValue(functionsItem.Description)
			functions.Disabled = types.BoolPointerValue(functionsItem.Disabled)
			functions.Filter = types.StringPointerValue(functionsItem.Filter)
			functions.Final = types.BoolPointerValue(functionsItem.Final)
			functions.GroupID = types.StringPointerValue(functionsItem.GroupID)
			functions.ID = types.StringValue(functionsItem.ID)

			r.Conf.Functions = append(r.Conf.Functions, functions)
		}
	}
	r.ID = types.StringValue(resp.ID)

	return diags
}

func (r *MappingRulesetDataSourceModel) ToOperationsGetAdminProductsMappingsByProductAndIDRequest(ctx context.Context) (*operations.GetAdminProductsMappingsByProductAndIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	product := operations.GetAdminProductsMappingsByProductAndIDProduct(r.Product.ValueString())
	var id string
	id = r.ID.ValueString()

	out := operations.GetAdminProductsMappingsByProductAndIDRequest{
		Product: product,
		ID:      id,
	}

	return &out, diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-criblio/internal/provider/types"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk/models/operations"
)

func (r *SubscriptionResourceModel) ToOperationsCreateSubscriptionRequest(ctx context.Context) (*operations.CreateSubscriptionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	disabled := new(bool)
	if !r.Disabled.IsUnknown() && !r.Disabled.IsNull() {
		*disabled = r.Disabled.ValueBool()
	} else {
		disabled = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	filter := new(string)
	if !r.Filter.IsUnknown() && !r.Filter.IsNull() {
		*filter = r.Filter.ValueString()
	} else {
		filter = nil
	}
	var pipeline string
	pipeline = r.Pipeline.ValueString()

	var id string
	id = r.ID.ValueString()

	out := operations.CreateSubscriptionRequest{
		GroupID:     groupID,
		Disabled:    disabled,
		Description: description,
		Filter:      filter,
		Pipeline:    pipeline,
		ID:          id,
	}

	return &out, diags
}

func (r *SubscriptionResourceModel) ToOperationsListSubscriptionRequest(ctx context.Context) (*operations.ListSubscriptionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	disabled := new(bool)
	if !r.Disabled.IsUnknown() && !r.Disabled.IsNull() {
		*disabled = r.Disabled.ValueBool()
	} else {
		disabled = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	filter := new(string)
	if !r.Filter.IsUnknown() && !r.Filter.IsNull() {
		*filter = r.Filter.ValueString()
	} else {
		filter = nil
	}
	pipeline := new(string)
	if !r.Pipeline.IsUnknown() && !r.Pipeline.IsNull() {
		*pipeline = r.Pipeline.ValueString()
	} else {
		pipeline = nil
	}
	out := operations.ListSubscriptionRequest{
		GroupID:     groupID,
		Disabled:    disabled,
		Description: description,
		Filter:      filter,
		Pipeline:    pipeline,
	}

	return &out, diags
}

func (r *SubscriptionResourceModel) ToOperationsUpdateSubscriptionByIDRequest(ctx context.Context) (*operations.UpdateSubscriptionByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.UpdateSubscriptionByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *SubscriptionResourceModel) ToOperationsDeleteSubscriptionByIDRequest(ctx context.Context) (*operations.DeleteSubscriptionByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.DeleteSubscriptionByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *SubscriptionResourceModel) RefreshFromOperationsCreateSubscriptionResponseBody(ctx context.Context, resp *operations.CreateSubscriptionResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.Subscription{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items tfTypes.Subscription
			if itemsItem.Consumer == nil {
				items.Consumer = nil
			} else {
				items.Consumer = &tfTypes.SubscriptionConsumer{}
				items.Consumer.Connections = []tfTypes.Connection{}
				for connectionsCount, connectionsItem := range itemsItem.Consumer.Connections {
					var connections tfTypes.Connection
					connections.Output = types.StringValue(connectionsItem.Output)
					connections.Pipeline = types.StringPointerValue(connectionsItem.Pipeline)
					if connectionsCount+1 > len(items.Consumer.Connections) {
						items.Consumer.Connections = append(items.Consumer.Connections, connections)
					} else {
						items.Consumer.Connections[connectionsCount].Output = connections.Output
						items.Consumer.Connections[connectionsCount].Pipeline = connections.Pipeline
					}
				}
				items.Consumer.Disabled = types.BoolPointerValue(itemsItem.Consumer.Disabled)
				items.Consumer.Type = types.StringPointerValue(itemsItem.Consumer.Type)
			}
			items.Description = types.StringPointerValue(itemsItem.Description)
			items.Disabled = types.BoolPointerValue(itemsItem.Disabled)
			items.Filter = types.StringPointerValue(itemsItem.Filter)
			items.ID = types.StringValue(itemsItem.ID)
			items.Pipeline = types.StringValue(itemsItem.Pipeline)
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items)
			} else {
				r.Items[itemsCount].Consumer = items.Consumer
				r.Items[itemsCount].Description = items.Description
				r.Items[itemsCount].Disabled = items.Disabled
				r.Items[itemsCount].Filter = items.Filter
				r.Items[itemsCount].ID = items.ID
				r.Items[itemsCount].Pipeline = items.Pipeline
			}
		}
	}

	return diags
}

func (r *SubscriptionResourceModel) RefreshFromOperationsListSubscriptionResponseBody(ctx context.Context, resp *operations.ListSubscriptionResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.Subscription{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items tfTypes.Subscription
			if itemsItem.Consumer == nil {
				items.Consumer = nil
			} else {
				items.Consumer = &tfTypes.SubscriptionConsumer{}
				items.Consumer.Connections = []tfTypes.Connection{}
				for connectionsCount, connectionsItem := range itemsItem.Consumer.Connections {
					var connections tfTypes.Connection
					connections.Output = types.StringValue(connectionsItem.Output)
					connections.Pipeline = types.StringPointerValue(connectionsItem.Pipeline)
					if connectionsCount+1 > len(items.Consumer.Connections) {
						items.Consumer.Connections = append(items.Consumer.Connections, connections)
					} else {
						items.Consumer.Connections[connectionsCount].Output = connections.Output
						items.Consumer.Connections[connectionsCount].Pipeline = connections.Pipeline
					}
				}
				items.Consumer.Disabled = types.BoolPointerValue(itemsItem.Consumer.Disabled)
				items.Consumer.Type = types.StringPointerValue(itemsItem.Consumer.Type)
			}
			items.Description = types.StringPointerValue(itemsItem.Description)
			items.Disabled = types.BoolPointerValue(itemsItem.Disabled)
			items.Filter = types.StringPointerValue(itemsItem.Filter)
			items.ID = types.StringValue(itemsItem.ID)
			items.Pipeline = types.StringValue(itemsItem.Pipeline)
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items)
			} else {
				r.Items[itemsCount].Consumer = items.Consumer
				r.Items[itemsCount].Description = items.Description
				r.Items[itemsCount].Disabled = items.Disabled
				r.Items[itemsCount].Filter = items.Filter
				r.Items[itemsCount].ID = items.ID
				r.Items[itemsCount].Pipeline = items.Pipeline
			}
		}
	}

	return diags
}

func (r *SubscriptionResourceModel) RefreshFromOperationsUpdateSubscriptionByIDResponseBody(ctx context.Context, resp *operations.UpdateSubscriptionByIDResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.Subscription{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items tfTypes.Subscription
			if itemsItem.Consumer == nil {
				items.Consumer = nil
			} else {
				items.Consumer = &tfTypes.SubscriptionConsumer{}
				items.Consumer.Connections = []tfTypes.Connection{}
				for connectionsCount, connectionsItem := range itemsItem.Consumer.Connections {
					var connections tfTypes.Connection
					connections.Output = types.StringValue(connectionsItem.Output)
					connections.Pipeline = types.StringPointerValue(connectionsItem.Pipeline)
					if connectionsCount+1 > len(items.Consumer.Connections) {
						items.Consumer.Connections = append(items.Consumer.Connections, connections)
					} else {
						items.Consumer.Connections[connectionsCount].Output = connections.Output
						items.Consumer.Connections[connectionsCount].Pipeline = connections.Pipeline
					}
				}
				items.Consumer.Disabled = types.BoolPointerValue(itemsItem.Consumer.Disabled)
				items.Consumer.Type = types.StringPointerValue(itemsItem.Consumer.Type)
			}
			items.Description = types.StringPointerValue(itemsItem.Description)
			items.Disabled = types.BoolPointerValue(itemsItem.Disabled)
			items.Filter = types.StringPointerValue(itemsItem.Filter)
			items.ID = types.StringValue(itemsItem.ID)
			items.Pipeline = types.StringValue(itemsItem.Pipeline)
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items)
			} else {
				r.Items[itemsCount].Consumer = items.Consumer
				r.Items[itemsCount].Description = items.Description
				r.Items[itemsCount].Disabled = items.Disabled
				r.Items[itemsCount].Filter = items.Filter
				r.Items[itemsCount].ID = items.ID
				r.Items[itemsCount].Pipeline = items.Pipeline
			}
		}
	}

	return diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SubscriptionResourceModel) RefreshFromOperationsGetSubscriptionByIDResponseBody(ctx context.Context, resp *operations.GetSubscriptionByIDResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.Subscription{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.Subscription

			items.Description = types.StringPointerValue(itemsItem.Description)
			items.Disabled = types.BoolPointerValue(itemsItem.Disabled)
			items.Filter = types.StringPointerValue(itemsItem.Filter)
			items.ID = types.StringValue(itemsItem.ID)
			items.Pipeline = types.StringValue(itemsItem.Pipeline)

			r.Items = append(r.Items, items)
		}
	}

	return diags
}

func (r *SubscriptionResourceModel) RefreshFromOperationsUpdateSubscriptionByIDResponseBody(ctx context.Context, resp *operations.UpdateSubscriptionByIDResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.Subscription{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.Subscription

			items.Description = types.StringPointerValue(itemsItem.Description)
			items.Disabled = types.BoolPointerValue(itemsItem.Disabled)
			items.Filter = types.StringPointerValue(itemsItem.Filter)
			items.ID = types.StringValue(itemsItem.ID)
			items.Pipeline = types.StringValue(itemsItem.Pipeline)

			r.Items = append(r.Items, items)
		}
	}

	return diags
}

func (r *SubscriptionResourceModel) RefreshFromSharedSubscription(ctx context.Context, resp *shared.Subscription) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Description = types.StringPointerValue(resp.Description)
	r.Disabled = types.BoolPointerValue(resp.Disabled)
	r.Filter = types.StringPointerValue(resp.Filter)
	r.ID = types.StringValue(resp.ID)
	r.Pipeline = types.StringValue(resp.Pipeline)

	return diags
}

func (r *SubscriptionResourceModel) ToOperationsCreateSubscriptionRequest(ctx context.Context) (*operations.CreateSubscriptionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	disabled := new(bool)
	if !r.Disabled.IsUnknown() && !r.Disabled.IsNull() {
		*disabled = r.Disabled.ValueBool()
	} else {
		disabled = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	filter := new(string)
	if !r.Filter.IsUnknown() && !r.Filter.IsNull() {
		*filter = r.Filter.ValueString()
	} else {
		filter = nil
	}
	var pipeline string
	pipeline = r.Pipeline.ValueString()

	var id string
	id = r.ID.ValueString()

	subscription, subscriptionDiags := r.ToSharedSubscription(ctx)
	diags.Append(subscriptionDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateSubscriptionRequest{
		GroupID:      groupID,
		Disabled:     disabled,
		Description:  description,
		Filter:       filter,
		Pipeline:     pipeline,
		ID:           id,
		Subscription: *subscription,
	}

	return &out, diags
}

func (r *SubscriptionResourceModel) ToOperationsDeleteSubscriptionByIDRequest(ctx context.Context) (*operations.DeleteSubscriptionByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.DeleteSubscriptionByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *SubscriptionResourceModel) ToOperationsGetSubscriptionByIDRequest(ctx context.Context) (*operations.GetSubscriptionByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.GetSubscriptionByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *SubscriptionResourceModel) ToOperationsUpdateSubscriptionByIDRequest(ctx context.Context) (*operations.UpdateSubscriptionByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.UpdateSubscriptionByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *SubscriptionResourceModel) ToSharedSubscription(ctx context.Context) (*shared.Subscription, diag.Diagnostics) {
	var diags diag.Diagnostics

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	disabled := new(bool)
	if !r.Disabled.IsUnknown() && !r.Disabled.IsNull() {
		*disabled = r.Disabled.ValueBool()
	} else {
		disabled = nil
	}
	filter := new(string)
	if !r.Filter.IsUnknown() && !r.Filter.IsNull() {
		*filter = r.Filter.ValueString()
	} else {
		filter = nil
	}
	var id string
	id = r.ID.ValueString()

	var pipeline string
	pipeline = r.Pipeline.ValueString()

	out := shared.Subscription{
		Description: description,
		Disabled:    disabled,
		Filter:      filter,
		ID:          id,
		Pipeline:    pipeline,
	}

	return &out, diags
}

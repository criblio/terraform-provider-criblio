// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-criblio/internal/provider/types"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk/models/shared"
)

func (r *EventBreakerRulesetResourceModel) ToSharedEventBreakerRuleset(ctx context.Context) (*shared.EventBreakerRuleset, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	lib := new(shared.Library)
	if !r.Lib.IsUnknown() && !r.Lib.IsNull() {
		*lib = shared.Library(r.Lib.ValueString())
	} else {
		lib = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	tags := new(string)
	if !r.Tags.IsUnknown() && !r.Tags.IsNull() {
		*tags = r.Tags.ValueString()
	} else {
		tags = nil
	}
	minRawLength := new(float64)
	if !r.MinRawLength.IsUnknown() && !r.MinRawLength.IsNull() {
		*minRawLength = r.MinRawLength.ValueFloat64()
	} else {
		minRawLength = nil
	}
	rules := make([]shared.EventBreakerRulesetRule, 0, len(r.Rules))
	for _, rulesItem := range r.Rules {
		var name string
		name = rulesItem.Name.ValueString()

		condition := new(string)
		if !rulesItem.Condition.IsUnknown() && !rulesItem.Condition.IsNull() {
			*condition = rulesItem.Condition.ValueString()
		} else {
			condition = nil
		}
		typeVar := new(shared.EventBreakerType)
		if !rulesItem.Type.IsUnknown() && !rulesItem.Type.IsNull() {
			*typeVar = shared.EventBreakerType(rulesItem.Type.ValueString())
		} else {
			typeVar = nil
		}
		timestampAnchorRegex := new(string)
		if !rulesItem.TimestampAnchorRegex.IsUnknown() && !rulesItem.TimestampAnchorRegex.IsNull() {
			*timestampAnchorRegex = rulesItem.TimestampAnchorRegex.ValueString()
		} else {
			timestampAnchorRegex = nil
		}
		typeVar1 := new(shared.EventBreakerRulesetRuleTimestampTypeTimestampType)
		if !rulesItem.Timestamp.Type.IsUnknown() && !rulesItem.Timestamp.Type.IsNull() {
			*typeVar1 = shared.EventBreakerRulesetRuleTimestampTypeTimestampType(rulesItem.Timestamp.Type.ValueString())
		} else {
			typeVar1 = nil
		}
		length := new(float64)
		if !rulesItem.Timestamp.Length.IsUnknown() && !rulesItem.Timestamp.Length.IsNull() {
			*length = rulesItem.Timestamp.Length.ValueFloat64()
		} else {
			length = nil
		}
		format := new(string)
		if !rulesItem.Timestamp.Format.IsUnknown() && !rulesItem.Timestamp.Format.IsNull() {
			*format = rulesItem.Timestamp.Format.ValueString()
		} else {
			format = nil
		}
		timestamp := shared.EventBreakerRulesetTimestampFormat{
			Type:   typeVar1,
			Length: length,
			Format: format,
		}
		timestampTimezone := new(string)
		if !rulesItem.TimestampTimezone.IsUnknown() && !rulesItem.TimestampTimezone.IsNull() {
			*timestampTimezone = rulesItem.TimestampTimezone.ValueString()
		} else {
			timestampTimezone = nil
		}
		timestampEarliest := new(string)
		if !rulesItem.TimestampEarliest.IsUnknown() && !rulesItem.TimestampEarliest.IsNull() {
			*timestampEarliest = rulesItem.TimestampEarliest.ValueString()
		} else {
			timestampEarliest = nil
		}
		timestampLatest := new(string)
		if !rulesItem.TimestampLatest.IsUnknown() && !rulesItem.TimestampLatest.IsNull() {
			*timestampLatest = rulesItem.TimestampLatest.ValueString()
		} else {
			timestampLatest = nil
		}
		maxEventBytes := new(float64)
		if !rulesItem.MaxEventBytes.IsUnknown() && !rulesItem.MaxEventBytes.IsNull() {
			*maxEventBytes = rulesItem.MaxEventBytes.ValueFloat64()
		} else {
			maxEventBytes = nil
		}
		fields := make([]shared.Field, 0, len(rulesItem.Fields))
		for _, fieldsItem := range rulesItem.Fields {
			name1 := new(string)
			if !fieldsItem.Name.IsUnknown() && !fieldsItem.Name.IsNull() {
				*name1 = fieldsItem.Name.ValueString()
			} else {
				name1 = nil
			}
			var value string
			value = fieldsItem.Value.ValueString()

			fields = append(fields, shared.Field{
				Name:  name1,
				Value: value,
			})
		}
		disabled := new(bool)
		if !rulesItem.Disabled.IsUnknown() && !rulesItem.Disabled.IsNull() {
			*disabled = rulesItem.Disabled.ValueBool()
		} else {
			disabled = nil
		}
		parserEnabled := new(bool)
		if !rulesItem.ParserEnabled.IsUnknown() && !rulesItem.ParserEnabled.IsNull() {
			*parserEnabled = rulesItem.ParserEnabled.ValueBool()
		} else {
			parserEnabled = nil
		}
		shouldUseDataRaw := new(bool)
		if !rulesItem.ShouldUseDataRaw.IsUnknown() && !rulesItem.ShouldUseDataRaw.IsNull() {
			*shouldUseDataRaw = rulesItem.ShouldUseDataRaw.ValueBool()
		} else {
			shouldUseDataRaw = nil
		}
		rules = append(rules, shared.EventBreakerRulesetRule{
			Name:                 name,
			Condition:            condition,
			Type:                 typeVar,
			TimestampAnchorRegex: timestampAnchorRegex,
			Timestamp:            timestamp,
			TimestampTimezone:    timestampTimezone,
			TimestampEarliest:    timestampEarliest,
			TimestampLatest:      timestampLatest,
			MaxEventBytes:        maxEventBytes,
			Fields:               fields,
			Disabled:             disabled,
			ParserEnabled:        parserEnabled,
			ShouldUseDataRaw:     shouldUseDataRaw,
		})
	}
	out := shared.EventBreakerRuleset{
		ID:           id,
		Lib:          lib,
		Description:  description,
		Tags:         tags,
		MinRawLength: minRawLength,
		Rules:        rules,
	}

	return &out, diags
}

func (r *EventBreakerRulesetResourceModel) ToOperationsCreateEventBreakerRulesetRequest(ctx context.Context) (*operations.CreateEventBreakerRulesetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	eventBreakerRuleset, eventBreakerRulesetDiags := r.ToSharedEventBreakerRuleset(ctx)
	diags.Append(eventBreakerRulesetDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateEventBreakerRulesetRequest{
		GroupID:             groupID,
		EventBreakerRuleset: *eventBreakerRuleset,
	}

	return &out, diags
}

func (r *EventBreakerRulesetResourceModel) ToOperationsUpdateEventBreakerRulesetByIDRequest(ctx context.Context) (*operations.UpdateEventBreakerRulesetByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	eventBreakerRuleset, eventBreakerRulesetDiags := r.ToSharedEventBreakerRuleset(ctx)
	diags.Append(eventBreakerRulesetDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateEventBreakerRulesetByIDRequest{
		ID:                  id,
		GroupID:             groupID,
		EventBreakerRuleset: *eventBreakerRuleset,
	}

	return &out, diags
}

func (r *EventBreakerRulesetResourceModel) ToOperationsListEventBreakerRulesetRequest(ctx context.Context) (*operations.ListEventBreakerRulesetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.ListEventBreakerRulesetRequest{
		GroupID: groupID,
	}

	return &out, diags
}

func (r *EventBreakerRulesetResourceModel) ToOperationsDeleteEventBreakerRulesetByIDRequest(ctx context.Context) (*operations.DeleteEventBreakerRulesetByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteEventBreakerRulesetByIDRequest{
		GroupID: groupID,
		ID:      id,
	}

	return &out, diags
}

func (r *EventBreakerRulesetResourceModel) RefreshFromSharedEventBreakerRuleset(ctx context.Context, resp *shared.EventBreakerRuleset) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Description = types.StringPointerValue(resp.Description)
	r.ID = types.StringValue(resp.ID)
	if resp.Lib != nil {
		r.Lib = types.StringValue(string(*resp.Lib))
	} else {
		r.Lib = types.StringNull()
	}
	r.MinRawLength = types.Float64PointerValue(resp.MinRawLength)
	r.Rules = []tfTypes.EventBreakerRulesetRule{}
	if len(r.Rules) > len(resp.Rules) {
		r.Rules = r.Rules[:len(resp.Rules)]
	}
	for rulesCount, rulesItem := range resp.Rules {
		var rules tfTypes.EventBreakerRulesetRule
		rules.Condition = types.StringPointerValue(rulesItem.Condition)
		rules.Disabled = types.BoolPointerValue(rulesItem.Disabled)
		rules.Fields = []tfTypes.Field{}
		for fieldsCount, fieldsItem := range rulesItem.Fields {
			var fields tfTypes.Field
			fields.Name = types.StringPointerValue(fieldsItem.Name)
			fields.Value = types.StringValue(fieldsItem.Value)
			if fieldsCount+1 > len(rules.Fields) {
				rules.Fields = append(rules.Fields, fields)
			} else {
				rules.Fields[fieldsCount].Name = fields.Name
				rules.Fields[fieldsCount].Value = fields.Value
			}
		}
		rules.MaxEventBytes = types.Float64PointerValue(rulesItem.MaxEventBytes)
		rules.Name = types.StringValue(rulesItem.Name)
		rules.ParserEnabled = types.BoolPointerValue(rulesItem.ParserEnabled)
		rules.ShouldUseDataRaw = types.BoolPointerValue(rulesItem.ShouldUseDataRaw)
		rules.Timestamp.Format = types.StringPointerValue(rulesItem.Timestamp.Format)
		rules.Timestamp.Length = types.Float64PointerValue(rulesItem.Timestamp.Length)
		if rulesItem.Timestamp.Type != nil {
			rules.Timestamp.Type = types.StringValue(string(*rulesItem.Timestamp.Type))
		} else {
			rules.Timestamp.Type = types.StringNull()
		}
		rules.TimestampAnchorRegex = types.StringPointerValue(rulesItem.TimestampAnchorRegex)
		rules.TimestampEarliest = types.StringPointerValue(rulesItem.TimestampEarliest)
		rules.TimestampLatest = types.StringPointerValue(rulesItem.TimestampLatest)
		rules.TimestampTimezone = types.StringPointerValue(rulesItem.TimestampTimezone)
		if rulesItem.Type != nil {
			rules.Type = types.StringValue(string(*rulesItem.Type))
		} else {
			rules.Type = types.StringNull()
		}
		if rulesCount+1 > len(r.Rules) {
			r.Rules = append(r.Rules, rules)
		} else {
			r.Rules[rulesCount].Condition = rules.Condition
			r.Rules[rulesCount].Disabled = rules.Disabled
			r.Rules[rulesCount].Fields = rules.Fields
			r.Rules[rulesCount].MaxEventBytes = rules.MaxEventBytes
			r.Rules[rulesCount].Name = rules.Name
			r.Rules[rulesCount].ParserEnabled = rules.ParserEnabled
			r.Rules[rulesCount].ShouldUseDataRaw = rules.ShouldUseDataRaw
			r.Rules[rulesCount].Timestamp = rules.Timestamp
			r.Rules[rulesCount].TimestampAnchorRegex = rules.TimestampAnchorRegex
			r.Rules[rulesCount].TimestampEarliest = rules.TimestampEarliest
			r.Rules[rulesCount].TimestampLatest = rules.TimestampLatest
			r.Rules[rulesCount].TimestampTimezone = rules.TimestampTimezone
			r.Rules[rulesCount].Type = rules.Type
		}
	}
	r.Tags = types.StringPointerValue(resp.Tags)

	return diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SearchDashboardDataSourceModel) RefreshFromSharedSearchDashboard(ctx context.Context, resp *shared.SearchDashboard) diag.Diagnostics {
	var diags diag.Diagnostics

	r.CacheTTLSeconds = types.Float64PointerValue(resp.CacheTTLSeconds)
	r.Category = types.StringPointerValue(resp.Category)
	r.Created = types.Float64Value(resp.Created)
	r.CreatedBy = types.StringValue(resp.CreatedBy)
	r.Description = types.StringPointerValue(resp.Description)
	r.DisplayCreatedBy = types.StringPointerValue(resp.DisplayCreatedBy)
	r.DisplayModifiedBy = types.StringPointerValue(resp.DisplayModifiedBy)
	r.Elements = []tfTypes.ElementUnion{}

	for _, elementsItem := range resp.Elements {
		var elements tfTypes.ElementUnion

		if elementsItem.Element != nil {
			elements.Element = &tfTypes.Element{}
			elements.Element.Description = types.StringPointerValue(elementsItem.Element.Description)
			elements.Element.Empty = types.BoolPointerValue(elementsItem.Element.Empty)
			elements.Element.HidePanel = types.BoolPointerValue(elementsItem.Element.HidePanel)
			elements.Element.HorizontalChart = types.BoolPointerValue(elementsItem.Element.HorizontalChart)
			elements.Element.ID = types.StringValue(elementsItem.Element.ID)
			elements.Element.Index = types.Float64PointerValue(elementsItem.Element.Index)
			elements.Element.InputID = types.StringPointerValue(elementsItem.Element.InputID)
			elements.Element.Layout.H = types.Float64Value(elementsItem.Element.Layout.H)
			elements.Element.Layout.W = types.Float64Value(elementsItem.Element.Layout.W)
			elements.Element.Layout.X = types.Float64Value(elementsItem.Element.Layout.X)
			elements.Element.Layout.Y = types.Float64Value(elementsItem.Element.Layout.Y)
			if elementsItem.Element.Search.SearchQuerySaved != nil {
				elements.Element.Search.SearchQuerySaved = &tfTypes.SearchQuerySaved{}
				elements.Element.Search.SearchQuerySaved.Query = types.StringPointerValue(elementsItem.Element.Search.SearchQuerySaved.Query)
				elements.Element.Search.SearchQuerySaved.QueryID = types.StringValue(elementsItem.Element.Search.SearchQuerySaved.QueryID)
				if elementsItem.Element.Search.SearchQuerySaved.RunMode != nil {
					elements.Element.Search.SearchQuerySaved.RunMode = types.StringValue(string(*elementsItem.Element.Search.SearchQuerySaved.RunMode))
				} else {
					elements.Element.Search.SearchQuerySaved.RunMode = types.StringNull()
				}
				elements.Element.Search.SearchQuerySaved.Type = types.StringValue(string(elementsItem.Element.Search.SearchQuerySaved.Type))
			}
			if elementsItem.Element.Search.SearchQueryInline != nil {
				elements.Element.Search.SearchQueryInline = &tfTypes.SearchQueryInline{}
				if elementsItem.Element.Search.SearchQueryInline.Earliest != nil {
					elements.Element.Search.SearchQueryInline.Earliest = &tfTypes.SearchQueryEarliest{}
					if elementsItem.Element.Search.SearchQueryInline.Earliest.Str != nil {
						elements.Element.Search.SearchQueryInline.Earliest.Str = types.StringPointerValue(elementsItem.Element.Search.SearchQueryInline.Earliest.Str)
					}
					if elementsItem.Element.Search.SearchQueryInline.Earliest.Number != nil {
						elements.Element.Search.SearchQueryInline.Earliest.Number = types.Float64PointerValue(elementsItem.Element.Search.SearchQueryInline.Earliest.Number)
					}
				}
				if elementsItem.Element.Search.SearchQueryInline.Latest != nil {
					elements.Element.Search.SearchQueryInline.Latest = &tfTypes.SearchQueryLatest{}
					if elementsItem.Element.Search.SearchQueryInline.Latest.Str != nil {
						elements.Element.Search.SearchQueryInline.Latest.Str = types.StringPointerValue(elementsItem.Element.Search.SearchQueryInline.Latest.Str)
					}
					if elementsItem.Element.Search.SearchQueryInline.Latest.Number != nil {
						elements.Element.Search.SearchQueryInline.Latest.Number = types.Float64PointerValue(elementsItem.Element.Search.SearchQueryInline.Latest.Number)
					}
				}
				elements.Element.Search.SearchQueryInline.ParentSearchID = types.StringPointerValue(elementsItem.Element.Search.SearchQueryInline.ParentSearchID)
				elements.Element.Search.SearchQueryInline.Query = types.StringPointerValue(elementsItem.Element.Search.SearchQueryInline.Query)
				elements.Element.Search.SearchQueryInline.SampleRate = types.Float64PointerValue(elementsItem.Element.Search.SearchQueryInline.SampleRate)
				elements.Element.Search.SearchQueryInline.Timezone = types.StringPointerValue(elementsItem.Element.Search.SearchQueryInline.Timezone)
				elements.Element.Search.SearchQueryInline.Type = types.StringValue(string(elementsItem.Element.Search.SearchQueryInline.Type))
			}
			if elementsItem.Element.Search.SearchQueryValues != nil {
				elements.Element.Search.SearchQueryValues = &tfTypes.SearchQueryValues{}
				elements.Element.Search.SearchQueryValues.Type = types.StringValue(string(elementsItem.Element.Search.SearchQueryValues.Type))
				elements.Element.Search.SearchQueryValues.Values = make([]types.String, 0, len(elementsItem.Element.Search.SearchQueryValues.Values))
				for _, v := range elementsItem.Element.Search.SearchQueryValues.Values {
					elements.Element.Search.SearchQueryValues.Values = append(elements.Element.Search.SearchQueryValues.Values, types.StringValue(v))
				}
			}
			elements.Element.Title = types.StringPointerValue(elementsItem.Element.Title)
			elements.Element.Type = types.StringValue(string(elementsItem.Element.Type))
			if len(elementsItem.Element.Value) > 0 {
				elements.Element.Value = make(map[string]types.String, len(elementsItem.Element.Value))
				for key, value := range elementsItem.Element.Value {
					result, _ := json.Marshal(value)
					elements.Element.Value[key] = types.StringValue(string(result))
				}
			}
			if elementsItem.Element.Variant != nil {
				elements.Element.Variant = types.StringValue(string(*elementsItem.Element.Variant))
			} else {
				elements.Element.Variant = types.StringNull()
			}
		}
		if elementsItem.ElementMarkdown != nil {
			elements.ElementMarkdown = &tfTypes.ElementMarkdown{}
			elements.ElementMarkdown.Description = types.StringPointerValue(elementsItem.ElementMarkdown.Description)
			elements.ElementMarkdown.Empty = types.BoolPointerValue(elementsItem.ElementMarkdown.Empty)
			elements.ElementMarkdown.HidePanel = types.BoolPointerValue(elementsItem.ElementMarkdown.HidePanel)
			elements.ElementMarkdown.ID = types.StringValue(elementsItem.ElementMarkdown.ID)
			elements.ElementMarkdown.Index = types.Float64PointerValue(elementsItem.ElementMarkdown.Index)
			elements.ElementMarkdown.Layout.H = types.Float64Value(elementsItem.ElementMarkdown.Layout.H)
			elements.ElementMarkdown.Layout.W = types.Float64Value(elementsItem.ElementMarkdown.Layout.W)
			elements.ElementMarkdown.Layout.X = types.Float64Value(elementsItem.ElementMarkdown.Layout.X)
			elements.ElementMarkdown.Layout.Y = types.Float64Value(elementsItem.ElementMarkdown.Layout.Y)
			elements.ElementMarkdown.Title = types.StringPointerValue(elementsItem.ElementMarkdown.Title)
			elements.ElementMarkdown.Type = types.StringValue(string(elementsItem.ElementMarkdown.Type))
			elements.ElementMarkdown.Value = types.StringPointerValue(elementsItem.ElementMarkdown.Value)
			elements.ElementMarkdown.Variant = types.StringValue(string(elementsItem.ElementMarkdown.Variant))
		}

		r.Elements = append(r.Elements, elements)
	}
	r.ID = types.StringValue(resp.ID)
	r.Modified = types.Float64Value(resp.Modified)
	r.ModifiedBy = types.StringPointerValue(resp.ModifiedBy)
	r.Name = types.StringValue(resp.Name)
	r.PackID = types.StringPointerValue(resp.PackID)
	r.RefreshRate = types.Float64PointerValue(resp.RefreshRate)
	r.ResolvedDatasetIds = make([]types.String, 0, len(resp.ResolvedDatasetIds))
	for _, v := range resp.ResolvedDatasetIds {
		r.ResolvedDatasetIds = append(r.ResolvedDatasetIds, types.StringValue(v))
	}
	if resp.Schedule == nil {
		r.Schedule = nil
	} else {
		r.Schedule = &tfTypes.SavedQuerySchedule{}
		r.Schedule.CronSchedule = types.StringValue(resp.Schedule.CronSchedule)
		r.Schedule.Enabled = types.BoolValue(resp.Schedule.Enabled)
		r.Schedule.KeepLastN = types.Float64Value(resp.Schedule.KeepLastN)
		r.Schedule.Notifications.Disabled = types.BoolValue(resp.Schedule.Notifications.Disabled)
		r.Schedule.Notifications.Items = []tfTypes.Notification{}

		for _, itemsItem := range resp.Schedule.Notifications.Items {
			var items tfTypes.Notification

			items.Condition = types.StringValue(itemsItem.Condition)
			if itemsItem.Conf == nil {
				items.Conf = nil
			} else {
				items.Conf = &tfTypes.ConditionSpecificConfigs{}
				items.Conf.Message = types.StringValue(itemsItem.Conf.Message)
				items.Conf.SavedQueryID = types.StringValue(itemsItem.Conf.SavedQueryID)
				items.Conf.TriggerComparator = types.StringPointerValue(itemsItem.Conf.TriggerComparator)
				items.Conf.TriggerCount = types.Float64PointerValue(itemsItem.Conf.TriggerCount)
				items.Conf.TriggerType = types.StringPointerValue(itemsItem.Conf.TriggerType)
			}
			items.Disabled = types.BoolPointerValue(itemsItem.Disabled)
			items.Group = types.StringPointerValue(itemsItem.Group)
			items.ID = types.StringValue(itemsItem.ID)
			items.Metadata = []tfTypes.MetadataItem{}

			for _, metadataItem := range itemsItem.Metadata {
				var metadata tfTypes.MetadataItem

				metadata.Name = types.StringValue(metadataItem.Name)
				metadata.Value = types.StringValue(metadataItem.Value)

				items.Metadata = append(items.Metadata, metadata)
			}
			items.TargetConfigs = []tfTypes.TargetConfig{}

			for _, targetConfigsItem := range itemsItem.TargetConfigs {
				var targetConfigs tfTypes.TargetConfig

				if targetConfigsItem.Conf == nil {
					targetConfigs.Conf = nil
				} else {
					targetConfigs.Conf = &tfTypes.TargetConfigConf{}
					if targetConfigsItem.Conf.AttachmentType != nil {
						targetConfigs.Conf.AttachmentType = types.StringValue(string(*targetConfigsItem.Conf.AttachmentType))
					} else {
						targetConfigs.Conf.AttachmentType = types.StringNull()
					}
					targetConfigs.Conf.IncludeResults = types.BoolPointerValue(targetConfigsItem.Conf.IncludeResults)
				}
				targetConfigs.ID = types.StringValue(targetConfigsItem.ID)

				items.TargetConfigs = append(items.TargetConfigs, targetConfigs)
			}
			items.Targets = make([]types.String, 0, len(itemsItem.Targets))
			for _, v := range itemsItem.Targets {
				items.Targets = append(items.Targets, types.StringValue(v))
			}

			r.Schedule.Notifications.Items = append(r.Schedule.Notifications.Items, items)
		}
		r.Schedule.ResumeMissed = types.BoolPointerValue(resp.Schedule.ResumeMissed)
		r.Schedule.ResumeOnBoot = types.BoolPointerValue(resp.Schedule.ResumeOnBoot)
		r.Schedule.Tz = types.StringValue(resp.Schedule.Tz)
	}

	return diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SearchDashboardDataSourceModel) RefreshFromSharedSearchDashboard(ctx context.Context, resp *shared.SearchDashboard) diag.Diagnostics {
	var diags diag.Diagnostics

	r.CacheTTLSeconds = types.Float64PointerValue(resp.CacheTTLSeconds)
	r.Category = types.StringPointerValue(resp.Category)
	r.Created = types.Float64PointerValue(resp.Created)
	r.CreatedBy = types.StringPointerValue(resp.CreatedBy)
	r.Description = types.StringPointerValue(resp.Description)
	r.DisplayCreatedBy = types.StringPointerValue(resp.DisplayCreatedBy)
	r.DisplayModifiedBy = types.StringPointerValue(resp.DisplayModifiedBy)
	r.Elements = []tfTypes.ElementUnion{}

	for _, elementsItem := range resp.Elements {
		var elements tfTypes.ElementUnion

		if elementsItem.Element != nil {
			elements.Element = &tfTypes.Element{}
			elements.Element.ColorPalette = types.StringValue(elementsItem.Element.ColorPalette)
			elements.Element.Description = types.StringPointerValue(elementsItem.Element.Description)
			elements.Element.Empty = types.BoolPointerValue(elementsItem.Element.Empty)
			elements.Element.H = types.Float64PointerValue(elementsItem.Element.H)
			elements.Element.HidePanel = types.BoolPointerValue(elementsItem.Element.HidePanel)
			elements.Element.HorizontalChart = types.BoolPointerValue(elementsItem.Element.HorizontalChart)
			elements.Element.ID = types.StringPointerValue(elementsItem.Element.ID)
			if elementsItem.Element.Layout == nil {
				elements.Element.Layout = nil
			} else {
				elements.Element.Layout = &tfTypes.DashboardLayout{}
				elements.Element.Layout.H = types.Float64Value(elementsItem.Element.Layout.H)
				elements.Element.Layout.W = types.Float64Value(elementsItem.Element.Layout.W)
				elements.Element.Layout.X = types.Float64Value(elementsItem.Element.Layout.X)
				elements.Element.Layout.Y = types.Float64Value(elementsItem.Element.Layout.Y)
			}
			if elementsItem.Element.Query != nil {
				elements.Element.Query = &tfTypes.SearchQuery{}
				if elementsItem.Element.Query.SearchQuerySaved != nil {
					elements.Element.Query.SearchQuerySaved = &tfTypes.SearchQuerySaved{}
					elements.Element.Query.SearchQuerySaved.Query = types.StringPointerValue(elementsItem.Element.Query.SearchQuerySaved.Query)
					elements.Element.Query.SearchQuerySaved.QueryID = types.StringValue(elementsItem.Element.Query.SearchQuerySaved.QueryID)
					if elementsItem.Element.Query.SearchQuerySaved.RunMode != nil {
						elements.Element.Query.SearchQuerySaved.RunMode = types.StringValue(string(*elementsItem.Element.Query.SearchQuerySaved.RunMode))
					} else {
						elements.Element.Query.SearchQuerySaved.RunMode = types.StringNull()
					}
					elements.Element.Query.SearchQuerySaved.Type = types.StringValue(string(elementsItem.Element.Query.SearchQuerySaved.Type))
				}
				if elementsItem.Element.Query.SearchQueryInline != nil {
					elements.Element.Query.SearchQueryInline = &tfTypes.SearchQueryInline{}
					if elementsItem.Element.Query.SearchQueryInline.Earliest != nil {
						elements.Element.Query.SearchQueryInline.Earliest = &tfTypes.SearchQueryEarliest{}
						if elementsItem.Element.Query.SearchQueryInline.Earliest.Str != nil {
							elements.Element.Query.SearchQueryInline.Earliest.Str = types.StringPointerValue(elementsItem.Element.Query.SearchQueryInline.Earliest.Str)
						}
						if elementsItem.Element.Query.SearchQueryInline.Earliest.Number != nil {
							elements.Element.Query.SearchQueryInline.Earliest.Number = types.Float64PointerValue(elementsItem.Element.Query.SearchQueryInline.Earliest.Number)
						}
					}
					if elementsItem.Element.Query.SearchQueryInline.Latest != nil {
						elements.Element.Query.SearchQueryInline.Latest = &tfTypes.SearchQueryLatest{}
						if elementsItem.Element.Query.SearchQueryInline.Latest.Str != nil {
							elements.Element.Query.SearchQueryInline.Latest.Str = types.StringPointerValue(elementsItem.Element.Query.SearchQueryInline.Latest.Str)
						}
						if elementsItem.Element.Query.SearchQueryInline.Latest.Number != nil {
							elements.Element.Query.SearchQueryInline.Latest.Number = types.Float64PointerValue(elementsItem.Element.Query.SearchQueryInline.Latest.Number)
						}
					}
					elements.Element.Query.SearchQueryInline.ParentSearchID = types.StringPointerValue(elementsItem.Element.Query.SearchQueryInline.ParentSearchID)
					elements.Element.Query.SearchQueryInline.Query = types.StringPointerValue(elementsItem.Element.Query.SearchQueryInline.Query)
					elements.Element.Query.SearchQueryInline.SampleRate = types.Float64PointerValue(elementsItem.Element.Query.SearchQueryInline.SampleRate)
					elements.Element.Query.SearchQueryInline.Timezone = types.StringPointerValue(elementsItem.Element.Query.SearchQueryInline.Timezone)
					elements.Element.Query.SearchQueryInline.Type = types.StringValue(string(elementsItem.Element.Query.SearchQueryInline.Type))
				}
				if elementsItem.Element.Query.SearchQueryValues != nil {
					elements.Element.Query.SearchQueryValues = &tfTypes.SearchQueryValues{}
					elements.Element.Query.SearchQueryValues.Type = types.StringValue(string(elementsItem.Element.Query.SearchQueryValues.Type))
					elements.Element.Query.SearchQueryValues.Values = make([]types.String, 0, len(elementsItem.Element.Query.SearchQueryValues.Values))
					for _, v := range elementsItem.Element.Query.SearchQueryValues.Values {
						elements.Element.Query.SearchQueryValues.Values = append(elements.Element.Query.SearchQueryValues.Values, types.StringValue(v))
					}
				}
			}
			elements.Element.Title = types.StringPointerValue(elementsItem.Element.Title)
			elements.Element.Type = types.StringValue(string(elementsItem.Element.Type))
			elements.Element.Variant = types.StringPointerValue(elementsItem.Element.Variant)
			elements.Element.W = types.Float64PointerValue(elementsItem.Element.W)
			elements.Element.X = types.Float64PointerValue(elementsItem.Element.X)
			if elementsItem.Element.XAxis == nil {
				elements.Element.XAxis = nil
			} else {
				elements.Element.XAxis = &tfTypes.XAxis{}
				elements.Element.XAxis.DataField = types.StringPointerValue(elementsItem.Element.XAxis.DataField)
				elements.Element.XAxis.Inverse = types.BoolPointerValue(elementsItem.Element.XAxis.Inverse)
				elements.Element.XAxis.LabelInterval = types.StringPointerValue(elementsItem.Element.XAxis.LabelInterval)
				elements.Element.XAxis.LabelOrientation = types.Float64PointerValue(elementsItem.Element.XAxis.LabelOrientation)
				elements.Element.XAxis.Name = types.StringPointerValue(elementsItem.Element.XAxis.Name)
				elements.Element.XAxis.Offset = types.Float64PointerValue(elementsItem.Element.XAxis.Offset)
				elements.Element.XAxis.Position = types.StringPointerValue(elementsItem.Element.XAxis.Position)
				elements.Element.XAxis.Type = types.StringPointerValue(elementsItem.Element.XAxis.Type)
			}
			elements.Element.Y = types.Float64PointerValue(elementsItem.Element.Y)
			if elementsItem.Element.YAxis == nil {
				elements.Element.YAxis = nil
			} else {
				elements.Element.YAxis = &tfTypes.YAxis{}
				elements.Element.YAxis.DataField = make([]types.String, 0, len(elementsItem.Element.YAxis.DataField))
				for _, v := range elementsItem.Element.YAxis.DataField {
					elements.Element.YAxis.DataField = append(elements.Element.YAxis.DataField, types.StringValue(v))
				}
				elements.Element.YAxis.Interval = types.Float64PointerValue(elementsItem.Element.YAxis.Interval)
				elements.Element.YAxis.Max = types.Float64PointerValue(elementsItem.Element.YAxis.Max)
				elements.Element.YAxis.Min = types.Float64PointerValue(elementsItem.Element.YAxis.Min)
				elements.Element.YAxis.Position = types.StringPointerValue(elementsItem.Element.YAxis.Position)
				elements.Element.YAxis.Scale = types.StringPointerValue(elementsItem.Element.YAxis.Scale)
				elements.Element.YAxis.SplitLine = types.BoolPointerValue(elementsItem.Element.YAxis.SplitLine)
				elements.Element.YAxis.Type = types.StringPointerValue(elementsItem.Element.YAxis.Type)
			}
		}

		r.Elements = append(r.Elements, elements)
	}
	r.ID = types.StringPointerValue(resp.ID)
	r.Modified = types.Float64PointerValue(resp.Modified)
	r.ModifiedBy = types.StringPointerValue(resp.ModifiedBy)
	r.Name = types.StringPointerValue(resp.Name)
	r.Owner = types.StringPointerValue(resp.Owner)
	r.Tags = make([]types.String, 0, len(resp.Tags))
	for _, v := range resp.Tags {
		r.Tags = append(r.Tags, types.StringValue(v))
	}

	return diags
}

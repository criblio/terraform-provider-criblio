// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SearchDashboardDataSourceModel) RefreshFromOperationsListSearchDashboardResponseBody(ctx context.Context, resp *operations.ListSearchDashboardResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.SearchDashboard{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.SearchDashboard

			items.CacheTTLSeconds = types.Float64PointerValue(itemsItem.CacheTTLSeconds)
			items.Category = types.StringPointerValue(itemsItem.Category)
			items.Created = types.Float64Value(itemsItem.Created)
			items.CreatedBy = types.StringValue(itemsItem.CreatedBy)
			items.Description = types.StringPointerValue(itemsItem.Description)
			items.DisplayCreatedBy = types.StringPointerValue(itemsItem.DisplayCreatedBy)
			items.DisplayModifiedBy = types.StringPointerValue(itemsItem.DisplayModifiedBy)
			items.Elements = []tfTypes.ElementUnion{}

			for _, elementsItem := range itemsItem.Elements {
				var elements tfTypes.ElementUnion

				if elementsItem.Element != nil {
					elements.Element = &tfTypes.Element{}
					elements.Element.ColorPalette = types.StringValue(elementsItem.Element.ColorPalette)
					elements.Element.Description = types.StringPointerValue(elementsItem.Element.Description)
					elements.Element.Empty = types.BoolPointerValue(elementsItem.Element.Empty)
					elements.Element.H = types.Float64PointerValue(elementsItem.Element.H)
					elements.Element.HidePanel = types.BoolPointerValue(elementsItem.Element.HidePanel)
					elements.Element.HorizontalChart = types.BoolPointerValue(elementsItem.Element.HorizontalChart)
					elements.Element.ID = types.StringValue(elementsItem.Element.ID)
					elements.Element.Layout.H = types.Float64Value(elementsItem.Element.Layout.H)
					elements.Element.Layout.W = types.Float64Value(elementsItem.Element.Layout.W)
					elements.Element.Layout.X = types.Float64Value(elementsItem.Element.Layout.X)
					elements.Element.Layout.Y = types.Float64Value(elementsItem.Element.Layout.Y)
					if elementsItem.Element.Query != nil {
						elements.Element.Query = &tfTypes.SearchQuery{}
						if elementsItem.Element.Query.SearchQuerySaved != nil {
							elements.Element.Query.SearchQuerySaved = &tfTypes.SearchQuerySaved{}
							elements.Element.Query.SearchQuerySaved.Query = types.StringPointerValue(elementsItem.Element.Query.SearchQuerySaved.Query)
							elements.Element.Query.SearchQuerySaved.QueryID = types.StringValue(elementsItem.Element.Query.SearchQuerySaved.QueryID)
							if elementsItem.Element.Query.SearchQuerySaved.RunMode != nil {
								elements.Element.Query.SearchQuerySaved.RunMode = types.StringValue(string(*elementsItem.Element.Query.SearchQuerySaved.RunMode))
							} else {
								elements.Element.Query.SearchQuerySaved.RunMode = types.StringNull()
							}
							elements.Element.Query.SearchQuerySaved.Type = types.StringValue(string(elementsItem.Element.Query.SearchQuerySaved.Type))
						}
						if elementsItem.Element.Query.SearchQueryInline != nil {
							elements.Element.Query.SearchQueryInline = &tfTypes.SearchQueryInline{}
							if elementsItem.Element.Query.SearchQueryInline.Earliest != nil {
								elements.Element.Query.SearchQueryInline.Earliest = &tfTypes.SearchQueryEarliest{}
								if elementsItem.Element.Query.SearchQueryInline.Earliest.Str != nil {
									elements.Element.Query.SearchQueryInline.Earliest.Str = types.StringPointerValue(elementsItem.Element.Query.SearchQueryInline.Earliest.Str)
								}
								if elementsItem.Element.Query.SearchQueryInline.Earliest.Number != nil {
									elements.Element.Query.SearchQueryInline.Earliest.Number = types.Float64PointerValue(elementsItem.Element.Query.SearchQueryInline.Earliest.Number)
								}
							}
							if elementsItem.Element.Query.SearchQueryInline.Latest != nil {
								elements.Element.Query.SearchQueryInline.Latest = &tfTypes.SearchQueryLatest{}
								if elementsItem.Element.Query.SearchQueryInline.Latest.Str != nil {
									elements.Element.Query.SearchQueryInline.Latest.Str = types.StringPointerValue(elementsItem.Element.Query.SearchQueryInline.Latest.Str)
								}
								if elementsItem.Element.Query.SearchQueryInline.Latest.Number != nil {
									elements.Element.Query.SearchQueryInline.Latest.Number = types.Float64PointerValue(elementsItem.Element.Query.SearchQueryInline.Latest.Number)
								}
							}
							elements.Element.Query.SearchQueryInline.ParentSearchID = types.StringPointerValue(elementsItem.Element.Query.SearchQueryInline.ParentSearchID)
							elements.Element.Query.SearchQueryInline.Query = types.StringPointerValue(elementsItem.Element.Query.SearchQueryInline.Query)
							elements.Element.Query.SearchQueryInline.SampleRate = types.Float64PointerValue(elementsItem.Element.Query.SearchQueryInline.SampleRate)
							elements.Element.Query.SearchQueryInline.Timezone = types.StringPointerValue(elementsItem.Element.Query.SearchQueryInline.Timezone)
							elements.Element.Query.SearchQueryInline.Type = types.StringValue(string(elementsItem.Element.Query.SearchQueryInline.Type))
						}
						if elementsItem.Element.Query.SearchQueryValues != nil {
							elements.Element.Query.SearchQueryValues = &tfTypes.SearchQueryValues{}
							elements.Element.Query.SearchQueryValues.Type = types.StringValue(string(elementsItem.Element.Query.SearchQueryValues.Type))
							elements.Element.Query.SearchQueryValues.Values = make([]types.String, 0, len(elementsItem.Element.Query.SearchQueryValues.Values))
							for _, v := range elementsItem.Element.Query.SearchQueryValues.Values {
								elements.Element.Query.SearchQueryValues.Values = append(elements.Element.Query.SearchQueryValues.Values, types.StringValue(v))
							}
						}
					}
					elements.Element.Title = types.StringPointerValue(elementsItem.Element.Title)
					elements.Element.Type = types.StringValue(string(elementsItem.Element.Type))
					elements.Element.Variant = types.StringValue(elementsItem.Element.Variant)
					elements.Element.W = types.Float64PointerValue(elementsItem.Element.W)
					elements.Element.X = types.Float64PointerValue(elementsItem.Element.X)
					if elementsItem.Element.XAxis == nil {
						elements.Element.XAxis = nil
					} else {
						elements.Element.XAxis = &tfTypes.XAxis{}
						elements.Element.XAxis.DataField = types.StringPointerValue(elementsItem.Element.XAxis.DataField)
						elements.Element.XAxis.Inverse = types.BoolPointerValue(elementsItem.Element.XAxis.Inverse)
						elements.Element.XAxis.LabelInterval = types.StringPointerValue(elementsItem.Element.XAxis.LabelInterval)
						elements.Element.XAxis.LabelOrientation = types.Float64PointerValue(elementsItem.Element.XAxis.LabelOrientation)
						elements.Element.XAxis.Name = types.StringPointerValue(elementsItem.Element.XAxis.Name)
						elements.Element.XAxis.Offset = types.Float64PointerValue(elementsItem.Element.XAxis.Offset)
						elements.Element.XAxis.Position = types.StringPointerValue(elementsItem.Element.XAxis.Position)
						elements.Element.XAxis.Type = types.StringPointerValue(elementsItem.Element.XAxis.Type)
					}
					elements.Element.Y = types.Float64PointerValue(elementsItem.Element.Y)
					if elementsItem.Element.YAxis == nil {
						elements.Element.YAxis = nil
					} else {
						elements.Element.YAxis = &tfTypes.YAxis{}
						elements.Element.YAxis.DataField = make([]types.String, 0, len(elementsItem.Element.YAxis.DataField))
						for _, v := range elementsItem.Element.YAxis.DataField {
							elements.Element.YAxis.DataField = append(elements.Element.YAxis.DataField, types.StringValue(v))
						}
						elements.Element.YAxis.Interval = types.Float64PointerValue(elementsItem.Element.YAxis.Interval)
						elements.Element.YAxis.Max = types.Float64PointerValue(elementsItem.Element.YAxis.Max)
						elements.Element.YAxis.Min = types.Float64PointerValue(elementsItem.Element.YAxis.Min)
						elements.Element.YAxis.Position = types.StringPointerValue(elementsItem.Element.YAxis.Position)
						elements.Element.YAxis.Scale = types.StringPointerValue(elementsItem.Element.YAxis.Scale)
						elements.Element.YAxis.SplitLine = types.BoolPointerValue(elementsItem.Element.YAxis.SplitLine)
						elements.Element.YAxis.Type = types.StringPointerValue(elementsItem.Element.YAxis.Type)
					}
				}

				items.Elements = append(items.Elements, elements)
			}
			items.ID = types.StringValue(itemsItem.ID)
			items.Modified = types.Float64Value(itemsItem.Modified)
			items.ModifiedBy = types.StringPointerValue(itemsItem.ModifiedBy)
			items.Name = types.StringValue(itemsItem.Name)
			items.Owner = types.StringPointerValue(itemsItem.Owner)
			items.PackID = types.StringPointerValue(itemsItem.PackID)
			items.RefreshRate = types.Float64PointerValue(itemsItem.RefreshRate)
			items.ResolvedDatasetIds = make([]types.String, 0, len(itemsItem.ResolvedDatasetIds))
			for _, v := range itemsItem.ResolvedDatasetIds {
				items.ResolvedDatasetIds = append(items.ResolvedDatasetIds, types.StringValue(v))
			}
			if itemsItem.Schedule == nil {
				items.Schedule = nil
			} else {
				items.Schedule = &tfTypes.SavedQuerySchedule{}
				items.Schedule.CronSchedule = types.StringValue(itemsItem.Schedule.CronSchedule)
				items.Schedule.Enabled = types.BoolValue(itemsItem.Schedule.Enabled)
				items.Schedule.KeepLastN = types.Float64Value(itemsItem.Schedule.KeepLastN)
				items.Schedule.Notifications.Disabled = types.BoolValue(itemsItem.Schedule.Notifications.Disabled)
				items.Schedule.Tz = types.StringValue(itemsItem.Schedule.Tz)
			}
			items.Tags = make([]types.String, 0, len(itemsItem.Tags))
			for _, v := range itemsItem.Tags {
				items.Tags = append(items.Tags, types.StringValue(v))
			}

			r.Items = append(r.Items, items)
		}
	}

	return diags
}

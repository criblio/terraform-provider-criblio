// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk/models/shared"
)

func (r *GrokResourceModel) ToSharedGrokFile(ctx context.Context) (*shared.GrokFile, diag.Diagnostics) {
	var diags diag.Diagnostics

	var content string
	content = r.Content.ValueString()

	var id string
	id = r.ID.ValueString()

	out := shared.GrokFile{
		Content: content,
		ID:      id,
	}

	return &out, diags
}

func (r *GrokResourceModel) ToOperationsCreateGrokFileRequest(ctx context.Context) (*operations.CreateGrokFileRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	grokFile, grokFileDiags := r.ToSharedGrokFile(ctx)
	diags.Append(grokFileDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateGrokFileRequest{
		GroupID:  groupID,
		GrokFile: *grokFile,
	}

	return &out, diags
}

func (r *GrokResourceModel) ToOperationsUpdateGrokFileByIDRequest(ctx context.Context) (*operations.UpdateGrokFileByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	var id string
	id = r.ID.ValueString()

	grokFile, grokFileDiags := r.ToSharedGrokFile(ctx)
	diags.Append(grokFileDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateGrokFileByIDRequest{
		GroupID:  groupID,
		ID:       id,
		GrokFile: *grokFile,
	}

	return &out, diags
}

func (r *GrokResourceModel) ToOperationsListGrokFileRequest(ctx context.Context) (*operations.ListGrokFileRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.ListGrokFileRequest{
		GroupID: groupID,
	}

	return &out, diags
}

func (r *GrokResourceModel) ToOperationsDeleteGrokFileByIDRequest(ctx context.Context) (*operations.DeleteGrokFileByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteGrokFileByIDRequest{
		GroupID: groupID,
		ID:      id,
	}

	return &out, diags
}

func (r *GrokResourceModel) RefreshFromSharedGrokFile(ctx context.Context, resp *shared.GrokFile) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Content = types.StringValue(resp.Content)
	r.ID = types.StringValue(resp.ID)

	return diags
}

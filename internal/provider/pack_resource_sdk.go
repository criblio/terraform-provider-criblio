// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *PackResourceModel) RefreshFromOperationsCreatePacksResponseBody(ctx context.Context, resp *operations.CreatePacksResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.PackInstallInfo{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.PackInstallInfo

			items.Author = types.StringPointerValue(itemsItem.Author)
			items.Description = types.StringPointerValue(itemsItem.Description)
			items.DisplayName = types.StringPointerValue(itemsItem.DisplayName)
			items.Exports = make([]types.String, 0, len(itemsItem.Exports))
			for _, v := range itemsItem.Exports {
				items.Exports = append(items.Exports, types.StringValue(v))
			}
			items.ID = types.StringValue(itemsItem.ID)
			items.Inputs = types.Float64PointerValue(itemsItem.Inputs)
			items.IsDisabled = types.BoolPointerValue(itemsItem.IsDisabled)
			items.MinLogStreamVersion = types.StringPointerValue(itemsItem.MinLogStreamVersion)
			items.Outputs = types.Float64PointerValue(itemsItem.Outputs)
			if len(itemsItem.Settings) > 0 {
				items.Settings = make(map[string]jsontypes.Normalized, len(itemsItem.Settings))
				for key, value := range itemsItem.Settings {
					result, _ := json.Marshal(value)
					items.Settings[key] = jsontypes.NewNormalizedValue(string(result))
				}
			}
			items.Source = types.StringPointerValue(itemsItem.Source)
			items.Spec = types.StringPointerValue(itemsItem.Spec)
			if itemsItem.Tags == nil {
				items.Tags = nil
			} else {
				items.Tags = &tfTypes.PackInstallInfoTags{}
				items.Tags.DataType = make([]types.String, 0, len(itemsItem.Tags.DataType))
				for _, v := range itemsItem.Tags.DataType {
					items.Tags.DataType = append(items.Tags.DataType, types.StringValue(v))
				}
				items.Tags.Domain = make([]types.String, 0, len(itemsItem.Tags.Domain))
				for _, v := range itemsItem.Tags.Domain {
					items.Tags.Domain = append(items.Tags.Domain, types.StringValue(v))
				}
				items.Tags.Streamtags = make([]types.String, 0, len(itemsItem.Tags.Streamtags))
				for _, v := range itemsItem.Tags.Streamtags {
					items.Tags.Streamtags = append(items.Tags.Streamtags, types.StringValue(v))
				}
				items.Tags.Technology = make([]types.String, 0, len(itemsItem.Tags.Technology))
				for _, v := range itemsItem.Tags.Technology {
					items.Tags.Technology = append(items.Tags.Technology, types.StringValue(v))
				}
			}
			items.Version = types.StringPointerValue(itemsItem.Version)
			warningsResult, _ := json.Marshal(itemsItem.Warnings)
			items.Warnings = jsontypes.NewNormalizedValue(string(warningsResult))

			r.Items = append(r.Items, items)
		}
	}

	return diags
}

func (r *PackResourceModel) RefreshFromOperationsGetPacksByIDResponseBody(ctx context.Context, resp *operations.GetPacksByIDResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.PackInstallInfo{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.PackInstallInfo

			items.Author = types.StringPointerValue(itemsItem.Author)
			items.Description = types.StringPointerValue(itemsItem.Description)
			items.DisplayName = types.StringPointerValue(itemsItem.DisplayName)
			items.Exports = make([]types.String, 0, len(itemsItem.Exports))
			for _, v := range itemsItem.Exports {
				items.Exports = append(items.Exports, types.StringValue(v))
			}
			items.ID = types.StringValue(itemsItem.ID)
			items.Inputs = types.Float64PointerValue(itemsItem.Inputs)
			items.IsDisabled = types.BoolPointerValue(itemsItem.IsDisabled)
			items.MinLogStreamVersion = types.StringPointerValue(itemsItem.MinLogStreamVersion)
			items.Outputs = types.Float64PointerValue(itemsItem.Outputs)
			if len(itemsItem.Settings) > 0 {
				items.Settings = make(map[string]jsontypes.Normalized, len(itemsItem.Settings))
				for key, value := range itemsItem.Settings {
					result, _ := json.Marshal(value)
					items.Settings[key] = jsontypes.NewNormalizedValue(string(result))
				}
			}
			items.Source = types.StringPointerValue(itemsItem.Source)
			items.Spec = types.StringPointerValue(itemsItem.Spec)
			if itemsItem.Tags == nil {
				items.Tags = nil
			} else {
				items.Tags = &tfTypes.PackInstallInfoTags{}
				items.Tags.DataType = make([]types.String, 0, len(itemsItem.Tags.DataType))
				for _, v := range itemsItem.Tags.DataType {
					items.Tags.DataType = append(items.Tags.DataType, types.StringValue(v))
				}
				items.Tags.Domain = make([]types.String, 0, len(itemsItem.Tags.Domain))
				for _, v := range itemsItem.Tags.Domain {
					items.Tags.Domain = append(items.Tags.Domain, types.StringValue(v))
				}
				items.Tags.Streamtags = make([]types.String, 0, len(itemsItem.Tags.Streamtags))
				for _, v := range itemsItem.Tags.Streamtags {
					items.Tags.Streamtags = append(items.Tags.Streamtags, types.StringValue(v))
				}
				items.Tags.Technology = make([]types.String, 0, len(itemsItem.Tags.Technology))
				for _, v := range itemsItem.Tags.Technology {
					items.Tags.Technology = append(items.Tags.Technology, types.StringValue(v))
				}
			}
			items.Version = types.StringPointerValue(itemsItem.Version)
			warningsResult, _ := json.Marshal(itemsItem.Warnings)
			items.Warnings = jsontypes.NewNormalizedValue(string(warningsResult))

			r.Items = append(r.Items, items)
		}
	}

	return diags
}

func (r *PackResourceModel) RefreshFromOperationsUpdatePacksByIDResponseBody(ctx context.Context, resp *operations.UpdatePacksByIDResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.PackInstallInfo{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.PackInstallInfo

			items.Author = types.StringPointerValue(itemsItem.Author)
			items.Description = types.StringPointerValue(itemsItem.Description)
			items.DisplayName = types.StringPointerValue(itemsItem.DisplayName)
			items.Exports = make([]types.String, 0, len(itemsItem.Exports))
			for _, v := range itemsItem.Exports {
				items.Exports = append(items.Exports, types.StringValue(v))
			}
			items.ID = types.StringValue(itemsItem.ID)
			items.Inputs = types.Float64PointerValue(itemsItem.Inputs)
			items.IsDisabled = types.BoolPointerValue(itemsItem.IsDisabled)
			items.MinLogStreamVersion = types.StringPointerValue(itemsItem.MinLogStreamVersion)
			items.Outputs = types.Float64PointerValue(itemsItem.Outputs)
			if len(itemsItem.Settings) > 0 {
				items.Settings = make(map[string]jsontypes.Normalized, len(itemsItem.Settings))
				for key, value := range itemsItem.Settings {
					result, _ := json.Marshal(value)
					items.Settings[key] = jsontypes.NewNormalizedValue(string(result))
				}
			}
			items.Source = types.StringPointerValue(itemsItem.Source)
			items.Spec = types.StringPointerValue(itemsItem.Spec)
			if itemsItem.Tags == nil {
				items.Tags = nil
			} else {
				items.Tags = &tfTypes.PackInstallInfoTags{}
				items.Tags.DataType = make([]types.String, 0, len(itemsItem.Tags.DataType))
				for _, v := range itemsItem.Tags.DataType {
					items.Tags.DataType = append(items.Tags.DataType, types.StringValue(v))
				}
				items.Tags.Domain = make([]types.String, 0, len(itemsItem.Tags.Domain))
				for _, v := range itemsItem.Tags.Domain {
					items.Tags.Domain = append(items.Tags.Domain, types.StringValue(v))
				}
				items.Tags.Streamtags = make([]types.String, 0, len(itemsItem.Tags.Streamtags))
				for _, v := range itemsItem.Tags.Streamtags {
					items.Tags.Streamtags = append(items.Tags.Streamtags, types.StringValue(v))
				}
				items.Tags.Technology = make([]types.String, 0, len(itemsItem.Tags.Technology))
				for _, v := range itemsItem.Tags.Technology {
					items.Tags.Technology = append(items.Tags.Technology, types.StringValue(v))
				}
			}
			items.Version = types.StringPointerValue(itemsItem.Version)
			warningsResult, _ := json.Marshal(itemsItem.Warnings)
			items.Warnings = jsontypes.NewNormalizedValue(string(warningsResult))

			r.Items = append(r.Items, items)
		}
	}

	return diags
}

func (r *PackResourceModel) ToOperationsCreatePacksRequest(ctx context.Context) (*operations.CreatePacksRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	filename := new(string)
	if !r.Filename.IsUnknown() && !r.Filename.IsNull() {
		*filename = r.Filename.ValueString()
	} else {
		filename = nil
	}
	disabled := new(bool)
	if !r.Disabled.IsUnknown() && !r.Disabled.IsNull() {
		*disabled = r.Disabled.ValueBool()
	} else {
		disabled = nil
	}
	packRequestBody, packRequestBodyDiags := r.ToSharedPackRequestBody(ctx)
	diags.Append(packRequestBodyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreatePacksRequest{
		GroupID:         groupID,
		Filename:        filename,
		Disabled:        disabled,
		PackRequestBody: *packRequestBody,
	}

	return &out, diags
}

func (r *PackResourceModel) ToOperationsDeletePacksByIDRequest(ctx context.Context) (*operations.DeletePacksByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	disabled := new(bool)
	if !r.Disabled.IsUnknown() && !r.Disabled.IsNull() {
		*disabled = r.Disabled.ValueBool()
	} else {
		disabled = nil
	}
	out := operations.DeletePacksByIDRequest{
		ID:       id,
		GroupID:  groupID,
		Disabled: disabled,
	}

	return &out, diags
}

func (r *PackResourceModel) ToOperationsGetPacksByIDRequest(ctx context.Context) (*operations.GetPacksByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	disabled := new(bool)
	if !r.Disabled.IsUnknown() && !r.Disabled.IsNull() {
		*disabled = r.Disabled.ValueBool()
	} else {
		disabled = nil
	}
	var id string
	id = r.ID.ValueString()

	out := operations.GetPacksByIDRequest{
		GroupID:  groupID,
		Disabled: disabled,
		ID:       id,
	}

	return &out, diags
}

func (r *PackResourceModel) ToOperationsUpdatePacksByIDRequest(ctx context.Context) (*operations.UpdatePacksByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	source := new(string)
	if !r.Source.IsUnknown() && !r.Source.IsNull() {
		*source = r.Source.ValueString()
	} else {
		source = nil
	}
	spec := new(string)
	if !r.Spec.IsUnknown() && !r.Spec.IsNull() {
		*spec = r.Spec.ValueString()
	} else {
		spec = nil
	}
	var groupID string
	groupID = r.GroupID.ValueString()

	disabled := new(bool)
	if !r.Disabled.IsUnknown() && !r.Disabled.IsNull() {
		*disabled = r.Disabled.ValueBool()
	} else {
		disabled = nil
	}
	out := operations.UpdatePacksByIDRequest{
		ID:       id,
		Source:   source,
		Spec:     spec,
		GroupID:  groupID,
		Disabled: disabled,
	}

	return &out, diags
}

func (r *PackResourceModel) ToSharedPackRequestBody(ctx context.Context) (*shared.PackRequestBody, diag.Diagnostics) {
	var diags diag.Diagnostics

	allowCustomFunctions := new(bool)
	if !r.AllowCustomFunctions.IsUnknown() && !r.AllowCustomFunctions.IsNull() {
		*allowCustomFunctions = r.AllowCustomFunctions.ValueBool()
	} else {
		allowCustomFunctions = nil
	}
	author := new(string)
	if !r.Author.IsUnknown() && !r.Author.IsNull() {
		*author = r.Author.ValueString()
	} else {
		author = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	exports := make([]string, 0, len(r.Exports))
	for _, exportsItem := range r.Exports {
		exports = append(exports, exportsItem.ValueString())
	}
	force := new(bool)
	if !r.Force.IsUnknown() && !r.Force.IsNull() {
		*force = r.Force.ValueBool()
	} else {
		force = nil
	}
	var id string
	id = r.ID.ValueString()

	isDisabled := new(bool)
	if !r.IsDisabled.IsUnknown() && !r.IsDisabled.IsNull() {
		*isDisabled = r.IsDisabled.ValueBool()
	} else {
		isDisabled = nil
	}
	inputs := new(float64)
	if !r.Inputs.IsUnknown() && !r.Inputs.IsNull() {
		*inputs = r.Inputs.ValueFloat64()
	} else {
		inputs = nil
	}
	minLogStreamVersion := new(string)
	if !r.MinLogStreamVersion.IsUnknown() && !r.MinLogStreamVersion.IsNull() {
		*minLogStreamVersion = r.MinLogStreamVersion.ValueString()
	} else {
		minLogStreamVersion = nil
	}
	outputs := new(float64)
	if !r.Outputs.IsUnknown() && !r.Outputs.IsNull() {
		*outputs = r.Outputs.ValueFloat64()
	} else {
		outputs = nil
	}
	source := new(string)
	if !r.Source.IsUnknown() && !r.Source.IsNull() {
		*source = r.Source.ValueString()
	} else {
		source = nil
	}
	spec := new(string)
	if !r.Spec.IsUnknown() && !r.Spec.IsNull() {
		*spec = r.Spec.ValueString()
	} else {
		spec = nil
	}
	var tags *shared.PackRequestBodyTags
	if r.Tags != nil {
		dataType := make([]string, 0, len(r.Tags.DataType))
		for _, dataTypeItem := range r.Tags.DataType {
			dataType = append(dataType, dataTypeItem.ValueString())
		}
		domain := make([]string, 0, len(r.Tags.Domain))
		for _, domainItem := range r.Tags.Domain {
			domain = append(domain, domainItem.ValueString())
		}
		streamtags := make([]string, 0, len(r.Tags.Streamtags))
		for _, streamtagsItem := range r.Tags.Streamtags {
			streamtags = append(streamtags, streamtagsItem.ValueString())
		}
		technology := make([]string, 0, len(r.Tags.Technology))
		for _, technologyItem := range r.Tags.Technology {
			technology = append(technology, technologyItem.ValueString())
		}
		tags = &shared.PackRequestBodyTags{
			DataType:   dataType,
			Domain:     domain,
			Streamtags: streamtags,
			Technology: technology,
		}
	}
	version := new(string)
	if !r.Version.IsUnknown() && !r.Version.IsNull() {
		*version = r.Version.ValueString()
	} else {
		version = nil
	}
	out := shared.PackRequestBody{
		AllowCustomFunctions: allowCustomFunctions,
		Author:               author,
		Description:          description,
		DisplayName:          displayName,
		Exports:              exports,
		Force:                force,
		ID:                   id,
		IsDisabled:           isDisabled,
		Inputs:               inputs,
		MinLogStreamVersion:  minLogStreamVersion,
		Outputs:              outputs,
		Source:               source,
		Spec:                 spec,
		Tags:                 tags,
		Version:              version,
	}

	return &out, diags
}

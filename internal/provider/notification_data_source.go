// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"regexp"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &NotificationDataSource{}
var _ datasource.DataSourceWithConfigure = &NotificationDataSource{}

func NewNotificationDataSource() datasource.DataSource {
	return &NotificationDataSource{}
}

// NotificationDataSource is the data source implementation.
type NotificationDataSource struct {
	// Provider configured SDK client.
	client *sdk.CriblIo
}

// NotificationDataSourceModel describes the data model.
type NotificationDataSourceModel struct {
	Condition     types.String                       `tfsdk:"condition"`
	Conf          *tfTypes.ConditionSpecificConfigs  `tfsdk:"conf"`
	Disabled      types.Bool                         `tfsdk:"disabled"`
	Group         types.String                       `tfsdk:"group"`
	ID            types.String                       `tfsdk:"id"`
	Metadata      []tfTypes.MetadataItem             `tfsdk:"metadata"`
	TargetConfigs []tfTypes.NotificationTargetConfig `tfsdk:"target_configs"`
	Targets       []types.String                     `tfsdk:"targets"`
}

// Metadata returns the data source type name.
func (r *NotificationDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_notification"
}

// Schema defines the schema for the data source.
func (r *NotificationDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Notification DataSource",

		Attributes: map[string]schema.Attribute{
			"condition": schema.StringAttribute{
				Computed:    true,
				Description: `The condition that triggers this notification`,
			},
			"conf": schema.SingleNestedAttribute{
				Computed:    true,
				Description: `Configuration specific to the notification condition`,
			},
			"disabled": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether the notification is disabled`,
			},
			"group": schema.StringAttribute{
				Computed:    true,
				Description: `Group identifier for the notification`,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `Unique ID to GET`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtMost(512),
					stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9_-]+$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z0-9_-]+$`).String()),
				},
			},
			"metadata": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Metadata field name`,
						},
						"value": schema.StringAttribute{
							Computed:    true,
							Description: `Metadata field value`,
						},
					},
				},
				Description: `Additional metadata for the notification`,
			},
			"target_configs": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"conf": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"body": schema.StringAttribute{
									Computed:    true,
									Description: `Email body`,
								},
								"email_recipient": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"bcc": schema.StringAttribute{
											Computed:    true,
											Description: `Bcc: Recipients' email addresses`,
										},
										"cc": schema.StringAttribute{
											Computed:    true,
											Description: `Cc: Recipients' email addresses`,
										},
										"to": schema.StringAttribute{
											Computed:    true,
											Description: `Recipients' email addresses`,
										},
									},
								},
								"subject": schema.StringAttribute{
									Computed:    true,
									Description: `Email subject`,
								},
							},
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `ID of the notification target`,
						},
					},
				},
				Description: `Configuration for notification targets`,
			},
			"targets": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `Targets to send any notifications to`,
			},
		},
	}
}

func (r *NotificationDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.CriblIo)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.CriblIo, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NotificationDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *NotificationDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetNotificationByIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Notifications.GetNotificationByID(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Items != nil && len(res.Object.Items) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedNotification(ctx, &res.Object.Items[0])...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

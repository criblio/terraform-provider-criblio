// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *CriblLakeHouseResourceModel) RefreshFromOperationsGetDefaultLakeLakehouseByIDResponseBody(ctx context.Context, resp *operations.GetDefaultLakeLakehouseByIDResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.Lakehouse{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.Lakehouse

			items.ID = types.StringValue(itemsItem.ID)
			items.Description = types.StringPointerValue(itemsItem.Description)
			items.Status = types.StringPointerValue(itemsItem.Status)
			if itemsItem.TierSize != nil {
				items.TierSize = types.StringValue(string(*itemsItem.TierSize))
			} else {
				items.TierSize = types.StringNull()
			}

			r.Items = append(r.Items, items)
		}
	}

	return diags
}

func (r *CriblLakeHouseResourceModel) RefreshFromSharedLakehouse(ctx context.Context, resp *shared.Lakehouse) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Description = types.StringPointerValue(resp.Description)
	r.ID = types.StringValue(resp.ID)
	r.Status = types.StringPointerValue(resp.Status)
	if resp.TierSize != nil {
		r.TierSize = types.StringValue(string(*resp.TierSize))
	} else {
		r.TierSize = types.StringNull()
	}

	return diags
}

func (r *CriblLakeHouseResourceModel) ToOperationsDeleteDefaultLakeLakehouseByIDRequest(ctx context.Context) (*operations.DeleteDefaultLakeLakehouseByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteDefaultLakeLakehouseByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *CriblLakeHouseResourceModel) ToOperationsGetDefaultLakeLakehouseByIDRequest(ctx context.Context) (*operations.GetDefaultLakeLakehouseByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetDefaultLakeLakehouseByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *CriblLakeHouseResourceModel) ToOperationsUpdateDefaultLakeLakehouseByIDRequest(ctx context.Context) (*operations.UpdateDefaultLakeLakehouseByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	lakehouse, lakehouseDiags := r.ToSharedLakehouse(ctx)
	diags.Append(lakehouseDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateDefaultLakeLakehouseByIDRequest{
		ID:        id,
		Lakehouse: *lakehouse,
	}

	return &out, diags
}

func (r *CriblLakeHouseResourceModel) ToSharedLakehouse(ctx context.Context) (*shared.Lakehouse, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	status := new(string)
	if !r.Status.IsUnknown() && !r.Status.IsNull() {
		*status = r.Status.ValueString()
	} else {
		status = nil
	}
	tierSize := new(shared.TierSize)
	if !r.TierSize.IsUnknown() && !r.TierSize.IsNull() {
		*tierSize = shared.TierSize(r.TierSize.ValueString())
	} else {
		tierSize = nil
	}
	out := shared.Lakehouse{
		ID:          id,
		Description: description,
		Status:      status,
		TierSize:    tierSize,
	}

	return &out, diags
}

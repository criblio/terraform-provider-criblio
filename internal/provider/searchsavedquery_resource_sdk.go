// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SearchSavedQueryResourceModel) RefreshFromOperationsGetSavedQueryByIDResponseBody(ctx context.Context, resp *operations.GetSavedQueryByIDResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.SavedQuery{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.SavedQuery

			items.Name = types.StringValue(itemsItem.Name)
			items.IsPrivate = types.BoolPointerValue(itemsItem.IsPrivate)
			items.Query = types.StringValue(itemsItem.Query)
			items.Earliest = types.StringPointerValue(itemsItem.Earliest)
			items.Latest = types.StringPointerValue(itemsItem.Latest)
			items.Description = types.StringPointerValue(itemsItem.Description)
			if itemsItem.Schedule == nil {
				items.Schedule = nil
			} else {
				items.Schedule = &tfTypes.SavedQuerySchedule{}
				items.Schedule.CronSchedule = types.StringValue(itemsItem.Schedule.CronSchedule)
				items.Schedule.Enabled = types.BoolValue(itemsItem.Schedule.Enabled)
				items.Schedule.KeepLastN = types.Float64Value(itemsItem.Schedule.KeepLastN)
				items.Schedule.Notifications.Disabled = types.BoolValue(itemsItem.Schedule.Notifications.Disabled)
				items.Schedule.Tz = types.StringValue(itemsItem.Schedule.Tz)
			}
			items.ID = types.StringValue(itemsItem.ID)

			r.Items = append(r.Items, items)
		}
	}

	return diags
}

func (r *SearchSavedQueryResourceModel) RefreshFromSharedSavedQuery(ctx context.Context, resp *shared.SavedQuery) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Description = types.StringPointerValue(resp.Description)
	r.Earliest = types.StringPointerValue(resp.Earliest)
	r.ID = types.StringValue(resp.ID)
	r.IsPrivate = types.BoolPointerValue(resp.IsPrivate)
	r.Latest = types.StringPointerValue(resp.Latest)
	r.Name = types.StringValue(resp.Name)
	r.Query = types.StringValue(resp.Query)
	if resp.Schedule == nil {
		r.Schedule = nil
	} else {
		r.Schedule = &tfTypes.SavedQuerySchedule{}
		r.Schedule.CronSchedule = types.StringValue(resp.Schedule.CronSchedule)
		r.Schedule.Enabled = types.BoolValue(resp.Schedule.Enabled)
		r.Schedule.KeepLastN = types.Float64Value(resp.Schedule.KeepLastN)
		r.Schedule.Notifications.Disabled = types.BoolValue(resp.Schedule.Notifications.Disabled)
		r.Schedule.Tz = types.StringValue(resp.Schedule.Tz)
	}

	return diags
}

func (r *SearchSavedQueryResourceModel) ToOperationsDeleteSavedQueryByIDRequest(ctx context.Context) (*operations.DeleteSavedQueryByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteSavedQueryByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *SearchSavedQueryResourceModel) ToOperationsGetSavedQueryByIDRequest(ctx context.Context) (*operations.GetSavedQueryByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetSavedQueryByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *SearchSavedQueryResourceModel) ToOperationsUpdateSavedQueryByIDRequest(ctx context.Context) (*operations.UpdateSavedQueryByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	savedQuery, savedQueryDiags := r.ToSharedSavedQuery(ctx)
	diags.Append(savedQueryDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateSavedQueryByIDRequest{
		ID:         id,
		SavedQuery: *savedQuery,
	}

	return &out, diags
}

func (r *SearchSavedQueryResourceModel) ToSharedSavedQuery(ctx context.Context) (*shared.SavedQuery, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	isPrivate := new(bool)
	if !r.IsPrivate.IsUnknown() && !r.IsPrivate.IsNull() {
		*isPrivate = r.IsPrivate.ValueBool()
	} else {
		isPrivate = nil
	}
	var query string
	query = r.Query.ValueString()

	earliest := new(string)
	if !r.Earliest.IsUnknown() && !r.Earliest.IsNull() {
		*earliest = r.Earliest.ValueString()
	} else {
		earliest = nil
	}
	latest := new(string)
	if !r.Latest.IsUnknown() && !r.Latest.IsNull() {
		*latest = r.Latest.ValueString()
	} else {
		latest = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var schedule *shared.SavedQuerySchedule
	if r.Schedule != nil {
		var cronSchedule string
		cronSchedule = r.Schedule.CronSchedule.ValueString()

		var enabled bool
		enabled = r.Schedule.Enabled.ValueBool()

		var keepLastN float64
		keepLastN = r.Schedule.KeepLastN.ValueFloat64()

		var disabled bool
		disabled = r.Schedule.Notifications.Disabled.ValueBool()

		notifications := shared.Notifications{
			Disabled: disabled,
		}
		var tz string
		tz = r.Schedule.Tz.ValueString()

		schedule = &shared.SavedQuerySchedule{
			CronSchedule:  cronSchedule,
			Enabled:       enabled,
			KeepLastN:     keepLastN,
			Notifications: notifications,
			Tz:            tz,
		}
	}
	var id string
	id = r.ID.ValueString()

	out := shared.SavedQuery{
		Name:        name,
		IsPrivate:   isPrivate,
		Query:       query,
		Earliest:    earliest,
		Latest:      latest,
		Description: description,
		Schedule:    schedule,
		ID:          id,
	}

	return &out, diags
}

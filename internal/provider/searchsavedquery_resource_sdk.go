// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SearchSavedQueryResourceModel) RefreshFromSharedSavedQuery(ctx context.Context, resp *shared.SavedQuery) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp.ChartConfig == nil {
		r.ChartConfig = nil
	} else {
		r.ChartConfig = &tfTypes.ChartConfig{}
		r.ChartConfig.ApplyThreshold = types.BoolPointerValue(resp.ChartConfig.ApplyThreshold)
		if resp.ChartConfig.Axis == nil {
			r.ChartConfig.Axis = nil
		} else {
			r.ChartConfig.Axis = &tfTypes.Axis{}
			r.ChartConfig.Axis.XAxis = types.StringPointerValue(resp.ChartConfig.Axis.XAxis)
			r.ChartConfig.Axis.YAxis = make([]types.String, 0, len(resp.ChartConfig.Axis.YAxis))
			for _, v := range resp.ChartConfig.Axis.YAxis {
				r.ChartConfig.Axis.YAxis = append(r.ChartConfig.Axis.YAxis, types.StringValue(v))
			}
			r.ChartConfig.Axis.YAxisExcluded = make([]types.String, 0, len(resp.ChartConfig.Axis.YAxisExcluded))
			for _, v := range resp.ChartConfig.Axis.YAxisExcluded {
				r.ChartConfig.Axis.YAxisExcluded = append(r.ChartConfig.Axis.YAxisExcluded, types.StringValue(v))
			}
		}
		r.ChartConfig.Color = types.StringPointerValue(resp.ChartConfig.Color)
		r.ChartConfig.ColorPalette = types.Float64Value(resp.ChartConfig.ColorPalette)
		r.ChartConfig.ColorPaletteReversed = types.BoolPointerValue(resp.ChartConfig.ColorPaletteReversed)
		if resp.ChartConfig.ColorThresholds == nil {
			r.ChartConfig.ColorThresholds = nil
		} else {
			r.ChartConfig.ColorThresholds = &tfTypes.ColorThresholds{}
			r.ChartConfig.ColorThresholds.Thresholds = []tfTypes.Threshold{}

			for _, thresholdsItem := range resp.ChartConfig.ColorThresholds.Thresholds {
				var thresholds tfTypes.Threshold

				thresholds.Color = types.StringValue(thresholdsItem.Color)
				thresholds.Threshold = types.Float64Value(thresholdsItem.Threshold)

				r.ChartConfig.ColorThresholds.Thresholds = append(r.ChartConfig.ColorThresholds.Thresholds, thresholds)
			}
		}
		if resp.ChartConfig.CustomData == nil {
			r.ChartConfig.CustomData = nil
		} else {
			r.ChartConfig.CustomData = &tfTypes.CustomData{}
			r.ChartConfig.CustomData.ConnectNulls = types.StringPointerValue(resp.ChartConfig.CustomData.ConnectNulls)
			r.ChartConfig.CustomData.DataFields = make([]types.String, 0, len(resp.ChartConfig.CustomData.DataFields))
			for _, v := range resp.ChartConfig.CustomData.DataFields {
				r.ChartConfig.CustomData.DataFields = append(r.ChartConfig.CustomData.DataFields, types.StringValue(v))
			}
			r.ChartConfig.CustomData.IsPointColor = types.BoolPointerValue(resp.ChartConfig.CustomData.IsPointColor)
			r.ChartConfig.CustomData.LimitToTopN = types.Float64PointerValue(resp.ChartConfig.CustomData.LimitToTopN)
			r.ChartConfig.CustomData.Lines = types.BoolPointerValue(resp.ChartConfig.CustomData.Lines)
			r.ChartConfig.CustomData.NameField = types.StringPointerValue(resp.ChartConfig.CustomData.NameField)
			r.ChartConfig.CustomData.PointColorPalette = types.Float64PointerValue(resp.ChartConfig.CustomData.PointColorPalette)
			r.ChartConfig.CustomData.PointColorPaletteReversed = types.BoolPointerValue(resp.ChartConfig.CustomData.PointColorPaletteReversed)
			if resp.ChartConfig.CustomData.PointScale != nil {
				r.ChartConfig.CustomData.PointScale = &tfTypes.CustomDataPointScale{}
				if resp.ChartConfig.CustomData.PointScale.Str != nil {
					r.ChartConfig.CustomData.PointScale.Str = types.StringPointerValue(resp.ChartConfig.CustomData.PointScale.Str)
				}
				if resp.ChartConfig.CustomData.PointScale.Number != nil {
					r.ChartConfig.CustomData.PointScale.Number = types.Float64PointerValue(resp.ChartConfig.CustomData.PointScale.Number)
				}
			}
			r.ChartConfig.CustomData.PointScaleDataField = types.StringPointerValue(resp.ChartConfig.CustomData.PointScaleDataField)
			r.ChartConfig.CustomData.SeriesCount = types.Float64PointerValue(resp.ChartConfig.CustomData.SeriesCount)
			r.ChartConfig.CustomData.SplitBy = types.StringPointerValue(resp.ChartConfig.CustomData.SplitBy)
			r.ChartConfig.CustomData.Stack = types.BoolPointerValue(resp.ChartConfig.CustomData.Stack)
			r.ChartConfig.CustomData.SummarizeOthers = types.BoolPointerValue(resp.ChartConfig.CustomData.SummarizeOthers)
			r.ChartConfig.CustomData.Trellis = types.BoolPointerValue(resp.ChartConfig.CustomData.Trellis)
		}
		r.ChartConfig.Decimals = types.Float64PointerValue(resp.ChartConfig.Decimals)
		r.ChartConfig.Label = types.StringPointerValue(resp.ChartConfig.Label)
		if resp.ChartConfig.Legend == nil {
			r.ChartConfig.Legend = nil
		} else {
			r.ChartConfig.Legend = &tfTypes.Legend{}
			r.ChartConfig.Legend.Position = types.StringPointerValue(resp.ChartConfig.Legend.Position)
			r.ChartConfig.Legend.Truncate = types.BoolPointerValue(resp.ChartConfig.Legend.Truncate)
		}
		if resp.ChartConfig.MapDetails == nil {
			r.ChartConfig.MapDetails = nil
		} else {
			r.ChartConfig.MapDetails = &tfTypes.MapDetails{}
			r.ChartConfig.MapDetails.LatitudeField = types.StringPointerValue(resp.ChartConfig.MapDetails.LatitudeField)
			r.ChartConfig.MapDetails.LongitudeField = types.StringPointerValue(resp.ChartConfig.MapDetails.LongitudeField)
			r.ChartConfig.MapDetails.MapSourceID = types.StringPointerValue(resp.ChartConfig.MapDetails.MapSourceID)
			r.ChartConfig.MapDetails.MapType = types.StringPointerValue(resp.ChartConfig.MapDetails.MapType)
			r.ChartConfig.MapDetails.NameField = types.StringPointerValue(resp.ChartConfig.MapDetails.NameField)
			if resp.ChartConfig.MapDetails.PointScale != nil {
				r.ChartConfig.MapDetails.PointScale = &tfTypes.MapDetailsPointScale{}
				if resp.ChartConfig.MapDetails.PointScale.Str != nil {
					r.ChartConfig.MapDetails.PointScale.Str = types.StringPointerValue(resp.ChartConfig.MapDetails.PointScale.Str)
				}
				if resp.ChartConfig.MapDetails.PointScale.Number != nil {
					r.ChartConfig.MapDetails.PointScale.Number = types.Float64PointerValue(resp.ChartConfig.MapDetails.PointScale.Number)
				}
			}
			r.ChartConfig.MapDetails.ValueField = types.StringPointerValue(resp.ChartConfig.MapDetails.ValueField)
		}
		if resp.ChartConfig.OnClickAction == nil {
			r.ChartConfig.OnClickAction = nil
		} else {
			r.ChartConfig.OnClickAction = &tfTypes.OnClickAction{}
			r.ChartConfig.OnClickAction.Search = types.StringPointerValue(resp.ChartConfig.OnClickAction.Search)
			r.ChartConfig.OnClickAction.SelectedDashboardID = types.StringPointerValue(resp.ChartConfig.OnClickAction.SelectedDashboardID)
			r.ChartConfig.OnClickAction.SelectedInputID = types.StringPointerValue(resp.ChartConfig.OnClickAction.SelectedInputID)
			r.ChartConfig.OnClickAction.SelectedLinkID = types.StringPointerValue(resp.ChartConfig.OnClickAction.SelectedLinkID)
			r.ChartConfig.OnClickAction.SelectedTimerangeInputID = types.StringPointerValue(resp.ChartConfig.OnClickAction.SelectedTimerangeInputID)
			r.ChartConfig.OnClickAction.Type = types.StringPointerValue(resp.ChartConfig.OnClickAction.Type)
		}
		r.ChartConfig.Prefix = types.StringPointerValue(resp.ChartConfig.Prefix)
		r.ChartConfig.Separator = types.BoolPointerValue(resp.ChartConfig.Separator)
		r.ChartConfig.Series = []tfTypes.ChartSeries{}

		for _, seriesItem := range resp.ChartConfig.Series {
			var series tfTypes.ChartSeries

			series.Color = types.StringPointerValue(seriesItem.Color)
			series.Map = types.StringPointerValue(seriesItem.Map)
			series.Name = types.StringValue(seriesItem.Name)
			if seriesItem.Type != nil {
				series.Type = types.StringValue(string(*seriesItem.Type))
			} else {
				series.Type = types.StringNull()
			}
			series.YAxisField = types.StringPointerValue(seriesItem.YAxisField)

			r.ChartConfig.Series = append(r.ChartConfig.Series, series)
		}
		r.ChartConfig.ShouldApplyUserChartSettings = types.BoolPointerValue(resp.ChartConfig.ShouldApplyUserChartSettings)
		r.ChartConfig.Style = types.BoolPointerValue(resp.ChartConfig.Style)
		r.ChartConfig.Suffix = types.StringPointerValue(resp.ChartConfig.Suffix)
		r.ChartConfig.Type = types.StringValue(resp.ChartConfig.Type)
		if resp.ChartConfig.XAxis == nil {
			r.ChartConfig.XAxis = nil
		} else {
			r.ChartConfig.XAxis = &tfTypes.XAxis{}
			r.ChartConfig.XAxis.DataField = types.StringPointerValue(resp.ChartConfig.XAxis.DataField)
			r.ChartConfig.XAxis.Inverse = types.BoolPointerValue(resp.ChartConfig.XAxis.Inverse)
			r.ChartConfig.XAxis.LabelInterval = types.StringPointerValue(resp.ChartConfig.XAxis.LabelInterval)
			r.ChartConfig.XAxis.LabelOrientation = types.Float64PointerValue(resp.ChartConfig.XAxis.LabelOrientation)
			r.ChartConfig.XAxis.Name = types.StringPointerValue(resp.ChartConfig.XAxis.Name)
			r.ChartConfig.XAxis.Offset = types.Float64PointerValue(resp.ChartConfig.XAxis.Offset)
			r.ChartConfig.XAxis.Position = types.StringPointerValue(resp.ChartConfig.XAxis.Position)
			r.ChartConfig.XAxis.Type = types.StringPointerValue(resp.ChartConfig.XAxis.Type)
		}
		if resp.ChartConfig.YAxis == nil {
			r.ChartConfig.YAxis = nil
		} else {
			r.ChartConfig.YAxis = &tfTypes.YAxis{}
			r.ChartConfig.YAxis.DataField = make([]types.String, 0, len(resp.ChartConfig.YAxis.DataField))
			for _, v := range resp.ChartConfig.YAxis.DataField {
				r.ChartConfig.YAxis.DataField = append(r.ChartConfig.YAxis.DataField, types.StringValue(v))
			}
			r.ChartConfig.YAxis.Interval = types.Float64PointerValue(resp.ChartConfig.YAxis.Interval)
			r.ChartConfig.YAxis.Max = types.Float64PointerValue(resp.ChartConfig.YAxis.Max)
			r.ChartConfig.YAxis.Min = types.Float64PointerValue(resp.ChartConfig.YAxis.Min)
			r.ChartConfig.YAxis.Position = types.StringPointerValue(resp.ChartConfig.YAxis.Position)
			r.ChartConfig.YAxis.Scale = types.StringPointerValue(resp.ChartConfig.YAxis.Scale)
			r.ChartConfig.YAxis.SplitLine = types.BoolPointerValue(resp.ChartConfig.YAxis.SplitLine)
			r.ChartConfig.YAxis.Type = types.StringPointerValue(resp.ChartConfig.YAxis.Type)
		}
	}
	r.Description = types.StringPointerValue(resp.Description)
	r.DisplayUsername = types.StringPointerValue(resp.DisplayUsername)
	r.Earliest = types.StringPointerValue(resp.Earliest)
	r.ID = types.StringValue(resp.ID)
	r.IsPrivate = types.BoolPointerValue(resp.IsPrivate)
	r.IsSystem = types.BoolPointerValue(resp.IsSystem)
	r.Latest = types.StringPointerValue(resp.Latest)
	if resp.Lib != nil {
		r.Lib = types.StringValue(string(*resp.Lib))
	} else {
		r.Lib = types.StringNull()
	}
	r.Name = types.StringValue(resp.Name)
	r.Query = types.StringValue(resp.Query)
	r.ResolvedDatasetIds = make([]types.String, 0, len(resp.ResolvedDatasetIds))
	for _, v := range resp.ResolvedDatasetIds {
		r.ResolvedDatasetIds = append(r.ResolvedDatasetIds, types.StringValue(v))
	}
	r.SampleRate = types.Float64PointerValue(resp.SampleRate)
	if resp.Schedule == nil {
		r.Schedule = nil
	} else {
		r.Schedule = &tfTypes.SavedQuerySchedule{}
		r.Schedule.CronSchedule = types.StringValue(resp.Schedule.CronSchedule)
		r.Schedule.Enabled = types.BoolValue(resp.Schedule.Enabled)
		r.Schedule.KeepLastN = types.Float64Value(resp.Schedule.KeepLastN)
		r.Schedule.Notifications.Disabled = types.BoolValue(resp.Schedule.Notifications.Disabled)
		r.Schedule.Notifications.Items = []tfTypes.Notification{}

		for _, itemsItem := range resp.Schedule.Notifications.Items {
			var items tfTypes.Notification

			items.Condition = types.StringValue(itemsItem.Condition)
			if itemsItem.Conf == nil {
				items.Conf = nil
			} else {
				items.Conf = &tfTypes.ConditionSpecificConfigs{}
			}
			items.Disabled = types.BoolPointerValue(itemsItem.Disabled)
			items.Group = types.StringPointerValue(itemsItem.Group)
			items.ID = types.StringValue(itemsItem.ID)
			items.Metadata = []tfTypes.MetadataItem{}

			for _, metadataItem := range itemsItem.Metadata {
				var metadata tfTypes.MetadataItem

				metadata.Name = types.StringValue(metadataItem.Name)
				metadata.Value = types.StringValue(metadataItem.Value)

				items.Metadata = append(items.Metadata, metadata)
			}
			items.TargetConfigs = []tfTypes.NotificationTargetConfig{}

			for _, targetConfigsItem := range itemsItem.TargetConfigs {
				var targetConfigs tfTypes.NotificationTargetConfig

				if targetConfigsItem.Conf == nil {
					targetConfigs.Conf = nil
				} else {
					targetConfigs.Conf = &tfTypes.SMTPTargetConfig{}
					targetConfigs.Conf.Body = types.StringPointerValue(targetConfigsItem.Conf.Body)
					if targetConfigsItem.Conf.EmailRecipient == nil {
						targetConfigs.Conf.EmailRecipient = nil
					} else {
						targetConfigs.Conf.EmailRecipient = &tfTypes.EmailRecipient{}
						targetConfigs.Conf.EmailRecipient.Bcc = types.StringPointerValue(targetConfigsItem.Conf.EmailRecipient.Bcc)
						targetConfigs.Conf.EmailRecipient.Cc = types.StringPointerValue(targetConfigsItem.Conf.EmailRecipient.Cc)
						targetConfigs.Conf.EmailRecipient.To = types.StringValue(targetConfigsItem.Conf.EmailRecipient.To)
					}
					targetConfigs.Conf.Subject = types.StringPointerValue(targetConfigsItem.Conf.Subject)
				}
				targetConfigs.ID = types.StringValue(targetConfigsItem.ID)

				items.TargetConfigs = append(items.TargetConfigs, targetConfigs)
			}
			items.Targets = make([]types.String, 0, len(itemsItem.Targets))
			for _, v := range itemsItem.Targets {
				items.Targets = append(items.Targets, types.StringValue(v))
			}

			r.Schedule.Notifications.Items = append(r.Schedule.Notifications.Items, items)
		}
		r.Schedule.ResumeMissed = types.BoolPointerValue(resp.Schedule.ResumeMissed)
		r.Schedule.ResumeOnBoot = types.BoolPointerValue(resp.Schedule.ResumeOnBoot)
		r.Schedule.Tz = types.StringValue(resp.Schedule.Tz)
	}
	r.TableConfig = types.StringPointerValue(resp.TableConfig)
	r.User = types.StringPointerValue(resp.User)

	return diags
}

func (r *SearchSavedQueryResourceModel) ToOperationsDeleteSavedQueryByIDRequest(ctx context.Context) (*operations.DeleteSavedQueryByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteSavedQueryByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *SearchSavedQueryResourceModel) ToOperationsGetSavedQueryByIDRequest(ctx context.Context) (*operations.GetSavedQueryByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetSavedQueryByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *SearchSavedQueryResourceModel) ToOperationsUpdateSavedQueryByIDRequest(ctx context.Context) (*operations.UpdateSavedQueryByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	savedQuery, savedQueryDiags := r.ToSharedSavedQuery(ctx)
	diags.Append(savedQueryDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateSavedQueryByIDRequest{
		ID:         id,
		SavedQuery: *savedQuery,
	}

	return &out, diags
}

func (r *SearchSavedQueryResourceModel) ToSharedSavedQuery(ctx context.Context) (*shared.SavedQuery, diag.Diagnostics) {
	var diags diag.Diagnostics

	var chartConfig *shared.ChartConfig
	if r.ChartConfig != nil {
		applyThreshold := new(bool)
		if !r.ChartConfig.ApplyThreshold.IsUnknown() && !r.ChartConfig.ApplyThreshold.IsNull() {
			*applyThreshold = r.ChartConfig.ApplyThreshold.ValueBool()
		} else {
			applyThreshold = nil
		}
		var axis *shared.Axis
		if r.ChartConfig.Axis != nil {
			xAxis := new(string)
			if !r.ChartConfig.Axis.XAxis.IsUnknown() && !r.ChartConfig.Axis.XAxis.IsNull() {
				*xAxis = r.ChartConfig.Axis.XAxis.ValueString()
			} else {
				xAxis = nil
			}
			yAxis := make([]string, 0, len(r.ChartConfig.Axis.YAxis))
			for _, yAxisItem := range r.ChartConfig.Axis.YAxis {
				yAxis = append(yAxis, yAxisItem.ValueString())
			}
			yAxisExcluded := make([]string, 0, len(r.ChartConfig.Axis.YAxisExcluded))
			for _, yAxisExcludedItem := range r.ChartConfig.Axis.YAxisExcluded {
				yAxisExcluded = append(yAxisExcluded, yAxisExcludedItem.ValueString())
			}
			axis = &shared.Axis{
				XAxis:         xAxis,
				YAxis:         yAxis,
				YAxisExcluded: yAxisExcluded,
			}
		}
		color := new(string)
		if !r.ChartConfig.Color.IsUnknown() && !r.ChartConfig.Color.IsNull() {
			*color = r.ChartConfig.Color.ValueString()
		} else {
			color = nil
		}
		var colorPalette float64
		colorPalette = r.ChartConfig.ColorPalette.ValueFloat64()

		colorPaletteReversed := new(bool)
		if !r.ChartConfig.ColorPaletteReversed.IsUnknown() && !r.ChartConfig.ColorPaletteReversed.IsNull() {
			*colorPaletteReversed = r.ChartConfig.ColorPaletteReversed.ValueBool()
		} else {
			colorPaletteReversed = nil
		}
		var colorThresholds *shared.ColorThresholds
		if r.ChartConfig.ColorThresholds != nil {
			thresholds := make([]shared.Threshold, 0, len(r.ChartConfig.ColorThresholds.Thresholds))
			for _, thresholdsItem := range r.ChartConfig.ColorThresholds.Thresholds {
				var color1 string
				color1 = thresholdsItem.Color.ValueString()

				var threshold float64
				threshold = thresholdsItem.Threshold.ValueFloat64()

				thresholds = append(thresholds, shared.Threshold{
					Color:     color1,
					Threshold: threshold,
				})
			}
			colorThresholds = &shared.ColorThresholds{
				Thresholds: thresholds,
			}
		}
		var customData *shared.CustomData
		if r.ChartConfig.CustomData != nil {
			connectNulls := new(string)
			if !r.ChartConfig.CustomData.ConnectNulls.IsUnknown() && !r.ChartConfig.CustomData.ConnectNulls.IsNull() {
				*connectNulls = r.ChartConfig.CustomData.ConnectNulls.ValueString()
			} else {
				connectNulls = nil
			}
			dataFields := make([]string, 0, len(r.ChartConfig.CustomData.DataFields))
			for _, dataFieldsItem := range r.ChartConfig.CustomData.DataFields {
				dataFields = append(dataFields, dataFieldsItem.ValueString())
			}
			isPointColor := new(bool)
			if !r.ChartConfig.CustomData.IsPointColor.IsUnknown() && !r.ChartConfig.CustomData.IsPointColor.IsNull() {
				*isPointColor = r.ChartConfig.CustomData.IsPointColor.ValueBool()
			} else {
				isPointColor = nil
			}
			limitToTopN := new(float64)
			if !r.ChartConfig.CustomData.LimitToTopN.IsUnknown() && !r.ChartConfig.CustomData.LimitToTopN.IsNull() {
				*limitToTopN = r.ChartConfig.CustomData.LimitToTopN.ValueFloat64()
			} else {
				limitToTopN = nil
			}
			lines := new(bool)
			if !r.ChartConfig.CustomData.Lines.IsUnknown() && !r.ChartConfig.CustomData.Lines.IsNull() {
				*lines = r.ChartConfig.CustomData.Lines.ValueBool()
			} else {
				lines = nil
			}
			nameField := new(string)
			if !r.ChartConfig.CustomData.NameField.IsUnknown() && !r.ChartConfig.CustomData.NameField.IsNull() {
				*nameField = r.ChartConfig.CustomData.NameField.ValueString()
			} else {
				nameField = nil
			}
			pointColorPalette := new(float64)
			if !r.ChartConfig.CustomData.PointColorPalette.IsUnknown() && !r.ChartConfig.CustomData.PointColorPalette.IsNull() {
				*pointColorPalette = r.ChartConfig.CustomData.PointColorPalette.ValueFloat64()
			} else {
				pointColorPalette = nil
			}
			pointColorPaletteReversed := new(bool)
			if !r.ChartConfig.CustomData.PointColorPaletteReversed.IsUnknown() && !r.ChartConfig.CustomData.PointColorPaletteReversed.IsNull() {
				*pointColorPaletteReversed = r.ChartConfig.CustomData.PointColorPaletteReversed.ValueBool()
			} else {
				pointColorPaletteReversed = nil
			}
			var pointScale *shared.CustomDataPointScale
			if r.ChartConfig.CustomData.PointScale != nil {
				str := new(string)
				if !r.ChartConfig.CustomData.PointScale.Str.IsUnknown() && !r.ChartConfig.CustomData.PointScale.Str.IsNull() {
					*str = r.ChartConfig.CustomData.PointScale.Str.ValueString()
				} else {
					str = nil
				}
				if str != nil {
					pointScale = &shared.CustomDataPointScale{
						Str: str,
					}
				}
				number := new(float64)
				if !r.ChartConfig.CustomData.PointScale.Number.IsUnknown() && !r.ChartConfig.CustomData.PointScale.Number.IsNull() {
					*number = r.ChartConfig.CustomData.PointScale.Number.ValueFloat64()
				} else {
					number = nil
				}
				if number != nil {
					pointScale = &shared.CustomDataPointScale{
						Number: number,
					}
				}
			}
			pointScaleDataField := new(string)
			if !r.ChartConfig.CustomData.PointScaleDataField.IsUnknown() && !r.ChartConfig.CustomData.PointScaleDataField.IsNull() {
				*pointScaleDataField = r.ChartConfig.CustomData.PointScaleDataField.ValueString()
			} else {
				pointScaleDataField = nil
			}
			seriesCount := new(float64)
			if !r.ChartConfig.CustomData.SeriesCount.IsUnknown() && !r.ChartConfig.CustomData.SeriesCount.IsNull() {
				*seriesCount = r.ChartConfig.CustomData.SeriesCount.ValueFloat64()
			} else {
				seriesCount = nil
			}
			splitBy := new(string)
			if !r.ChartConfig.CustomData.SplitBy.IsUnknown() && !r.ChartConfig.CustomData.SplitBy.IsNull() {
				*splitBy = r.ChartConfig.CustomData.SplitBy.ValueString()
			} else {
				splitBy = nil
			}
			stack := new(bool)
			if !r.ChartConfig.CustomData.Stack.IsUnknown() && !r.ChartConfig.CustomData.Stack.IsNull() {
				*stack = r.ChartConfig.CustomData.Stack.ValueBool()
			} else {
				stack = nil
			}
			summarizeOthers := new(bool)
			if !r.ChartConfig.CustomData.SummarizeOthers.IsUnknown() && !r.ChartConfig.CustomData.SummarizeOthers.IsNull() {
				*summarizeOthers = r.ChartConfig.CustomData.SummarizeOthers.ValueBool()
			} else {
				summarizeOthers = nil
			}
			trellis := new(bool)
			if !r.ChartConfig.CustomData.Trellis.IsUnknown() && !r.ChartConfig.CustomData.Trellis.IsNull() {
				*trellis = r.ChartConfig.CustomData.Trellis.ValueBool()
			} else {
				trellis = nil
			}
			customData = &shared.CustomData{
				ConnectNulls:              connectNulls,
				DataFields:                dataFields,
				IsPointColor:              isPointColor,
				LimitToTopN:               limitToTopN,
				Lines:                     lines,
				NameField:                 nameField,
				PointColorPalette:         pointColorPalette,
				PointColorPaletteReversed: pointColorPaletteReversed,
				PointScale:                pointScale,
				PointScaleDataField:       pointScaleDataField,
				SeriesCount:               seriesCount,
				SplitBy:                   splitBy,
				Stack:                     stack,
				SummarizeOthers:           summarizeOthers,
				Trellis:                   trellis,
			}
		}
		decimals := new(float64)
		if !r.ChartConfig.Decimals.IsUnknown() && !r.ChartConfig.Decimals.IsNull() {
			*decimals = r.ChartConfig.Decimals.ValueFloat64()
		} else {
			decimals = nil
		}
		label := new(string)
		if !r.ChartConfig.Label.IsUnknown() && !r.ChartConfig.Label.IsNull() {
			*label = r.ChartConfig.Label.ValueString()
		} else {
			label = nil
		}
		var legend *shared.Legend
		if r.ChartConfig.Legend != nil {
			position := new(string)
			if !r.ChartConfig.Legend.Position.IsUnknown() && !r.ChartConfig.Legend.Position.IsNull() {
				*position = r.ChartConfig.Legend.Position.ValueString()
			} else {
				position = nil
			}
			truncate := new(bool)
			if !r.ChartConfig.Legend.Truncate.IsUnknown() && !r.ChartConfig.Legend.Truncate.IsNull() {
				*truncate = r.ChartConfig.Legend.Truncate.ValueBool()
			} else {
				truncate = nil
			}
			legend = &shared.Legend{
				Position: position,
				Truncate: truncate,
			}
		}
		var mapDetails *shared.MapDetails
		if r.ChartConfig.MapDetails != nil {
			latitudeField := new(string)
			if !r.ChartConfig.MapDetails.LatitudeField.IsUnknown() && !r.ChartConfig.MapDetails.LatitudeField.IsNull() {
				*latitudeField = r.ChartConfig.MapDetails.LatitudeField.ValueString()
			} else {
				latitudeField = nil
			}
			longitudeField := new(string)
			if !r.ChartConfig.MapDetails.LongitudeField.IsUnknown() && !r.ChartConfig.MapDetails.LongitudeField.IsNull() {
				*longitudeField = r.ChartConfig.MapDetails.LongitudeField.ValueString()
			} else {
				longitudeField = nil
			}
			mapSourceID := new(string)
			if !r.ChartConfig.MapDetails.MapSourceID.IsUnknown() && !r.ChartConfig.MapDetails.MapSourceID.IsNull() {
				*mapSourceID = r.ChartConfig.MapDetails.MapSourceID.ValueString()
			} else {
				mapSourceID = nil
			}
			mapType := new(string)
			if !r.ChartConfig.MapDetails.MapType.IsUnknown() && !r.ChartConfig.MapDetails.MapType.IsNull() {
				*mapType = r.ChartConfig.MapDetails.MapType.ValueString()
			} else {
				mapType = nil
			}
			nameField1 := new(string)
			if !r.ChartConfig.MapDetails.NameField.IsUnknown() && !r.ChartConfig.MapDetails.NameField.IsNull() {
				*nameField1 = r.ChartConfig.MapDetails.NameField.ValueString()
			} else {
				nameField1 = nil
			}
			var pointScale1 *shared.MapDetailsPointScale
			if r.ChartConfig.MapDetails.PointScale != nil {
				str1 := new(string)
				if !r.ChartConfig.MapDetails.PointScale.Str.IsUnknown() && !r.ChartConfig.MapDetails.PointScale.Str.IsNull() {
					*str1 = r.ChartConfig.MapDetails.PointScale.Str.ValueString()
				} else {
					str1 = nil
				}
				if str1 != nil {
					pointScale1 = &shared.MapDetailsPointScale{
						Str: str1,
					}
				}
				number1 := new(float64)
				if !r.ChartConfig.MapDetails.PointScale.Number.IsUnknown() && !r.ChartConfig.MapDetails.PointScale.Number.IsNull() {
					*number1 = r.ChartConfig.MapDetails.PointScale.Number.ValueFloat64()
				} else {
					number1 = nil
				}
				if number1 != nil {
					pointScale1 = &shared.MapDetailsPointScale{
						Number: number1,
					}
				}
			}
			valueField := new(string)
			if !r.ChartConfig.MapDetails.ValueField.IsUnknown() && !r.ChartConfig.MapDetails.ValueField.IsNull() {
				*valueField = r.ChartConfig.MapDetails.ValueField.ValueString()
			} else {
				valueField = nil
			}
			mapDetails = &shared.MapDetails{
				LatitudeField:  latitudeField,
				LongitudeField: longitudeField,
				MapSourceID:    mapSourceID,
				MapType:        mapType,
				NameField:      nameField1,
				PointScale:     pointScale1,
				ValueField:     valueField,
			}
		}
		var onClickAction *shared.OnClickAction
		if r.ChartConfig.OnClickAction != nil {
			search := new(string)
			if !r.ChartConfig.OnClickAction.Search.IsUnknown() && !r.ChartConfig.OnClickAction.Search.IsNull() {
				*search = r.ChartConfig.OnClickAction.Search.ValueString()
			} else {
				search = nil
			}
			selectedDashboardID := new(string)
			if !r.ChartConfig.OnClickAction.SelectedDashboardID.IsUnknown() && !r.ChartConfig.OnClickAction.SelectedDashboardID.IsNull() {
				*selectedDashboardID = r.ChartConfig.OnClickAction.SelectedDashboardID.ValueString()
			} else {
				selectedDashboardID = nil
			}
			selectedInputID := new(string)
			if !r.ChartConfig.OnClickAction.SelectedInputID.IsUnknown() && !r.ChartConfig.OnClickAction.SelectedInputID.IsNull() {
				*selectedInputID = r.ChartConfig.OnClickAction.SelectedInputID.ValueString()
			} else {
				selectedInputID = nil
			}
			selectedLinkID := new(string)
			if !r.ChartConfig.OnClickAction.SelectedLinkID.IsUnknown() && !r.ChartConfig.OnClickAction.SelectedLinkID.IsNull() {
				*selectedLinkID = r.ChartConfig.OnClickAction.SelectedLinkID.ValueString()
			} else {
				selectedLinkID = nil
			}
			selectedTimerangeInputID := new(string)
			if !r.ChartConfig.OnClickAction.SelectedTimerangeInputID.IsUnknown() && !r.ChartConfig.OnClickAction.SelectedTimerangeInputID.IsNull() {
				*selectedTimerangeInputID = r.ChartConfig.OnClickAction.SelectedTimerangeInputID.ValueString()
			} else {
				selectedTimerangeInputID = nil
			}
			typeVar := new(string)
			if !r.ChartConfig.OnClickAction.Type.IsUnknown() && !r.ChartConfig.OnClickAction.Type.IsNull() {
				*typeVar = r.ChartConfig.OnClickAction.Type.ValueString()
			} else {
				typeVar = nil
			}
			onClickAction = &shared.OnClickAction{
				Search:                   search,
				SelectedDashboardID:      selectedDashboardID,
				SelectedInputID:          selectedInputID,
				SelectedLinkID:           selectedLinkID,
				SelectedTimerangeInputID: selectedTimerangeInputID,
				Type:                     typeVar,
			}
		}
		prefix := new(string)
		if !r.ChartConfig.Prefix.IsUnknown() && !r.ChartConfig.Prefix.IsNull() {
			*prefix = r.ChartConfig.Prefix.ValueString()
		} else {
			prefix = nil
		}
		separator := new(bool)
		if !r.ChartConfig.Separator.IsUnknown() && !r.ChartConfig.Separator.IsNull() {
			*separator = r.ChartConfig.Separator.ValueBool()
		} else {
			separator = nil
		}
		series := make([]shared.ChartSeries, 0, len(r.ChartConfig.Series))
		for _, seriesItem := range r.ChartConfig.Series {
			color2 := new(string)
			if !seriesItem.Color.IsUnknown() && !seriesItem.Color.IsNull() {
				*color2 = seriesItem.Color.ValueString()
			} else {
				color2 = nil
			}
			data := make([]shared.ChartData, len(seriesItem.Data))
			mapVar := new(string)
			if !seriesItem.Map.IsUnknown() && !seriesItem.Map.IsNull() {
				*mapVar = seriesItem.Map.ValueString()
			} else {
				mapVar = nil
			}
			var name string
			name = seriesItem.Name.ValueString()

			type1 := new(shared.ChartType)
			if !seriesItem.Type.IsUnknown() && !seriesItem.Type.IsNull() {
				*type1 = shared.ChartType(seriesItem.Type.ValueString())
			} else {
				type1 = nil
			}
			yAxisField := new(string)
			if !seriesItem.YAxisField.IsUnknown() && !seriesItem.YAxisField.IsNull() {
				*yAxisField = seriesItem.YAxisField.ValueString()
			} else {
				yAxisField = nil
			}
			series = append(series, shared.ChartSeries{
				Color:      color2,
				Data:       data,
				Map:        mapVar,
				Name:       name,
				Type:       type1,
				YAxisField: yAxisField,
			})
		}
		shouldApplyUserChartSettings := new(bool)
		if !r.ChartConfig.ShouldApplyUserChartSettings.IsUnknown() && !r.ChartConfig.ShouldApplyUserChartSettings.IsNull() {
			*shouldApplyUserChartSettings = r.ChartConfig.ShouldApplyUserChartSettings.ValueBool()
		} else {
			shouldApplyUserChartSettings = nil
		}
		style := new(bool)
		if !r.ChartConfig.Style.IsUnknown() && !r.ChartConfig.Style.IsNull() {
			*style = r.ChartConfig.Style.ValueBool()
		} else {
			style = nil
		}
		suffix := new(string)
		if !r.ChartConfig.Suffix.IsUnknown() && !r.ChartConfig.Suffix.IsNull() {
			*suffix = r.ChartConfig.Suffix.ValueString()
		} else {
			suffix = nil
		}
		var typeVar1 string
		typeVar1 = r.ChartConfig.Type.ValueString()

		var xAxis1 *shared.XAxis
		if r.ChartConfig.XAxis != nil {
			dataField := new(string)
			if !r.ChartConfig.XAxis.DataField.IsUnknown() && !r.ChartConfig.XAxis.DataField.IsNull() {
				*dataField = r.ChartConfig.XAxis.DataField.ValueString()
			} else {
				dataField = nil
			}
			inverse := new(bool)
			if !r.ChartConfig.XAxis.Inverse.IsUnknown() && !r.ChartConfig.XAxis.Inverse.IsNull() {
				*inverse = r.ChartConfig.XAxis.Inverse.ValueBool()
			} else {
				inverse = nil
			}
			labelInterval := new(string)
			if !r.ChartConfig.XAxis.LabelInterval.IsUnknown() && !r.ChartConfig.XAxis.LabelInterval.IsNull() {
				*labelInterval = r.ChartConfig.XAxis.LabelInterval.ValueString()
			} else {
				labelInterval = nil
			}
			labelOrientation := new(float64)
			if !r.ChartConfig.XAxis.LabelOrientation.IsUnknown() && !r.ChartConfig.XAxis.LabelOrientation.IsNull() {
				*labelOrientation = r.ChartConfig.XAxis.LabelOrientation.ValueFloat64()
			} else {
				labelOrientation = nil
			}
			name1 := new(string)
			if !r.ChartConfig.XAxis.Name.IsUnknown() && !r.ChartConfig.XAxis.Name.IsNull() {
				*name1 = r.ChartConfig.XAxis.Name.ValueString()
			} else {
				name1 = nil
			}
			offset := new(float64)
			if !r.ChartConfig.XAxis.Offset.IsUnknown() && !r.ChartConfig.XAxis.Offset.IsNull() {
				*offset = r.ChartConfig.XAxis.Offset.ValueFloat64()
			} else {
				offset = nil
			}
			position1 := new(string)
			if !r.ChartConfig.XAxis.Position.IsUnknown() && !r.ChartConfig.XAxis.Position.IsNull() {
				*position1 = r.ChartConfig.XAxis.Position.ValueString()
			} else {
				position1 = nil
			}
			typeVar2 := new(string)
			if !r.ChartConfig.XAxis.Type.IsUnknown() && !r.ChartConfig.XAxis.Type.IsNull() {
				*typeVar2 = r.ChartConfig.XAxis.Type.ValueString()
			} else {
				typeVar2 = nil
			}
			xAxis1 = &shared.XAxis{
				DataField:        dataField,
				Inverse:          inverse,
				LabelInterval:    labelInterval,
				LabelOrientation: labelOrientation,
				Name:             name1,
				Offset:           offset,
				Position:         position1,
				Type:             typeVar2,
			}
		}
		var yAxis1 *shared.YAxis
		if r.ChartConfig.YAxis != nil {
			dataField1 := make([]string, 0, len(r.ChartConfig.YAxis.DataField))
			for _, dataFieldItem := range r.ChartConfig.YAxis.DataField {
				dataField1 = append(dataField1, dataFieldItem.ValueString())
			}
			interval := new(float64)
			if !r.ChartConfig.YAxis.Interval.IsUnknown() && !r.ChartConfig.YAxis.Interval.IsNull() {
				*interval = r.ChartConfig.YAxis.Interval.ValueFloat64()
			} else {
				interval = nil
			}
			max := new(float64)
			if !r.ChartConfig.YAxis.Max.IsUnknown() && !r.ChartConfig.YAxis.Max.IsNull() {
				*max = r.ChartConfig.YAxis.Max.ValueFloat64()
			} else {
				max = nil
			}
			min := new(float64)
			if !r.ChartConfig.YAxis.Min.IsUnknown() && !r.ChartConfig.YAxis.Min.IsNull() {
				*min = r.ChartConfig.YAxis.Min.ValueFloat64()
			} else {
				min = nil
			}
			position2 := new(string)
			if !r.ChartConfig.YAxis.Position.IsUnknown() && !r.ChartConfig.YAxis.Position.IsNull() {
				*position2 = r.ChartConfig.YAxis.Position.ValueString()
			} else {
				position2 = nil
			}
			scale := new(string)
			if !r.ChartConfig.YAxis.Scale.IsUnknown() && !r.ChartConfig.YAxis.Scale.IsNull() {
				*scale = r.ChartConfig.YAxis.Scale.ValueString()
			} else {
				scale = nil
			}
			splitLine := new(bool)
			if !r.ChartConfig.YAxis.SplitLine.IsUnknown() && !r.ChartConfig.YAxis.SplitLine.IsNull() {
				*splitLine = r.ChartConfig.YAxis.SplitLine.ValueBool()
			} else {
				splitLine = nil
			}
			typeVar3 := new(string)
			if !r.ChartConfig.YAxis.Type.IsUnknown() && !r.ChartConfig.YAxis.Type.IsNull() {
				*typeVar3 = r.ChartConfig.YAxis.Type.ValueString()
			} else {
				typeVar3 = nil
			}
			yAxis1 = &shared.YAxis{
				DataField: dataField1,
				Interval:  interval,
				Max:       max,
				Min:       min,
				Position:  position2,
				Scale:     scale,
				SplitLine: splitLine,
				Type:      typeVar3,
			}
		}
		chartConfig = &shared.ChartConfig{
			ApplyThreshold:               applyThreshold,
			Axis:                         axis,
			Color:                        color,
			ColorPalette:                 colorPalette,
			ColorPaletteReversed:         colorPaletteReversed,
			ColorThresholds:              colorThresholds,
			CustomData:                   customData,
			Decimals:                     decimals,
			Label:                        label,
			Legend:                       legend,
			MapDetails:                   mapDetails,
			OnClickAction:                onClickAction,
			Prefix:                       prefix,
			Separator:                    separator,
			Series:                       series,
			ShouldApplyUserChartSettings: shouldApplyUserChartSettings,
			Style:                        style,
			Suffix:                       suffix,
			Type:                         typeVar1,
			XAxis:                        xAxis1,
			YAxis:                        yAxis1,
		}
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayUsername := new(string)
	if !r.DisplayUsername.IsUnknown() && !r.DisplayUsername.IsNull() {
		*displayUsername = r.DisplayUsername.ValueString()
	} else {
		displayUsername = nil
	}
	earliest := new(string)
	if !r.Earliest.IsUnknown() && !r.Earliest.IsNull() {
		*earliest = r.Earliest.ValueString()
	} else {
		earliest = nil
	}
	var id string
	id = r.ID.ValueString()

	isPrivate := new(bool)
	if !r.IsPrivate.IsUnknown() && !r.IsPrivate.IsNull() {
		*isPrivate = r.IsPrivate.ValueBool()
	} else {
		isPrivate = nil
	}
	isSystem := new(bool)
	if !r.IsSystem.IsUnknown() && !r.IsSystem.IsNull() {
		*isSystem = r.IsSystem.ValueBool()
	} else {
		isSystem = nil
	}
	latest := new(string)
	if !r.Latest.IsUnknown() && !r.Latest.IsNull() {
		*latest = r.Latest.ValueString()
	} else {
		latest = nil
	}
	lib := new(shared.CriblLib)
	if !r.Lib.IsUnknown() && !r.Lib.IsNull() {
		*lib = shared.CriblLib(r.Lib.ValueString())
	} else {
		lib = nil
	}
	var name2 string
	name2 = r.Name.ValueString()

	var query string
	query = r.Query.ValueString()

	resolvedDatasetIds := make([]string, 0, len(r.ResolvedDatasetIds))
	for _, resolvedDatasetIdsItem := range r.ResolvedDatasetIds {
		resolvedDatasetIds = append(resolvedDatasetIds, resolvedDatasetIdsItem.ValueString())
	}
	sampleRate := new(float64)
	if !r.SampleRate.IsUnknown() && !r.SampleRate.IsNull() {
		*sampleRate = r.SampleRate.ValueFloat64()
	} else {
		sampleRate = nil
	}
	var schedule *shared.SavedQuerySchedule
	if r.Schedule != nil {
		var cronSchedule string
		cronSchedule = r.Schedule.CronSchedule.ValueString()

		var enabled bool
		enabled = r.Schedule.Enabled.ValueBool()

		var keepLastN float64
		keepLastN = r.Schedule.KeepLastN.ValueFloat64()

		var disabled bool
		disabled = r.Schedule.Notifications.Disabled.ValueBool()

		items := make([]shared.Notification, 0, len(r.Schedule.Notifications.Items))
		for _, itemsItem := range r.Schedule.Notifications.Items {
			var id1 string
			id1 = itemsItem.ID.ValueString()

			disabled1 := new(bool)
			if !itemsItem.Disabled.IsUnknown() && !itemsItem.Disabled.IsNull() {
				*disabled1 = itemsItem.Disabled.ValueBool()
			} else {
				disabled1 = nil
			}
			var condition string
			condition = itemsItem.Condition.ValueString()

			targets := make([]string, 0, len(itemsItem.Targets))
			for _, targetsItem := range itemsItem.Targets {
				targets = append(targets, targetsItem.ValueString())
			}
			targetConfigs := make([]shared.NotificationTargetConfig, 0, len(itemsItem.TargetConfigs))
			for _, targetConfigsItem := range itemsItem.TargetConfigs {
				var id2 string
				id2 = targetConfigsItem.ID.ValueString()

				var conf *shared.SMTPTargetConfig
				if targetConfigsItem.Conf != nil {
					subject := new(string)
					if !targetConfigsItem.Conf.Subject.IsUnknown() && !targetConfigsItem.Conf.Subject.IsNull() {
						*subject = targetConfigsItem.Conf.Subject.ValueString()
					} else {
						subject = nil
					}
					body := new(string)
					if !targetConfigsItem.Conf.Body.IsUnknown() && !targetConfigsItem.Conf.Body.IsNull() {
						*body = targetConfigsItem.Conf.Body.ValueString()
					} else {
						body = nil
					}
					var emailRecipient *shared.EmailRecipient
					if targetConfigsItem.Conf.EmailRecipient != nil {
						var to string
						to = targetConfigsItem.Conf.EmailRecipient.To.ValueString()

						cc := new(string)
						if !targetConfigsItem.Conf.EmailRecipient.Cc.IsUnknown() && !targetConfigsItem.Conf.EmailRecipient.Cc.IsNull() {
							*cc = targetConfigsItem.Conf.EmailRecipient.Cc.ValueString()
						} else {
							cc = nil
						}
						bcc := new(string)
						if !targetConfigsItem.Conf.EmailRecipient.Bcc.IsUnknown() && !targetConfigsItem.Conf.EmailRecipient.Bcc.IsNull() {
							*bcc = targetConfigsItem.Conf.EmailRecipient.Bcc.ValueString()
						} else {
							bcc = nil
						}
						emailRecipient = &shared.EmailRecipient{
							To:  to,
							Cc:  cc,
							Bcc: bcc,
						}
					}
					conf = &shared.SMTPTargetConfig{
						Subject:        subject,
						Body:           body,
						EmailRecipient: emailRecipient,
					}
				}
				targetConfigs = append(targetConfigs, shared.NotificationTargetConfig{
					ID:   id2,
					Conf: conf,
				})
			}
			var conf1 *shared.ConditionSpecificConfigs
			if itemsItem.Conf != nil {
				conf1 = &shared.ConditionSpecificConfigs{}
			}
			metadata := make([]shared.MetadataItem, 0, len(itemsItem.Metadata))
			for _, metadataItem := range itemsItem.Metadata {
				var name3 string
				name3 = metadataItem.Name.ValueString()

				var value string
				value = metadataItem.Value.ValueString()

				metadata = append(metadata, shared.MetadataItem{
					Name:  name3,
					Value: value,
				})
			}
			group := new(string)
			if !itemsItem.Group.IsUnknown() && !itemsItem.Group.IsNull() {
				*group = itemsItem.Group.ValueString()
			} else {
				group = nil
			}
			items = append(items, shared.Notification{
				ID:            id1,
				Disabled:      disabled1,
				Condition:     condition,
				Targets:       targets,
				TargetConfigs: targetConfigs,
				Conf:          conf1,
				Metadata:      metadata,
				Group:         group,
			})
		}
		notifications := shared.Notifications{
			Disabled: disabled,
			Items:    items,
		}
		resumeMissed := new(bool)
		if !r.Schedule.ResumeMissed.IsUnknown() && !r.Schedule.ResumeMissed.IsNull() {
			*resumeMissed = r.Schedule.ResumeMissed.ValueBool()
		} else {
			resumeMissed = nil
		}
		resumeOnBoot := new(bool)
		if !r.Schedule.ResumeOnBoot.IsUnknown() && !r.Schedule.ResumeOnBoot.IsNull() {
			*resumeOnBoot = r.Schedule.ResumeOnBoot.ValueBool()
		} else {
			resumeOnBoot = nil
		}
		var tz string
		tz = r.Schedule.Tz.ValueString()

		schedule = &shared.SavedQuerySchedule{
			CronSchedule:  cronSchedule,
			Enabled:       enabled,
			KeepLastN:     keepLastN,
			Notifications: notifications,
			ResumeMissed:  resumeMissed,
			ResumeOnBoot:  resumeOnBoot,
			Tz:            tz,
		}
	}
	tableConfig := new(string)
	if !r.TableConfig.IsUnknown() && !r.TableConfig.IsNull() {
		*tableConfig = r.TableConfig.ValueString()
	} else {
		tableConfig = nil
	}
	user := new(string)
	if !r.User.IsUnknown() && !r.User.IsNull() {
		*user = r.User.ValueString()
	} else {
		user = nil
	}
	out := shared.SavedQuery{
		ChartConfig:        chartConfig,
		Description:        description,
		DisplayUsername:    displayUsername,
		Earliest:           earliest,
		ID:                 id,
		IsPrivate:          isPrivate,
		IsSystem:           isSystem,
		Latest:             latest,
		Lib:                lib,
		Name:               name2,
		Query:              query,
		ResolvedDatasetIds: resolvedDatasetIds,
		SampleRate:         sampleRate,
		Schedule:           schedule,
		TableConfig:        tableConfig,
		User:               user,
	}

	return &out, diags
}

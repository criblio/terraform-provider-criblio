// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *InstanceSettingsDataSourceModel) RefreshFromOperationsListInstanceSettingsSchemaResponseBody(ctx context.Context, resp *operations.ListInstanceSettingsSchemaResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.InstanceSettingsSchemaUnion{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.InstanceSettingsSchemaUnion

			if itemsItem.InstanceSettingsSchema1 != nil {
				items.InstanceSettingsSchema1 = &tfTypes.InstanceSettingsSchema1{}
				if itemsItem.InstanceSettingsSchema1.CloudWorkspace == nil {
					items.InstanceSettingsSchema1.CloudWorkspace = nil
				} else {
					items.InstanceSettingsSchema1.CloudWorkspace = &tfTypes.CloudWorkspaceSchema{}
					items.InstanceSettingsSchema1.CloudWorkspace.AuthToken = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.AuthToken)
					if itemsItem.InstanceSettingsSchema1.CloudWorkspace.Compression != nil {
						items.InstanceSettingsSchema1.CloudWorkspace.Compression = types.StringValue(string(*itemsItem.InstanceSettingsSchema1.CloudWorkspace.Compression))
					} else {
						items.InstanceSettingsSchema1.CloudWorkspace.Compression = types.StringNull()
					}
					if itemsItem.InstanceSettingsSchema1.CloudWorkspace.ConfigBundles == nil {
						items.InstanceSettingsSchema1.CloudWorkspace.ConfigBundles = nil
					} else {
						items.InstanceSettingsSchema1.CloudWorkspace.ConfigBundles = &tfTypes.ConfigBundles{}
						items.InstanceSettingsSchema1.CloudWorkspace.ConfigBundles.RemoteURL = types.StringValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.ConfigBundles.RemoteURL)
					}
					items.InstanceSettingsSchema1.CloudWorkspace.ConfigHelperSocketDir = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.ConfigHelperSocketDir)
					items.InstanceSettingsSchema1.CloudWorkspace.ConnectionTimeout = types.Float64PointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.ConnectionTimeout)
					items.InstanceSettingsSchema1.CloudWorkspace.Disabled = types.BoolValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.Disabled)
					items.InstanceSettingsSchema1.CloudWorkspace.DisableSNIRouting = types.BoolPointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.DisableSNIRouting)
					if itemsItem.InstanceSettingsSchema1.CloudWorkspace.Failover == nil {
						items.InstanceSettingsSchema1.CloudWorkspace.Failover = nil
					} else {
						items.InstanceSettingsSchema1.CloudWorkspace.Failover = &tfTypes.FailoverConfigs{}
						items.InstanceSettingsSchema1.CloudWorkspace.Failover.MissedHBLimit = types.Float64PointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.Failover.MissedHBLimit)
						items.InstanceSettingsSchema1.CloudWorkspace.Failover.Period = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.Failover.Period)
						items.InstanceSettingsSchema1.CloudWorkspace.Failover.Volume = types.StringValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.Failover.Volume)
					}
					items.InstanceSettingsSchema1.CloudWorkspace.ForwardToLeaderAPI = types.BoolPointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.ForwardToLeaderAPI)
					items.InstanceSettingsSchema1.CloudWorkspace.Host = types.StringValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.Host)
					items.InstanceSettingsSchema1.CloudWorkspace.IPWhitelistRegex = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.IPWhitelistRegex)
					items.InstanceSettingsSchema1.CloudWorkspace.MaxActiveCxn = types.Float64PointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.MaxActiveCxn)
					items.InstanceSettingsSchema1.CloudWorkspace.MaxBufferBytes = types.Float64PointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.MaxBufferBytes)
					items.InstanceSettingsSchema1.CloudWorkspace.Port = types.Float64Value(itemsItem.InstanceSettingsSchema1.CloudWorkspace.Port)
					items.InstanceSettingsSchema1.CloudWorkspace.Protocol = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.Protocol)
					if itemsItem.InstanceSettingsSchema1.CloudWorkspace.Proxy == nil {
						items.InstanceSettingsSchema1.CloudWorkspace.Proxy = nil
					} else {
						items.InstanceSettingsSchema1.CloudWorkspace.Proxy = &tfTypes.SocksProxyOpts{}
						items.InstanceSettingsSchema1.CloudWorkspace.Proxy.Disabled = types.BoolPointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.Proxy.Disabled)
						items.InstanceSettingsSchema1.CloudWorkspace.Proxy.Host = types.StringValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.Proxy.Host)
						items.InstanceSettingsSchema1.CloudWorkspace.Proxy.Password = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.Proxy.Password)
						items.InstanceSettingsSchema1.CloudWorkspace.Proxy.Port = types.Float64Value(itemsItem.InstanceSettingsSchema1.CloudWorkspace.Proxy.Port)
						items.InstanceSettingsSchema1.CloudWorkspace.Proxy.Type = types.Float64PointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.Proxy.Type)
						items.InstanceSettingsSchema1.CloudWorkspace.Proxy.UserID = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.Proxy.UserID)
					}
					if itemsItem.InstanceSettingsSchema1.CloudWorkspace.Resiliency != nil {
						items.InstanceSettingsSchema1.CloudWorkspace.Resiliency = types.StringValue(string(*itemsItem.InstanceSettingsSchema1.CloudWorkspace.Resiliency))
					} else {
						items.InstanceSettingsSchema1.CloudWorkspace.Resiliency = types.StringNull()
					}
					items.InstanceSettingsSchema1.CloudWorkspace.SubscriptionAgreement = types.BoolValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.SubscriptionAgreement)
					if itemsItem.InstanceSettingsSchema1.CloudWorkspace.TLS == nil {
						items.InstanceSettingsSchema1.CloudWorkspace.TLS = nil
					} else {
						items.InstanceSettingsSchema1.CloudWorkspace.TLS = &tfTypes.CloudWorkspaceSchemaTLS{}
						items.InstanceSettingsSchema1.CloudWorkspace.TLS.CaPath = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.TLS.CaPath)
						items.InstanceSettingsSchema1.CloudWorkspace.TLS.CertificateName = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.TLS.CertificateName)
						items.InstanceSettingsSchema1.CloudWorkspace.TLS.CertPath = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.TLS.CertPath)
						if itemsItem.InstanceSettingsSchema1.CloudWorkspace.TLS.CheckServerIdentity == nil {
							items.InstanceSettingsSchema1.CloudWorkspace.TLS.CheckServerIdentity = nil
						} else {
							items.InstanceSettingsSchema1.CloudWorkspace.TLS.CheckServerIdentity = &tfTypes.CloudWorkspaceSchemaCheckServerIdentity{}
						}
						if len(itemsItem.InstanceSettingsSchema1.CloudWorkspace.TLS.CommonNameRegex) > 0 {
							items.InstanceSettingsSchema1.CloudWorkspace.TLS.CommonNameRegex = make(map[string]jsontypes.Normalized, len(itemsItem.InstanceSettingsSchema1.CloudWorkspace.TLS.CommonNameRegex))
							for key, value := range itemsItem.InstanceSettingsSchema1.CloudWorkspace.TLS.CommonNameRegex {
								result, _ := json.Marshal(value)
								items.InstanceSettingsSchema1.CloudWorkspace.TLS.CommonNameRegex[key] = jsontypes.NewNormalizedValue(string(result))
							}
						}
						items.InstanceSettingsSchema1.CloudWorkspace.TLS.Disabled = types.BoolValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.TLS.Disabled)
						items.InstanceSettingsSchema1.CloudWorkspace.TLS.Passphrase = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.TLS.Passphrase)
						items.InstanceSettingsSchema1.CloudWorkspace.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.TLS.PrivKeyPath)
						items.InstanceSettingsSchema1.CloudWorkspace.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.TLS.RejectUnauthorized)
						items.InstanceSettingsSchema1.CloudWorkspace.TLS.RequestCert = types.BoolPointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.TLS.RequestCert)
						items.InstanceSettingsSchema1.CloudWorkspace.TLS.Servername = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.TLS.Servername)
					}
					items.InstanceSettingsSchema1.CloudWorkspace.WriteTimeout = types.Float64PointerValue(itemsItem.InstanceSettingsSchema1.CloudWorkspace.WriteTimeout)
				}
				items.InstanceSettingsSchema1.EnvRegex = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.EnvRegex)
				items.InstanceSettingsSchema1.Group = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.Group)
				items.InstanceSettingsSchema1.ID = types.StringValue(itemsItem.InstanceSettingsSchema1.ID)
				if itemsItem.InstanceSettingsSchema1.Master == nil {
					items.InstanceSettingsSchema1.Master = nil
				} else {
					items.InstanceSettingsSchema1.Master = &tfTypes.MasterSchema{}
					items.InstanceSettingsSchema1.Master.AuthToken = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.Master.AuthToken)
					if itemsItem.InstanceSettingsSchema1.Master.Compression != nil {
						items.InstanceSettingsSchema1.Master.Compression = types.StringValue(string(*itemsItem.InstanceSettingsSchema1.Master.Compression))
					} else {
						items.InstanceSettingsSchema1.Master.Compression = types.StringNull()
					}
					if itemsItem.InstanceSettingsSchema1.Master.ConfigBundles == nil {
						items.InstanceSettingsSchema1.Master.ConfigBundles = nil
					} else {
						items.InstanceSettingsSchema1.Master.ConfigBundles = &tfTypes.ConfigBundles{}
						items.InstanceSettingsSchema1.Master.ConfigBundles.RemoteURL = types.StringValue(itemsItem.InstanceSettingsSchema1.Master.ConfigBundles.RemoteURL)
					}
					items.InstanceSettingsSchema1.Master.ConfigHelperSocketDir = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.Master.ConfigHelperSocketDir)
					items.InstanceSettingsSchema1.Master.ConnectionTimeout = types.Float64PointerValue(itemsItem.InstanceSettingsSchema1.Master.ConnectionTimeout)
					items.InstanceSettingsSchema1.Master.DisableSNIRouting = types.BoolPointerValue(itemsItem.InstanceSettingsSchema1.Master.DisableSNIRouting)
					if itemsItem.InstanceSettingsSchema1.Master.Failover == nil {
						items.InstanceSettingsSchema1.Master.Failover = nil
					} else {
						items.InstanceSettingsSchema1.Master.Failover = &tfTypes.FailoverConfigs{}
						items.InstanceSettingsSchema1.Master.Failover.MissedHBLimit = types.Float64PointerValue(itemsItem.InstanceSettingsSchema1.Master.Failover.MissedHBLimit)
						items.InstanceSettingsSchema1.Master.Failover.Period = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.Master.Failover.Period)
						items.InstanceSettingsSchema1.Master.Failover.Volume = types.StringValue(itemsItem.InstanceSettingsSchema1.Master.Failover.Volume)
					}
					items.InstanceSettingsSchema1.Master.ForwardToLeaderAPI = types.BoolPointerValue(itemsItem.InstanceSettingsSchema1.Master.ForwardToLeaderAPI)
					items.InstanceSettingsSchema1.Master.Host = types.StringValue(itemsItem.InstanceSettingsSchema1.Master.Host)
					items.InstanceSettingsSchema1.Master.IPWhitelistRegex = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.Master.IPWhitelistRegex)
					items.InstanceSettingsSchema1.Master.MaxActiveCxn = types.Float64PointerValue(itemsItem.InstanceSettingsSchema1.Master.MaxActiveCxn)
					items.InstanceSettingsSchema1.Master.MaxBufferBytes = types.Float64PointerValue(itemsItem.InstanceSettingsSchema1.Master.MaxBufferBytes)
					items.InstanceSettingsSchema1.Master.Port = types.Float64Value(itemsItem.InstanceSettingsSchema1.Master.Port)
					items.InstanceSettingsSchema1.Master.Protocol = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.Master.Protocol)
					if itemsItem.InstanceSettingsSchema1.Master.Proxy == nil {
						items.InstanceSettingsSchema1.Master.Proxy = nil
					} else {
						items.InstanceSettingsSchema1.Master.Proxy = &tfTypes.SocksProxyOpts{}
						items.InstanceSettingsSchema1.Master.Proxy.Disabled = types.BoolPointerValue(itemsItem.InstanceSettingsSchema1.Master.Proxy.Disabled)
						items.InstanceSettingsSchema1.Master.Proxy.Host = types.StringValue(itemsItem.InstanceSettingsSchema1.Master.Proxy.Host)
						items.InstanceSettingsSchema1.Master.Proxy.Password = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.Master.Proxy.Password)
						items.InstanceSettingsSchema1.Master.Proxy.Port = types.Float64Value(itemsItem.InstanceSettingsSchema1.Master.Proxy.Port)
						items.InstanceSettingsSchema1.Master.Proxy.Type = types.Float64PointerValue(itemsItem.InstanceSettingsSchema1.Master.Proxy.Type)
						items.InstanceSettingsSchema1.Master.Proxy.UserID = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.Master.Proxy.UserID)
					}
					if itemsItem.InstanceSettingsSchema1.Master.Resiliency != nil {
						items.InstanceSettingsSchema1.Master.Resiliency = types.StringValue(string(*itemsItem.InstanceSettingsSchema1.Master.Resiliency))
					} else {
						items.InstanceSettingsSchema1.Master.Resiliency = types.StringNull()
					}
					if itemsItem.InstanceSettingsSchema1.Master.TLS == nil {
						items.InstanceSettingsSchema1.Master.TLS = nil
					} else {
						items.InstanceSettingsSchema1.Master.TLS = &tfTypes.MasterSchemaTLS{}
						items.InstanceSettingsSchema1.Master.TLS.CaPath = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.Master.TLS.CaPath)
						items.InstanceSettingsSchema1.Master.TLS.CertificateName = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.Master.TLS.CertificateName)
						items.InstanceSettingsSchema1.Master.TLS.CertPath = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.Master.TLS.CertPath)
						if itemsItem.InstanceSettingsSchema1.Master.TLS.CheckServerIdentity == nil {
							items.InstanceSettingsSchema1.Master.TLS.CheckServerIdentity = nil
						} else {
							items.InstanceSettingsSchema1.Master.TLS.CheckServerIdentity = &tfTypes.MasterSchemaCheckServerIdentity{}
						}
						if len(itemsItem.InstanceSettingsSchema1.Master.TLS.CommonNameRegex) > 0 {
							items.InstanceSettingsSchema1.Master.TLS.CommonNameRegex = make(map[string]jsontypes.Normalized, len(itemsItem.InstanceSettingsSchema1.Master.TLS.CommonNameRegex))
							for key1, value1 := range itemsItem.InstanceSettingsSchema1.Master.TLS.CommonNameRegex {
								result1, _ := json.Marshal(value1)
								items.InstanceSettingsSchema1.Master.TLS.CommonNameRegex[key1] = jsontypes.NewNormalizedValue(string(result1))
							}
						}
						items.InstanceSettingsSchema1.Master.TLS.Disabled = types.BoolValue(itemsItem.InstanceSettingsSchema1.Master.TLS.Disabled)
						items.InstanceSettingsSchema1.Master.TLS.Passphrase = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.Master.TLS.Passphrase)
						items.InstanceSettingsSchema1.Master.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.Master.TLS.PrivKeyPath)
						items.InstanceSettingsSchema1.Master.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.InstanceSettingsSchema1.Master.TLS.RejectUnauthorized)
						items.InstanceSettingsSchema1.Master.TLS.RequestCert = types.BoolPointerValue(itemsItem.InstanceSettingsSchema1.Master.TLS.RequestCert)
						items.InstanceSettingsSchema1.Master.TLS.Servername = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.Master.TLS.Servername)
					}
					items.InstanceSettingsSchema1.Master.WriteTimeout = types.Float64PointerValue(itemsItem.InstanceSettingsSchema1.Master.WriteTimeout)
				}
				items.InstanceSettingsSchema1.Mode = types.StringValue(string(itemsItem.InstanceSettingsSchema1.Mode))
				items.InstanceSettingsSchema1.ReportedDeploymentID = types.StringPointerValue(itemsItem.InstanceSettingsSchema1.ReportedDeploymentID)
				items.InstanceSettingsSchema1.Tags = make([]types.String, 0, len(itemsItem.InstanceSettingsSchema1.Tags))
				for _, v := range itemsItem.InstanceSettingsSchema1.Tags {
					items.InstanceSettingsSchema1.Tags = append(items.InstanceSettingsSchema1.Tags, types.StringValue(v))
				}
			}
			if itemsItem.InstanceSettingsSchema2 != nil {
				items.InstanceSettingsSchema2 = &tfTypes.InstanceSettingsSchema2{}
				items.InstanceSettingsSchema2.BootstrapHost = types.StringPointerValue(itemsItem.InstanceSettingsSchema2.BootstrapHost)
				items.InstanceSettingsSchema2.ID = types.StringPointerValue(itemsItem.InstanceSettingsSchema2.ID)
			}

			r.Items = append(r.Items, items)
		}
	}

	return diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *CertificateResourceModel) RefreshFromSharedCertificate(ctx context.Context, resp *shared.Certificate) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Ca = types.StringPointerValue(resp.Ca)
	r.Cert = types.StringValue(resp.Cert)
	r.Description = types.StringPointerValue(resp.Description)
	r.ID = types.StringValue(resp.ID)
	r.InUse = make([]types.String, 0, len(resp.InUse))
	for _, v := range resp.InUse {
		r.InUse = append(r.InUse, types.StringValue(v))
	}
	r.Passphrase = types.StringPointerValue(resp.Passphrase)
	r.PrivKey = types.StringValue(resp.PrivKey)

	return diags
}

func (r *CertificateResourceModel) ToOperationsDeleteCertificateByIDRequest(ctx context.Context) (*operations.DeleteCertificateByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteCertificateByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *CertificateResourceModel) ToOperationsGetCertificateByIDRequest(ctx context.Context) (*operations.GetCertificateByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetCertificateByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *CertificateResourceModel) ToOperationsUpdateCertificateByIDRequest(ctx context.Context) (*operations.UpdateCertificateByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	certificate, certificateDiags := r.ToSharedCertificate(ctx)
	diags.Append(certificateDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateCertificateByIDRequest{
		ID:          id,
		Certificate: *certificate,
	}

	return &out, diags
}

func (r *CertificateResourceModel) ToSharedCertificate(ctx context.Context) (*shared.Certificate, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var cert string
	cert = r.Cert.ValueString()

	var privKey string
	privKey = r.PrivKey.ValueString()

	passphrase := new(string)
	if !r.Passphrase.IsUnknown() && !r.Passphrase.IsNull() {
		*passphrase = r.Passphrase.ValueString()
	} else {
		passphrase = nil
	}
	ca := new(string)
	if !r.Ca.IsUnknown() && !r.Ca.IsNull() {
		*ca = r.Ca.ValueString()
	} else {
		ca = nil
	}
	inUse := make([]string, 0, len(r.InUse))
	for _, inUseItem := range r.InUse {
		inUse = append(inUse, inUseItem.ValueString())
	}
	out := shared.Certificate{
		ID:          id,
		Description: description,
		Cert:        cert,
		PrivKey:     privKey,
		Passphrase:  passphrase,
		Ca:          ca,
		InUse:       inUse,
	}

	return &out, diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SearchSavedQueryDataSource{}
var _ datasource.DataSourceWithConfigure = &SearchSavedQueryDataSource{}

func NewSearchSavedQueryDataSource() datasource.DataSource {
	return &SearchSavedQueryDataSource{}
}

// SearchSavedQueryDataSource is the data source implementation.
type SearchSavedQueryDataSource struct {
	// Provider configured SDK client.
	client *sdk.CriblIo
}

// SearchSavedQueryDataSourceModel describes the data model.
type SearchSavedQueryDataSourceModel struct {
	Description types.String                `tfsdk:"description"`
	Earliest    types.String                `tfsdk:"earliest"`
	ID          types.String                `tfsdk:"id"`
	IsPrivate   types.Bool                  `tfsdk:"is_private"`
	Latest      types.String                `tfsdk:"latest"`
	Name        types.String                `tfsdk:"name"`
	Query       types.String                `tfsdk:"query"`
	Schedule    *tfTypes.SavedQuerySchedule `tfsdk:"schedule"`
}

// Metadata returns the data source type name.
func (r *SearchSavedQueryDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_search_saved_query"
}

// Schema defines the schema for the data source.
func (r *SearchSavedQueryDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SearchSavedQuery DataSource",

		Attributes: map[string]schema.Attribute{
			"description": schema.StringAttribute{
				Computed:    true,
				Description: `Description of the saved query`,
			},
			"earliest": schema.StringAttribute{
				Computed:    true,
				Description: `Earliest time for the search range`,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `Unique ID to GET`,
			},
			"is_private": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether the saved query is private`,
			},
			"latest": schema.StringAttribute{
				Computed:    true,
				Description: `Latest time for the search range`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `Name of the saved query`,
			},
			"query": schema.StringAttribute{
				Computed:    true,
				Description: `The search query string`,
			},
			"schedule": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"cron_schedule": schema.StringAttribute{
						Computed: true,
					},
					"enabled": schema.BoolAttribute{
						Computed: true,
					},
					"keep_last_n": schema.Float64Attribute{
						Computed: true,
					},
					"notifications": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"disabled": schema.BoolAttribute{
								Computed: true,
							},
						},
					},
					"tz": schema.StringAttribute{
						Computed: true,
					},
				},
			},
		},
	}
}

func (r *SearchSavedQueryDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.CriblIo)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.CriblIo, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SearchSavedQueryDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SearchSavedQueryDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetSavedQueryByIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.SavedQueries.GetSavedQueryByID(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Items != nil && len(res.Object.Items) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSavedQuery(ctx, &res.Object.Items[0])...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *NotificationTargetsDataSourceModel) RefreshFromOperationsListNotificationTargetResponseBody(ctx context.Context, resp *operations.ListNotificationTargetResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.NotificationTarget{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.NotificationTarget

			if itemsItem.PagerDutyTarget != nil {
				items.PagerDutyTarget = &tfTypes.PagerDutyTarget{}
				items.PagerDutyTarget.Class = types.StringPointerValue(itemsItem.PagerDutyTarget.Class)
				items.PagerDutyTarget.Component = types.StringPointerValue(itemsItem.PagerDutyTarget.Component)
				items.PagerDutyTarget.Group = types.StringPointerValue(itemsItem.PagerDutyTarget.Group)
				items.PagerDutyTarget.ID = types.StringValue(itemsItem.PagerDutyTarget.ID)
				items.PagerDutyTarget.RoutingKey = types.StringValue(itemsItem.PagerDutyTarget.RoutingKey)
				if itemsItem.PagerDutyTarget.Severity != nil {
					items.PagerDutyTarget.Severity = types.StringValue(string(*itemsItem.PagerDutyTarget.Severity))
				} else {
					items.PagerDutyTarget.Severity = types.StringNull()
				}
				items.PagerDutyTarget.SystemFields = make([]types.String, 0, len(itemsItem.PagerDutyTarget.SystemFields))
				for _, v := range itemsItem.PagerDutyTarget.SystemFields {
					items.PagerDutyTarget.SystemFields = append(items.PagerDutyTarget.SystemFields, types.StringValue(v))
				}
				items.PagerDutyTarget.Type = types.StringValue(string(itemsItem.PagerDutyTarget.Type))
			}
			if itemsItem.SlackTarget != nil {
				items.SlackTarget = &tfTypes.SlackTarget{}
				items.SlackTarget.ID = types.StringValue(itemsItem.SlackTarget.ID)
				items.SlackTarget.SystemFields = make([]types.String, 0, len(itemsItem.SlackTarget.SystemFields))
				for _, v := range itemsItem.SlackTarget.SystemFields {
					items.SlackTarget.SystemFields = append(items.SlackTarget.SystemFields, types.StringValue(v))
				}
				items.SlackTarget.Type = types.StringValue(string(itemsItem.SlackTarget.Type))
				items.SlackTarget.URL = types.StringValue(itemsItem.SlackTarget.URL)
			}
			if itemsItem.SMTPTarget != nil {
				items.SMTPTarget = &tfTypes.SMTPTarget{}
				if itemsItem.SMTPTarget.EncryptionOption != nil {
					items.SMTPTarget.EncryptionOption = types.StringValue(string(*itemsItem.SMTPTarget.EncryptionOption))
				} else {
					items.SMTPTarget.EncryptionOption = types.StringNull()
				}
				items.SMTPTarget.From = types.StringValue(itemsItem.SMTPTarget.From)
				items.SMTPTarget.Host = types.StringValue(itemsItem.SMTPTarget.Host)
				items.SMTPTarget.ID = types.StringValue(itemsItem.SMTPTarget.ID)
				items.SMTPTarget.Password = types.StringPointerValue(itemsItem.SMTPTarget.Password)
				items.SMTPTarget.Port = types.Int64Value(itemsItem.SMTPTarget.Port)
				items.SMTPTarget.SystemFields = make([]types.String, 0, len(itemsItem.SMTPTarget.SystemFields))
				for _, v := range itemsItem.SMTPTarget.SystemFields {
					items.SMTPTarget.SystemFields = append(items.SMTPTarget.SystemFields, types.StringValue(v))
				}
				if itemsItem.SMTPTarget.TLS == nil {
					items.SMTPTarget.TLS = nil
				} else {
					items.SMTPTarget.TLS = &tfTypes.TLSConfiguration{}
					if itemsItem.SMTPTarget.TLS.MaxVersion != nil {
						items.SMTPTarget.TLS.MaxVersion = types.StringValue(string(*itemsItem.SMTPTarget.TLS.MaxVersion))
					} else {
						items.SMTPTarget.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.SMTPTarget.TLS.MinVersion != nil {
						items.SMTPTarget.TLS.MinVersion = types.StringValue(string(*itemsItem.SMTPTarget.TLS.MinVersion))
					} else {
						items.SMTPTarget.TLS.MinVersion = types.StringNull()
					}
					items.SMTPTarget.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.SMTPTarget.TLS.RejectUnauthorized)
				}
				items.SMTPTarget.Type = types.StringValue(string(itemsItem.SMTPTarget.Type))
				items.SMTPTarget.Username = types.StringPointerValue(itemsItem.SMTPTarget.Username)
			}
			if itemsItem.SnsTarget != nil {
				items.SnsTarget = &tfTypes.SnsTarget{}
				items.SnsTarget.Allowlist = make([]types.String, 0, len(itemsItem.SnsTarget.Allowlist))
				for _, v := range itemsItem.SnsTarget.Allowlist {
					items.SnsTarget.Allowlist = append(items.SnsTarget.Allowlist, types.StringValue(v))
				}
				items.SnsTarget.AssumeRoleArn = types.StringPointerValue(itemsItem.SnsTarget.AssumeRoleArn)
				items.SnsTarget.AssumeRoleExternalID = types.StringPointerValue(itemsItem.SnsTarget.AssumeRoleExternalID)
				items.SnsTarget.AwsAPIKey = types.StringPointerValue(itemsItem.SnsTarget.AwsAPIKey)
				if itemsItem.SnsTarget.AwsAuthenticationMethod != nil {
					items.SnsTarget.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.SnsTarget.AwsAuthenticationMethod))
				} else {
					items.SnsTarget.AwsAuthenticationMethod = types.StringNull()
				}
				items.SnsTarget.AwsSecretKey = types.StringPointerValue(itemsItem.SnsTarget.AwsSecretKey)
				if itemsItem.SnsTarget.DestinationType != nil {
					items.SnsTarget.DestinationType = types.StringValue(string(*itemsItem.SnsTarget.DestinationType))
				} else {
					items.SnsTarget.DestinationType = types.StringNull()
				}
				items.SnsTarget.Endpoint = types.StringPointerValue(itemsItem.SnsTarget.Endpoint)
				items.SnsTarget.ID = types.StringValue(itemsItem.SnsTarget.ID)
				items.SnsTarget.MessageGroupID = types.StringPointerValue(itemsItem.SnsTarget.MessageGroupID)
				items.SnsTarget.PhoneNumber = types.StringPointerValue(itemsItem.SnsTarget.PhoneNumber)
				items.SnsTarget.Region = types.StringValue(itemsItem.SnsTarget.Region)
				items.SnsTarget.SystemFields = make([]types.String, 0, len(itemsItem.SnsTarget.SystemFields))
				for _, v := range itemsItem.SnsTarget.SystemFields {
					items.SnsTarget.SystemFields = append(items.SnsTarget.SystemFields, types.StringValue(v))
				}
				items.SnsTarget.TopicArn = types.StringPointerValue(itemsItem.SnsTarget.TopicArn)
				if itemsItem.SnsTarget.TopicType != nil {
					items.SnsTarget.TopicType = types.StringValue(string(*itemsItem.SnsTarget.TopicType))
				} else {
					items.SnsTarget.TopicType = types.StringNull()
				}
				items.SnsTarget.Type = types.StringValue(string(itemsItem.SnsTarget.Type))
			}
			if itemsItem.WebhookTarget != nil {
				items.WebhookTarget = &tfTypes.WebhookTarget{}
				if itemsItem.WebhookTarget.AuthType != nil {
					items.WebhookTarget.AuthType = types.StringValue(string(*itemsItem.WebhookTarget.AuthType))
				} else {
					items.WebhookTarget.AuthType = types.StringNull()
				}
				items.WebhookTarget.Format = types.StringValue(string(itemsItem.WebhookTarget.Format))
				items.WebhookTarget.ID = types.StringValue(itemsItem.WebhookTarget.ID)
				items.WebhookTarget.Method = types.StringValue(string(itemsItem.WebhookTarget.Method))
				items.WebhookTarget.Password = types.StringPointerValue(itemsItem.WebhookTarget.Password)
				items.WebhookTarget.SystemFields = make([]types.String, 0, len(itemsItem.WebhookTarget.SystemFields))
				for _, v := range itemsItem.WebhookTarget.SystemFields {
					items.WebhookTarget.SystemFields = append(items.WebhookTarget.SystemFields, types.StringValue(v))
				}
				items.WebhookTarget.Token = types.StringPointerValue(itemsItem.WebhookTarget.Token)
				items.WebhookTarget.Type = types.StringValue(string(itemsItem.WebhookTarget.Type))
				items.WebhookTarget.URL = types.StringValue(itemsItem.WebhookTarget.URL)
				items.WebhookTarget.Username = types.StringPointerValue(itemsItem.WebhookTarget.Username)
			}

			r.Items = append(r.Items, items)
		}
	}

	return diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/criblio/terraform-provider-criblio/internal/provider/typeconvert"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SearchDatasetResourceModel) RefreshFromSharedGenericDataset(ctx context.Context, resp *shared.GenericDataset) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp.APIAwsDataset != nil {
		r.APIAwsDataset = &tfTypes.APIAwsDataset{}
		r.APIAwsDataset.Description = types.StringPointerValue(resp.APIAwsDataset.Description)
		r.Description = r.APIAwsDataset.Description
		r.APIAwsDataset.EnabledEndpoints = make([]types.String, 0, len(resp.APIAwsDataset.EnabledEndpoints))
		for _, v := range resp.APIAwsDataset.EnabledEndpoints {
			r.APIAwsDataset.EnabledEndpoints = append(r.APIAwsDataset.EnabledEndpoints, types.StringValue(v))
		}
		r.APIAwsDataset.ID = types.StringValue(resp.APIAwsDataset.ID)
		r.ID = r.APIAwsDataset.ID
		if resp.APIAwsDataset.Metadata == nil {
			r.APIAwsDataset.Metadata = nil
		} else {
			r.APIAwsDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIAwsDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIAwsDataset.Metadata.Created))
			r.APIAwsDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIAwsDataset.Metadata.EnableAcceleration)
			r.APIAwsDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIAwsDataset.Metadata.Modified))
			r.APIAwsDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIAwsDataset.Metadata.Tags))
			for _, v := range resp.APIAwsDataset.Metadata.Tags {
				r.APIAwsDataset.Metadata.Tags = append(r.APIAwsDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIAwsDataset.ProviderID = types.StringValue(resp.APIAwsDataset.ProviderID)
		r.ProviderID = r.APIAwsDataset.ProviderID
		r.APIAwsDataset.Regions = make([]types.String, 0, len(resp.APIAwsDataset.Regions))
		for _, v := range resp.APIAwsDataset.Regions {
			r.APIAwsDataset.Regions = append(r.APIAwsDataset.Regions, types.StringValue(v))
		}
		r.APIAwsDataset.Type = types.StringValue(resp.APIAwsDataset.Type)
		r.Type = r.APIAwsDataset.Type
	}
	if resp.APIAzureDataExplorerDataset != nil {
		r.APIAzureDataExplorerDataset = &tfTypes.APIAzureDataExplorerDataset{}
		r.APIAzureDataExplorerDataset.Cluster = types.StringValue(resp.APIAzureDataExplorerDataset.Cluster)
		r.APIAzureDataExplorerDataset.Database = types.StringValue(resp.APIAzureDataExplorerDataset.Database)
		r.APIAzureDataExplorerDataset.Description = types.StringPointerValue(resp.APIAzureDataExplorerDataset.Description)
		r.Description = r.APIAzureDataExplorerDataset.Description
		r.APIAzureDataExplorerDataset.ID = types.StringValue(resp.APIAzureDataExplorerDataset.ID)
		r.ID = r.APIAzureDataExplorerDataset.ID
		r.APIAzureDataExplorerDataset.Location = types.StringValue(resp.APIAzureDataExplorerDataset.Location)
		if resp.APIAzureDataExplorerDataset.Metadata == nil {
			r.APIAzureDataExplorerDataset.Metadata = nil
		} else {
			r.APIAzureDataExplorerDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIAzureDataExplorerDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIAzureDataExplorerDataset.Metadata.Created))
			r.APIAzureDataExplorerDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIAzureDataExplorerDataset.Metadata.EnableAcceleration)
			r.APIAzureDataExplorerDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIAzureDataExplorerDataset.Metadata.Modified))
			r.APIAzureDataExplorerDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIAzureDataExplorerDataset.Metadata.Tags))
			for _, v := range resp.APIAzureDataExplorerDataset.Metadata.Tags {
				r.APIAzureDataExplorerDataset.Metadata.Tags = append(r.APIAzureDataExplorerDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIAzureDataExplorerDataset.ProviderID = types.StringValue(resp.APIAzureDataExplorerDataset.ProviderID)
		r.ProviderID = r.APIAzureDataExplorerDataset.ProviderID
		r.APIAzureDataExplorerDataset.Table = types.StringValue(resp.APIAzureDataExplorerDataset.Table)
		r.APIAzureDataExplorerDataset.TimestampField = types.StringPointerValue(resp.APIAzureDataExplorerDataset.TimestampField)
		r.APIAzureDataExplorerDataset.TimestampFieldContents = types.StringPointerValue(resp.APIAzureDataExplorerDataset.TimestampFieldContents)
		r.APIAzureDataExplorerDataset.Type = types.StringValue(resp.APIAzureDataExplorerDataset.Type)
		r.Type = r.APIAzureDataExplorerDataset.Type
	}
	if resp.APIAzureDataset != nil {
		r.APIAzureDataset = &tfTypes.APIAzureDataset{}
		r.APIAzureDataset.Description = types.StringPointerValue(resp.APIAzureDataset.Description)
		r.Description = r.APIAzureDataset.Description
		r.APIAzureDataset.EnabledEndpoints = make([]types.String, 0, len(resp.APIAzureDataset.EnabledEndpoints))
		for _, v := range resp.APIAzureDataset.EnabledEndpoints {
			r.APIAzureDataset.EnabledEndpoints = append(r.APIAzureDataset.EnabledEndpoints, types.StringValue(v))
		}
		r.APIAzureDataset.ID = types.StringValue(resp.APIAzureDataset.ID)
		r.ID = r.APIAzureDataset.ID
		if resp.APIAzureDataset.Metadata == nil {
			r.APIAzureDataset.Metadata = nil
		} else {
			r.APIAzureDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIAzureDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIAzureDataset.Metadata.Created))
			r.APIAzureDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIAzureDataset.Metadata.EnableAcceleration)
			r.APIAzureDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIAzureDataset.Metadata.Modified))
			r.APIAzureDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIAzureDataset.Metadata.Tags))
			for _, v := range resp.APIAzureDataset.Metadata.Tags {
				r.APIAzureDataset.Metadata.Tags = append(r.APIAzureDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIAzureDataset.ProviderID = types.StringValue(resp.APIAzureDataset.ProviderID)
		r.ProviderID = r.APIAzureDataset.ProviderID
		r.APIAzureDataset.SubscriptionIds = make([]types.String, 0, len(resp.APIAzureDataset.SubscriptionIds))
		for _, v := range resp.APIAzureDataset.SubscriptionIds {
			r.APIAzureDataset.SubscriptionIds = append(r.APIAzureDataset.SubscriptionIds, types.StringValue(v))
		}
		r.APIAzureDataset.Type = types.StringValue(resp.APIAzureDataset.Type)
		r.Type = r.APIAzureDataset.Type
	}
	if resp.APIElasticSearchDataset != nil {
		r.APIElasticSearchDataset = &tfTypes.APIElasticSearchDataset{}
		r.APIElasticSearchDataset.Description = types.StringPointerValue(resp.APIElasticSearchDataset.Description)
		r.Description = r.APIElasticSearchDataset.Description
		r.APIElasticSearchDataset.ID = types.StringValue(resp.APIElasticSearchDataset.ID)
		r.ID = r.APIElasticSearchDataset.ID
		r.APIElasticSearchDataset.Index = types.StringValue(resp.APIElasticSearchDataset.Index)
		if resp.APIElasticSearchDataset.Metadata == nil {
			r.APIElasticSearchDataset.Metadata = nil
		} else {
			r.APIElasticSearchDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIElasticSearchDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIElasticSearchDataset.Metadata.Created))
			r.APIElasticSearchDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIElasticSearchDataset.Metadata.EnableAcceleration)
			r.APIElasticSearchDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIElasticSearchDataset.Metadata.Modified))
			r.APIElasticSearchDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIElasticSearchDataset.Metadata.Tags))
			for _, v := range resp.APIElasticSearchDataset.Metadata.Tags {
				r.APIElasticSearchDataset.Metadata.Tags = append(r.APIElasticSearchDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIElasticSearchDataset.ProviderID = types.StringValue(resp.APIElasticSearchDataset.ProviderID)
		r.ProviderID = r.APIElasticSearchDataset.ProviderID
		r.APIElasticSearchDataset.TimestampField = types.StringValue(resp.APIElasticSearchDataset.TimestampField)
		r.APIElasticSearchDataset.Type = types.StringValue(resp.APIElasticSearchDataset.Type)
		r.Type = r.APIElasticSearchDataset.Type
	}
	if resp.APIGcpDataset != nil {
		r.APIGcpDataset = &tfTypes.APIGcpDataset{}
		r.APIGcpDataset.Description = types.StringPointerValue(resp.APIGcpDataset.Description)
		r.Description = r.APIGcpDataset.Description
		r.APIGcpDataset.EndpointConfigs = []tfTypes.GcpEndpointConfig{}

		for _, endpointConfigsItem := range resp.APIGcpDataset.EndpointConfigs {
			var endpointConfigs tfTypes.GcpEndpointConfig

			endpointConfigs.EndpointName = types.StringValue(endpointConfigsItem.EndpointName)
			endpointConfigs.Region = types.StringPointerValue(endpointConfigsItem.Region)

			r.APIGcpDataset.EndpointConfigs = append(r.APIGcpDataset.EndpointConfigs, endpointConfigs)
		}
		r.APIGcpDataset.ID = types.StringValue(resp.APIGcpDataset.ID)
		r.ID = r.APIGcpDataset.ID
		if resp.APIGcpDataset.Metadata == nil {
			r.APIGcpDataset.Metadata = nil
		} else {
			r.APIGcpDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIGcpDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIGcpDataset.Metadata.Created))
			r.APIGcpDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIGcpDataset.Metadata.EnableAcceleration)
			r.APIGcpDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIGcpDataset.Metadata.Modified))
			r.APIGcpDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIGcpDataset.Metadata.Tags))
			for _, v := range resp.APIGcpDataset.Metadata.Tags {
				r.APIGcpDataset.Metadata.Tags = append(r.APIGcpDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIGcpDataset.ProviderID = types.StringValue(resp.APIGcpDataset.ProviderID)
		r.ProviderID = r.APIGcpDataset.ProviderID
		r.APIGcpDataset.Type = types.StringValue(resp.APIGcpDataset.Type)
		r.Type = r.APIGcpDataset.Type
	}
	if resp.APIGoogleWorkspaceDataset != nil {
		r.APIGoogleWorkspaceDataset = &tfTypes.APIGoogleWorkspaceDataset{}
		r.APIGoogleWorkspaceDataset.Description = types.StringPointerValue(resp.APIGoogleWorkspaceDataset.Description)
		r.Description = r.APIGoogleWorkspaceDataset.Description
		r.APIGoogleWorkspaceDataset.EnabledEndpoints = make([]types.String, 0, len(resp.APIGoogleWorkspaceDataset.EnabledEndpoints))
		for _, v := range resp.APIGoogleWorkspaceDataset.EnabledEndpoints {
			r.APIGoogleWorkspaceDataset.EnabledEndpoints = append(r.APIGoogleWorkspaceDataset.EnabledEndpoints, types.StringValue(v))
		}
		r.APIGoogleWorkspaceDataset.ID = types.StringValue(resp.APIGoogleWorkspaceDataset.ID)
		r.ID = r.APIGoogleWorkspaceDataset.ID
		if resp.APIGoogleWorkspaceDataset.Metadata == nil {
			r.APIGoogleWorkspaceDataset.Metadata = nil
		} else {
			r.APIGoogleWorkspaceDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIGoogleWorkspaceDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIGoogleWorkspaceDataset.Metadata.Created))
			r.APIGoogleWorkspaceDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIGoogleWorkspaceDataset.Metadata.EnableAcceleration)
			r.APIGoogleWorkspaceDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIGoogleWorkspaceDataset.Metadata.Modified))
			r.APIGoogleWorkspaceDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIGoogleWorkspaceDataset.Metadata.Tags))
			for _, v := range resp.APIGoogleWorkspaceDataset.Metadata.Tags {
				r.APIGoogleWorkspaceDataset.Metadata.Tags = append(r.APIGoogleWorkspaceDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIGoogleWorkspaceDataset.ProviderID = types.StringValue(resp.APIGoogleWorkspaceDataset.ProviderID)
		r.ProviderID = r.APIGoogleWorkspaceDataset.ProviderID
		r.APIGoogleWorkspaceDataset.Type = types.StringValue(resp.APIGoogleWorkspaceDataset.Type)
		r.Type = r.APIGoogleWorkspaceDataset.Type
	}
	if resp.APIHTTPDataset != nil {
		r.APIHTTPDataset = &tfTypes.APIHTTPDataset{}
		r.APIHTTPDataset.Description = types.StringPointerValue(resp.APIHTTPDataset.Description)
		r.Description = r.APIHTTPDataset.Description
		r.APIHTTPDataset.EnabledEndpoints = make([]types.String, 0, len(resp.APIHTTPDataset.EnabledEndpoints))
		for _, v := range resp.APIHTTPDataset.EnabledEndpoints {
			r.APIHTTPDataset.EnabledEndpoints = append(r.APIHTTPDataset.EnabledEndpoints, types.StringValue(v))
		}
		r.APIHTTPDataset.ID = types.StringValue(resp.APIHTTPDataset.ID)
		r.ID = r.APIHTTPDataset.ID
		if resp.APIHTTPDataset.Metadata == nil {
			r.APIHTTPDataset.Metadata = nil
		} else {
			r.APIHTTPDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIHTTPDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIHTTPDataset.Metadata.Created))
			r.APIHTTPDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIHTTPDataset.Metadata.EnableAcceleration)
			r.APIHTTPDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIHTTPDataset.Metadata.Modified))
			r.APIHTTPDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIHTTPDataset.Metadata.Tags))
			for _, v := range resp.APIHTTPDataset.Metadata.Tags {
				r.APIHTTPDataset.Metadata.Tags = append(r.APIHTTPDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIHTTPDataset.ProviderID = types.StringValue(resp.APIHTTPDataset.ProviderID)
		r.ProviderID = r.APIHTTPDataset.ProviderID
		r.APIHTTPDataset.Type = types.StringValue(resp.APIHTTPDataset.Type)
		r.Type = r.APIHTTPDataset.Type
	}
	if resp.APIMsGraphDataset != nil {
		r.APIMsGraphDataset = &tfTypes.APIMsGraphDataset{}
		r.APIMsGraphDataset.Description = types.StringPointerValue(resp.APIMsGraphDataset.Description)
		r.Description = r.APIMsGraphDataset.Description
		r.APIMsGraphDataset.EnabledEndpoints = make([]types.String, 0, len(resp.APIMsGraphDataset.EnabledEndpoints))
		for _, v := range resp.APIMsGraphDataset.EnabledEndpoints {
			r.APIMsGraphDataset.EnabledEndpoints = append(r.APIMsGraphDataset.EnabledEndpoints, types.StringValue(v))
		}
		r.APIMsGraphDataset.ID = types.StringValue(resp.APIMsGraphDataset.ID)
		r.ID = r.APIMsGraphDataset.ID
		if resp.APIMsGraphDataset.Metadata == nil {
			r.APIMsGraphDataset.Metadata = nil
		} else {
			r.APIMsGraphDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIMsGraphDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIMsGraphDataset.Metadata.Created))
			r.APIMsGraphDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIMsGraphDataset.Metadata.EnableAcceleration)
			r.APIMsGraphDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIMsGraphDataset.Metadata.Modified))
			r.APIMsGraphDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIMsGraphDataset.Metadata.Tags))
			for _, v := range resp.APIMsGraphDataset.Metadata.Tags {
				r.APIMsGraphDataset.Metadata.Tags = append(r.APIMsGraphDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIMsGraphDataset.ProviderID = types.StringValue(resp.APIMsGraphDataset.ProviderID)
		r.ProviderID = r.APIMsGraphDataset.ProviderID
		r.APIMsGraphDataset.Type = types.StringValue(resp.APIMsGraphDataset.Type)
		r.Type = r.APIMsGraphDataset.Type
	}
	if resp.APIOktaDataset != nil {
		r.APIOktaDataset = &tfTypes.APIOktaDataset{}
		r.APIOktaDataset.Description = types.StringPointerValue(resp.APIOktaDataset.Description)
		r.Description = r.APIOktaDataset.Description
		r.APIOktaDataset.EnabledEndpoints = make([]types.String, 0, len(resp.APIOktaDataset.EnabledEndpoints))
		for _, v := range resp.APIOktaDataset.EnabledEndpoints {
			r.APIOktaDataset.EnabledEndpoints = append(r.APIOktaDataset.EnabledEndpoints, types.StringValue(v))
		}
		r.APIOktaDataset.ID = types.StringValue(resp.APIOktaDataset.ID)
		r.ID = r.APIOktaDataset.ID
		if resp.APIOktaDataset.Metadata == nil {
			r.APIOktaDataset.Metadata = nil
		} else {
			r.APIOktaDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIOktaDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIOktaDataset.Metadata.Created))
			r.APIOktaDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIOktaDataset.Metadata.EnableAcceleration)
			r.APIOktaDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIOktaDataset.Metadata.Modified))
			r.APIOktaDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIOktaDataset.Metadata.Tags))
			for _, v := range resp.APIOktaDataset.Metadata.Tags {
				r.APIOktaDataset.Metadata.Tags = append(r.APIOktaDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIOktaDataset.ProviderID = types.StringValue(resp.APIOktaDataset.ProviderID)
		r.ProviderID = r.APIOktaDataset.ProviderID
		r.APIOktaDataset.Type = types.StringValue(resp.APIOktaDataset.Type)
		r.Type = r.APIOktaDataset.Type
	}
	if resp.APIOpenSearchDataset != nil {
		r.APIOpenSearchDataset = &tfTypes.APIOpenSearchDataset{}
		r.APIOpenSearchDataset.Description = types.StringPointerValue(resp.APIOpenSearchDataset.Description)
		r.Description = r.APIOpenSearchDataset.Description
		r.APIOpenSearchDataset.ID = types.StringValue(resp.APIOpenSearchDataset.ID)
		r.ID = r.APIOpenSearchDataset.ID
		r.APIOpenSearchDataset.Index = types.StringValue(resp.APIOpenSearchDataset.Index)
		if resp.APIOpenSearchDataset.Metadata == nil {
			r.APIOpenSearchDataset.Metadata = nil
		} else {
			r.APIOpenSearchDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIOpenSearchDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIOpenSearchDataset.Metadata.Created))
			r.APIOpenSearchDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIOpenSearchDataset.Metadata.EnableAcceleration)
			r.APIOpenSearchDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIOpenSearchDataset.Metadata.Modified))
			r.APIOpenSearchDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIOpenSearchDataset.Metadata.Tags))
			for _, v := range resp.APIOpenSearchDataset.Metadata.Tags {
				r.APIOpenSearchDataset.Metadata.Tags = append(r.APIOpenSearchDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIOpenSearchDataset.ProviderID = types.StringValue(resp.APIOpenSearchDataset.ProviderID)
		r.ProviderID = r.APIOpenSearchDataset.ProviderID
		r.APIOpenSearchDataset.TimestampField = types.StringPointerValue(resp.APIOpenSearchDataset.TimestampField)
		r.APIOpenSearchDataset.Type = types.StringValue(resp.APIOpenSearchDataset.Type)
		r.Type = r.APIOpenSearchDataset.Type
	}
	if resp.APITailscaleDataset != nil {
		r.APITailscaleDataset = &tfTypes.APITailscaleDataset{}
		r.APITailscaleDataset.Description = types.StringPointerValue(resp.APITailscaleDataset.Description)
		r.Description = r.APITailscaleDataset.Description
		r.APITailscaleDataset.EnabledEndpoints = make([]types.String, 0, len(resp.APITailscaleDataset.EnabledEndpoints))
		for _, v := range resp.APITailscaleDataset.EnabledEndpoints {
			r.APITailscaleDataset.EnabledEndpoints = append(r.APITailscaleDataset.EnabledEndpoints, types.StringValue(v))
		}
		r.APITailscaleDataset.ID = types.StringValue(resp.APITailscaleDataset.ID)
		r.ID = r.APITailscaleDataset.ID
		if resp.APITailscaleDataset.Metadata == nil {
			r.APITailscaleDataset.Metadata = nil
		} else {
			r.APITailscaleDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APITailscaleDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APITailscaleDataset.Metadata.Created))
			r.APITailscaleDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APITailscaleDataset.Metadata.EnableAcceleration)
			r.APITailscaleDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APITailscaleDataset.Metadata.Modified))
			r.APITailscaleDataset.Metadata.Tags = make([]types.String, 0, len(resp.APITailscaleDataset.Metadata.Tags))
			for _, v := range resp.APITailscaleDataset.Metadata.Tags {
				r.APITailscaleDataset.Metadata.Tags = append(r.APITailscaleDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APITailscaleDataset.ProviderID = types.StringValue(resp.APITailscaleDataset.ProviderID)
		r.ProviderID = r.APITailscaleDataset.ProviderID
		r.APITailscaleDataset.Type = types.StringValue(resp.APITailscaleDataset.Type)
		r.Type = r.APITailscaleDataset.Type
	}
	if resp.APIZoomDataset != nil {
		r.APIZoomDataset = &tfTypes.APIZoomDataset{}
		r.APIZoomDataset.Description = types.StringPointerValue(resp.APIZoomDataset.Description)
		r.Description = r.APIZoomDataset.Description
		r.APIZoomDataset.EnabledEndpoints = make([]types.String, 0, len(resp.APIZoomDataset.EnabledEndpoints))
		for _, v := range resp.APIZoomDataset.EnabledEndpoints {
			r.APIZoomDataset.EnabledEndpoints = append(r.APIZoomDataset.EnabledEndpoints, types.StringValue(v))
		}
		r.APIZoomDataset.ID = types.StringValue(resp.APIZoomDataset.ID)
		r.ID = r.APIZoomDataset.ID
		if resp.APIZoomDataset.Metadata == nil {
			r.APIZoomDataset.Metadata = nil
		} else {
			r.APIZoomDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.APIZoomDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIZoomDataset.Metadata.Created))
			r.APIZoomDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.APIZoomDataset.Metadata.EnableAcceleration)
			r.APIZoomDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.APIZoomDataset.Metadata.Modified))
			r.APIZoomDataset.Metadata.Tags = make([]types.String, 0, len(resp.APIZoomDataset.Metadata.Tags))
			for _, v := range resp.APIZoomDataset.Metadata.Tags {
				r.APIZoomDataset.Metadata.Tags = append(r.APIZoomDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.APIZoomDataset.ProviderID = types.StringValue(resp.APIZoomDataset.ProviderID)
		r.ProviderID = r.APIZoomDataset.ProviderID
		r.APIZoomDataset.Type = types.StringValue(resp.APIZoomDataset.Type)
		r.Type = r.APIZoomDataset.Type
	}
	if resp.AwsSecurityLakeDataset != nil {
		r.AwsSecurityLakeDataset = &tfTypes.AwsSecurityLakeDataset{}
		r.AwsSecurityLakeDataset.Description = types.StringPointerValue(resp.AwsSecurityLakeDataset.Description)
		r.Description = r.AwsSecurityLakeDataset.Description
		r.AwsSecurityLakeDataset.Filter = types.StringPointerValue(resp.AwsSecurityLakeDataset.Filter)
		r.AwsSecurityLakeDataset.ID = types.StringValue(resp.AwsSecurityLakeDataset.ID)
		r.ID = r.AwsSecurityLakeDataset.ID
		if resp.AwsSecurityLakeDataset.Metadata == nil {
			r.AwsSecurityLakeDataset.Metadata = nil
		} else {
			r.AwsSecurityLakeDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.AwsSecurityLakeDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.AwsSecurityLakeDataset.Metadata.Created))
			r.AwsSecurityLakeDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.AwsSecurityLakeDataset.Metadata.EnableAcceleration)
			r.AwsSecurityLakeDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.AwsSecurityLakeDataset.Metadata.Modified))
			r.AwsSecurityLakeDataset.Metadata.Tags = make([]types.String, 0, len(resp.AwsSecurityLakeDataset.Metadata.Tags))
			for _, v := range resp.AwsSecurityLakeDataset.Metadata.Tags {
				r.AwsSecurityLakeDataset.Metadata.Tags = append(r.AwsSecurityLakeDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.AwsSecurityLakeDataset.Path = types.StringPointerValue(resp.AwsSecurityLakeDataset.Path)
		r.AwsSecurityLakeDataset.ProviderID = types.StringValue(resp.AwsSecurityLakeDataset.ProviderID)
		r.ProviderID = r.AwsSecurityLakeDataset.ProviderID
		r.AwsSecurityLakeDataset.SelectedBuckets = []tfTypes.S3Bucket{}

		for _, selectedBucketsItem := range resp.AwsSecurityLakeDataset.SelectedBuckets {
			var selectedBuckets tfTypes.S3Bucket

			selectedBuckets.Name = types.StringPointerValue(selectedBucketsItem.Name)
			selectedBuckets.Region = types.StringPointerValue(selectedBucketsItem.Region)

			r.AwsSecurityLakeDataset.SelectedBuckets = append(r.AwsSecurityLakeDataset.SelectedBuckets, selectedBuckets)
		}
		r.AwsSecurityLakeDataset.Type = types.StringValue(resp.AwsSecurityLakeDataset.Type)
		r.Type = r.AwsSecurityLakeDataset.Type
	}
	if resp.AzureBlobDataset != nil {
		r.AzureBlobDataset = &tfTypes.AzureBlobDataset{}
		r.AzureBlobDataset.ContainerName = types.StringValue(resp.AzureBlobDataset.ContainerName)
		r.AzureBlobDataset.Description = types.StringPointerValue(resp.AzureBlobDataset.Description)
		r.Description = r.AzureBlobDataset.Description
		r.AzureBlobDataset.ExtraPaths = []tfTypes.AzureBlobDatasetExtraPath{}

		for _, extraPathsItem := range resp.AzureBlobDataset.ExtraPaths {
			var extraPaths tfTypes.AzureBlobDatasetExtraPath

			extraPaths.ContainerName = types.StringValue(extraPathsItem.ContainerName)
			extraPaths.Filter = types.StringPointerValue(extraPathsItem.Filter)
			extraPaths.Path = types.StringPointerValue(extraPathsItem.Path)

			r.AzureBlobDataset.ExtraPaths = append(r.AzureBlobDataset.ExtraPaths, extraPaths)
		}
		r.AzureBlobDataset.Filter = types.StringPointerValue(resp.AzureBlobDataset.Filter)
		r.AzureBlobDataset.ID = types.StringValue(resp.AzureBlobDataset.ID)
		r.ID = r.AzureBlobDataset.ID
		if resp.AzureBlobDataset.Metadata == nil {
			r.AzureBlobDataset.Metadata = nil
		} else {
			r.AzureBlobDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.AzureBlobDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.AzureBlobDataset.Metadata.Created))
			r.AzureBlobDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.AzureBlobDataset.Metadata.EnableAcceleration)
			r.AzureBlobDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.AzureBlobDataset.Metadata.Modified))
			r.AzureBlobDataset.Metadata.Tags = make([]types.String, 0, len(resp.AzureBlobDataset.Metadata.Tags))
			for _, v := range resp.AzureBlobDataset.Metadata.Tags {
				r.AzureBlobDataset.Metadata.Tags = append(r.AzureBlobDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.AzureBlobDataset.Path = types.StringPointerValue(resp.AzureBlobDataset.Path)
		r.AzureBlobDataset.ProviderID = types.StringValue(resp.AzureBlobDataset.ProviderID)
		r.ProviderID = r.AzureBlobDataset.ProviderID
		r.AzureBlobDataset.SkipEventTimeFilter = types.BoolPointerValue(resp.AzureBlobDataset.SkipEventTimeFilter)
		r.AzureBlobDataset.StorageClasses = make([]types.String, 0, len(resp.AzureBlobDataset.StorageClasses))
		for _, v := range resp.AzureBlobDataset.StorageClasses {
			r.AzureBlobDataset.StorageClasses = append(r.AzureBlobDataset.StorageClasses, types.StringValue(v))
		}
		r.AzureBlobDataset.Type = types.StringValue(resp.AzureBlobDataset.Type)
		r.Type = r.AzureBlobDataset.Type
	}
	if resp.ClickHouseDataset != nil {
		r.ClickHouseDataset = &tfTypes.ClickHouseDataset{}
		r.ClickHouseDataset.Database = types.StringPointerValue(resp.ClickHouseDataset.Database)
		r.ClickHouseDataset.Description = types.StringPointerValue(resp.ClickHouseDataset.Description)
		r.Description = r.ClickHouseDataset.Description
		r.ClickHouseDataset.ID = types.StringValue(resp.ClickHouseDataset.ID)
		r.ID = r.ClickHouseDataset.ID
		if resp.ClickHouseDataset.Metadata == nil {
			r.ClickHouseDataset.Metadata = nil
		} else {
			r.ClickHouseDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.ClickHouseDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ClickHouseDataset.Metadata.Created))
			r.ClickHouseDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.ClickHouseDataset.Metadata.EnableAcceleration)
			r.ClickHouseDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ClickHouseDataset.Metadata.Modified))
			r.ClickHouseDataset.Metadata.Tags = make([]types.String, 0, len(resp.ClickHouseDataset.Metadata.Tags))
			for _, v := range resp.ClickHouseDataset.Metadata.Tags {
				r.ClickHouseDataset.Metadata.Tags = append(r.ClickHouseDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.ClickHouseDataset.ProviderID = types.StringValue(resp.ClickHouseDataset.ProviderID)
		r.ProviderID = r.ClickHouseDataset.ProviderID
		r.ClickHouseDataset.Table = types.StringValue(resp.ClickHouseDataset.Table)
		r.ClickHouseDataset.TimestampField = types.StringPointerValue(resp.ClickHouseDataset.TimestampField)
		r.ClickHouseDataset.Type = types.StringValue(resp.ClickHouseDataset.Type)
		r.Type = r.ClickHouseDataset.Type
	}
	if resp.CriblLeaderDataset != nil {
		r.CriblLeaderDataset = &tfTypes.CriblLeaderDataset{}
		r.CriblLeaderDataset.Description = types.StringPointerValue(resp.CriblLeaderDataset.Description)
		r.Description = r.CriblLeaderDataset.Description
		r.CriblLeaderDataset.ExtraPaths = []tfTypes.CriblLeaderDatasetExtraPath{}

		for _, extraPathsItem1 := range resp.CriblLeaderDataset.ExtraPaths {
			var extraPaths1 tfTypes.CriblLeaderDatasetExtraPath

			extraPaths1.Filter = types.StringPointerValue(extraPathsItem1.Filter)
			extraPaths1.Path = types.StringValue(extraPathsItem1.Path)

			r.CriblLeaderDataset.ExtraPaths = append(r.CriblLeaderDataset.ExtraPaths, extraPaths1)
		}
		r.CriblLeaderDataset.Filter = types.StringPointerValue(resp.CriblLeaderDataset.Filter)
		r.CriblLeaderDataset.ID = types.StringValue(resp.CriblLeaderDataset.ID)
		r.ID = r.CriblLeaderDataset.ID
		if resp.CriblLeaderDataset.Metadata == nil {
			r.CriblLeaderDataset.Metadata = nil
		} else {
			r.CriblLeaderDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.CriblLeaderDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CriblLeaderDataset.Metadata.Created))
			r.CriblLeaderDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.CriblLeaderDataset.Metadata.EnableAcceleration)
			r.CriblLeaderDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CriblLeaderDataset.Metadata.Modified))
			r.CriblLeaderDataset.Metadata.Tags = make([]types.String, 0, len(resp.CriblLeaderDataset.Metadata.Tags))
			for _, v := range resp.CriblLeaderDataset.Metadata.Tags {
				r.CriblLeaderDataset.Metadata.Tags = append(r.CriblLeaderDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.CriblLeaderDataset.Path = types.StringValue(resp.CriblLeaderDataset.Path)
		r.CriblLeaderDataset.ProviderID = types.StringValue(resp.CriblLeaderDataset.ProviderID)
		r.ProviderID = r.CriblLeaderDataset.ProviderID
		r.CriblLeaderDataset.Type = types.StringValue(resp.CriblLeaderDataset.Type)
		r.Type = r.CriblLeaderDataset.Type
	}
	if resp.EdgeDataset != nil {
		r.EdgeDataset = &tfTypes.EdgeDataset{}
		r.EdgeDataset.Description = types.StringPointerValue(resp.EdgeDataset.Description)
		r.Description = r.EdgeDataset.Description
		r.EdgeDataset.Filter = types.StringPointerValue(resp.EdgeDataset.Filter)
		r.EdgeDataset.Fleets = make([]types.String, 0, len(resp.EdgeDataset.Fleets))
		for _, v := range resp.EdgeDataset.Fleets {
			r.EdgeDataset.Fleets = append(r.EdgeDataset.Fleets, types.StringValue(v))
		}
		r.EdgeDataset.ID = types.StringValue(resp.EdgeDataset.ID)
		r.ID = r.EdgeDataset.ID
		if resp.EdgeDataset.Metadata == nil {
			r.EdgeDataset.Metadata = nil
		} else {
			r.EdgeDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.EdgeDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.EdgeDataset.Metadata.Created))
			r.EdgeDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.EdgeDataset.Metadata.EnableAcceleration)
			r.EdgeDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.EdgeDataset.Metadata.Modified))
			r.EdgeDataset.Metadata.Tags = make([]types.String, 0, len(resp.EdgeDataset.Metadata.Tags))
			for _, v := range resp.EdgeDataset.Metadata.Tags {
				r.EdgeDataset.Metadata.Tags = append(r.EdgeDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.EdgeDataset.Path = types.StringValue(resp.EdgeDataset.Path)
		r.EdgeDataset.ProviderID = types.StringValue(resp.EdgeDataset.ProviderID)
		r.ProviderID = r.EdgeDataset.ProviderID
		r.EdgeDataset.Type = types.StringValue(resp.EdgeDataset.Type)
		r.Type = r.EdgeDataset.Type
	}
	if resp.GcsDataset != nil {
		r.GcsDataset = &tfTypes.GcsDataset{}
		r.GcsDataset.Bucket = types.StringValue(resp.GcsDataset.Bucket)
		r.GcsDataset.Description = types.StringPointerValue(resp.GcsDataset.Description)
		r.Description = r.GcsDataset.Description
		r.GcsDataset.ExtraPaths = []tfTypes.GcsDatasetExtraPath{}

		for _, extraPathsItem2 := range resp.GcsDataset.ExtraPaths {
			var extraPaths2 tfTypes.GcsDatasetExtraPath

			extraPaths2.Bucket = types.StringValue(extraPathsItem2.Bucket)
			extraPaths2.Filter = types.StringPointerValue(extraPathsItem2.Filter)
			extraPaths2.Region = types.StringPointerValue(extraPathsItem2.Region)

			r.GcsDataset.ExtraPaths = append(r.GcsDataset.ExtraPaths, extraPaths2)
		}
		r.GcsDataset.Filter = types.StringPointerValue(resp.GcsDataset.Filter)
		r.GcsDataset.ID = types.StringValue(resp.GcsDataset.ID)
		r.ID = r.GcsDataset.ID
		if resp.GcsDataset.Metadata == nil {
			r.GcsDataset.Metadata = nil
		} else {
			r.GcsDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.GcsDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.GcsDataset.Metadata.Created))
			r.GcsDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.GcsDataset.Metadata.EnableAcceleration)
			r.GcsDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.GcsDataset.Metadata.Modified))
			r.GcsDataset.Metadata.Tags = make([]types.String, 0, len(resp.GcsDataset.Metadata.Tags))
			for _, v := range resp.GcsDataset.Metadata.Tags {
				r.GcsDataset.Metadata.Tags = append(r.GcsDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.GcsDataset.ProviderID = types.StringValue(resp.GcsDataset.ProviderID)
		r.ProviderID = r.GcsDataset.ProviderID
		r.GcsDataset.Region = types.StringPointerValue(resp.GcsDataset.Region)
		r.GcsDataset.SkipEventTimeFilter = types.BoolPointerValue(resp.GcsDataset.SkipEventTimeFilter)
		r.GcsDataset.StorageClasses = make([]types.String, 0, len(resp.GcsDataset.StorageClasses))
		for _, v := range resp.GcsDataset.StorageClasses {
			r.GcsDataset.StorageClasses = append(r.GcsDataset.StorageClasses, types.StringValue(v))
		}
		r.GcsDataset.Type = types.StringValue(resp.GcsDataset.Type)
		r.Type = r.GcsDataset.Type
	}
	if resp.MetaDataset != nil {
		r.MetaDataset = &tfTypes.MetaDataset{}
		r.MetaDataset.Datasets = make([]types.String, 0, len(resp.MetaDataset.Datasets))
		for _, v := range resp.MetaDataset.Datasets {
			r.MetaDataset.Datasets = append(r.MetaDataset.Datasets, types.StringValue(v))
		}
		r.MetaDataset.Description = types.StringPointerValue(resp.MetaDataset.Description)
		r.Description = r.MetaDataset.Description
		r.MetaDataset.ID = types.StringValue(resp.MetaDataset.ID)
		r.ID = r.MetaDataset.ID
		if resp.MetaDataset.Metadata == nil {
			r.MetaDataset.Metadata = nil
		} else {
			r.MetaDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.MetaDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.MetaDataset.Metadata.Created))
			r.MetaDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.MetaDataset.Metadata.EnableAcceleration)
			r.MetaDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.MetaDataset.Metadata.Modified))
			r.MetaDataset.Metadata.Tags = make([]types.String, 0, len(resp.MetaDataset.Metadata.Tags))
			for _, v := range resp.MetaDataset.Metadata.Tags {
				r.MetaDataset.Metadata.Tags = append(r.MetaDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.MetaDataset.ProviderID = types.StringValue(resp.MetaDataset.ProviderID)
		r.ProviderID = r.MetaDataset.ProviderID
		r.MetaDataset.Type = types.StringValue(resp.MetaDataset.Type)
		r.Type = r.MetaDataset.Type
	}
	if resp.PrometheusDataset != nil {
		r.PrometheusDataset = &tfTypes.PrometheusDataset{}
		r.PrometheusDataset.Description = types.StringPointerValue(resp.PrometheusDataset.Description)
		r.Description = r.PrometheusDataset.Description
		r.PrometheusDataset.DesiredNumDataPoints = types.Float64PointerValue(resp.PrometheusDataset.DesiredNumDataPoints)
		r.PrometheusDataset.ID = types.StringValue(resp.PrometheusDataset.ID)
		r.ID = r.PrometheusDataset.ID
		if resp.PrometheusDataset.Metadata == nil {
			r.PrometheusDataset.Metadata = nil
		} else {
			r.PrometheusDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.PrometheusDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.PrometheusDataset.Metadata.Created))
			r.PrometheusDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.PrometheusDataset.Metadata.EnableAcceleration)
			r.PrometheusDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.PrometheusDataset.Metadata.Modified))
			r.PrometheusDataset.Metadata.Tags = make([]types.String, 0, len(resp.PrometheusDataset.Metadata.Tags))
			for _, v := range resp.PrometheusDataset.Metadata.Tags {
				r.PrometheusDataset.Metadata.Tags = append(r.PrometheusDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.PrometheusDataset.MetricNamePattern = types.StringPointerValue(resp.PrometheusDataset.MetricNamePattern)
		r.PrometheusDataset.ProviderID = types.StringValue(resp.PrometheusDataset.ProviderID)
		r.ProviderID = r.PrometheusDataset.ProviderID
		if resp.PrometheusDataset.StepMode != nil {
			r.PrometheusDataset.StepMode = types.StringValue(string(*resp.PrometheusDataset.StepMode))
		} else {
			r.PrometheusDataset.StepMode = types.StringNull()
		}
		r.PrometheusDataset.Type = types.StringValue(resp.PrometheusDataset.Type)
		r.Type = r.PrometheusDataset.Type
	}
	if resp.S3Dataset != nil {
		r.S3Dataset = &tfTypes.S3Dataset{}
		r.S3Dataset.AutoDetectRegion = types.BoolPointerValue(resp.S3Dataset.AutoDetectRegion)
		r.S3Dataset.Bucket = types.StringValue(resp.S3Dataset.Bucket)
		r.S3Dataset.Description = types.StringPointerValue(resp.S3Dataset.Description)
		r.Description = r.S3Dataset.Description
		r.S3Dataset.ExtraPaths = []tfTypes.S3DatasetExtraPath{}

		for _, extraPathsItem3 := range resp.S3Dataset.ExtraPaths {
			var extraPaths3 tfTypes.S3DatasetExtraPath

			extraPaths3.AutoDetectRegion = types.BoolPointerValue(extraPathsItem3.AutoDetectRegion)
			extraPaths3.Bucket = types.StringValue(extraPathsItem3.Bucket)
			extraPaths3.Filter = types.StringPointerValue(extraPathsItem3.Filter)
			extraPaths3.Path = types.StringPointerValue(extraPathsItem3.Path)
			extraPaths3.Region = types.StringPointerValue(extraPathsItem3.Region)

			r.S3Dataset.ExtraPaths = append(r.S3Dataset.ExtraPaths, extraPaths3)
		}
		r.S3Dataset.Filter = types.StringPointerValue(resp.S3Dataset.Filter)
		r.S3Dataset.ID = types.StringValue(resp.S3Dataset.ID)
		r.ID = r.S3Dataset.ID
		if resp.S3Dataset.Metadata == nil {
			r.S3Dataset.Metadata = nil
		} else {
			r.S3Dataset.Metadata = &tfTypes.DatasetMetadata{}
			r.S3Dataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.S3Dataset.Metadata.Created))
			r.S3Dataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.S3Dataset.Metadata.EnableAcceleration)
			r.S3Dataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.S3Dataset.Metadata.Modified))
			r.S3Dataset.Metadata.Tags = make([]types.String, 0, len(resp.S3Dataset.Metadata.Tags))
			for _, v := range resp.S3Dataset.Metadata.Tags {
				r.S3Dataset.Metadata.Tags = append(r.S3Dataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.S3Dataset.Path = types.StringPointerValue(resp.S3Dataset.Path)
		r.S3Dataset.ProviderID = types.StringValue(resp.S3Dataset.ProviderID)
		r.ProviderID = r.S3Dataset.ProviderID
		r.S3Dataset.Region = types.StringPointerValue(resp.S3Dataset.Region)
		r.S3Dataset.SkipEventTimeFilter = types.BoolPointerValue(resp.S3Dataset.SkipEventTimeFilter)
		r.S3Dataset.StorageClasses = make([]types.String, 0, len(resp.S3Dataset.StorageClasses))
		for _, v := range resp.S3Dataset.StorageClasses {
			r.S3Dataset.StorageClasses = append(r.S3Dataset.StorageClasses, types.StringValue(v))
		}
		r.S3Dataset.Type = types.StringValue(resp.S3Dataset.Type)
		r.Type = r.S3Dataset.Type
	}
	if resp.SnowflakeDataset != nil {
		r.SnowflakeDataset = &tfTypes.SnowflakeDataset{}
		r.SnowflakeDataset.Database = types.StringPointerValue(resp.SnowflakeDataset.Database)
		r.SnowflakeDataset.Description = types.StringPointerValue(resp.SnowflakeDataset.Description)
		r.Description = r.SnowflakeDataset.Description
		r.SnowflakeDataset.ID = types.StringValue(resp.SnowflakeDataset.ID)
		r.ID = r.SnowflakeDataset.ID
		if resp.SnowflakeDataset.Metadata == nil {
			r.SnowflakeDataset.Metadata = nil
		} else {
			r.SnowflakeDataset.Metadata = &tfTypes.DatasetMetadata{}
			r.SnowflakeDataset.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.SnowflakeDataset.Metadata.Created))
			r.SnowflakeDataset.Metadata.EnableAcceleration = types.BoolPointerValue(resp.SnowflakeDataset.Metadata.EnableAcceleration)
			r.SnowflakeDataset.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.SnowflakeDataset.Metadata.Modified))
			r.SnowflakeDataset.Metadata.Tags = make([]types.String, 0, len(resp.SnowflakeDataset.Metadata.Tags))
			for _, v := range resp.SnowflakeDataset.Metadata.Tags {
				r.SnowflakeDataset.Metadata.Tags = append(r.SnowflakeDataset.Metadata.Tags, types.StringValue(v))
			}
		}
		r.SnowflakeDataset.ProviderID = types.StringValue(resp.SnowflakeDataset.ProviderID)
		r.ProviderID = r.SnowflakeDataset.ProviderID
		r.SnowflakeDataset.Role = types.StringPointerValue(resp.SnowflakeDataset.Role)
		r.SnowflakeDataset.Schema = types.StringPointerValue(resp.SnowflakeDataset.Schema)
		r.SnowflakeDataset.Table = types.StringValue(resp.SnowflakeDataset.Table)
		r.SnowflakeDataset.TimestampField = types.StringPointerValue(resp.SnowflakeDataset.TimestampField)
		r.SnowflakeDataset.Type = types.StringValue(resp.SnowflakeDataset.Type)
		r.Type = r.SnowflakeDataset.Type
		r.SnowflakeDataset.Warehouse = types.StringPointerValue(resp.SnowflakeDataset.Warehouse)
	}

	return diags
}

func (r *SearchDatasetResourceModel) ToOperationsDeleteDatasetByIDRequest(ctx context.Context) (*operations.DeleteDatasetByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteDatasetByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *SearchDatasetResourceModel) ToOperationsGetDatasetByIDRequest(ctx context.Context) (*operations.GetDatasetByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetDatasetByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *SearchDatasetResourceModel) ToOperationsUpdateDatasetByIDRequest(ctx context.Context) (*operations.UpdateDatasetByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	genericDataset, genericDatasetDiags := r.ToSharedGenericDataset(ctx)
	diags.Append(genericDatasetDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateDatasetByIDRequest{
		ID:             id,
		GenericDataset: *genericDataset,
	}

	return &out, diags
}

func (r *SearchDatasetResourceModel) ToSharedGenericDataset(ctx context.Context) (*shared.GenericDataset, diag.Diagnostics) {
	var diags diag.Diagnostics

	var out shared.GenericDataset
	var apiHTTPDataset *shared.APIHTTPDataset
	if r.APIHTTPDataset != nil {
		var id string
		id = r.APIHTTPDataset.ID.ValueString()

		description := new(string)
		if !r.APIHTTPDataset.Description.IsUnknown() && !r.APIHTTPDataset.Description.IsNull() {
			*description = r.APIHTTPDataset.Description.ValueString()
		} else {
			description = nil
		}
		var providerID string
		providerID = r.APIHTTPDataset.ProviderID.ValueString()

		var typeVar string
		typeVar = r.APIHTTPDataset.Type.ValueString()

		var metadata *shared.DatasetMetadata
		if r.APIHTTPDataset.Metadata != nil {
			created := new(time.Time)
			if !r.APIHTTPDataset.Metadata.Created.IsUnknown() && !r.APIHTTPDataset.Metadata.Created.IsNull() {
				*created, _ = time.Parse(time.RFC3339Nano, r.APIHTTPDataset.Metadata.Created.ValueString())
			} else {
				created = nil
			}
			modified := new(time.Time)
			if !r.APIHTTPDataset.Metadata.Modified.IsUnknown() && !r.APIHTTPDataset.Metadata.Modified.IsNull() {
				*modified, _ = time.Parse(time.RFC3339Nano, r.APIHTTPDataset.Metadata.Modified.ValueString())
			} else {
				modified = nil
			}
			tags := make([]string, 0, len(r.APIHTTPDataset.Metadata.Tags))
			for _, tagsItem := range r.APIHTTPDataset.Metadata.Tags {
				tags = append(tags, tagsItem.ValueString())
			}
			enableAcceleration := new(bool)
			if !r.APIHTTPDataset.Metadata.EnableAcceleration.IsUnknown() && !r.APIHTTPDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration = r.APIHTTPDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration = nil
			}
			metadata = &shared.DatasetMetadata{
				Created:            created,
				Modified:           modified,
				Tags:               tags,
				EnableAcceleration: enableAcceleration,
			}
		}
		enabledEndpoints := make([]string, 0, len(r.APIHTTPDataset.EnabledEndpoints))
		for _, enabledEndpointsItem := range r.APIHTTPDataset.EnabledEndpoints {
			enabledEndpoints = append(enabledEndpoints, enabledEndpointsItem.ValueString())
		}
		apiHTTPDataset = &shared.APIHTTPDataset{
			ID:               id,
			Description:      description,
			ProviderID:       providerID,
			Type:             typeVar,
			Metadata:         metadata,
			EnabledEndpoints: enabledEndpoints,
		}
	}
	if apiHTTPDataset != nil {
		out = shared.GenericDataset{
			APIHTTPDataset: apiHTTPDataset,
		}
	}
	var apiAwsDataset *shared.APIAwsDataset
	if r.APIAwsDataset != nil {
		var id1 string
		id1 = r.APIAwsDataset.ID.ValueString()

		description1 := new(string)
		if !r.APIAwsDataset.Description.IsUnknown() && !r.APIAwsDataset.Description.IsNull() {
			*description1 = r.APIAwsDataset.Description.ValueString()
		} else {
			description1 = nil
		}
		var providerId1 string
		providerId1 = r.APIAwsDataset.ProviderID.ValueString()

		var typeVar1 string
		typeVar1 = r.APIAwsDataset.Type.ValueString()

		var metadata1 *shared.DatasetMetadata
		if r.APIAwsDataset.Metadata != nil {
			created1 := new(time.Time)
			if !r.APIAwsDataset.Metadata.Created.IsUnknown() && !r.APIAwsDataset.Metadata.Created.IsNull() {
				*created1, _ = time.Parse(time.RFC3339Nano, r.APIAwsDataset.Metadata.Created.ValueString())
			} else {
				created1 = nil
			}
			modified1 := new(time.Time)
			if !r.APIAwsDataset.Metadata.Modified.IsUnknown() && !r.APIAwsDataset.Metadata.Modified.IsNull() {
				*modified1, _ = time.Parse(time.RFC3339Nano, r.APIAwsDataset.Metadata.Modified.ValueString())
			} else {
				modified1 = nil
			}
			tags1 := make([]string, 0, len(r.APIAwsDataset.Metadata.Tags))
			for _, tagsItem1 := range r.APIAwsDataset.Metadata.Tags {
				tags1 = append(tags1, tagsItem1.ValueString())
			}
			enableAcceleration1 := new(bool)
			if !r.APIAwsDataset.Metadata.EnableAcceleration.IsUnknown() && !r.APIAwsDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration1 = r.APIAwsDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration1 = nil
			}
			metadata1 = &shared.DatasetMetadata{
				Created:            created1,
				Modified:           modified1,
				Tags:               tags1,
				EnableAcceleration: enableAcceleration1,
			}
		}
		enabledEndpoints1 := make([]string, 0, len(r.APIAwsDataset.EnabledEndpoints))
		for _, enabledEndpointsItem1 := range r.APIAwsDataset.EnabledEndpoints {
			enabledEndpoints1 = append(enabledEndpoints1, enabledEndpointsItem1.ValueString())
		}
		regions := make([]string, 0, len(r.APIAwsDataset.Regions))
		for _, regionsItem := range r.APIAwsDataset.Regions {
			regions = append(regions, regionsItem.ValueString())
		}
		apiAwsDataset = &shared.APIAwsDataset{
			ID:               id1,
			Description:      description1,
			ProviderID:       providerId1,
			Type:             typeVar1,
			Metadata:         metadata1,
			EnabledEndpoints: enabledEndpoints1,
			Regions:          regions,
		}
	}
	if apiAwsDataset != nil {
		out = shared.GenericDataset{
			APIAwsDataset: apiAwsDataset,
		}
	}
	var apiAzureDataset *shared.APIAzureDataset
	if r.APIAzureDataset != nil {
		var id2 string
		id2 = r.APIAzureDataset.ID.ValueString()

		description2 := new(string)
		if !r.APIAzureDataset.Description.IsUnknown() && !r.APIAzureDataset.Description.IsNull() {
			*description2 = r.APIAzureDataset.Description.ValueString()
		} else {
			description2 = nil
		}
		var providerId2 string
		providerId2 = r.APIAzureDataset.ProviderID.ValueString()

		var typeVar2 string
		typeVar2 = r.APIAzureDataset.Type.ValueString()

		var metadata2 *shared.DatasetMetadata
		if r.APIAzureDataset.Metadata != nil {
			created2 := new(time.Time)
			if !r.APIAzureDataset.Metadata.Created.IsUnknown() && !r.APIAzureDataset.Metadata.Created.IsNull() {
				*created2, _ = time.Parse(time.RFC3339Nano, r.APIAzureDataset.Metadata.Created.ValueString())
			} else {
				created2 = nil
			}
			modified2 := new(time.Time)
			if !r.APIAzureDataset.Metadata.Modified.IsUnknown() && !r.APIAzureDataset.Metadata.Modified.IsNull() {
				*modified2, _ = time.Parse(time.RFC3339Nano, r.APIAzureDataset.Metadata.Modified.ValueString())
			} else {
				modified2 = nil
			}
			tags2 := make([]string, 0, len(r.APIAzureDataset.Metadata.Tags))
			for _, tagsItem2 := range r.APIAzureDataset.Metadata.Tags {
				tags2 = append(tags2, tagsItem2.ValueString())
			}
			enableAcceleration2 := new(bool)
			if !r.APIAzureDataset.Metadata.EnableAcceleration.IsUnknown() && !r.APIAzureDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration2 = r.APIAzureDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration2 = nil
			}
			metadata2 = &shared.DatasetMetadata{
				Created:            created2,
				Modified:           modified2,
				Tags:               tags2,
				EnableAcceleration: enableAcceleration2,
			}
		}
		enabledEndpoints2 := make([]string, 0, len(r.APIAzureDataset.EnabledEndpoints))
		for _, enabledEndpointsItem2 := range r.APIAzureDataset.EnabledEndpoints {
			enabledEndpoints2 = append(enabledEndpoints2, enabledEndpointsItem2.ValueString())
		}
		subscriptionIds := make([]string, 0, len(r.APIAzureDataset.SubscriptionIds))
		for _, subscriptionIdsItem := range r.APIAzureDataset.SubscriptionIds {
			subscriptionIds = append(subscriptionIds, subscriptionIdsItem.ValueString())
		}
		apiAzureDataset = &shared.APIAzureDataset{
			ID:               id2,
			Description:      description2,
			ProviderID:       providerId2,
			Type:             typeVar2,
			Metadata:         metadata2,
			EnabledEndpoints: enabledEndpoints2,
			SubscriptionIds:  subscriptionIds,
		}
	}
	if apiAzureDataset != nil {
		out = shared.GenericDataset{
			APIAzureDataset: apiAzureDataset,
		}
	}
	var apiGcpDataset *shared.APIGcpDataset
	if r.APIGcpDataset != nil {
		var id3 string
		id3 = r.APIGcpDataset.ID.ValueString()

		description3 := new(string)
		if !r.APIGcpDataset.Description.IsUnknown() && !r.APIGcpDataset.Description.IsNull() {
			*description3 = r.APIGcpDataset.Description.ValueString()
		} else {
			description3 = nil
		}
		var providerId3 string
		providerId3 = r.APIGcpDataset.ProviderID.ValueString()

		var typeVar3 string
		typeVar3 = r.APIGcpDataset.Type.ValueString()

		var metadata3 *shared.DatasetMetadata
		if r.APIGcpDataset.Metadata != nil {
			created3 := new(time.Time)
			if !r.APIGcpDataset.Metadata.Created.IsUnknown() && !r.APIGcpDataset.Metadata.Created.IsNull() {
				*created3, _ = time.Parse(time.RFC3339Nano, r.APIGcpDataset.Metadata.Created.ValueString())
			} else {
				created3 = nil
			}
			modified3 := new(time.Time)
			if !r.APIGcpDataset.Metadata.Modified.IsUnknown() && !r.APIGcpDataset.Metadata.Modified.IsNull() {
				*modified3, _ = time.Parse(time.RFC3339Nano, r.APIGcpDataset.Metadata.Modified.ValueString())
			} else {
				modified3 = nil
			}
			tags3 := make([]string, 0, len(r.APIGcpDataset.Metadata.Tags))
			for _, tagsItem3 := range r.APIGcpDataset.Metadata.Tags {
				tags3 = append(tags3, tagsItem3.ValueString())
			}
			enableAcceleration3 := new(bool)
			if !r.APIGcpDataset.Metadata.EnableAcceleration.IsUnknown() && !r.APIGcpDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration3 = r.APIGcpDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration3 = nil
			}
			metadata3 = &shared.DatasetMetadata{
				Created:            created3,
				Modified:           modified3,
				Tags:               tags3,
				EnableAcceleration: enableAcceleration3,
			}
		}
		endpointConfigs := make([]shared.GcpEndpointConfig, 0, len(r.APIGcpDataset.EndpointConfigs))
		for _, endpointConfigsItem := range r.APIGcpDataset.EndpointConfigs {
			var endpointName string
			endpointName = endpointConfigsItem.EndpointName.ValueString()

			region := new(string)
			if !endpointConfigsItem.Region.IsUnknown() && !endpointConfigsItem.Region.IsNull() {
				*region = endpointConfigsItem.Region.ValueString()
			} else {
				region = nil
			}
			endpointConfigs = append(endpointConfigs, shared.GcpEndpointConfig{
				EndpointName: endpointName,
				Region:       region,
			})
		}
		apiGcpDataset = &shared.APIGcpDataset{
			ID:              id3,
			Description:     description3,
			ProviderID:      providerId3,
			Type:            typeVar3,
			Metadata:        metadata3,
			EndpointConfigs: endpointConfigs,
		}
	}
	if apiGcpDataset != nil {
		out = shared.GenericDataset{
			APIGcpDataset: apiGcpDataset,
		}
	}
	var apiGoogleWorkspaceDataset *shared.APIGoogleWorkspaceDataset
	if r.APIGoogleWorkspaceDataset != nil {
		var id4 string
		id4 = r.APIGoogleWorkspaceDataset.ID.ValueString()

		description4 := new(string)
		if !r.APIGoogleWorkspaceDataset.Description.IsUnknown() && !r.APIGoogleWorkspaceDataset.Description.IsNull() {
			*description4 = r.APIGoogleWorkspaceDataset.Description.ValueString()
		} else {
			description4 = nil
		}
		var providerId4 string
		providerId4 = r.APIGoogleWorkspaceDataset.ProviderID.ValueString()

		var typeVar4 string
		typeVar4 = r.APIGoogleWorkspaceDataset.Type.ValueString()

		var metadata4 *shared.DatasetMetadata
		if r.APIGoogleWorkspaceDataset.Metadata != nil {
			created4 := new(time.Time)
			if !r.APIGoogleWorkspaceDataset.Metadata.Created.IsUnknown() && !r.APIGoogleWorkspaceDataset.Metadata.Created.IsNull() {
				*created4, _ = time.Parse(time.RFC3339Nano, r.APIGoogleWorkspaceDataset.Metadata.Created.ValueString())
			} else {
				created4 = nil
			}
			modified4 := new(time.Time)
			if !r.APIGoogleWorkspaceDataset.Metadata.Modified.IsUnknown() && !r.APIGoogleWorkspaceDataset.Metadata.Modified.IsNull() {
				*modified4, _ = time.Parse(time.RFC3339Nano, r.APIGoogleWorkspaceDataset.Metadata.Modified.ValueString())
			} else {
				modified4 = nil
			}
			tags4 := make([]string, 0, len(r.APIGoogleWorkspaceDataset.Metadata.Tags))
			for _, tagsItem4 := range r.APIGoogleWorkspaceDataset.Metadata.Tags {
				tags4 = append(tags4, tagsItem4.ValueString())
			}
			enableAcceleration4 := new(bool)
			if !r.APIGoogleWorkspaceDataset.Metadata.EnableAcceleration.IsUnknown() && !r.APIGoogleWorkspaceDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration4 = r.APIGoogleWorkspaceDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration4 = nil
			}
			metadata4 = &shared.DatasetMetadata{
				Created:            created4,
				Modified:           modified4,
				Tags:               tags4,
				EnableAcceleration: enableAcceleration4,
			}
		}
		enabledEndpoints3 := make([]string, 0, len(r.APIGoogleWorkspaceDataset.EnabledEndpoints))
		for _, enabledEndpointsItem3 := range r.APIGoogleWorkspaceDataset.EnabledEndpoints {
			enabledEndpoints3 = append(enabledEndpoints3, enabledEndpointsItem3.ValueString())
		}
		apiGoogleWorkspaceDataset = &shared.APIGoogleWorkspaceDataset{
			ID:               id4,
			Description:      description4,
			ProviderID:       providerId4,
			Type:             typeVar4,
			Metadata:         metadata4,
			EnabledEndpoints: enabledEndpoints3,
		}
	}
	if apiGoogleWorkspaceDataset != nil {
		out = shared.GenericDataset{
			APIGoogleWorkspaceDataset: apiGoogleWorkspaceDataset,
		}
	}
	var apiMsGraphDataset *shared.APIMsGraphDataset
	if r.APIMsGraphDataset != nil {
		var id5 string
		id5 = r.APIMsGraphDataset.ID.ValueString()

		description5 := new(string)
		if !r.APIMsGraphDataset.Description.IsUnknown() && !r.APIMsGraphDataset.Description.IsNull() {
			*description5 = r.APIMsGraphDataset.Description.ValueString()
		} else {
			description5 = nil
		}
		var providerId5 string
		providerId5 = r.APIMsGraphDataset.ProviderID.ValueString()

		var typeVar5 string
		typeVar5 = r.APIMsGraphDataset.Type.ValueString()

		var metadata5 *shared.DatasetMetadata
		if r.APIMsGraphDataset.Metadata != nil {
			created5 := new(time.Time)
			if !r.APIMsGraphDataset.Metadata.Created.IsUnknown() && !r.APIMsGraphDataset.Metadata.Created.IsNull() {
				*created5, _ = time.Parse(time.RFC3339Nano, r.APIMsGraphDataset.Metadata.Created.ValueString())
			} else {
				created5 = nil
			}
			modified5 := new(time.Time)
			if !r.APIMsGraphDataset.Metadata.Modified.IsUnknown() && !r.APIMsGraphDataset.Metadata.Modified.IsNull() {
				*modified5, _ = time.Parse(time.RFC3339Nano, r.APIMsGraphDataset.Metadata.Modified.ValueString())
			} else {
				modified5 = nil
			}
			tags5 := make([]string, 0, len(r.APIMsGraphDataset.Metadata.Tags))
			for _, tagsItem5 := range r.APIMsGraphDataset.Metadata.Tags {
				tags5 = append(tags5, tagsItem5.ValueString())
			}
			enableAcceleration5 := new(bool)
			if !r.APIMsGraphDataset.Metadata.EnableAcceleration.IsUnknown() && !r.APIMsGraphDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration5 = r.APIMsGraphDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration5 = nil
			}
			metadata5 = &shared.DatasetMetadata{
				Created:            created5,
				Modified:           modified5,
				Tags:               tags5,
				EnableAcceleration: enableAcceleration5,
			}
		}
		enabledEndpoints4 := make([]string, 0, len(r.APIMsGraphDataset.EnabledEndpoints))
		for _, enabledEndpointsItem4 := range r.APIMsGraphDataset.EnabledEndpoints {
			enabledEndpoints4 = append(enabledEndpoints4, enabledEndpointsItem4.ValueString())
		}
		apiMsGraphDataset = &shared.APIMsGraphDataset{
			ID:               id5,
			Description:      description5,
			ProviderID:       providerId5,
			Type:             typeVar5,
			Metadata:         metadata5,
			EnabledEndpoints: enabledEndpoints4,
		}
	}
	if apiMsGraphDataset != nil {
		out = shared.GenericDataset{
			APIMsGraphDataset: apiMsGraphDataset,
		}
	}
	var apiOktaDataset *shared.APIOktaDataset
	if r.APIOktaDataset != nil {
		var id6 string
		id6 = r.APIOktaDataset.ID.ValueString()

		description6 := new(string)
		if !r.APIOktaDataset.Description.IsUnknown() && !r.APIOktaDataset.Description.IsNull() {
			*description6 = r.APIOktaDataset.Description.ValueString()
		} else {
			description6 = nil
		}
		var providerId6 string
		providerId6 = r.APIOktaDataset.ProviderID.ValueString()

		var typeVar6 string
		typeVar6 = r.APIOktaDataset.Type.ValueString()

		var metadata6 *shared.DatasetMetadata
		if r.APIOktaDataset.Metadata != nil {
			created6 := new(time.Time)
			if !r.APIOktaDataset.Metadata.Created.IsUnknown() && !r.APIOktaDataset.Metadata.Created.IsNull() {
				*created6, _ = time.Parse(time.RFC3339Nano, r.APIOktaDataset.Metadata.Created.ValueString())
			} else {
				created6 = nil
			}
			modified6 := new(time.Time)
			if !r.APIOktaDataset.Metadata.Modified.IsUnknown() && !r.APIOktaDataset.Metadata.Modified.IsNull() {
				*modified6, _ = time.Parse(time.RFC3339Nano, r.APIOktaDataset.Metadata.Modified.ValueString())
			} else {
				modified6 = nil
			}
			tags6 := make([]string, 0, len(r.APIOktaDataset.Metadata.Tags))
			for _, tagsItem6 := range r.APIOktaDataset.Metadata.Tags {
				tags6 = append(tags6, tagsItem6.ValueString())
			}
			enableAcceleration6 := new(bool)
			if !r.APIOktaDataset.Metadata.EnableAcceleration.IsUnknown() && !r.APIOktaDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration6 = r.APIOktaDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration6 = nil
			}
			metadata6 = &shared.DatasetMetadata{
				Created:            created6,
				Modified:           modified6,
				Tags:               tags6,
				EnableAcceleration: enableAcceleration6,
			}
		}
		enabledEndpoints5 := make([]string, 0, len(r.APIOktaDataset.EnabledEndpoints))
		for _, enabledEndpointsItem5 := range r.APIOktaDataset.EnabledEndpoints {
			enabledEndpoints5 = append(enabledEndpoints5, enabledEndpointsItem5.ValueString())
		}
		apiOktaDataset = &shared.APIOktaDataset{
			ID:               id6,
			Description:      description6,
			ProviderID:       providerId6,
			Type:             typeVar6,
			Metadata:         metadata6,
			EnabledEndpoints: enabledEndpoints5,
		}
	}
	if apiOktaDataset != nil {
		out = shared.GenericDataset{
			APIOktaDataset: apiOktaDataset,
		}
	}
	var apiTailscaleDataset *shared.APITailscaleDataset
	if r.APITailscaleDataset != nil {
		var id7 string
		id7 = r.APITailscaleDataset.ID.ValueString()

		description7 := new(string)
		if !r.APITailscaleDataset.Description.IsUnknown() && !r.APITailscaleDataset.Description.IsNull() {
			*description7 = r.APITailscaleDataset.Description.ValueString()
		} else {
			description7 = nil
		}
		var providerId7 string
		providerId7 = r.APITailscaleDataset.ProviderID.ValueString()

		var typeVar7 string
		typeVar7 = r.APITailscaleDataset.Type.ValueString()

		var metadata7 *shared.DatasetMetadata
		if r.APITailscaleDataset.Metadata != nil {
			created7 := new(time.Time)
			if !r.APITailscaleDataset.Metadata.Created.IsUnknown() && !r.APITailscaleDataset.Metadata.Created.IsNull() {
				*created7, _ = time.Parse(time.RFC3339Nano, r.APITailscaleDataset.Metadata.Created.ValueString())
			} else {
				created7 = nil
			}
			modified7 := new(time.Time)
			if !r.APITailscaleDataset.Metadata.Modified.IsUnknown() && !r.APITailscaleDataset.Metadata.Modified.IsNull() {
				*modified7, _ = time.Parse(time.RFC3339Nano, r.APITailscaleDataset.Metadata.Modified.ValueString())
			} else {
				modified7 = nil
			}
			tags7 := make([]string, 0, len(r.APITailscaleDataset.Metadata.Tags))
			for _, tagsItem7 := range r.APITailscaleDataset.Metadata.Tags {
				tags7 = append(tags7, tagsItem7.ValueString())
			}
			enableAcceleration7 := new(bool)
			if !r.APITailscaleDataset.Metadata.EnableAcceleration.IsUnknown() && !r.APITailscaleDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration7 = r.APITailscaleDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration7 = nil
			}
			metadata7 = &shared.DatasetMetadata{
				Created:            created7,
				Modified:           modified7,
				Tags:               tags7,
				EnableAcceleration: enableAcceleration7,
			}
		}
		enabledEndpoints6 := make([]string, 0, len(r.APITailscaleDataset.EnabledEndpoints))
		for _, enabledEndpointsItem6 := range r.APITailscaleDataset.EnabledEndpoints {
			enabledEndpoints6 = append(enabledEndpoints6, enabledEndpointsItem6.ValueString())
		}
		apiTailscaleDataset = &shared.APITailscaleDataset{
			ID:               id7,
			Description:      description7,
			ProviderID:       providerId7,
			Type:             typeVar7,
			Metadata:         metadata7,
			EnabledEndpoints: enabledEndpoints6,
		}
	}
	if apiTailscaleDataset != nil {
		out = shared.GenericDataset{
			APITailscaleDataset: apiTailscaleDataset,
		}
	}
	var apiZoomDataset *shared.APIZoomDataset
	if r.APIZoomDataset != nil {
		var id8 string
		id8 = r.APIZoomDataset.ID.ValueString()

		description8 := new(string)
		if !r.APIZoomDataset.Description.IsUnknown() && !r.APIZoomDataset.Description.IsNull() {
			*description8 = r.APIZoomDataset.Description.ValueString()
		} else {
			description8 = nil
		}
		var providerId8 string
		providerId8 = r.APIZoomDataset.ProviderID.ValueString()

		var typeVar8 string
		typeVar8 = r.APIZoomDataset.Type.ValueString()

		var metadata8 *shared.DatasetMetadata
		if r.APIZoomDataset.Metadata != nil {
			created8 := new(time.Time)
			if !r.APIZoomDataset.Metadata.Created.IsUnknown() && !r.APIZoomDataset.Metadata.Created.IsNull() {
				*created8, _ = time.Parse(time.RFC3339Nano, r.APIZoomDataset.Metadata.Created.ValueString())
			} else {
				created8 = nil
			}
			modified8 := new(time.Time)
			if !r.APIZoomDataset.Metadata.Modified.IsUnknown() && !r.APIZoomDataset.Metadata.Modified.IsNull() {
				*modified8, _ = time.Parse(time.RFC3339Nano, r.APIZoomDataset.Metadata.Modified.ValueString())
			} else {
				modified8 = nil
			}
			tags8 := make([]string, 0, len(r.APIZoomDataset.Metadata.Tags))
			for _, tagsItem8 := range r.APIZoomDataset.Metadata.Tags {
				tags8 = append(tags8, tagsItem8.ValueString())
			}
			enableAcceleration8 := new(bool)
			if !r.APIZoomDataset.Metadata.EnableAcceleration.IsUnknown() && !r.APIZoomDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration8 = r.APIZoomDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration8 = nil
			}
			metadata8 = &shared.DatasetMetadata{
				Created:            created8,
				Modified:           modified8,
				Tags:               tags8,
				EnableAcceleration: enableAcceleration8,
			}
		}
		enabledEndpoints7 := make([]string, 0, len(r.APIZoomDataset.EnabledEndpoints))
		for _, enabledEndpointsItem7 := range r.APIZoomDataset.EnabledEndpoints {
			enabledEndpoints7 = append(enabledEndpoints7, enabledEndpointsItem7.ValueString())
		}
		apiZoomDataset = &shared.APIZoomDataset{
			ID:               id8,
			Description:      description8,
			ProviderID:       providerId8,
			Type:             typeVar8,
			Metadata:         metadata8,
			EnabledEndpoints: enabledEndpoints7,
		}
	}
	if apiZoomDataset != nil {
		out = shared.GenericDataset{
			APIZoomDataset: apiZoomDataset,
		}
	}
	var apiAzureDataExplorerDataset *shared.APIAzureDataExplorerDataset
	if r.APIAzureDataExplorerDataset != nil {
		var id9 string
		id9 = r.APIAzureDataExplorerDataset.ID.ValueString()

		description9 := new(string)
		if !r.APIAzureDataExplorerDataset.Description.IsUnknown() && !r.APIAzureDataExplorerDataset.Description.IsNull() {
			*description9 = r.APIAzureDataExplorerDataset.Description.ValueString()
		} else {
			description9 = nil
		}
		var providerId9 string
		providerId9 = r.APIAzureDataExplorerDataset.ProviderID.ValueString()

		var typeVar9 string
		typeVar9 = r.APIAzureDataExplorerDataset.Type.ValueString()

		var metadata9 *shared.DatasetMetadata
		if r.APIAzureDataExplorerDataset.Metadata != nil {
			created9 := new(time.Time)
			if !r.APIAzureDataExplorerDataset.Metadata.Created.IsUnknown() && !r.APIAzureDataExplorerDataset.Metadata.Created.IsNull() {
				*created9, _ = time.Parse(time.RFC3339Nano, r.APIAzureDataExplorerDataset.Metadata.Created.ValueString())
			} else {
				created9 = nil
			}
			modified9 := new(time.Time)
			if !r.APIAzureDataExplorerDataset.Metadata.Modified.IsUnknown() && !r.APIAzureDataExplorerDataset.Metadata.Modified.IsNull() {
				*modified9, _ = time.Parse(time.RFC3339Nano, r.APIAzureDataExplorerDataset.Metadata.Modified.ValueString())
			} else {
				modified9 = nil
			}
			tags9 := make([]string, 0, len(r.APIAzureDataExplorerDataset.Metadata.Tags))
			for _, tagsItem9 := range r.APIAzureDataExplorerDataset.Metadata.Tags {
				tags9 = append(tags9, tagsItem9.ValueString())
			}
			enableAcceleration9 := new(bool)
			if !r.APIAzureDataExplorerDataset.Metadata.EnableAcceleration.IsUnknown() && !r.APIAzureDataExplorerDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration9 = r.APIAzureDataExplorerDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration9 = nil
			}
			metadata9 = &shared.DatasetMetadata{
				Created:            created9,
				Modified:           modified9,
				Tags:               tags9,
				EnableAcceleration: enableAcceleration9,
			}
		}
		var cluster string
		cluster = r.APIAzureDataExplorerDataset.Cluster.ValueString()

		var location string
		location = r.APIAzureDataExplorerDataset.Location.ValueString()

		var database string
		database = r.APIAzureDataExplorerDataset.Database.ValueString()

		var table string
		table = r.APIAzureDataExplorerDataset.Table.ValueString()

		timestampField := new(string)
		if !r.APIAzureDataExplorerDataset.TimestampField.IsUnknown() && !r.APIAzureDataExplorerDataset.TimestampField.IsNull() {
			*timestampField = r.APIAzureDataExplorerDataset.TimestampField.ValueString()
		} else {
			timestampField = nil
		}
		timestampFieldContents := new(string)
		if !r.APIAzureDataExplorerDataset.TimestampFieldContents.IsUnknown() && !r.APIAzureDataExplorerDataset.TimestampFieldContents.IsNull() {
			*timestampFieldContents = r.APIAzureDataExplorerDataset.TimestampFieldContents.ValueString()
		} else {
			timestampFieldContents = nil
		}
		apiAzureDataExplorerDataset = &shared.APIAzureDataExplorerDataset{
			ID:                     id9,
			Description:            description9,
			ProviderID:             providerId9,
			Type:                   typeVar9,
			Metadata:               metadata9,
			Cluster:                cluster,
			Location:               location,
			Database:               database,
			Table:                  table,
			TimestampField:         timestampField,
			TimestampFieldContents: timestampFieldContents,
		}
	}
	if apiAzureDataExplorerDataset != nil {
		out = shared.GenericDataset{
			APIAzureDataExplorerDataset: apiAzureDataExplorerDataset,
		}
	}
	var snowflakeDataset *shared.SnowflakeDataset
	if r.SnowflakeDataset != nil {
		var id10 string
		id10 = r.SnowflakeDataset.ID.ValueString()

		description10 := new(string)
		if !r.SnowflakeDataset.Description.IsUnknown() && !r.SnowflakeDataset.Description.IsNull() {
			*description10 = r.SnowflakeDataset.Description.ValueString()
		} else {
			description10 = nil
		}
		var providerId10 string
		providerId10 = r.SnowflakeDataset.ProviderID.ValueString()

		var typeVar10 string
		typeVar10 = r.SnowflakeDataset.Type.ValueString()

		var metadata10 *shared.DatasetMetadata
		if r.SnowflakeDataset.Metadata != nil {
			created10 := new(time.Time)
			if !r.SnowflakeDataset.Metadata.Created.IsUnknown() && !r.SnowflakeDataset.Metadata.Created.IsNull() {
				*created10, _ = time.Parse(time.RFC3339Nano, r.SnowflakeDataset.Metadata.Created.ValueString())
			} else {
				created10 = nil
			}
			modified10 := new(time.Time)
			if !r.SnowflakeDataset.Metadata.Modified.IsUnknown() && !r.SnowflakeDataset.Metadata.Modified.IsNull() {
				*modified10, _ = time.Parse(time.RFC3339Nano, r.SnowflakeDataset.Metadata.Modified.ValueString())
			} else {
				modified10 = nil
			}
			tags10 := make([]string, 0, len(r.SnowflakeDataset.Metadata.Tags))
			for _, tagsItem10 := range r.SnowflakeDataset.Metadata.Tags {
				tags10 = append(tags10, tagsItem10.ValueString())
			}
			enableAcceleration10 := new(bool)
			if !r.SnowflakeDataset.Metadata.EnableAcceleration.IsUnknown() && !r.SnowflakeDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration10 = r.SnowflakeDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration10 = nil
			}
			metadata10 = &shared.DatasetMetadata{
				Created:            created10,
				Modified:           modified10,
				Tags:               tags10,
				EnableAcceleration: enableAcceleration10,
			}
		}
		warehouse := new(string)
		if !r.SnowflakeDataset.Warehouse.IsUnknown() && !r.SnowflakeDataset.Warehouse.IsNull() {
			*warehouse = r.SnowflakeDataset.Warehouse.ValueString()
		} else {
			warehouse = nil
		}
		database1 := new(string)
		if !r.SnowflakeDataset.Database.IsUnknown() && !r.SnowflakeDataset.Database.IsNull() {
			*database1 = r.SnowflakeDataset.Database.ValueString()
		} else {
			database1 = nil
		}
		schema := new(string)
		if !r.SnowflakeDataset.Schema.IsUnknown() && !r.SnowflakeDataset.Schema.IsNull() {
			*schema = r.SnowflakeDataset.Schema.ValueString()
		} else {
			schema = nil
		}
		var table1 string
		table1 = r.SnowflakeDataset.Table.ValueString()

		timestampField1 := new(string)
		if !r.SnowflakeDataset.TimestampField.IsUnknown() && !r.SnowflakeDataset.TimestampField.IsNull() {
			*timestampField1 = r.SnowflakeDataset.TimestampField.ValueString()
		} else {
			timestampField1 = nil
		}
		role := new(string)
		if !r.SnowflakeDataset.Role.IsUnknown() && !r.SnowflakeDataset.Role.IsNull() {
			*role = r.SnowflakeDataset.Role.ValueString()
		} else {
			role = nil
		}
		snowflakeDataset = &shared.SnowflakeDataset{
			ID:             id10,
			Description:    description10,
			ProviderID:     providerId10,
			Type:           typeVar10,
			Metadata:       metadata10,
			Warehouse:      warehouse,
			Database:       database1,
			Schema:         schema,
			Table:          table1,
			TimestampField: timestampField1,
			Role:           role,
		}
	}
	if snowflakeDataset != nil {
		out = shared.GenericDataset{
			SnowflakeDataset: snowflakeDataset,
		}
	}
	var clickHouseDataset *shared.ClickHouseDataset
	if r.ClickHouseDataset != nil {
		var id11 string
		id11 = r.ClickHouseDataset.ID.ValueString()

		description11 := new(string)
		if !r.ClickHouseDataset.Description.IsUnknown() && !r.ClickHouseDataset.Description.IsNull() {
			*description11 = r.ClickHouseDataset.Description.ValueString()
		} else {
			description11 = nil
		}
		var providerId11 string
		providerId11 = r.ClickHouseDataset.ProviderID.ValueString()

		var typeVar11 string
		typeVar11 = r.ClickHouseDataset.Type.ValueString()

		var metadata11 *shared.DatasetMetadata
		if r.ClickHouseDataset.Metadata != nil {
			created11 := new(time.Time)
			if !r.ClickHouseDataset.Metadata.Created.IsUnknown() && !r.ClickHouseDataset.Metadata.Created.IsNull() {
				*created11, _ = time.Parse(time.RFC3339Nano, r.ClickHouseDataset.Metadata.Created.ValueString())
			} else {
				created11 = nil
			}
			modified11 := new(time.Time)
			if !r.ClickHouseDataset.Metadata.Modified.IsUnknown() && !r.ClickHouseDataset.Metadata.Modified.IsNull() {
				*modified11, _ = time.Parse(time.RFC3339Nano, r.ClickHouseDataset.Metadata.Modified.ValueString())
			} else {
				modified11 = nil
			}
			tags11 := make([]string, 0, len(r.ClickHouseDataset.Metadata.Tags))
			for _, tagsItem11 := range r.ClickHouseDataset.Metadata.Tags {
				tags11 = append(tags11, tagsItem11.ValueString())
			}
			enableAcceleration11 := new(bool)
			if !r.ClickHouseDataset.Metadata.EnableAcceleration.IsUnknown() && !r.ClickHouseDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration11 = r.ClickHouseDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration11 = nil
			}
			metadata11 = &shared.DatasetMetadata{
				Created:            created11,
				Modified:           modified11,
				Tags:               tags11,
				EnableAcceleration: enableAcceleration11,
			}
		}
		database2 := new(string)
		if !r.ClickHouseDataset.Database.IsUnknown() && !r.ClickHouseDataset.Database.IsNull() {
			*database2 = r.ClickHouseDataset.Database.ValueString()
		} else {
			database2 = nil
		}
		var table2 string
		table2 = r.ClickHouseDataset.Table.ValueString()

		timestampField2 := new(string)
		if !r.ClickHouseDataset.TimestampField.IsUnknown() && !r.ClickHouseDataset.TimestampField.IsNull() {
			*timestampField2 = r.ClickHouseDataset.TimestampField.ValueString()
		} else {
			timestampField2 = nil
		}
		clickHouseDataset = &shared.ClickHouseDataset{
			ID:             id11,
			Description:    description11,
			ProviderID:     providerId11,
			Type:           typeVar11,
			Metadata:       metadata11,
			Database:       database2,
			Table:          table2,
			TimestampField: timestampField2,
		}
	}
	if clickHouseDataset != nil {
		out = shared.GenericDataset{
			ClickHouseDataset: clickHouseDataset,
		}
	}
	var prometheusDataset *shared.PrometheusDataset
	if r.PrometheusDataset != nil {
		var id12 string
		id12 = r.PrometheusDataset.ID.ValueString()

		description12 := new(string)
		if !r.PrometheusDataset.Description.IsUnknown() && !r.PrometheusDataset.Description.IsNull() {
			*description12 = r.PrometheusDataset.Description.ValueString()
		} else {
			description12 = nil
		}
		var providerId12 string
		providerId12 = r.PrometheusDataset.ProviderID.ValueString()

		var typeVar12 string
		typeVar12 = r.PrometheusDataset.Type.ValueString()

		var metadata12 *shared.DatasetMetadata
		if r.PrometheusDataset.Metadata != nil {
			created12 := new(time.Time)
			if !r.PrometheusDataset.Metadata.Created.IsUnknown() && !r.PrometheusDataset.Metadata.Created.IsNull() {
				*created12, _ = time.Parse(time.RFC3339Nano, r.PrometheusDataset.Metadata.Created.ValueString())
			} else {
				created12 = nil
			}
			modified12 := new(time.Time)
			if !r.PrometheusDataset.Metadata.Modified.IsUnknown() && !r.PrometheusDataset.Metadata.Modified.IsNull() {
				*modified12, _ = time.Parse(time.RFC3339Nano, r.PrometheusDataset.Metadata.Modified.ValueString())
			} else {
				modified12 = nil
			}
			tags12 := make([]string, 0, len(r.PrometheusDataset.Metadata.Tags))
			for _, tagsItem12 := range r.PrometheusDataset.Metadata.Tags {
				tags12 = append(tags12, tagsItem12.ValueString())
			}
			enableAcceleration12 := new(bool)
			if !r.PrometheusDataset.Metadata.EnableAcceleration.IsUnknown() && !r.PrometheusDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration12 = r.PrometheusDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration12 = nil
			}
			metadata12 = &shared.DatasetMetadata{
				Created:            created12,
				Modified:           modified12,
				Tags:               tags12,
				EnableAcceleration: enableAcceleration12,
			}
		}
		desiredNumDataPoints := new(float64)
		if !r.PrometheusDataset.DesiredNumDataPoints.IsUnknown() && !r.PrometheusDataset.DesiredNumDataPoints.IsNull() {
			*desiredNumDataPoints = r.PrometheusDataset.DesiredNumDataPoints.ValueFloat64()
		} else {
			desiredNumDataPoints = nil
		}
		stepMode := new(shared.StepMode)
		if !r.PrometheusDataset.StepMode.IsUnknown() && !r.PrometheusDataset.StepMode.IsNull() {
			*stepMode = shared.StepMode(r.PrometheusDataset.StepMode.ValueString())
		} else {
			stepMode = nil
		}
		metricNamePattern := new(string)
		if !r.PrometheusDataset.MetricNamePattern.IsUnknown() && !r.PrometheusDataset.MetricNamePattern.IsNull() {
			*metricNamePattern = r.PrometheusDataset.MetricNamePattern.ValueString()
		} else {
			metricNamePattern = nil
		}
		prometheusDataset = &shared.PrometheusDataset{
			ID:                   id12,
			Description:          description12,
			ProviderID:           providerId12,
			Type:                 typeVar12,
			Metadata:             metadata12,
			DesiredNumDataPoints: desiredNumDataPoints,
			StepMode:             stepMode,
			MetricNamePattern:    metricNamePattern,
		}
	}
	if prometheusDataset != nil {
		out = shared.GenericDataset{
			PrometheusDataset: prometheusDataset,
		}
	}
	var apiOpenSearchDataset *shared.APIOpenSearchDataset
	if r.APIOpenSearchDataset != nil {
		var id13 string
		id13 = r.APIOpenSearchDataset.ID.ValueString()

		description13 := new(string)
		if !r.APIOpenSearchDataset.Description.IsUnknown() && !r.APIOpenSearchDataset.Description.IsNull() {
			*description13 = r.APIOpenSearchDataset.Description.ValueString()
		} else {
			description13 = nil
		}
		var providerId13 string
		providerId13 = r.APIOpenSearchDataset.ProviderID.ValueString()

		var typeVar13 string
		typeVar13 = r.APIOpenSearchDataset.Type.ValueString()

		var metadata13 *shared.DatasetMetadata
		if r.APIOpenSearchDataset.Metadata != nil {
			created13 := new(time.Time)
			if !r.APIOpenSearchDataset.Metadata.Created.IsUnknown() && !r.APIOpenSearchDataset.Metadata.Created.IsNull() {
				*created13, _ = time.Parse(time.RFC3339Nano, r.APIOpenSearchDataset.Metadata.Created.ValueString())
			} else {
				created13 = nil
			}
			modified13 := new(time.Time)
			if !r.APIOpenSearchDataset.Metadata.Modified.IsUnknown() && !r.APIOpenSearchDataset.Metadata.Modified.IsNull() {
				*modified13, _ = time.Parse(time.RFC3339Nano, r.APIOpenSearchDataset.Metadata.Modified.ValueString())
			} else {
				modified13 = nil
			}
			tags13 := make([]string, 0, len(r.APIOpenSearchDataset.Metadata.Tags))
			for _, tagsItem13 := range r.APIOpenSearchDataset.Metadata.Tags {
				tags13 = append(tags13, tagsItem13.ValueString())
			}
			enableAcceleration13 := new(bool)
			if !r.APIOpenSearchDataset.Metadata.EnableAcceleration.IsUnknown() && !r.APIOpenSearchDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration13 = r.APIOpenSearchDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration13 = nil
			}
			metadata13 = &shared.DatasetMetadata{
				Created:            created13,
				Modified:           modified13,
				Tags:               tags13,
				EnableAcceleration: enableAcceleration13,
			}
		}
		var index string
		index = r.APIOpenSearchDataset.Index.ValueString()

		timestampField3 := new(string)
		if !r.APIOpenSearchDataset.TimestampField.IsUnknown() && !r.APIOpenSearchDataset.TimestampField.IsNull() {
			*timestampField3 = r.APIOpenSearchDataset.TimestampField.ValueString()
		} else {
			timestampField3 = nil
		}
		apiOpenSearchDataset = &shared.APIOpenSearchDataset{
			ID:             id13,
			Description:    description13,
			ProviderID:     providerId13,
			Type:           typeVar13,
			Metadata:       metadata13,
			Index:          index,
			TimestampField: timestampField3,
		}
	}
	if apiOpenSearchDataset != nil {
		out = shared.GenericDataset{
			APIOpenSearchDataset: apiOpenSearchDataset,
		}
	}
	var apiElasticSearchDataset *shared.APIElasticSearchDataset
	if r.APIElasticSearchDataset != nil {
		var id14 string
		id14 = r.APIElasticSearchDataset.ID.ValueString()

		description14 := new(string)
		if !r.APIElasticSearchDataset.Description.IsUnknown() && !r.APIElasticSearchDataset.Description.IsNull() {
			*description14 = r.APIElasticSearchDataset.Description.ValueString()
		} else {
			description14 = nil
		}
		var providerId14 string
		providerId14 = r.APIElasticSearchDataset.ProviderID.ValueString()

		var typeVar14 string
		typeVar14 = r.APIElasticSearchDataset.Type.ValueString()

		var metadata14 *shared.DatasetMetadata
		if r.APIElasticSearchDataset.Metadata != nil {
			created14 := new(time.Time)
			if !r.APIElasticSearchDataset.Metadata.Created.IsUnknown() && !r.APIElasticSearchDataset.Metadata.Created.IsNull() {
				*created14, _ = time.Parse(time.RFC3339Nano, r.APIElasticSearchDataset.Metadata.Created.ValueString())
			} else {
				created14 = nil
			}
			modified14 := new(time.Time)
			if !r.APIElasticSearchDataset.Metadata.Modified.IsUnknown() && !r.APIElasticSearchDataset.Metadata.Modified.IsNull() {
				*modified14, _ = time.Parse(time.RFC3339Nano, r.APIElasticSearchDataset.Metadata.Modified.ValueString())
			} else {
				modified14 = nil
			}
			tags14 := make([]string, 0, len(r.APIElasticSearchDataset.Metadata.Tags))
			for _, tagsItem14 := range r.APIElasticSearchDataset.Metadata.Tags {
				tags14 = append(tags14, tagsItem14.ValueString())
			}
			enableAcceleration14 := new(bool)
			if !r.APIElasticSearchDataset.Metadata.EnableAcceleration.IsUnknown() && !r.APIElasticSearchDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration14 = r.APIElasticSearchDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration14 = nil
			}
			metadata14 = &shared.DatasetMetadata{
				Created:            created14,
				Modified:           modified14,
				Tags:               tags14,
				EnableAcceleration: enableAcceleration14,
			}
		}
		var index1 string
		index1 = r.APIElasticSearchDataset.Index.ValueString()

		var timestampField4 string
		timestampField4 = r.APIElasticSearchDataset.TimestampField.ValueString()

		apiElasticSearchDataset = &shared.APIElasticSearchDataset{
			ID:             id14,
			Description:    description14,
			ProviderID:     providerId14,
			Type:           typeVar14,
			Metadata:       metadata14,
			Index:          index1,
			TimestampField: timestampField4,
		}
	}
	if apiElasticSearchDataset != nil {
		out = shared.GenericDataset{
			APIElasticSearchDataset: apiElasticSearchDataset,
		}
	}
	var s3Dataset *shared.S3Dataset
	if r.S3Dataset != nil {
		var id15 string
		id15 = r.S3Dataset.ID.ValueString()

		description15 := new(string)
		if !r.S3Dataset.Description.IsUnknown() && !r.S3Dataset.Description.IsNull() {
			*description15 = r.S3Dataset.Description.ValueString()
		} else {
			description15 = nil
		}
		var providerId15 string
		providerId15 = r.S3Dataset.ProviderID.ValueString()

		var typeVar15 string
		typeVar15 = r.S3Dataset.Type.ValueString()

		var metadata15 *shared.DatasetMetadata
		if r.S3Dataset.Metadata != nil {
			created15 := new(time.Time)
			if !r.S3Dataset.Metadata.Created.IsUnknown() && !r.S3Dataset.Metadata.Created.IsNull() {
				*created15, _ = time.Parse(time.RFC3339Nano, r.S3Dataset.Metadata.Created.ValueString())
			} else {
				created15 = nil
			}
			modified15 := new(time.Time)
			if !r.S3Dataset.Metadata.Modified.IsUnknown() && !r.S3Dataset.Metadata.Modified.IsNull() {
				*modified15, _ = time.Parse(time.RFC3339Nano, r.S3Dataset.Metadata.Modified.ValueString())
			} else {
				modified15 = nil
			}
			tags15 := make([]string, 0, len(r.S3Dataset.Metadata.Tags))
			for _, tagsItem15 := range r.S3Dataset.Metadata.Tags {
				tags15 = append(tags15, tagsItem15.ValueString())
			}
			enableAcceleration15 := new(bool)
			if !r.S3Dataset.Metadata.EnableAcceleration.IsUnknown() && !r.S3Dataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration15 = r.S3Dataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration15 = nil
			}
			metadata15 = &shared.DatasetMetadata{
				Created:            created15,
				Modified:           modified15,
				Tags:               tags15,
				EnableAcceleration: enableAcceleration15,
			}
		}
		var bucket string
		bucket = r.S3Dataset.Bucket.ValueString()

		path := new(string)
		if !r.S3Dataset.Path.IsUnknown() && !r.S3Dataset.Path.IsNull() {
			*path = r.S3Dataset.Path.ValueString()
		} else {
			path = nil
		}
		filter := new(string)
		if !r.S3Dataset.Filter.IsUnknown() && !r.S3Dataset.Filter.IsNull() {
			*filter = r.S3Dataset.Filter.ValueString()
		} else {
			filter = nil
		}
		region1 := new(string)
		if !r.S3Dataset.Region.IsUnknown() && !r.S3Dataset.Region.IsNull() {
			*region1 = r.S3Dataset.Region.ValueString()
		} else {
			region1 = nil
		}
		autoDetectRegion := new(bool)
		if !r.S3Dataset.AutoDetectRegion.IsUnknown() && !r.S3Dataset.AutoDetectRegion.IsNull() {
			*autoDetectRegion = r.S3Dataset.AutoDetectRegion.ValueBool()
		} else {
			autoDetectRegion = nil
		}
		extraPaths := make([]shared.S3DatasetExtraPath, 0, len(r.S3Dataset.ExtraPaths))
		for _, extraPathsItem := range r.S3Dataset.ExtraPaths {
			var bucket1 string
			bucket1 = extraPathsItem.Bucket.ValueString()

			path1 := new(string)
			if !extraPathsItem.Path.IsUnknown() && !extraPathsItem.Path.IsNull() {
				*path1 = extraPathsItem.Path.ValueString()
			} else {
				path1 = nil
			}
			filter1 := new(string)
			if !extraPathsItem.Filter.IsUnknown() && !extraPathsItem.Filter.IsNull() {
				*filter1 = extraPathsItem.Filter.ValueString()
			} else {
				filter1 = nil
			}
			region2 := new(string)
			if !extraPathsItem.Region.IsUnknown() && !extraPathsItem.Region.IsNull() {
				*region2 = extraPathsItem.Region.ValueString()
			} else {
				region2 = nil
			}
			autoDetectRegion1 := new(bool)
			if !extraPathsItem.AutoDetectRegion.IsUnknown() && !extraPathsItem.AutoDetectRegion.IsNull() {
				*autoDetectRegion1 = extraPathsItem.AutoDetectRegion.ValueBool()
			} else {
				autoDetectRegion1 = nil
			}
			extraPaths = append(extraPaths, shared.S3DatasetExtraPath{
				Bucket:           bucket1,
				Path:             path1,
				Filter:           filter1,
				Region:           region2,
				AutoDetectRegion: autoDetectRegion1,
			})
		}
		storageClasses := make([]string, 0, len(r.S3Dataset.StorageClasses))
		for _, storageClassesItem := range r.S3Dataset.StorageClasses {
			storageClasses = append(storageClasses, storageClassesItem.ValueString())
		}
		skipEventTimeFilter := new(bool)
		if !r.S3Dataset.SkipEventTimeFilter.IsUnknown() && !r.S3Dataset.SkipEventTimeFilter.IsNull() {
			*skipEventTimeFilter = r.S3Dataset.SkipEventTimeFilter.ValueBool()
		} else {
			skipEventTimeFilter = nil
		}
		s3Dataset = &shared.S3Dataset{
			ID:                  id15,
			Description:         description15,
			ProviderID:          providerId15,
			Type:                typeVar15,
			Metadata:            metadata15,
			Bucket:              bucket,
			Path:                path,
			Filter:              filter,
			Region:              region1,
			AutoDetectRegion:    autoDetectRegion,
			ExtraPaths:          extraPaths,
			StorageClasses:      storageClasses,
			SkipEventTimeFilter: skipEventTimeFilter,
		}
	}
	if s3Dataset != nil {
		out = shared.GenericDataset{
			S3Dataset: s3Dataset,
		}
	}
	var criblLeaderDataset *shared.CriblLeaderDataset
	if r.CriblLeaderDataset != nil {
		var id16 string
		id16 = r.CriblLeaderDataset.ID.ValueString()

		description16 := new(string)
		if !r.CriblLeaderDataset.Description.IsUnknown() && !r.CriblLeaderDataset.Description.IsNull() {
			*description16 = r.CriblLeaderDataset.Description.ValueString()
		} else {
			description16 = nil
		}
		var providerId16 string
		providerId16 = r.CriblLeaderDataset.ProviderID.ValueString()

		var typeVar16 string
		typeVar16 = r.CriblLeaderDataset.Type.ValueString()

		var metadata16 *shared.DatasetMetadata
		if r.CriblLeaderDataset.Metadata != nil {
			created16 := new(time.Time)
			if !r.CriblLeaderDataset.Metadata.Created.IsUnknown() && !r.CriblLeaderDataset.Metadata.Created.IsNull() {
				*created16, _ = time.Parse(time.RFC3339Nano, r.CriblLeaderDataset.Metadata.Created.ValueString())
			} else {
				created16 = nil
			}
			modified16 := new(time.Time)
			if !r.CriblLeaderDataset.Metadata.Modified.IsUnknown() && !r.CriblLeaderDataset.Metadata.Modified.IsNull() {
				*modified16, _ = time.Parse(time.RFC3339Nano, r.CriblLeaderDataset.Metadata.Modified.ValueString())
			} else {
				modified16 = nil
			}
			tags16 := make([]string, 0, len(r.CriblLeaderDataset.Metadata.Tags))
			for _, tagsItem16 := range r.CriblLeaderDataset.Metadata.Tags {
				tags16 = append(tags16, tagsItem16.ValueString())
			}
			enableAcceleration16 := new(bool)
			if !r.CriblLeaderDataset.Metadata.EnableAcceleration.IsUnknown() && !r.CriblLeaderDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration16 = r.CriblLeaderDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration16 = nil
			}
			metadata16 = &shared.DatasetMetadata{
				Created:            created16,
				Modified:           modified16,
				Tags:               tags16,
				EnableAcceleration: enableAcceleration16,
			}
		}
		var path2 string
		path2 = r.CriblLeaderDataset.Path.ValueString()

		filter2 := new(string)
		if !r.CriblLeaderDataset.Filter.IsUnknown() && !r.CriblLeaderDataset.Filter.IsNull() {
			*filter2 = r.CriblLeaderDataset.Filter.ValueString()
		} else {
			filter2 = nil
		}
		extraPaths1 := make([]shared.CriblLeaderDatasetExtraPath, 0, len(r.CriblLeaderDataset.ExtraPaths))
		for _, extraPathsItem1 := range r.CriblLeaderDataset.ExtraPaths {
			var path3 string
			path3 = extraPathsItem1.Path.ValueString()

			filter3 := new(string)
			if !extraPathsItem1.Filter.IsUnknown() && !extraPathsItem1.Filter.IsNull() {
				*filter3 = extraPathsItem1.Filter.ValueString()
			} else {
				filter3 = nil
			}
			extraPaths1 = append(extraPaths1, shared.CriblLeaderDatasetExtraPath{
				Path:   path3,
				Filter: filter3,
			})
		}
		criblLeaderDataset = &shared.CriblLeaderDataset{
			ID:          id16,
			Description: description16,
			ProviderID:  providerId16,
			Type:        typeVar16,
			Metadata:    metadata16,
			Path:        path2,
			Filter:      filter2,
			ExtraPaths:  extraPaths1,
		}
	}
	if criblLeaderDataset != nil {
		out = shared.GenericDataset{
			CriblLeaderDataset: criblLeaderDataset,
		}
	}
	var metaDataset *shared.MetaDataset
	if r.MetaDataset != nil {
		var id17 string
		id17 = r.MetaDataset.ID.ValueString()

		description17 := new(string)
		if !r.MetaDataset.Description.IsUnknown() && !r.MetaDataset.Description.IsNull() {
			*description17 = r.MetaDataset.Description.ValueString()
		} else {
			description17 = nil
		}
		var providerId17 string
		providerId17 = r.MetaDataset.ProviderID.ValueString()

		var typeVar17 string
		typeVar17 = r.MetaDataset.Type.ValueString()

		var metadata17 *shared.DatasetMetadata
		if r.MetaDataset.Metadata != nil {
			created17 := new(time.Time)
			if !r.MetaDataset.Metadata.Created.IsUnknown() && !r.MetaDataset.Metadata.Created.IsNull() {
				*created17, _ = time.Parse(time.RFC3339Nano, r.MetaDataset.Metadata.Created.ValueString())
			} else {
				created17 = nil
			}
			modified17 := new(time.Time)
			if !r.MetaDataset.Metadata.Modified.IsUnknown() && !r.MetaDataset.Metadata.Modified.IsNull() {
				*modified17, _ = time.Parse(time.RFC3339Nano, r.MetaDataset.Metadata.Modified.ValueString())
			} else {
				modified17 = nil
			}
			tags17 := make([]string, 0, len(r.MetaDataset.Metadata.Tags))
			for _, tagsItem17 := range r.MetaDataset.Metadata.Tags {
				tags17 = append(tags17, tagsItem17.ValueString())
			}
			enableAcceleration17 := new(bool)
			if !r.MetaDataset.Metadata.EnableAcceleration.IsUnknown() && !r.MetaDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration17 = r.MetaDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration17 = nil
			}
			metadata17 = &shared.DatasetMetadata{
				Created:            created17,
				Modified:           modified17,
				Tags:               tags17,
				EnableAcceleration: enableAcceleration17,
			}
		}
		datasets := make([]string, 0, len(r.MetaDataset.Datasets))
		for _, datasetsItem := range r.MetaDataset.Datasets {
			datasets = append(datasets, datasetsItem.ValueString())
		}
		metaDataset = &shared.MetaDataset{
			ID:          id17,
			Description: description17,
			ProviderID:  providerId17,
			Type:        typeVar17,
			Metadata:    metadata17,
			Datasets:    datasets,
		}
	}
	if metaDataset != nil {
		out = shared.GenericDataset{
			MetaDataset: metaDataset,
		}
	}
	var edgeDataset *shared.EdgeDataset
	if r.EdgeDataset != nil {
		var id18 string
		id18 = r.EdgeDataset.ID.ValueString()

		description18 := new(string)
		if !r.EdgeDataset.Description.IsUnknown() && !r.EdgeDataset.Description.IsNull() {
			*description18 = r.EdgeDataset.Description.ValueString()
		} else {
			description18 = nil
		}
		var providerId18 string
		providerId18 = r.EdgeDataset.ProviderID.ValueString()

		var typeVar18 string
		typeVar18 = r.EdgeDataset.Type.ValueString()

		var metadata18 *shared.DatasetMetadata
		if r.EdgeDataset.Metadata != nil {
			created18 := new(time.Time)
			if !r.EdgeDataset.Metadata.Created.IsUnknown() && !r.EdgeDataset.Metadata.Created.IsNull() {
				*created18, _ = time.Parse(time.RFC3339Nano, r.EdgeDataset.Metadata.Created.ValueString())
			} else {
				created18 = nil
			}
			modified18 := new(time.Time)
			if !r.EdgeDataset.Metadata.Modified.IsUnknown() && !r.EdgeDataset.Metadata.Modified.IsNull() {
				*modified18, _ = time.Parse(time.RFC3339Nano, r.EdgeDataset.Metadata.Modified.ValueString())
			} else {
				modified18 = nil
			}
			tags18 := make([]string, 0, len(r.EdgeDataset.Metadata.Tags))
			for _, tagsItem18 := range r.EdgeDataset.Metadata.Tags {
				tags18 = append(tags18, tagsItem18.ValueString())
			}
			enableAcceleration18 := new(bool)
			if !r.EdgeDataset.Metadata.EnableAcceleration.IsUnknown() && !r.EdgeDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration18 = r.EdgeDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration18 = nil
			}
			metadata18 = &shared.DatasetMetadata{
				Created:            created18,
				Modified:           modified18,
				Tags:               tags18,
				EnableAcceleration: enableAcceleration18,
			}
		}
		fleets := make([]string, 0, len(r.EdgeDataset.Fleets))
		for _, fleetsItem := range r.EdgeDataset.Fleets {
			fleets = append(fleets, fleetsItem.ValueString())
		}
		var path4 string
		path4 = r.EdgeDataset.Path.ValueString()

		filter4 := new(string)
		if !r.EdgeDataset.Filter.IsUnknown() && !r.EdgeDataset.Filter.IsNull() {
			*filter4 = r.EdgeDataset.Filter.ValueString()
		} else {
			filter4 = nil
		}
		edgeDataset = &shared.EdgeDataset{
			ID:          id18,
			Description: description18,
			ProviderID:  providerId18,
			Type:        typeVar18,
			Metadata:    metadata18,
			Fleets:      fleets,
			Path:        path4,
			Filter:      filter4,
		}
	}
	if edgeDataset != nil {
		out = shared.GenericDataset{
			EdgeDataset: edgeDataset,
		}
	}
	var azureBlobDataset *shared.AzureBlobDataset
	if r.AzureBlobDataset != nil {
		var id19 string
		id19 = r.AzureBlobDataset.ID.ValueString()

		description19 := new(string)
		if !r.AzureBlobDataset.Description.IsUnknown() && !r.AzureBlobDataset.Description.IsNull() {
			*description19 = r.AzureBlobDataset.Description.ValueString()
		} else {
			description19 = nil
		}
		var providerId19 string
		providerId19 = r.AzureBlobDataset.ProviderID.ValueString()

		var typeVar19 string
		typeVar19 = r.AzureBlobDataset.Type.ValueString()

		var metadata19 *shared.DatasetMetadata
		if r.AzureBlobDataset.Metadata != nil {
			created19 := new(time.Time)
			if !r.AzureBlobDataset.Metadata.Created.IsUnknown() && !r.AzureBlobDataset.Metadata.Created.IsNull() {
				*created19, _ = time.Parse(time.RFC3339Nano, r.AzureBlobDataset.Metadata.Created.ValueString())
			} else {
				created19 = nil
			}
			modified19 := new(time.Time)
			if !r.AzureBlobDataset.Metadata.Modified.IsUnknown() && !r.AzureBlobDataset.Metadata.Modified.IsNull() {
				*modified19, _ = time.Parse(time.RFC3339Nano, r.AzureBlobDataset.Metadata.Modified.ValueString())
			} else {
				modified19 = nil
			}
			tags19 := make([]string, 0, len(r.AzureBlobDataset.Metadata.Tags))
			for _, tagsItem19 := range r.AzureBlobDataset.Metadata.Tags {
				tags19 = append(tags19, tagsItem19.ValueString())
			}
			enableAcceleration19 := new(bool)
			if !r.AzureBlobDataset.Metadata.EnableAcceleration.IsUnknown() && !r.AzureBlobDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration19 = r.AzureBlobDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration19 = nil
			}
			metadata19 = &shared.DatasetMetadata{
				Created:            created19,
				Modified:           modified19,
				Tags:               tags19,
				EnableAcceleration: enableAcceleration19,
			}
		}
		var containerName string
		containerName = r.AzureBlobDataset.ContainerName.ValueString()

		path5 := new(string)
		if !r.AzureBlobDataset.Path.IsUnknown() && !r.AzureBlobDataset.Path.IsNull() {
			*path5 = r.AzureBlobDataset.Path.ValueString()
		} else {
			path5 = nil
		}
		filter5 := new(string)
		if !r.AzureBlobDataset.Filter.IsUnknown() && !r.AzureBlobDataset.Filter.IsNull() {
			*filter5 = r.AzureBlobDataset.Filter.ValueString()
		} else {
			filter5 = nil
		}
		extraPaths2 := make([]shared.AzureBlobDatasetExtraPath, 0, len(r.AzureBlobDataset.ExtraPaths))
		for _, extraPathsItem2 := range r.AzureBlobDataset.ExtraPaths {
			var containerName1 string
			containerName1 = extraPathsItem2.ContainerName.ValueString()

			path6 := new(string)
			if !extraPathsItem2.Path.IsUnknown() && !extraPathsItem2.Path.IsNull() {
				*path6 = extraPathsItem2.Path.ValueString()
			} else {
				path6 = nil
			}
			filter6 := new(string)
			if !extraPathsItem2.Filter.IsUnknown() && !extraPathsItem2.Filter.IsNull() {
				*filter6 = extraPathsItem2.Filter.ValueString()
			} else {
				filter6 = nil
			}
			extraPaths2 = append(extraPaths2, shared.AzureBlobDatasetExtraPath{
				ContainerName: containerName1,
				Path:          path6,
				Filter:        filter6,
			})
		}
		storageClasses1 := make([]string, 0, len(r.AzureBlobDataset.StorageClasses))
		for _, storageClassesItem1 := range r.AzureBlobDataset.StorageClasses {
			storageClasses1 = append(storageClasses1, storageClassesItem1.ValueString())
		}
		skipEventTimeFilter1 := new(bool)
		if !r.AzureBlobDataset.SkipEventTimeFilter.IsUnknown() && !r.AzureBlobDataset.SkipEventTimeFilter.IsNull() {
			*skipEventTimeFilter1 = r.AzureBlobDataset.SkipEventTimeFilter.ValueBool()
		} else {
			skipEventTimeFilter1 = nil
		}
		azureBlobDataset = &shared.AzureBlobDataset{
			ID:                  id19,
			Description:         description19,
			ProviderID:          providerId19,
			Type:                typeVar19,
			Metadata:            metadata19,
			ContainerName:       containerName,
			Path:                path5,
			Filter:              filter5,
			ExtraPaths:          extraPaths2,
			StorageClasses:      storageClasses1,
			SkipEventTimeFilter: skipEventTimeFilter1,
		}
	}
	if azureBlobDataset != nil {
		out = shared.GenericDataset{
			AzureBlobDataset: azureBlobDataset,
		}
	}
	var gcsDataset *shared.GcsDataset
	if r.GcsDataset != nil {
		var id20 string
		id20 = r.GcsDataset.ID.ValueString()

		description20 := new(string)
		if !r.GcsDataset.Description.IsUnknown() && !r.GcsDataset.Description.IsNull() {
			*description20 = r.GcsDataset.Description.ValueString()
		} else {
			description20 = nil
		}
		var providerId20 string
		providerId20 = r.GcsDataset.ProviderID.ValueString()

		var typeVar20 string
		typeVar20 = r.GcsDataset.Type.ValueString()

		var metadata20 *shared.DatasetMetadata
		if r.GcsDataset.Metadata != nil {
			created20 := new(time.Time)
			if !r.GcsDataset.Metadata.Created.IsUnknown() && !r.GcsDataset.Metadata.Created.IsNull() {
				*created20, _ = time.Parse(time.RFC3339Nano, r.GcsDataset.Metadata.Created.ValueString())
			} else {
				created20 = nil
			}
			modified20 := new(time.Time)
			if !r.GcsDataset.Metadata.Modified.IsUnknown() && !r.GcsDataset.Metadata.Modified.IsNull() {
				*modified20, _ = time.Parse(time.RFC3339Nano, r.GcsDataset.Metadata.Modified.ValueString())
			} else {
				modified20 = nil
			}
			tags20 := make([]string, 0, len(r.GcsDataset.Metadata.Tags))
			for _, tagsItem20 := range r.GcsDataset.Metadata.Tags {
				tags20 = append(tags20, tagsItem20.ValueString())
			}
			enableAcceleration20 := new(bool)
			if !r.GcsDataset.Metadata.EnableAcceleration.IsUnknown() && !r.GcsDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration20 = r.GcsDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration20 = nil
			}
			metadata20 = &shared.DatasetMetadata{
				Created:            created20,
				Modified:           modified20,
				Tags:               tags20,
				EnableAcceleration: enableAcceleration20,
			}
		}
		var bucket2 string
		bucket2 = r.GcsDataset.Bucket.ValueString()

		filter7 := new(string)
		if !r.GcsDataset.Filter.IsUnknown() && !r.GcsDataset.Filter.IsNull() {
			*filter7 = r.GcsDataset.Filter.ValueString()
		} else {
			filter7 = nil
		}
		region3 := new(string)
		if !r.GcsDataset.Region.IsUnknown() && !r.GcsDataset.Region.IsNull() {
			*region3 = r.GcsDataset.Region.ValueString()
		} else {
			region3 = nil
		}
		extraPaths3 := make([]shared.GcsDatasetExtraPath, 0, len(r.GcsDataset.ExtraPaths))
		for _, extraPathsItem3 := range r.GcsDataset.ExtraPaths {
			var bucket3 string
			bucket3 = extraPathsItem3.Bucket.ValueString()

			filter8 := new(string)
			if !extraPathsItem3.Filter.IsUnknown() && !extraPathsItem3.Filter.IsNull() {
				*filter8 = extraPathsItem3.Filter.ValueString()
			} else {
				filter8 = nil
			}
			region4 := new(string)
			if !extraPathsItem3.Region.IsUnknown() && !extraPathsItem3.Region.IsNull() {
				*region4 = extraPathsItem3.Region.ValueString()
			} else {
				region4 = nil
			}
			extraPaths3 = append(extraPaths3, shared.GcsDatasetExtraPath{
				Bucket: bucket3,
				Filter: filter8,
				Region: region4,
			})
		}
		storageClasses2 := make([]string, 0, len(r.GcsDataset.StorageClasses))
		for _, storageClassesItem2 := range r.GcsDataset.StorageClasses {
			storageClasses2 = append(storageClasses2, storageClassesItem2.ValueString())
		}
		skipEventTimeFilter2 := new(bool)
		if !r.GcsDataset.SkipEventTimeFilter.IsUnknown() && !r.GcsDataset.SkipEventTimeFilter.IsNull() {
			*skipEventTimeFilter2 = r.GcsDataset.SkipEventTimeFilter.ValueBool()
		} else {
			skipEventTimeFilter2 = nil
		}
		gcsDataset = &shared.GcsDataset{
			ID:                  id20,
			Description:         description20,
			ProviderID:          providerId20,
			Type:                typeVar20,
			Metadata:            metadata20,
			Bucket:              bucket2,
			Filter:              filter7,
			Region:              region3,
			ExtraPaths:          extraPaths3,
			StorageClasses:      storageClasses2,
			SkipEventTimeFilter: skipEventTimeFilter2,
		}
	}
	if gcsDataset != nil {
		out = shared.GenericDataset{
			GcsDataset: gcsDataset,
		}
	}
	var awsSecurityLakeDataset *shared.AwsSecurityLakeDataset
	if r.AwsSecurityLakeDataset != nil {
		var id21 string
		id21 = r.AwsSecurityLakeDataset.ID.ValueString()

		description21 := new(string)
		if !r.AwsSecurityLakeDataset.Description.IsUnknown() && !r.AwsSecurityLakeDataset.Description.IsNull() {
			*description21 = r.AwsSecurityLakeDataset.Description.ValueString()
		} else {
			description21 = nil
		}
		var providerId21 string
		providerId21 = r.AwsSecurityLakeDataset.ProviderID.ValueString()

		var typeVar21 string
		typeVar21 = r.AwsSecurityLakeDataset.Type.ValueString()

		var metadata21 *shared.DatasetMetadata
		if r.AwsSecurityLakeDataset.Metadata != nil {
			created21 := new(time.Time)
			if !r.AwsSecurityLakeDataset.Metadata.Created.IsUnknown() && !r.AwsSecurityLakeDataset.Metadata.Created.IsNull() {
				*created21, _ = time.Parse(time.RFC3339Nano, r.AwsSecurityLakeDataset.Metadata.Created.ValueString())
			} else {
				created21 = nil
			}
			modified21 := new(time.Time)
			if !r.AwsSecurityLakeDataset.Metadata.Modified.IsUnknown() && !r.AwsSecurityLakeDataset.Metadata.Modified.IsNull() {
				*modified21, _ = time.Parse(time.RFC3339Nano, r.AwsSecurityLakeDataset.Metadata.Modified.ValueString())
			} else {
				modified21 = nil
			}
			tags21 := make([]string, 0, len(r.AwsSecurityLakeDataset.Metadata.Tags))
			for _, tagsItem21 := range r.AwsSecurityLakeDataset.Metadata.Tags {
				tags21 = append(tags21, tagsItem21.ValueString())
			}
			enableAcceleration21 := new(bool)
			if !r.AwsSecurityLakeDataset.Metadata.EnableAcceleration.IsUnknown() && !r.AwsSecurityLakeDataset.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration21 = r.AwsSecurityLakeDataset.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration21 = nil
			}
			metadata21 = &shared.DatasetMetadata{
				Created:            created21,
				Modified:           modified21,
				Tags:               tags21,
				EnableAcceleration: enableAcceleration21,
			}
		}
		path7 := new(string)
		if !r.AwsSecurityLakeDataset.Path.IsUnknown() && !r.AwsSecurityLakeDataset.Path.IsNull() {
			*path7 = r.AwsSecurityLakeDataset.Path.ValueString()
		} else {
			path7 = nil
		}
		filter9 := new(string)
		if !r.AwsSecurityLakeDataset.Filter.IsUnknown() && !r.AwsSecurityLakeDataset.Filter.IsNull() {
			*filter9 = r.AwsSecurityLakeDataset.Filter.ValueString()
		} else {
			filter9 = nil
		}
		selectedBuckets := make([]shared.S3Bucket, 0, len(r.AwsSecurityLakeDataset.SelectedBuckets))
		for _, selectedBucketsItem := range r.AwsSecurityLakeDataset.SelectedBuckets {
			name := new(string)
			if !selectedBucketsItem.Name.IsUnknown() && !selectedBucketsItem.Name.IsNull() {
				*name = selectedBucketsItem.Name.ValueString()
			} else {
				name = nil
			}
			region5 := new(string)
			if !selectedBucketsItem.Region.IsUnknown() && !selectedBucketsItem.Region.IsNull() {
				*region5 = selectedBucketsItem.Region.ValueString()
			} else {
				region5 = nil
			}
			selectedBuckets = append(selectedBuckets, shared.S3Bucket{
				Name:   name,
				Region: region5,
			})
		}
		awsSecurityLakeDataset = &shared.AwsSecurityLakeDataset{
			ID:              id21,
			Description:     description21,
			ProviderID:      providerId21,
			Type:            typeVar21,
			Metadata:        metadata21,
			Path:            path7,
			Filter:          filter9,
			SelectedBuckets: selectedBuckets,
		}
	}
	if awsSecurityLakeDataset != nil {
		out = shared.GenericDataset{
			AwsSecurityLakeDataset: awsSecurityLakeDataset,
		}
	}

	return &out, diags
}

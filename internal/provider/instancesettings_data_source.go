// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &InstanceSettingsDataSource{}
var _ datasource.DataSourceWithConfigure = &InstanceSettingsDataSource{}

func NewInstanceSettingsDataSource() datasource.DataSource {
	return &InstanceSettingsDataSource{}
}

// InstanceSettingsDataSource is the data source implementation.
type InstanceSettingsDataSource struct {
	// Provider configured SDK client.
	client *sdk.CriblIo
}

// InstanceSettingsDataSourceModel describes the data model.
type InstanceSettingsDataSourceModel struct {
	Items []tfTypes.InstanceSettingsSchemaUnion `tfsdk:"items"`
}

// Metadata returns the data source type name.
func (r *InstanceSettingsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_instance_settings"
}

// Schema defines the schema for the data source.
func (r *InstanceSettingsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "InstanceSettings DataSource",

		Attributes: map[string]schema.Attribute{
			"items": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"instance_settings_schema1": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"cloud_workspace": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"auth_token": schema.StringAttribute{
											Computed: true,
										},
										"compression": schema.StringAttribute{
											Computed: true,
										},
										"config_bundles": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"remote_url": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"config_helper_socket_dir": schema.StringAttribute{
											Computed: true,
										},
										"connection_timeout": schema.Float64Attribute{
											Computed: true,
										},
										"disable_sni_routing": schema.BoolAttribute{
											Computed: true,
										},
										"disabled": schema.BoolAttribute{
											Computed: true,
										},
										"failover": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"missed_hb_limit": schema.Float64Attribute{
													Computed: true,
												},
												"period": schema.StringAttribute{
													Computed: true,
												},
												"volume": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"forward_to_leader_api": schema.BoolAttribute{
											Computed: true,
										},
										"host": schema.StringAttribute{
											Computed: true,
										},
										"ip_whitelist_regex": schema.StringAttribute{
											Computed: true,
										},
										"max_active_cxn": schema.Float64Attribute{
											Computed: true,
										},
										"max_buffer_bytes": schema.Float64Attribute{
											Computed: true,
										},
										"port": schema.Float64Attribute{
											Computed: true,
										},
										"protocol": schema.StringAttribute{
											Computed: true,
										},
										"proxy": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"disabled": schema.BoolAttribute{
													Computed: true,
												},
												"host": schema.StringAttribute{
													Computed: true,
												},
												"password": schema.StringAttribute{
													Computed: true,
												},
												"port": schema.Float64Attribute{
													Computed: true,
												},
												"type": schema.Float64Attribute{
													Computed: true,
												},
												"user_id": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"resiliency": schema.StringAttribute{
											Computed: true,
										},
										"subscription_agreement": schema.BoolAttribute{
											Computed: true,
										},
										"tls": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"ca_path": schema.StringAttribute{
													Computed: true,
												},
												"cert_path": schema.StringAttribute{
													Computed: true,
												},
												"certificate_name": schema.StringAttribute{
													Computed: true,
												},
												"check_server_identity": schema.SingleNestedAttribute{
													Computed: true,
												},
												"common_name_regex": schema.MapAttribute{
													Computed:    true,
													ElementType: jsontypes.NormalizedType{},
												},
												"disabled": schema.BoolAttribute{
													Computed: true,
												},
												"passphrase": schema.StringAttribute{
													Computed: true,
												},
												"priv_key_path": schema.StringAttribute{
													Computed: true,
												},
												"reject_unauthorized": schema.BoolAttribute{
													Computed: true,
												},
												"request_cert": schema.BoolAttribute{
													Computed: true,
												},
												"servername": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"write_timeout": schema.Float64Attribute{
											Computed: true,
										},
									},
								},
								"env_regex": schema.StringAttribute{
									Computed: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"master": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"auth_token": schema.StringAttribute{
											Computed: true,
										},
										"compression": schema.StringAttribute{
											Computed: true,
										},
										"config_bundles": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"remote_url": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"config_helper_socket_dir": schema.StringAttribute{
											Computed: true,
										},
										"connection_timeout": schema.Float64Attribute{
											Computed: true,
										},
										"disable_sni_routing": schema.BoolAttribute{
											Computed: true,
										},
										"failover": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"missed_hb_limit": schema.Float64Attribute{
													Computed: true,
												},
												"period": schema.StringAttribute{
													Computed: true,
												},
												"volume": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"forward_to_leader_api": schema.BoolAttribute{
											Computed: true,
										},
										"host": schema.StringAttribute{
											Computed: true,
										},
										"ip_whitelist_regex": schema.StringAttribute{
											Computed: true,
										},
										"max_active_cxn": schema.Float64Attribute{
											Computed: true,
										},
										"max_buffer_bytes": schema.Float64Attribute{
											Computed: true,
										},
										"port": schema.Float64Attribute{
											Computed: true,
										},
										"protocol": schema.StringAttribute{
											Computed: true,
										},
										"proxy": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"disabled": schema.BoolAttribute{
													Computed: true,
												},
												"host": schema.StringAttribute{
													Computed: true,
												},
												"password": schema.StringAttribute{
													Computed: true,
												},
												"port": schema.Float64Attribute{
													Computed: true,
												},
												"type": schema.Float64Attribute{
													Computed: true,
												},
												"user_id": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"resiliency": schema.StringAttribute{
											Computed: true,
										},
										"tls": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"ca_path": schema.StringAttribute{
													Computed: true,
												},
												"cert_path": schema.StringAttribute{
													Computed: true,
												},
												"certificate_name": schema.StringAttribute{
													Computed: true,
												},
												"check_server_identity": schema.SingleNestedAttribute{
													Computed: true,
												},
												"common_name_regex": schema.MapAttribute{
													Computed:    true,
													ElementType: jsontypes.NormalizedType{},
												},
												"disabled": schema.BoolAttribute{
													Computed: true,
												},
												"passphrase": schema.StringAttribute{
													Computed: true,
												},
												"priv_key_path": schema.StringAttribute{
													Computed: true,
												},
												"reject_unauthorized": schema.BoolAttribute{
													Computed: true,
												},
												"request_cert": schema.BoolAttribute{
													Computed: true,
												},
												"servername": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"write_timeout": schema.Float64Attribute{
											Computed: true,
										},
									},
								},
								"mode": schema.StringAttribute{
									Computed: true,
								},
								"reported_deployment_id": schema.StringAttribute{
									Computed: true,
								},
								"tags": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
							},
						},
						"instance_settings_schema2": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"bootstrap_host": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
				},
			},
		},
	}
}

func (r *InstanceSettingsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.CriblIo)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.CriblIo, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *InstanceSettingsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *InstanceSettingsDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	res, err := r.client.System.ListInstanceSettingsSchema(ctx)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromOperationsListInstanceSettingsSchemaResponseBody(ctx, res.Object)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

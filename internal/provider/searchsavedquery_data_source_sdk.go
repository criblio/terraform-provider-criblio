// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SearchSavedQueryDataSourceModel) RefreshFromSharedSavedQuery(ctx context.Context, resp *shared.SavedQuery) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp.ChartConfig == nil {
		r.ChartConfig = nil
	} else {
		r.ChartConfig = &tfTypes.ChartConfig{}
		r.ChartConfig.ApplyThreshold = types.BoolPointerValue(resp.ChartConfig.ApplyThreshold)
		if resp.ChartConfig.Axis == nil {
			r.ChartConfig.Axis = nil
		} else {
			r.ChartConfig.Axis = &tfTypes.Axis{}
			r.ChartConfig.Axis.XAxis = types.StringPointerValue(resp.ChartConfig.Axis.XAxis)
			r.ChartConfig.Axis.YAxis = make([]types.String, 0, len(resp.ChartConfig.Axis.YAxis))
			for _, v := range resp.ChartConfig.Axis.YAxis {
				r.ChartConfig.Axis.YAxis = append(r.ChartConfig.Axis.YAxis, types.StringValue(v))
			}
			r.ChartConfig.Axis.YAxisExcluded = make([]types.String, 0, len(resp.ChartConfig.Axis.YAxisExcluded))
			for _, v := range resp.ChartConfig.Axis.YAxisExcluded {
				r.ChartConfig.Axis.YAxisExcluded = append(r.ChartConfig.Axis.YAxisExcluded, types.StringValue(v))
			}
		}
		r.ChartConfig.Color = types.StringPointerValue(resp.ChartConfig.Color)
		r.ChartConfig.ColorPalette = types.Float64Value(resp.ChartConfig.ColorPalette)
		r.ChartConfig.ColorPaletteReversed = types.BoolPointerValue(resp.ChartConfig.ColorPaletteReversed)
		if resp.ChartConfig.ColorThresholds == nil {
			r.ChartConfig.ColorThresholds = nil
		} else {
			r.ChartConfig.ColorThresholds = &tfTypes.ColorThresholds{}
			r.ChartConfig.ColorThresholds.Thresholds = []tfTypes.Threshold{}

			for _, thresholdsItem := range resp.ChartConfig.ColorThresholds.Thresholds {
				var thresholds tfTypes.Threshold

				thresholds.Color = types.StringValue(thresholdsItem.Color)
				thresholds.Threshold = types.Float64Value(thresholdsItem.Threshold)

				r.ChartConfig.ColorThresholds.Thresholds = append(r.ChartConfig.ColorThresholds.Thresholds, thresholds)
			}
		}
		if resp.ChartConfig.CustomData == nil {
			r.ChartConfig.CustomData = nil
		} else {
			r.ChartConfig.CustomData = &tfTypes.CustomData{}
			r.ChartConfig.CustomData.ConnectNulls = types.StringPointerValue(resp.ChartConfig.CustomData.ConnectNulls)
			r.ChartConfig.CustomData.DataFields = make([]types.String, 0, len(resp.ChartConfig.CustomData.DataFields))
			for _, v := range resp.ChartConfig.CustomData.DataFields {
				r.ChartConfig.CustomData.DataFields = append(r.ChartConfig.CustomData.DataFields, types.StringValue(v))
			}
			r.ChartConfig.CustomData.IsPointColor = types.BoolPointerValue(resp.ChartConfig.CustomData.IsPointColor)
			r.ChartConfig.CustomData.LimitToTopN = types.Float64PointerValue(resp.ChartConfig.CustomData.LimitToTopN)
			r.ChartConfig.CustomData.Lines = types.BoolPointerValue(resp.ChartConfig.CustomData.Lines)
			r.ChartConfig.CustomData.NameField = types.StringPointerValue(resp.ChartConfig.CustomData.NameField)
			r.ChartConfig.CustomData.PointColorPalette = types.Float64PointerValue(resp.ChartConfig.CustomData.PointColorPalette)
			r.ChartConfig.CustomData.PointColorPaletteReversed = types.BoolPointerValue(resp.ChartConfig.CustomData.PointColorPaletteReversed)
			if resp.ChartConfig.CustomData.PointScale != nil {
				r.ChartConfig.CustomData.PointScale = &tfTypes.CustomDataPointScale{}
				if resp.ChartConfig.CustomData.PointScale.Str != nil {
					r.ChartConfig.CustomData.PointScale.Str = types.StringPointerValue(resp.ChartConfig.CustomData.PointScale.Str)
				}
				if resp.ChartConfig.CustomData.PointScale.Number != nil {
					r.ChartConfig.CustomData.PointScale.Number = types.Float64PointerValue(resp.ChartConfig.CustomData.PointScale.Number)
				}
			}
			r.ChartConfig.CustomData.PointScaleDataField = types.StringPointerValue(resp.ChartConfig.CustomData.PointScaleDataField)
			r.ChartConfig.CustomData.SeriesCount = types.Float64PointerValue(resp.ChartConfig.CustomData.SeriesCount)
			r.ChartConfig.CustomData.SplitBy = types.StringPointerValue(resp.ChartConfig.CustomData.SplitBy)
			r.ChartConfig.CustomData.Stack = types.BoolPointerValue(resp.ChartConfig.CustomData.Stack)
			r.ChartConfig.CustomData.SummarizeOthers = types.BoolPointerValue(resp.ChartConfig.CustomData.SummarizeOthers)
			r.ChartConfig.CustomData.Trellis = types.BoolPointerValue(resp.ChartConfig.CustomData.Trellis)
		}
		r.ChartConfig.Decimals = types.Float64PointerValue(resp.ChartConfig.Decimals)
		r.ChartConfig.Label = types.StringPointerValue(resp.ChartConfig.Label)
		if resp.ChartConfig.Legend == nil {
			r.ChartConfig.Legend = nil
		} else {
			r.ChartConfig.Legend = &tfTypes.Legend{}
			r.ChartConfig.Legend.Position = types.StringPointerValue(resp.ChartConfig.Legend.Position)
			r.ChartConfig.Legend.Truncate = types.BoolPointerValue(resp.ChartConfig.Legend.Truncate)
		}
		if resp.ChartConfig.MapDetails == nil {
			r.ChartConfig.MapDetails = nil
		} else {
			r.ChartConfig.MapDetails = &tfTypes.MapDetails{}
			r.ChartConfig.MapDetails.LatitudeField = types.StringPointerValue(resp.ChartConfig.MapDetails.LatitudeField)
			r.ChartConfig.MapDetails.LongitudeField = types.StringPointerValue(resp.ChartConfig.MapDetails.LongitudeField)
			r.ChartConfig.MapDetails.MapSourceID = types.StringPointerValue(resp.ChartConfig.MapDetails.MapSourceID)
			r.ChartConfig.MapDetails.MapType = types.StringPointerValue(resp.ChartConfig.MapDetails.MapType)
			r.ChartConfig.MapDetails.NameField = types.StringPointerValue(resp.ChartConfig.MapDetails.NameField)
			if resp.ChartConfig.MapDetails.PointScale != nil {
				r.ChartConfig.MapDetails.PointScale = &tfTypes.MapDetailsPointScale{}
				if resp.ChartConfig.MapDetails.PointScale.Str != nil {
					r.ChartConfig.MapDetails.PointScale.Str = types.StringPointerValue(resp.ChartConfig.MapDetails.PointScale.Str)
				}
				if resp.ChartConfig.MapDetails.PointScale.Number != nil {
					r.ChartConfig.MapDetails.PointScale.Number = types.Float64PointerValue(resp.ChartConfig.MapDetails.PointScale.Number)
				}
			}
			r.ChartConfig.MapDetails.ValueField = types.StringPointerValue(resp.ChartConfig.MapDetails.ValueField)
		}
		if resp.ChartConfig.OnClickAction == nil {
			r.ChartConfig.OnClickAction = nil
		} else {
			r.ChartConfig.OnClickAction = &tfTypes.OnClickAction{}
			r.ChartConfig.OnClickAction.Search = types.StringPointerValue(resp.ChartConfig.OnClickAction.Search)
			r.ChartConfig.OnClickAction.SelectedDashboardID = types.StringPointerValue(resp.ChartConfig.OnClickAction.SelectedDashboardID)
			r.ChartConfig.OnClickAction.SelectedInputID = types.StringPointerValue(resp.ChartConfig.OnClickAction.SelectedInputID)
			r.ChartConfig.OnClickAction.SelectedLinkID = types.StringPointerValue(resp.ChartConfig.OnClickAction.SelectedLinkID)
			r.ChartConfig.OnClickAction.SelectedTimerangeInputID = types.StringPointerValue(resp.ChartConfig.OnClickAction.SelectedTimerangeInputID)
			r.ChartConfig.OnClickAction.Type = types.StringPointerValue(resp.ChartConfig.OnClickAction.Type)
		}
		r.ChartConfig.Prefix = types.StringPointerValue(resp.ChartConfig.Prefix)
		r.ChartConfig.Separator = types.BoolPointerValue(resp.ChartConfig.Separator)
		r.ChartConfig.Series = []tfTypes.ChartSeries{}

		for _, seriesItem := range resp.ChartConfig.Series {
			var series tfTypes.ChartSeries

			series.Color = types.StringPointerValue(seriesItem.Color)
			series.Map = types.StringPointerValue(seriesItem.Map)
			series.Name = types.StringValue(seriesItem.Name)
			if seriesItem.Type != nil {
				series.Type = types.StringValue(string(*seriesItem.Type))
			} else {
				series.Type = types.StringNull()
			}
			series.YAxisField = types.StringPointerValue(seriesItem.YAxisField)

			r.ChartConfig.Series = append(r.ChartConfig.Series, series)
		}
		r.ChartConfig.ShouldApplyUserChartSettings = types.BoolPointerValue(resp.ChartConfig.ShouldApplyUserChartSettings)
		r.ChartConfig.Style = types.BoolPointerValue(resp.ChartConfig.Style)
		r.ChartConfig.Suffix = types.StringPointerValue(resp.ChartConfig.Suffix)
		r.ChartConfig.Type = types.StringValue(resp.ChartConfig.Type)
		if resp.ChartConfig.XAxis == nil {
			r.ChartConfig.XAxis = nil
		} else {
			r.ChartConfig.XAxis = &tfTypes.XAxis{}
			r.ChartConfig.XAxis.DataField = types.StringPointerValue(resp.ChartConfig.XAxis.DataField)
			r.ChartConfig.XAxis.Inverse = types.BoolPointerValue(resp.ChartConfig.XAxis.Inverse)
			r.ChartConfig.XAxis.LabelInterval = types.StringPointerValue(resp.ChartConfig.XAxis.LabelInterval)
			r.ChartConfig.XAxis.LabelOrientation = types.Float64PointerValue(resp.ChartConfig.XAxis.LabelOrientation)
			r.ChartConfig.XAxis.Name = types.StringPointerValue(resp.ChartConfig.XAxis.Name)
			r.ChartConfig.XAxis.Offset = types.Float64PointerValue(resp.ChartConfig.XAxis.Offset)
			r.ChartConfig.XAxis.Position = types.StringPointerValue(resp.ChartConfig.XAxis.Position)
			r.ChartConfig.XAxis.Type = types.StringPointerValue(resp.ChartConfig.XAxis.Type)
		}
		if resp.ChartConfig.YAxis == nil {
			r.ChartConfig.YAxis = nil
		} else {
			r.ChartConfig.YAxis = &tfTypes.YAxis{}
			r.ChartConfig.YAxis.DataField = make([]types.String, 0, len(resp.ChartConfig.YAxis.DataField))
			for _, v := range resp.ChartConfig.YAxis.DataField {
				r.ChartConfig.YAxis.DataField = append(r.ChartConfig.YAxis.DataField, types.StringValue(v))
			}
			r.ChartConfig.YAxis.Interval = types.Float64PointerValue(resp.ChartConfig.YAxis.Interval)
			r.ChartConfig.YAxis.Max = types.Float64PointerValue(resp.ChartConfig.YAxis.Max)
			r.ChartConfig.YAxis.Min = types.Float64PointerValue(resp.ChartConfig.YAxis.Min)
			r.ChartConfig.YAxis.Position = types.StringPointerValue(resp.ChartConfig.YAxis.Position)
			r.ChartConfig.YAxis.Scale = types.StringPointerValue(resp.ChartConfig.YAxis.Scale)
			r.ChartConfig.YAxis.SplitLine = types.BoolPointerValue(resp.ChartConfig.YAxis.SplitLine)
			r.ChartConfig.YAxis.Type = types.StringPointerValue(resp.ChartConfig.YAxis.Type)
		}
	}
	r.Description = types.StringPointerValue(resp.Description)
	r.DisplayUsername = types.StringPointerValue(resp.DisplayUsername)
	r.Earliest = types.StringPointerValue(resp.Earliest)
	r.ID = types.StringValue(resp.ID)
	r.IsPrivate = types.BoolPointerValue(resp.IsPrivate)
	r.IsSystem = types.BoolPointerValue(resp.IsSystem)
	r.Latest = types.StringPointerValue(resp.Latest)
	if resp.Lib != nil {
		r.Lib = types.StringValue(string(*resp.Lib))
	} else {
		r.Lib = types.StringNull()
	}
	r.Name = types.StringValue(resp.Name)
	r.Query = types.StringValue(resp.Query)
	r.ResolvedDatasetIds = make([]types.String, 0, len(resp.ResolvedDatasetIds))
	for _, v := range resp.ResolvedDatasetIds {
		r.ResolvedDatasetIds = append(r.ResolvedDatasetIds, types.StringValue(v))
	}
	r.SampleRate = types.Float64PointerValue(resp.SampleRate)
	if resp.Schedule == nil {
		r.Schedule = nil
	} else {
		r.Schedule = &tfTypes.SavedQuerySchedule{}
		r.Schedule.CronSchedule = types.StringValue(resp.Schedule.CronSchedule)
		r.Schedule.Enabled = types.BoolValue(resp.Schedule.Enabled)
		r.Schedule.KeepLastN = types.Float64Value(resp.Schedule.KeepLastN)
		r.Schedule.Notifications.Disabled = types.BoolValue(resp.Schedule.Notifications.Disabled)
		r.Schedule.Notifications.Items = []tfTypes.Notification{}

		for _, itemsItem := range resp.Schedule.Notifications.Items {
			var items tfTypes.Notification

			items.Condition = types.StringValue(itemsItem.Condition)
			if itemsItem.Conf == nil {
				items.Conf = nil
			} else {
				items.Conf = &tfTypes.ConditionSpecificConfigs{}
				items.Conf.Message = types.StringValue(itemsItem.Conf.Message)
				items.Conf.SavedQueryID = types.StringValue(itemsItem.Conf.SavedQueryID)
				items.Conf.TriggerComparator = types.StringPointerValue(itemsItem.Conf.TriggerComparator)
				items.Conf.TriggerCount = types.Float64PointerValue(itemsItem.Conf.TriggerCount)
				items.Conf.TriggerType = types.StringPointerValue(itemsItem.Conf.TriggerType)
			}
			items.Disabled = types.BoolPointerValue(itemsItem.Disabled)
			items.Group = types.StringPointerValue(itemsItem.Group)
			items.ID = types.StringValue(itemsItem.ID)
			items.Metadata = []tfTypes.MetadataItem{}

			for _, metadataItem := range itemsItem.Metadata {
				var metadata tfTypes.MetadataItem

				metadata.Name = types.StringValue(metadataItem.Name)
				metadata.Value = types.StringValue(metadataItem.Value)

				items.Metadata = append(items.Metadata, metadata)
			}
			items.TargetConfigs = []tfTypes.TargetConfig{}

			for _, targetConfigsItem := range itemsItem.TargetConfigs {
				var targetConfigs tfTypes.TargetConfig

				if targetConfigsItem.Conf == nil {
					targetConfigs.Conf = nil
				} else {
					targetConfigs.Conf = &tfTypes.TargetConfigConf{}
					if targetConfigsItem.Conf.AttachmentType != nil {
						targetConfigs.Conf.AttachmentType = types.StringValue(string(*targetConfigsItem.Conf.AttachmentType))
					} else {
						targetConfigs.Conf.AttachmentType = types.StringNull()
					}
					targetConfigs.Conf.IncludeResults = types.BoolPointerValue(targetConfigsItem.Conf.IncludeResults)
				}
				targetConfigs.ID = types.StringValue(targetConfigsItem.ID)

				items.TargetConfigs = append(items.TargetConfigs, targetConfigs)
			}
			items.Targets = make([]types.String, 0, len(itemsItem.Targets))
			for _, v := range itemsItem.Targets {
				items.Targets = append(items.Targets, types.StringValue(v))
			}

			r.Schedule.Notifications.Items = append(r.Schedule.Notifications.Items, items)
		}
		r.Schedule.ResumeMissed = types.BoolPointerValue(resp.Schedule.ResumeMissed)
		r.Schedule.ResumeOnBoot = types.BoolPointerValue(resp.Schedule.ResumeOnBoot)
		r.Schedule.Tz = types.StringValue(resp.Schedule.Tz)
	}
	r.TableConfig = types.StringPointerValue(resp.TableConfig)
	r.User = types.StringPointerValue(resp.User)

	return diags
}

func (r *SearchSavedQueryDataSourceModel) ToOperationsGetSavedQueryByIDRequest(ctx context.Context) (*operations.GetSavedQueryByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetSavedQueryByIDRequest{
		ID: id,
	}

	return &out, diags
}

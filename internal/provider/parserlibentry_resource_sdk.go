// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *ParserLibEntryResourceModel) RefreshFromSharedParserLibEntry(ctx context.Context, resp *shared.ParserLibEntry) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp.AdditionalProperties == nil {
		r.AdditionalProperties = types.StringNull()
	} else {
		additionalPropertiesResult, _ := json.Marshal(resp.AdditionalProperties)
		r.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
	}
	r.Description = types.StringPointerValue(resp.Description)
	r.ID = types.StringValue(resp.ID)
	r.Lib = types.StringPointerValue(resp.Lib)
	r.Tags = types.StringPointerValue(resp.Tags)
	if resp.Type != nil {
		r.Type = types.StringValue(string(*resp.Type))
	} else {
		r.Type = types.StringNull()
	}

	return diags
}

func (r *ParserLibEntryResourceModel) ToOperationsCreateParserRequest(ctx context.Context) (*operations.CreateParserRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	parserLibEntry, parserLibEntryDiags := r.ToSharedParserLibEntry(ctx)
	diags.Append(parserLibEntryDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateParserRequest{
		GroupID:        groupID,
		ParserLibEntry: *parserLibEntry,
	}

	return &out, diags
}

func (r *ParserLibEntryResourceModel) ToOperationsListParserRequest(ctx context.Context) (*operations.ListParserRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.ListParserRequest{
		GroupID: groupID,
	}

	return &out, diags
}

func (r *ParserLibEntryResourceModel) ToOperationsUpdateParserByIDRequest(ctx context.Context) (*operations.UpdateParserByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	parserLibEntry, parserLibEntryDiags := r.ToSharedParserLibEntry(ctx)
	diags.Append(parserLibEntryDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateParserByIDRequest{
		ID:             id,
		GroupID:        groupID,
		ParserLibEntry: *parserLibEntry,
	}

	return &out, diags
}

func (r *ParserLibEntryResourceModel) ToSharedParserLibEntry(ctx context.Context) (*shared.ParserLibEntry, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	lib := new(string)
	if !r.Lib.IsUnknown() && !r.Lib.IsNull() {
		*lib = r.Lib.ValueString()
	} else {
		lib = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	tags := new(string)
	if !r.Tags.IsUnknown() && !r.Tags.IsNull() {
		*tags = r.Tags.ValueString()
	} else {
		tags = nil
	}
	typeVar := new(shared.ParserLibEntryType)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.ParserLibEntryType(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	var additionalProperties interface{}
	if !r.AdditionalProperties.IsUnknown() && !r.AdditionalProperties.IsNull() {
		_ = json.Unmarshal([]byte(r.AdditionalProperties.ValueString()), &additionalProperties)
	}
	out := shared.ParserLibEntry{
		ID:                   id,
		Lib:                  lib,
		Description:          description,
		Tags:                 tags,
		Type:                 typeVar,
		AdditionalProperties: additionalProperties,
	}

	return &out, diags
}

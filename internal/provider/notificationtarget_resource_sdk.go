// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *NotificationTargetResourceModel) RefreshFromSharedNotificationTarget(ctx context.Context, resp *shared.NotificationTarget) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp.PagerDutyTarget != nil {
		r.PagerDutyTarget = &tfTypes.PagerDutyTarget{}
		r.PagerDutyTarget.Class = types.StringPointerValue(resp.PagerDutyTarget.Class)
		r.PagerDutyTarget.Component = types.StringPointerValue(resp.PagerDutyTarget.Component)
		r.PagerDutyTarget.Group = types.StringPointerValue(resp.PagerDutyTarget.Group)
		r.PagerDutyTarget.ID = types.StringValue(resp.PagerDutyTarget.ID)
		r.ID = r.PagerDutyTarget.ID
		r.PagerDutyTarget.RoutingKey = types.StringValue(resp.PagerDutyTarget.RoutingKey)
		if resp.PagerDutyTarget.Severity != nil {
			r.PagerDutyTarget.Severity = types.StringValue(string(*resp.PagerDutyTarget.Severity))
		} else {
			r.PagerDutyTarget.Severity = types.StringNull()
		}
		r.PagerDutyTarget.SystemFields = make([]types.String, 0, len(resp.PagerDutyTarget.SystemFields))
		for _, v := range resp.PagerDutyTarget.SystemFields {
			r.PagerDutyTarget.SystemFields = append(r.PagerDutyTarget.SystemFields, types.StringValue(v))
		}
		r.PagerDutyTarget.Type = types.StringValue(string(resp.PagerDutyTarget.Type))
	}
	if resp.SlackTarget != nil {
		r.SlackTarget = &tfTypes.SlackTarget{}
		r.SlackTarget.ID = types.StringValue(resp.SlackTarget.ID)
		r.ID = r.SlackTarget.ID
		r.SlackTarget.SystemFields = make([]types.String, 0, len(resp.SlackTarget.SystemFields))
		for _, v := range resp.SlackTarget.SystemFields {
			r.SlackTarget.SystemFields = append(r.SlackTarget.SystemFields, types.StringValue(v))
		}
		r.SlackTarget.Type = types.StringValue(string(resp.SlackTarget.Type))
		r.SlackTarget.URL = types.StringValue(resp.SlackTarget.URL)
	}
	if resp.SMTPTarget != nil {
		r.SMTPTarget = &tfTypes.SMTPTarget{}
		if resp.SMTPTarget.EncryptionOption != nil {
			r.SMTPTarget.EncryptionOption = types.StringValue(string(*resp.SMTPTarget.EncryptionOption))
		} else {
			r.SMTPTarget.EncryptionOption = types.StringNull()
		}
		r.SMTPTarget.From = types.StringValue(resp.SMTPTarget.From)
		r.SMTPTarget.Host = types.StringValue(resp.SMTPTarget.Host)
		r.SMTPTarget.ID = types.StringValue(resp.SMTPTarget.ID)
		r.ID = r.SMTPTarget.ID
		r.SMTPTarget.Password = types.StringPointerValue(resp.SMTPTarget.Password)
		r.SMTPTarget.Port = types.Int64Value(resp.SMTPTarget.Port)
		r.SMTPTarget.SystemFields = make([]types.String, 0, len(resp.SMTPTarget.SystemFields))
		for _, v := range resp.SMTPTarget.SystemFields {
			r.SMTPTarget.SystemFields = append(r.SMTPTarget.SystemFields, types.StringValue(v))
		}
		if resp.SMTPTarget.TLS == nil {
			r.SMTPTarget.TLS = nil
		} else {
			r.SMTPTarget.TLS = &tfTypes.TLSConfiguration{}
			if resp.SMTPTarget.TLS.MaxVersion != nil {
				r.SMTPTarget.TLS.MaxVersion = types.StringValue(string(*resp.SMTPTarget.TLS.MaxVersion))
			} else {
				r.SMTPTarget.TLS.MaxVersion = types.StringNull()
			}
			if resp.SMTPTarget.TLS.MinVersion != nil {
				r.SMTPTarget.TLS.MinVersion = types.StringValue(string(*resp.SMTPTarget.TLS.MinVersion))
			} else {
				r.SMTPTarget.TLS.MinVersion = types.StringNull()
			}
			r.SMTPTarget.TLS.RejectUnauthorized = types.BoolPointerValue(resp.SMTPTarget.TLS.RejectUnauthorized)
		}
		r.SMTPTarget.Type = types.StringValue(string(resp.SMTPTarget.Type))
		r.SMTPTarget.Username = types.StringPointerValue(resp.SMTPTarget.Username)
	}
	if resp.SnsTarget != nil {
		r.SnsTarget = &tfTypes.SnsTarget{}
		r.SnsTarget.Allowlist = make([]types.String, 0, len(resp.SnsTarget.Allowlist))
		for _, v := range resp.SnsTarget.Allowlist {
			r.SnsTarget.Allowlist = append(r.SnsTarget.Allowlist, types.StringValue(v))
		}
		r.SnsTarget.AssumeRoleArn = types.StringPointerValue(resp.SnsTarget.AssumeRoleArn)
		r.SnsTarget.AssumeRoleExternalID = types.StringPointerValue(resp.SnsTarget.AssumeRoleExternalID)
		r.SnsTarget.AwsAPIKey = types.StringPointerValue(resp.SnsTarget.AwsAPIKey)
		if resp.SnsTarget.AwsAuthenticationMethod != nil {
			r.SnsTarget.AwsAuthenticationMethod = types.StringValue(string(*resp.SnsTarget.AwsAuthenticationMethod))
		} else {
			r.SnsTarget.AwsAuthenticationMethod = types.StringNull()
		}
		r.SnsTarget.AwsSecretKey = types.StringPointerValue(resp.SnsTarget.AwsSecretKey)
		if resp.SnsTarget.DestinationType != nil {
			r.SnsTarget.DestinationType = types.StringValue(string(*resp.SnsTarget.DestinationType))
		} else {
			r.SnsTarget.DestinationType = types.StringNull()
		}
		r.SnsTarget.Endpoint = types.StringPointerValue(resp.SnsTarget.Endpoint)
		r.SnsTarget.ID = types.StringValue(resp.SnsTarget.ID)
		r.ID = r.SnsTarget.ID
		r.SnsTarget.MessageGroupID = types.StringPointerValue(resp.SnsTarget.MessageGroupID)
		r.SnsTarget.PhoneNumber = types.StringPointerValue(resp.SnsTarget.PhoneNumber)
		r.SnsTarget.Region = types.StringValue(resp.SnsTarget.Region)
		r.SnsTarget.SystemFields = make([]types.String, 0, len(resp.SnsTarget.SystemFields))
		for _, v := range resp.SnsTarget.SystemFields {
			r.SnsTarget.SystemFields = append(r.SnsTarget.SystemFields, types.StringValue(v))
		}
		r.SnsTarget.TopicArn = types.StringPointerValue(resp.SnsTarget.TopicArn)
		if resp.SnsTarget.TopicType != nil {
			r.SnsTarget.TopicType = types.StringValue(string(*resp.SnsTarget.TopicType))
		} else {
			r.SnsTarget.TopicType = types.StringNull()
		}
		r.SnsTarget.Type = types.StringValue(string(resp.SnsTarget.Type))
	}
	if resp.WebhookTarget != nil {
		r.WebhookTarget = &tfTypes.WebhookTarget{}
		if resp.WebhookTarget.AuthType != nil {
			r.WebhookTarget.AuthType = types.StringValue(string(*resp.WebhookTarget.AuthType))
		} else {
			r.WebhookTarget.AuthType = types.StringNull()
		}
		r.WebhookTarget.Format = types.StringValue(string(resp.WebhookTarget.Format))
		r.WebhookTarget.ID = types.StringValue(resp.WebhookTarget.ID)
		r.ID = r.WebhookTarget.ID
		r.WebhookTarget.Method = types.StringValue(string(resp.WebhookTarget.Method))
		r.WebhookTarget.Password = types.StringPointerValue(resp.WebhookTarget.Password)
		r.WebhookTarget.SystemFields = make([]types.String, 0, len(resp.WebhookTarget.SystemFields))
		for _, v := range resp.WebhookTarget.SystemFields {
			r.WebhookTarget.SystemFields = append(r.WebhookTarget.SystemFields, types.StringValue(v))
		}
		r.WebhookTarget.Token = types.StringPointerValue(resp.WebhookTarget.Token)
		r.WebhookTarget.Type = types.StringValue(string(resp.WebhookTarget.Type))
		r.WebhookTarget.URL = types.StringValue(resp.WebhookTarget.URL)
		r.WebhookTarget.Username = types.StringPointerValue(resp.WebhookTarget.Username)
	}

	return diags
}

func (r *NotificationTargetResourceModel) ToOperationsDeleteNotificationTargetByIDRequest(ctx context.Context) (*operations.DeleteNotificationTargetByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteNotificationTargetByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *NotificationTargetResourceModel) ToOperationsUpdateNotificationTargetByIDRequest(ctx context.Context) (*operations.UpdateNotificationTargetByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	notificationTarget, notificationTargetDiags := r.ToSharedNotificationTarget(ctx)
	diags.Append(notificationTargetDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateNotificationTargetByIDRequest{
		ID:                 id,
		NotificationTarget: *notificationTarget,
	}

	return &out, diags
}

func (r *NotificationTargetResourceModel) ToSharedNotificationTarget(ctx context.Context) (*shared.NotificationTarget, diag.Diagnostics) {
	var diags diag.Diagnostics

	var out shared.NotificationTarget
	var webhookTarget *shared.WebhookTarget
	if r.WebhookTarget != nil {
		var id string
		id = r.WebhookTarget.ID.ValueString()

		typeVar := shared.NotificationTargetTypeWebhook(r.WebhookTarget.Type.ValueString())
		systemFields := make([]string, 0, len(r.WebhookTarget.SystemFields))
		for _, systemFieldsItem := range r.WebhookTarget.SystemFields {
			systemFields = append(systemFields, systemFieldsItem.ValueString())
		}
		var url string
		url = r.WebhookTarget.URL.ValueString()

		format := shared.NotificationTargetFormat(r.WebhookTarget.Format.ValueString())
		method := shared.HTTPMethod(r.WebhookTarget.Method.ValueString())
		authType := new(shared.NotificationTargetAuthenticationType)
		if !r.WebhookTarget.AuthType.IsUnknown() && !r.WebhookTarget.AuthType.IsNull() {
			*authType = shared.NotificationTargetAuthenticationType(r.WebhookTarget.AuthType.ValueString())
		} else {
			authType = nil
		}
		token := new(string)
		if !r.WebhookTarget.Token.IsUnknown() && !r.WebhookTarget.Token.IsNull() {
			*token = r.WebhookTarget.Token.ValueString()
		} else {
			token = nil
		}
		username := new(string)
		if !r.WebhookTarget.Username.IsUnknown() && !r.WebhookTarget.Username.IsNull() {
			*username = r.WebhookTarget.Username.ValueString()
		} else {
			username = nil
		}
		password := new(string)
		if !r.WebhookTarget.Password.IsUnknown() && !r.WebhookTarget.Password.IsNull() {
			*password = r.WebhookTarget.Password.ValueString()
		} else {
			password = nil
		}
		webhookTarget = &shared.WebhookTarget{
			ID:           id,
			Type:         typeVar,
			SystemFields: systemFields,
			URL:          url,
			Format:       format,
			Method:       method,
			AuthType:     authType,
			Token:        token,
			Username:     username,
			Password:     password,
		}
	}
	if webhookTarget != nil {
		out = shared.NotificationTarget{
			WebhookTarget: webhookTarget,
		}
	}
	var pagerDutyTarget *shared.PagerDutyTarget
	if r.PagerDutyTarget != nil {
		var id1 string
		id1 = r.PagerDutyTarget.ID.ValueString()

		typeVar1 := shared.TypePagerDuty(r.PagerDutyTarget.Type.ValueString())
		systemFields1 := make([]string, 0, len(r.PagerDutyTarget.SystemFields))
		for _, systemFieldsItem1 := range r.PagerDutyTarget.SystemFields {
			systemFields1 = append(systemFields1, systemFieldsItem1.ValueString())
		}
		var routingKey string
		routingKey = r.PagerDutyTarget.RoutingKey.ValueString()

		group := new(string)
		if !r.PagerDutyTarget.Group.IsUnknown() && !r.PagerDutyTarget.Group.IsNull() {
			*group = r.PagerDutyTarget.Group.ValueString()
		} else {
			group = nil
		}
		class := new(string)
		if !r.PagerDutyTarget.Class.IsUnknown() && !r.PagerDutyTarget.Class.IsNull() {
			*class = r.PagerDutyTarget.Class.ValueString()
		} else {
			class = nil
		}
		component := new(string)
		if !r.PagerDutyTarget.Component.IsUnknown() && !r.PagerDutyTarget.Component.IsNull() {
			*component = r.PagerDutyTarget.Component.ValueString()
		} else {
			component = nil
		}
		severity := new(shared.NotificationTargetSeverity)
		if !r.PagerDutyTarget.Severity.IsUnknown() && !r.PagerDutyTarget.Severity.IsNull() {
			*severity = shared.NotificationTargetSeverity(r.PagerDutyTarget.Severity.ValueString())
		} else {
			severity = nil
		}
		pagerDutyTarget = &shared.PagerDutyTarget{
			ID:           id1,
			Type:         typeVar1,
			SystemFields: systemFields1,
			RoutingKey:   routingKey,
			Group:        group,
			Class:        class,
			Component:    component,
			Severity:     severity,
		}
	}
	if pagerDutyTarget != nil {
		out = shared.NotificationTarget{
			PagerDutyTarget: pagerDutyTarget,
		}
	}
	var slackTarget *shared.SlackTarget
	if r.SlackTarget != nil {
		var id2 string
		id2 = r.SlackTarget.ID.ValueString()

		typeVar2 := shared.TypeSlack(r.SlackTarget.Type.ValueString())
		systemFields2 := make([]string, 0, len(r.SlackTarget.SystemFields))
		for _, systemFieldsItem2 := range r.SlackTarget.SystemFields {
			systemFields2 = append(systemFields2, systemFieldsItem2.ValueString())
		}
		var url1 string
		url1 = r.SlackTarget.URL.ValueString()

		slackTarget = &shared.SlackTarget{
			ID:           id2,
			Type:         typeVar2,
			SystemFields: systemFields2,
			URL:          url1,
		}
	}
	if slackTarget != nil {
		out = shared.NotificationTarget{
			SlackTarget: slackTarget,
		}
	}
	var snsTarget *shared.SnsTarget
	if r.SnsTarget != nil {
		var id3 string
		id3 = r.SnsTarget.ID.ValueString()

		typeVar3 := shared.NotificationTargetTypeSns(r.SnsTarget.Type.ValueString())
		systemFields3 := make([]string, 0, len(r.SnsTarget.SystemFields))
		for _, systemFieldsItem3 := range r.SnsTarget.SystemFields {
			systemFields3 = append(systemFields3, systemFieldsItem3.ValueString())
		}
		awsAuthenticationMethod := new(shared.NotificationTargetAuthenticationMethod)
		if !r.SnsTarget.AwsAuthenticationMethod.IsUnknown() && !r.SnsTarget.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod = shared.NotificationTargetAuthenticationMethod(r.SnsTarget.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod = nil
		}
		assumeRoleArn := new(string)
		if !r.SnsTarget.AssumeRoleArn.IsUnknown() && !r.SnsTarget.AssumeRoleArn.IsNull() {
			*assumeRoleArn = r.SnsTarget.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn = nil
		}
		assumeRoleExternalID := new(string)
		if !r.SnsTarget.AssumeRoleExternalID.IsUnknown() && !r.SnsTarget.AssumeRoleExternalID.IsNull() {
			*assumeRoleExternalID = r.SnsTarget.AssumeRoleExternalID.ValueString()
		} else {
			assumeRoleExternalID = nil
		}
		awsAPIKey := new(string)
		if !r.SnsTarget.AwsAPIKey.IsUnknown() && !r.SnsTarget.AwsAPIKey.IsNull() {
			*awsAPIKey = r.SnsTarget.AwsAPIKey.ValueString()
		} else {
			awsAPIKey = nil
		}
		awsSecretKey := new(string)
		if !r.SnsTarget.AwsSecretKey.IsUnknown() && !r.SnsTarget.AwsSecretKey.IsNull() {
			*awsSecretKey = r.SnsTarget.AwsSecretKey.ValueString()
		} else {
			awsSecretKey = nil
		}
		var region string
		region = r.SnsTarget.Region.ValueString()

		endpoint := new(string)
		if !r.SnsTarget.Endpoint.IsUnknown() && !r.SnsTarget.Endpoint.IsNull() {
			*endpoint = r.SnsTarget.Endpoint.ValueString()
		} else {
			endpoint = nil
		}
		allowlist := make([]string, 0, len(r.SnsTarget.Allowlist))
		for _, allowlistItem := range r.SnsTarget.Allowlist {
			allowlist = append(allowlist, allowlistItem.ValueString())
		}
		destinationType := new(shared.DestinationType)
		if !r.SnsTarget.DestinationType.IsUnknown() && !r.SnsTarget.DestinationType.IsNull() {
			*destinationType = shared.DestinationType(r.SnsTarget.DestinationType.ValueString())
		} else {
			destinationType = nil
		}
		phoneNumber := new(string)
		if !r.SnsTarget.PhoneNumber.IsUnknown() && !r.SnsTarget.PhoneNumber.IsNull() {
			*phoneNumber = r.SnsTarget.PhoneNumber.ValueString()
		} else {
			phoneNumber = nil
		}
		topicArn := new(string)
		if !r.SnsTarget.TopicArn.IsUnknown() && !r.SnsTarget.TopicArn.IsNull() {
			*topicArn = r.SnsTarget.TopicArn.ValueString()
		} else {
			topicArn = nil
		}
		topicType := new(shared.TopicType)
		if !r.SnsTarget.TopicType.IsUnknown() && !r.SnsTarget.TopicType.IsNull() {
			*topicType = shared.TopicType(r.SnsTarget.TopicType.ValueString())
		} else {
			topicType = nil
		}
		messageGroupID := new(string)
		if !r.SnsTarget.MessageGroupID.IsUnknown() && !r.SnsTarget.MessageGroupID.IsNull() {
			*messageGroupID = r.SnsTarget.MessageGroupID.ValueString()
		} else {
			messageGroupID = nil
		}
		snsTarget = &shared.SnsTarget{
			ID:                      id3,
			Type:                    typeVar3,
			SystemFields:            systemFields3,
			AwsAuthenticationMethod: awsAuthenticationMethod,
			AssumeRoleArn:           assumeRoleArn,
			AssumeRoleExternalID:    assumeRoleExternalID,
			AwsAPIKey:               awsAPIKey,
			AwsSecretKey:            awsSecretKey,
			Region:                  region,
			Endpoint:                endpoint,
			Allowlist:               allowlist,
			DestinationType:         destinationType,
			PhoneNumber:             phoneNumber,
			TopicArn:                topicArn,
			TopicType:               topicType,
			MessageGroupID:          messageGroupID,
		}
	}
	if snsTarget != nil {
		out = shared.NotificationTarget{
			SnsTarget: snsTarget,
		}
	}
	var smtpTarget *shared.SMTPTarget
	if r.SMTPTarget != nil {
		var id4 string
		id4 = r.SMTPTarget.ID.ValueString()

		typeVar4 := shared.TypeSMTP(r.SMTPTarget.Type.ValueString())
		systemFields4 := make([]string, 0, len(r.SMTPTarget.SystemFields))
		for _, systemFieldsItem4 := range r.SMTPTarget.SystemFields {
			systemFields4 = append(systemFields4, systemFieldsItem4.ValueString())
		}
		var host string
		host = r.SMTPTarget.Host.ValueString()

		var port int64
		port = r.SMTPTarget.Port.ValueInt64()

		var from string
		from = r.SMTPTarget.From.ValueString()

		username1 := new(string)
		if !r.SMTPTarget.Username.IsUnknown() && !r.SMTPTarget.Username.IsNull() {
			*username1 = r.SMTPTarget.Username.ValueString()
		} else {
			username1 = nil
		}
		password1 := new(string)
		if !r.SMTPTarget.Password.IsUnknown() && !r.SMTPTarget.Password.IsNull() {
			*password1 = r.SMTPTarget.Password.ValueString()
		} else {
			password1 = nil
		}
		encryptionOption := new(shared.Encryption)
		if !r.SMTPTarget.EncryptionOption.IsUnknown() && !r.SMTPTarget.EncryptionOption.IsNull() {
			*encryptionOption = shared.Encryption(r.SMTPTarget.EncryptionOption.ValueString())
		} else {
			encryptionOption = nil
		}
		var tls *shared.TLSConfiguration
		if r.SMTPTarget.TLS != nil {
			rejectUnauthorized := new(bool)
			if !r.SMTPTarget.TLS.RejectUnauthorized.IsUnknown() && !r.SMTPTarget.TLS.RejectUnauthorized.IsNull() {
				*rejectUnauthorized = r.SMTPTarget.TLS.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized = nil
			}
			minVersion := new(shared.NotificationTargetMinimumTLSVersion)
			if !r.SMTPTarget.TLS.MinVersion.IsUnknown() && !r.SMTPTarget.TLS.MinVersion.IsNull() {
				*minVersion = shared.NotificationTargetMinimumTLSVersion(r.SMTPTarget.TLS.MinVersion.ValueString())
			} else {
				minVersion = nil
			}
			maxVersion := new(shared.NotificationTargetMaximumTLSVersion)
			if !r.SMTPTarget.TLS.MaxVersion.IsUnknown() && !r.SMTPTarget.TLS.MaxVersion.IsNull() {
				*maxVersion = shared.NotificationTargetMaximumTLSVersion(r.SMTPTarget.TLS.MaxVersion.ValueString())
			} else {
				maxVersion = nil
			}
			tls = &shared.TLSConfiguration{
				RejectUnauthorized: rejectUnauthorized,
				MinVersion:         minVersion,
				MaxVersion:         maxVersion,
			}
		}
		smtpTarget = &shared.SMTPTarget{
			ID:               id4,
			Type:             typeVar4,
			SystemFields:     systemFields4,
			Host:             host,
			Port:             port,
			From:             from,
			Username:         username1,
			Password:         password1,
			EncryptionOption: encryptionOption,
			TLS:              tls,
		}
	}
	if smtpTarget != nil {
		out = shared.NotificationTarget{
			SMTPTarget: smtpTarget,
		}
	}

	return &out, diags
}

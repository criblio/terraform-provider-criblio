// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *PackLookupsDataSourceModel) RefreshFromOperationsGetSystemLookupsByPackAndIDResponseBody(ctx context.Context, resp *operations.GetSystemLookupsByPackAndIDResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.Routes{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items tfTypes.Routes
			items.Comments = []tfTypes.Comment{}
			for commentsCount, commentsItem := range itemsItem.Comments {
				var comments tfTypes.Comment
				if commentsItem.AdditionalProperties == nil {
					comments.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult, _ := json.Marshal(commentsItem.AdditionalProperties)
					comments.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
				}
				comments.Comment = types.StringPointerValue(commentsItem.Comment)
				if commentsCount+1 > len(items.Comments) {
					items.Comments = append(items.Comments, comments)
				} else {
					items.Comments[commentsCount].AdditionalProperties = comments.AdditionalProperties
					items.Comments[commentsCount].Comment = comments.Comment
				}
			}
			if len(itemsItem.Groups) > 0 {
				items.Groups = make(map[string]tfTypes.RoutesGroups, len(itemsItem.Groups))
				for routesGroupsKey, routesGroupsValue := range itemsItem.Groups {
					var routesGroupsResult tfTypes.RoutesGroups
					routesGroupsResult.Description = types.StringPointerValue(routesGroupsValue.Description)
					routesGroupsResult.Disabled = types.BoolPointerValue(routesGroupsValue.Disabled)
					routesGroupsResult.Name = types.StringValue(routesGroupsValue.Name)

					items.Groups[routesGroupsKey] = routesGroupsResult
				}
			}
			items.ID = types.StringPointerValue(itemsItem.ID)
			items.Routes = []tfTypes.RoutesRoute{}
			for routesCount, routesItem := range itemsItem.Routes {
				var routes tfTypes.RoutesRoute
				if routesItem.AdditionalProperties == nil {
					routes.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult1, _ := json.Marshal(routesItem.AdditionalProperties)
					routes.AdditionalProperties = types.StringValue(string(additionalPropertiesResult1))
				}
				routes.Description = types.StringPointerValue(routesItem.Description)
				routes.Disabled = types.BoolPointerValue(routesItem.Disabled)
				routes.EnableOutputExpression = types.BoolPointerValue(routesItem.EnableOutputExpression)
				routes.Filter = types.StringPointerValue(routesItem.Filter)
				routes.Final = types.BoolPointerValue(routesItem.Final)
				routes.ID = types.StringPointerValue(routesItem.ID)
				routes.Name = types.StringValue(routesItem.Name)
				if routesItem.Output == nil {
					routes.Output = types.StringNull()
				} else {
					outputResult, _ := json.Marshal(routesItem.Output)
					routes.Output = types.StringValue(string(outputResult))
				}
				if routesItem.OutputExpression == nil {
					routes.OutputExpression = types.StringNull()
				} else {
					outputExpressionResult, _ := json.Marshal(routesItem.OutputExpression)
					routes.OutputExpression = types.StringValue(string(outputExpressionResult))
				}
				routes.Pipeline = types.StringValue(routesItem.Pipeline)
				if routesCount+1 > len(items.Routes) {
					items.Routes = append(items.Routes, routes)
				} else {
					items.Routes[routesCount].AdditionalProperties = routes.AdditionalProperties
					items.Routes[routesCount].Description = routes.Description
					items.Routes[routesCount].Disabled = routes.Disabled
					items.Routes[routesCount].EnableOutputExpression = routes.EnableOutputExpression
					items.Routes[routesCount].Filter = routes.Filter
					items.Routes[routesCount].Final = routes.Final
					items.Routes[routesCount].ID = routes.ID
					items.Routes[routesCount].Name = routes.Name
					items.Routes[routesCount].Output = routes.Output
					items.Routes[routesCount].OutputExpression = routes.OutputExpression
					items.Routes[routesCount].Pipeline = routes.Pipeline
				}
			}
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items)
			} else {
				r.Items[itemsCount].Comments = items.Comments
				r.Items[itemsCount].Groups = items.Groups
				r.Items[itemsCount].ID = items.ID
				r.Items[itemsCount].Routes = items.Routes
			}
		}
	}

	return diags
}

func (r *PackLookupsDataSourceModel) ToOperationsGetSystemLookupsByPackAndIDRequest(ctx context.Context) (*operations.GetSystemLookupsByPackAndIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var pack string
	pack = r.Pack.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.GetSystemLookupsByPackAndIDRequest{
		ID:      id,
		Pack:    pack,
		GroupID: groupID,
	}

	return &out, diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-criblio/internal/provider/types"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk/models/shared"
)

func (r *PackLookupsDataSourceModel) RefreshFromOperationsGetSystemLookupsByPackResponseBody(ctx context.Context, resp *operations.GetSystemLookupsByPackResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.Routes{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items tfTypes.Routes
			items.Comments = []tfTypes.Comment{}
			for commentsCount, commentsItem := range itemsItem.Comments {
				var comments tfTypes.Comment
				if commentsItem.AdditionalProperties == nil {
					comments.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult, _ := json.Marshal(commentsItem.AdditionalProperties)
					comments.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
				}
				comments.Comment = types.StringPointerValue(commentsItem.Comment)
				if commentsCount+1 > len(items.Comments) {
					items.Comments = append(items.Comments, comments)
				} else {
					items.Comments[commentsCount].AdditionalProperties = comments.AdditionalProperties
					items.Comments[commentsCount].Comment = comments.Comment
				}
			}
			if len(itemsItem.Groups) > 0 {
				items.Groups = make(map[string]tfTypes.RoutesGroups, len(itemsItem.Groups))
				for routesGroupsKey, routesGroupsValue := range itemsItem.Groups {
					var routesGroupsResult tfTypes.RoutesGroups
					routesGroupsResult.Description = types.StringPointerValue(routesGroupsValue.Description)
					routesGroupsResult.Disabled = types.BoolPointerValue(routesGroupsValue.Disabled)
					routesGroupsResult.Name = types.StringValue(routesGroupsValue.Name)

					items.Groups[routesGroupsKey] = routesGroupsResult
				}
			}
			items.ID = types.StringPointerValue(itemsItem.ID)
			items.Routes = []tfTypes.RoutesRoute{}
			for routesCount, routesItem := range itemsItem.Routes {
				var routes tfTypes.RoutesRoute
				if routesItem.AdditionalProperties == nil {
					routes.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult1, _ := json.Marshal(routesItem.AdditionalProperties)
					routes.AdditionalProperties = types.StringValue(string(additionalPropertiesResult1))
				}
				routes.Description = types.StringPointerValue(routesItem.Description)
				routes.Disabled = types.BoolPointerValue(routesItem.Disabled)
				routes.EnableOutputExpression = types.BoolPointerValue(routesItem.EnableOutputExpression)
				routes.Filter = types.StringPointerValue(routesItem.Filter)
				routes.Final = types.BoolPointerValue(routesItem.Final)
				routes.ID = types.StringPointerValue(routesItem.ID)
				routes.Name = types.StringValue(routesItem.Name)
				if routesItem.Output == nil {
					routes.Output = types.StringNull()
				} else {
					outputResult, _ := json.Marshal(routesItem.Output)
					routes.Output = types.StringValue(string(outputResult))
				}
				if routesItem.OutputExpression == nil {
					routes.OutputExpression = types.StringNull()
				} else {
					outputExpressionResult, _ := json.Marshal(routesItem.OutputExpression)
					routes.OutputExpression = types.StringValue(string(outputExpressionResult))
				}
				routes.Pipeline = types.StringValue(routesItem.Pipeline)
				if routesCount+1 > len(items.Routes) {
					items.Routes = append(items.Routes, routes)
				} else {
					items.Routes[routesCount].AdditionalProperties = routes.AdditionalProperties
					items.Routes[routesCount].Description = routes.Description
					items.Routes[routesCount].Disabled = routes.Disabled
					items.Routes[routesCount].EnableOutputExpression = routes.EnableOutputExpression
					items.Routes[routesCount].Filter = routes.Filter
					items.Routes[routesCount].Final = routes.Final
					items.Routes[routesCount].ID = routes.ID
					items.Routes[routesCount].Name = routes.Name
					items.Routes[routesCount].Output = routes.Output
					items.Routes[routesCount].OutputExpression = routes.OutputExpression
					items.Routes[routesCount].Pipeline = routes.Pipeline
				}
			}
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items)
			} else {
				r.Items[itemsCount].Comments = items.Comments
				r.Items[itemsCount].Groups = items.Groups
				r.Items[itemsCount].ID = items.ID
				r.Items[itemsCount].Routes = items.Routes
			}
		}
	}

	return diags
}

func (r *PackLookupsDataSourceModel) ToOperationsGetSystemLookupsByPackRequest(ctx context.Context) (*operations.GetSystemLookupsByPackRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pack string
	pack = r.Pack.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	lookupFile, lookupFileDiags := r.ToSharedLookupFileInputUnion(ctx)
	diags.Append(lookupFileDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.GetSystemLookupsByPackRequest{
		Pack:       pack,
		GroupID:    groupID,
		LookupFile: *lookupFile,
	}

	return &out, diags
}

func (r *PackLookupsDataSourceModel) ToSharedLookupFileInputUnion(ctx context.Context) (*shared.LookupFileInputUnion, diag.Diagnostics) {
	var diags diag.Diagnostics

	var out shared.LookupFileInputUnion
	var lookupFileInput1 *shared.LookupFileInput1
	if r.LookupFileInput1 != nil {
		var fileInfo *shared.FileInfo
		if r.LookupFileInput1.FileInfo != nil {
			var filename string
			filename = r.LookupFileInput1.FileInfo.Filename.ValueString()

			fileInfo = &shared.FileInfo{
				Filename: filename,
			}
		}
		var id string
		id = r.LookupFileInput1.ID.ValueString()

		description := new(string)
		if !r.LookupFileInput1.Description.IsUnknown() && !r.LookupFileInput1.Description.IsNull() {
			*description = r.LookupFileInput1.Description.ValueString()
		} else {
			description = nil
		}
		tags := new(string)
		if !r.LookupFileInput1.Tags.IsUnknown() && !r.LookupFileInput1.Tags.IsNull() {
			*tags = r.LookupFileInput1.Tags.ValueString()
		} else {
			tags = nil
		}
		size := new(float64)
		if !r.LookupFileInput1.Size.IsUnknown() && !r.LookupFileInput1.Size.IsNull() {
			*size = r.LookupFileInput1.Size.ValueFloat64()
		} else {
			size = nil
		}
		mode := new(shared.LookupFileMode1)
		if !r.LookupFileInput1.Mode.IsUnknown() && !r.LookupFileInput1.Mode.IsNull() {
			*mode = shared.LookupFileMode1(r.LookupFileInput1.Mode.ValueString())
		} else {
			mode = nil
		}
		lookupFileInput1 = &shared.LookupFileInput1{
			FileInfo:    fileInfo,
			ID:          id,
			Description: description,
			Tags:        tags,
			Size:        size,
			Mode:        mode,
		}
	}
	if lookupFileInput1 != nil {
		out = shared.LookupFileInputUnion{
			LookupFileInput1: lookupFileInput1,
		}
	}
	var lookupFileInput2 *shared.LookupFileInput2
	if r.LookupFileInput2 != nil {
		content := new(string)
		if !r.LookupFileInput2.Content.IsUnknown() && !r.LookupFileInput2.Content.IsNull() {
			*content = r.LookupFileInput2.Content.ValueString()
		} else {
			content = nil
		}
		var id1 string
		id1 = r.LookupFileInput2.ID.ValueString()

		description1 := new(string)
		if !r.LookupFileInput2.Description.IsUnknown() && !r.LookupFileInput2.Description.IsNull() {
			*description1 = r.LookupFileInput2.Description.ValueString()
		} else {
			description1 = nil
		}
		tags1 := new(string)
		if !r.LookupFileInput2.Tags.IsUnknown() && !r.LookupFileInput2.Tags.IsNull() {
			*tags1 = r.LookupFileInput2.Tags.ValueString()
		} else {
			tags1 = nil
		}
		size1 := new(float64)
		if !r.LookupFileInput2.Size.IsUnknown() && !r.LookupFileInput2.Size.IsNull() {
			*size1 = r.LookupFileInput2.Size.ValueFloat64()
		} else {
			size1 = nil
		}
		mode1 := new(shared.LookupFileMode2)
		if !r.LookupFileInput2.Mode.IsUnknown() && !r.LookupFileInput2.Mode.IsNull() {
			*mode1 = shared.LookupFileMode2(r.LookupFileInput2.Mode.ValueString())
		} else {
			mode1 = nil
		}
		lookupFileInput2 = &shared.LookupFileInput2{
			Content:     content,
			ID:          id1,
			Description: description1,
			Tags:        tags1,
			Size:        size1,
			Mode:        mode1,
		}
	}
	if lookupFileInput2 != nil {
		out = shared.LookupFileInputUnion{
			LookupFileInput2: lookupFileInput2,
		}
	}

	return &out, diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/speakeasy/terraform-provider-criblio/internal/provider/types"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk"
	speakeasy_boolvalidators "github.com/speakeasy/terraform-provider-criblio/internal/validators/boolvalidators"
	speakeasy_float64validators "github.com/speakeasy/terraform-provider-criblio/internal/validators/float64validators"
	speakeasy_listvalidators "github.com/speakeasy/terraform-provider-criblio/internal/validators/listvalidators"
	speakeasy_objectvalidators "github.com/speakeasy/terraform-provider-criblio/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/speakeasy/terraform-provider-criblio/internal/validators/stringvalidators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &AppscopeConfigResource{}
var _ resource.ResourceWithImportState = &AppscopeConfigResource{}

func NewAppscopeConfigResource() resource.Resource {
	return &AppscopeConfigResource{}
}

// AppscopeConfigResource defines the resource implementation.
type AppscopeConfigResource struct {
	// Provider configured SDK client.
	client *sdk.CriblIo
}

// AppscopeConfigResourceModel describes the resource data model.
type AppscopeConfigResourceModel struct {
	Config      tfTypes.AppscopeConfigWithCustom `tfsdk:"config"`
	Description types.String                     `tfsdk:"description"`
	GroupID     types.String                     `tfsdk:"group_id"`
	ID          types.String                     `tfsdk:"id"`
	Lib         types.String                     `tfsdk:"lib"`
	Tags        types.String                     `tfsdk:"tags"`
}

func (r *AppscopeConfigResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_appscope_config"
}

func (r *AppscopeConfigResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "AppscopeConfig Resource",
		Attributes: map[string]schema.Attribute{
			"config": schema.SingleNestedAttribute{
				Required: true,
				Attributes: map[string]schema.Attribute{
					"cribl": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"authtoken": schema.StringAttribute{
								Computed: true,
								Optional: true,
							},
							"enable": schema.BoolAttribute{
								Computed: true,
								Optional: true,
							},
							"transport": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"buffer": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `must be one of ["line", "full"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"line",
												"full",
											),
										},
									},
									"host": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"path": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"port": schema.Float64Attribute{
										Computed: true,
										Optional: true,
									},
									"tls": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"cacertpath": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"enable": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"validateserver": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
										},
									},
									"type": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
								},
							},
							"use_scope_source_transport": schema.BoolAttribute{
								Computed: true,
								Optional: true,
							},
						},
					},
					"custom": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"ancestor": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"arg": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"config": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"cribl": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"authtoken": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"enable": schema.BoolAttribute{
													Computed: true,
													Optional: true,
												},
												"transport": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"buffer": schema.StringAttribute{
															Computed:    true,
															Optional:    true,
															Description: `must be one of ["line", "full"]`,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"line",
																	"full",
																),
															},
														},
														"host": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
														"path": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
														"port": schema.Float64Attribute{
															Computed: true,
															Optional: true,
														},
														"tls": schema.SingleNestedAttribute{
															Computed: true,
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"cacertpath": schema.StringAttribute{
																	Computed: true,
																	Optional: true,
																},
																"enable": schema.BoolAttribute{
																	Computed: true,
																	Optional: true,
																},
																"validateserver": schema.BoolAttribute{
																	Computed: true,
																	Optional: true,
																},
															},
														},
														"type": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
													},
												},
												"use_scope_source_transport": schema.BoolAttribute{
													Computed: true,
													Optional: true,
												},
											},
										},
										"event": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"enable": schema.BoolAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null`,
													Validators: []validator.Bool{
														speakeasy_boolvalidators.NotNull(),
													},
												},
												"format": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"enhancefs": schema.BoolAttribute{
															Computed:    true,
															Optional:    true,
															Description: `Not Null`,
															Validators: []validator.Bool{
																speakeasy_boolvalidators.NotNull(),
															},
														},
														"maxeventpersec": schema.Float64Attribute{
															Computed:    true,
															Optional:    true,
															Description: `Not Null`,
															Validators: []validator.Float64{
																speakeasy_float64validators.NotNull(),
															},
														},
													},
													Description: `Not Null`,
													Validators: []validator.Object{
														speakeasy_objectvalidators.NotNull(),
													},
												},
												"transport": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"buffer": schema.StringAttribute{
															Computed:    true,
															Optional:    true,
															Description: `must be one of ["line", "full"]`,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"line",
																	"full",
																),
															},
														},
														"host": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
														"path": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
														"port": schema.Float64Attribute{
															Computed: true,
															Optional: true,
														},
														"tls": schema.SingleNestedAttribute{
															Computed: true,
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"cacertpath": schema.StringAttribute{
																	Computed: true,
																	Optional: true,
																},
																"enable": schema.BoolAttribute{
																	Computed: true,
																	Optional: true,
																},
																"validateserver": schema.BoolAttribute{
																	Computed: true,
																	Optional: true,
																},
															},
														},
														"type": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
													},
													Description: `Not Null`,
													Validators: []validator.Object{
														speakeasy_objectvalidators.NotNull(),
													},
												},
												"type": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null; must be "ndjson"`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.OneOf("ndjson"),
													},
												},
												"watch": schema.ListNestedAttribute{
													Computed: true,
													Optional: true,
													NestedObject: schema.NestedAttributeObject{
														Validators: []validator.Object{
															speakeasy_objectvalidators.NotNull(),
														},
														Attributes: map[string]schema.Attribute{
															"allowbinary": schema.BoolAttribute{
																Computed: true,
																Optional: true,
															},
															"enabled": schema.BoolAttribute{
																Computed: true,
																Optional: true,
															},
															"field": schema.StringAttribute{
																Computed: true,
																Optional: true,
															},
															"headers": schema.ListAttribute{
																Computed:    true,
																Optional:    true,
																ElementType: types.StringType,
															},
															"name": schema.StringAttribute{
																Computed: true,
																Optional: true,
															},
															"type": schema.StringAttribute{
																Computed:    true,
																Optional:    true,
																Description: `Not Null`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																},
															},
															"value": schema.StringAttribute{
																Computed: true,
																Optional: true,
															},
														},
													},
													Description: `Not Null`,
													Validators: []validator.List{
														speakeasy_listvalidators.NotNull(),
													},
												},
											},
										},
										"libscope": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"commanddir": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"configevent": schema.BoolAttribute{
													Computed: true,
													Optional: true,
												},
												"log": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"level": schema.StringAttribute{
															Computed:    true,
															Optional:    true,
															Description: `must be one of ["error", "debug", "info", "warning", "none"]`,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"error",
																	"debug",
																	"info",
																	"warning",
																	"none",
																),
															},
														},
														"transport": schema.SingleNestedAttribute{
															Computed: true,
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"buffer": schema.StringAttribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `must be one of ["line", "full"]`,
																	Validators: []validator.String{
																		stringvalidator.OneOf(
																			"line",
																			"full",
																		),
																	},
																},
																"host": schema.StringAttribute{
																	Computed: true,
																	Optional: true,
																},
																"path": schema.StringAttribute{
																	Computed: true,
																	Optional: true,
																},
																"port": schema.Float64Attribute{
																	Computed: true,
																	Optional: true,
																},
																"tls": schema.SingleNestedAttribute{
																	Computed: true,
																	Optional: true,
																	Attributes: map[string]schema.Attribute{
																		"cacertpath": schema.StringAttribute{
																			Computed: true,
																			Optional: true,
																		},
																		"enable": schema.BoolAttribute{
																			Computed: true,
																			Optional: true,
																		},
																		"validateserver": schema.BoolAttribute{
																			Computed: true,
																			Optional: true,
																		},
																	},
																},
																"type": schema.StringAttribute{
																	Computed: true,
																	Optional: true,
																},
															},
														},
													},
												},
												"summaryperiod": schema.Float64Attribute{
													Computed: true,
													Optional: true,
												},
											},
										},
										"metric": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"enable": schema.BoolAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null`,
													Validators: []validator.Bool{
														speakeasy_boolvalidators.NotNull(),
													},
												},
												"format": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"statsdmaxlen": schema.Float64Attribute{
															Computed: true,
															Optional: true,
														},
														"statsdprefix": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
														"type": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
														"verbosity": schema.Float64Attribute{
															Computed: true,
															Optional: true,
														},
													},
													Description: `Not Null`,
													Validators: []validator.Object{
														speakeasy_objectvalidators.NotNull(),
													},
												},
												"transport": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"buffer": schema.StringAttribute{
															Computed:    true,
															Optional:    true,
															Description: `must be one of ["line", "full"]`,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"line",
																	"full",
																),
															},
														},
														"host": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
														"path": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
														"port": schema.Float64Attribute{
															Computed: true,
															Optional: true,
														},
														"tls": schema.SingleNestedAttribute{
															Computed: true,
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"cacertpath": schema.StringAttribute{
																	Computed: true,
																	Optional: true,
																},
																"enable": schema.BoolAttribute{
																	Computed: true,
																	Optional: true,
																},
																"validateserver": schema.BoolAttribute{
																	Computed: true,
																	Optional: true,
																},
															},
														},
														"type": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
													},
													Description: `Not Null`,
													Validators: []validator.Object{
														speakeasy_objectvalidators.NotNull(),
													},
												},
												"watch": schema.ListNestedAttribute{
													Computed: true,
													Optional: true,
													NestedObject: schema.NestedAttributeObject{
														Validators: []validator.Object{
															speakeasy_objectvalidators.NotNull(),
														},
														Attributes: map[string]schema.Attribute{},
													},
													Description: `Not Null`,
													Validators: []validator.List{
														speakeasy_listvalidators.NotNull(),
													},
												},
											},
										},
										"payload": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"dir": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
													},
												},
												"enable": schema.BoolAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null`,
													Validators: []validator.Bool{
														speakeasy_boolvalidators.NotNull(),
													},
												},
											},
										},
										"protocol": schema.ListNestedAttribute{
											Computed: true,
											Optional: true,
											NestedObject: schema.NestedAttributeObject{
												Validators: []validator.Object{
													speakeasy_objectvalidators.NotNull(),
												},
												Attributes: map[string]schema.Attribute{
													"binary": schema.BoolAttribute{
														Computed:    true,
														Optional:    true,
														Description: `Not Null`,
														Validators: []validator.Bool{
															speakeasy_boolvalidators.NotNull(),
														},
													},
													"detect": schema.BoolAttribute{
														Computed:    true,
														Optional:    true,
														Description: `Not Null`,
														Validators: []validator.Bool{
															speakeasy_boolvalidators.NotNull(),
														},
													},
													"len": schema.Float64Attribute{
														Computed:    true,
														Optional:    true,
														Description: `Not Null`,
														Validators: []validator.Float64{
															speakeasy_float64validators.NotNull(),
														},
													},
													"name": schema.StringAttribute{
														Computed:    true,
														Optional:    true,
														Description: `Not Null`,
														Validators: []validator.String{
															speakeasy_stringvalidators.NotNull(),
														},
													},
													"payload": schema.BoolAttribute{
														Computed:    true,
														Optional:    true,
														Description: `Not Null`,
														Validators: []validator.Bool{
															speakeasy_boolvalidators.NotNull(),
														},
													},
													"regex": schema.StringAttribute{
														Computed:    true,
														Optional:    true,
														Description: `Not Null`,
														Validators: []validator.String{
															speakeasy_stringvalidators.NotNull(),
														},
													},
												},
											},
										},
										"tags": schema.ListNestedAttribute{
											Computed: true,
											Optional: true,
											NestedObject: schema.NestedAttributeObject{
												Validators: []validator.Object{
													speakeasy_objectvalidators.NotNull(),
												},
												Attributes: map[string]schema.Attribute{
													"key": schema.StringAttribute{
														Computed:    true,
														Optional:    true,
														Description: `Not Null`,
														Validators: []validator.String{
															speakeasy_stringvalidators.NotNull(),
														},
													},
													"value": schema.StringAttribute{
														Computed:    true,
														Optional:    true,
														Description: `Not Null`,
														Validators: []validator.String{
															speakeasy_stringvalidators.NotNull(),
														},
													},
												},
											},
										},
									},
									Description: `Not Null`,
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
								},
								"env": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hostname": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"procname": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"username": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
						},
					},
					"event": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"enable": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null`,
								Validators: []validator.Bool{
									speakeasy_boolvalidators.NotNull(),
								},
							},
							"format": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"enhancefs": schema.BoolAttribute{
										Computed:    true,
										Optional:    true,
										Description: `Not Null`,
										Validators: []validator.Bool{
											speakeasy_boolvalidators.NotNull(),
										},
									},
									"maxeventpersec": schema.Float64Attribute{
										Computed:    true,
										Optional:    true,
										Description: `Not Null`,
										Validators: []validator.Float64{
											speakeasy_float64validators.NotNull(),
										},
									},
								},
								Description: `Not Null`,
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
							},
							"transport": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"buffer": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `must be one of ["line", "full"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"line",
												"full",
											),
										},
									},
									"host": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"path": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"port": schema.Float64Attribute{
										Computed: true,
										Optional: true,
									},
									"tls": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"cacertpath": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"enable": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"validateserver": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
										},
									},
									"type": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
								},
								Description: `Not Null`,
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
							},
							"type": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null; must be "ndjson"`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
									stringvalidator.OneOf("ndjson"),
								},
							},
							"watch": schema.ListNestedAttribute{
								Computed: true,
								Optional: true,
								NestedObject: schema.NestedAttributeObject{
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
									Attributes: map[string]schema.Attribute{
										"allowbinary": schema.BoolAttribute{
											Computed: true,
											Optional: true,
										},
										"enabled": schema.BoolAttribute{
											Computed: true,
											Optional: true,
										},
										"field": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"headers": schema.ListAttribute{
											Computed:    true,
											Optional:    true,
											ElementType: types.StringType,
										},
										"name": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"type": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
											},
										},
										"value": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
								},
								Description: `Not Null`,
								Validators: []validator.List{
									speakeasy_listvalidators.NotNull(),
								},
							},
						},
					},
					"libscope": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"commanddir": schema.StringAttribute{
								Computed: true,
								Optional: true,
							},
							"configevent": schema.BoolAttribute{
								Computed: true,
								Optional: true,
							},
							"log": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"level": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `must be one of ["error", "debug", "info", "warning", "none"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"error",
												"debug",
												"info",
												"warning",
												"none",
											),
										},
									},
									"transport": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"buffer": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `must be one of ["line", "full"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"line",
														"full",
													),
												},
											},
											"host": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"path": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"port": schema.Float64Attribute{
												Computed: true,
												Optional: true,
											},
											"tls": schema.SingleNestedAttribute{
												Computed: true,
												Optional: true,
												Attributes: map[string]schema.Attribute{
													"cacertpath": schema.StringAttribute{
														Computed: true,
														Optional: true,
													},
													"enable": schema.BoolAttribute{
														Computed: true,
														Optional: true,
													},
													"validateserver": schema.BoolAttribute{
														Computed: true,
														Optional: true,
													},
												},
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
									},
								},
							},
							"summaryperiod": schema.Float64Attribute{
								Computed: true,
								Optional: true,
							},
						},
					},
					"metric": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"enable": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null`,
								Validators: []validator.Bool{
									speakeasy_boolvalidators.NotNull(),
								},
							},
							"format": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"statsdmaxlen": schema.Float64Attribute{
										Computed: true,
										Optional: true,
									},
									"statsdprefix": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"type": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"verbosity": schema.Float64Attribute{
										Computed: true,
										Optional: true,
									},
								},
								Description: `Not Null`,
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
							},
							"transport": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"buffer": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `must be one of ["line", "full"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"line",
												"full",
											),
										},
									},
									"host": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"path": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"port": schema.Float64Attribute{
										Computed: true,
										Optional: true,
									},
									"tls": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"cacertpath": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"enable": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"validateserver": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
										},
									},
									"type": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
								},
								Description: `Not Null`,
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
							},
							"watch": schema.ListNestedAttribute{
								Computed: true,
								Optional: true,
								NestedObject: schema.NestedAttributeObject{
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
									Attributes: map[string]schema.Attribute{},
								},
								Description: `Not Null`,
								Validators: []validator.List{
									speakeasy_listvalidators.NotNull(),
								},
							},
						},
					},
					"payload": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"dir": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
								},
							},
							"enable": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null`,
								Validators: []validator.Bool{
									speakeasy_boolvalidators.NotNull(),
								},
							},
						},
					},
					"protocol": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"binary": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.Bool{
										speakeasy_boolvalidators.NotNull(),
									},
								},
								"detect": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.Bool{
										speakeasy_boolvalidators.NotNull(),
									},
								},
								"len": schema.Float64Attribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.Float64{
										speakeasy_float64validators.NotNull(),
									},
								},
								"name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"payload": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.Bool{
										speakeasy_boolvalidators.NotNull(),
									},
								},
								"regex": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
							},
						},
					},
					"tags": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"key": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"value": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
							},
						},
					},
				},
			},
			"description": schema.StringAttribute{
				Required: true,
			},
			"group_id": schema.StringAttribute{
				Required:    true,
				Description: `The consumer group to which this instance belongs. Defaults to 'Cribl'.`,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `Unique ID to PATCH`,
			},
			"lib": schema.StringAttribute{
				Required:    true,
				Description: `must be one of ["cribl", "cribl-custom", "custom"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"cribl",
						"cribl-custom",
						"custom",
					),
				},
			},
			"tags": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
		},
	}
}

func (r *AppscopeConfigResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.CriblIo)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.CriblIo, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AppscopeConfigResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *AppscopeConfigResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsCreateAppscopeLibEntryRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.AppscopeConfigs.CreateAppscopeLibEntry(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Items != nil && len(res.Object.Items) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAppscopeLibEntry(ctx, &res.Object.Items[0])...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AppscopeConfigResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *AppscopeConfigResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsListAppscopeLibEntryRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.AppscopeConfigs.ListAppscopeLibEntry(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Items != nil && len(res.Object.Items) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAppscopeLibEntry(ctx, &res.Object.Items[0])...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AppscopeConfigResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *AppscopeConfigResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateAppscopeLibEntryByIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.AppscopeConfigs.UpdateAppscopeLibEntryByID(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Items != nil && len(res.Object.Items) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAppscopeLibEntry(ctx, &res.Object.Items[0])...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AppscopeConfigResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *AppscopeConfigResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteAppscopeLibEntryByIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.AppscopeConfigs.DeleteAppscopeLibEntryByID(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *AppscopeConfigResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("group_id"), req.ID)...)
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
)

func (r *LookupFileResourceModel) RefreshFromOperationsCreateLookupFileResponseBody(ctx context.Context, resp *operations.CreateLookupFileResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
	}

	return diags
}

func (r *LookupFileResourceModel) RefreshFromOperationsListLookupFileResponseBody(ctx context.Context, resp *operations.ListLookupFileResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
	}

	return diags
}

func (r *LookupFileResourceModel) RefreshFromOperationsUpdateLookupFileByIDResponseBody(ctx context.Context, resp *operations.UpdateLookupFileByIDResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
	}

	return diags
}

func (r *LookupFileResourceModel) ToOperationsCreateLookupFileRequest(ctx context.Context) (*operations.CreateLookupFileRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	lookupFile, lookupFileDiags := r.ToSharedLookupFile(ctx)
	diags.Append(lookupFileDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateLookupFileRequest{
		GroupID:    groupID,
		LookupFile: *lookupFile,
	}

	return &out, diags
}

func (r *LookupFileResourceModel) ToOperationsDeleteLookupFileByIDRequest(ctx context.Context) (*operations.DeleteLookupFileByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.DeleteLookupFileByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *LookupFileResourceModel) ToOperationsListLookupFileRequest(ctx context.Context) (*operations.ListLookupFileRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.ListLookupFileRequest{
		GroupID: groupID,
	}

	return &out, diags
}

func (r *LookupFileResourceModel) ToOperationsUpdateLookupFileByIDRequest(ctx context.Context) (*operations.UpdateLookupFileByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	lookupFile, lookupFileDiags := r.ToSharedLookupFile(ctx)
	diags.Append(lookupFileDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateLookupFileByIDRequest{
		ID:         id,
		GroupID:    groupID,
		LookupFile: *lookupFile,
	}

	return &out, diags
}

func (r *LookupFileResourceModel) ToSharedLookupFile(ctx context.Context) (*shared.LookupFile, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	tags := new(string)
	if !r.Tags.IsUnknown() && !r.Tags.IsNull() {
		*tags = r.Tags.ValueString()
	} else {
		tags = nil
	}
	content := new(string)
	if !r.Content.IsUnknown() && !r.Content.IsNull() {
		*content = r.Content.ValueString()
	} else {
		content = nil
	}
	mode := new(shared.LookupFileMode)
	if !r.Mode.IsUnknown() && !r.Mode.IsNull() {
		*mode = shared.LookupFileMode(r.Mode.ValueString())
	} else {
		mode = nil
	}
	out := shared.LookupFile{
		ID:          id,
		Description: description,
		Tags:        tags,
		Content:     content,
		Mode:        mode,
	}

	return &out, diags
}

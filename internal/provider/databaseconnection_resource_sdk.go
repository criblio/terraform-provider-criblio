// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk/models/shared"
)

func (r *DatabaseConnectionResourceModel) RefreshFromSharedDatabaseConnectionConfig(ctx context.Context, resp *shared.DatabaseConnectionConfig) diag.Diagnostics {
	var diags diag.Diagnostics

	r.AuthType = types.StringValue(resp.AuthType)
	r.ConfigObj = types.StringPointerValue(resp.ConfigObj)
	r.ConnectionString = types.StringPointerValue(resp.ConnectionString)
	r.ConnectionTimeout = types.Float64PointerValue(resp.ConnectionTimeout)
	r.DatabaseType = types.StringValue(string(resp.DatabaseType))
	r.Description = types.StringValue(resp.Description)
	r.ID = types.StringValue(resp.ID)
	r.Password = types.StringPointerValue(resp.Password)
	r.RequestTimeout = types.Float64PointerValue(resp.RequestTimeout)
	r.Tags = types.StringPointerValue(resp.Tags)
	r.User = types.StringPointerValue(resp.User)

	return diags
}

func (r *DatabaseConnectionResourceModel) ToOperationsCreateDatabaseConnectionConfigRequest(ctx context.Context) (*operations.CreateDatabaseConnectionConfigRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	databaseConnectionConfig, databaseConnectionConfigDiags := r.ToSharedDatabaseConnectionConfig(ctx)
	diags.Append(databaseConnectionConfigDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateDatabaseConnectionConfigRequest{
		GroupID:                  groupID,
		DatabaseConnectionConfig: *databaseConnectionConfig,
	}

	return &out, diags
}

func (r *DatabaseConnectionResourceModel) ToOperationsDeleteDatabaseConnectionConfigByIDRequest(ctx context.Context) (*operations.DeleteDatabaseConnectionConfigByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.DeleteDatabaseConnectionConfigByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *DatabaseConnectionResourceModel) ToOperationsGetDatabaseConnectionConfigRequest(ctx context.Context) (*operations.GetDatabaseConnectionConfigRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	databaseType := new(string)
	if !r.DatabaseType.IsUnknown() && !r.DatabaseType.IsNull() {
		*databaseType = r.DatabaseType.ValueString()
	} else {
		databaseType = nil
	}
	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.GetDatabaseConnectionConfigRequest{
		DatabaseType: databaseType,
		GroupID:      groupID,
	}

	return &out, diags
}

func (r *DatabaseConnectionResourceModel) ToOperationsUpdateDatabaseConnectionConfigByIDRequest(ctx context.Context) (*operations.UpdateDatabaseConnectionConfigByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	databaseConnectionConfig, databaseConnectionConfigDiags := r.ToSharedDatabaseConnectionConfig(ctx)
	diags.Append(databaseConnectionConfigDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateDatabaseConnectionConfigByIDRequest{
		ID:                       id,
		GroupID:                  groupID,
		DatabaseConnectionConfig: *databaseConnectionConfig,
	}

	return &out, diags
}

func (r *DatabaseConnectionResourceModel) ToSharedDatabaseConnectionConfig(ctx context.Context) (*shared.DatabaseConnectionConfig, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authType string
	authType = r.AuthType.ValueString()

	configObj := new(string)
	if !r.ConfigObj.IsUnknown() && !r.ConfigObj.IsNull() {
		*configObj = r.ConfigObj.ValueString()
	} else {
		configObj = nil
	}
	connectionString := new(string)
	if !r.ConnectionString.IsUnknown() && !r.ConnectionString.IsNull() {
		*connectionString = r.ConnectionString.ValueString()
	} else {
		connectionString = nil
	}
	connectionTimeout := new(float64)
	if !r.ConnectionTimeout.IsUnknown() && !r.ConnectionTimeout.IsNull() {
		*connectionTimeout = r.ConnectionTimeout.ValueFloat64()
	} else {
		connectionTimeout = nil
	}
	databaseType := shared.DatabaseConnectionType(r.DatabaseType.ValueString())
	var description string
	description = r.Description.ValueString()

	var id string
	id = r.ID.ValueString()

	password := new(string)
	if !r.Password.IsUnknown() && !r.Password.IsNull() {
		*password = r.Password.ValueString()
	} else {
		password = nil
	}
	requestTimeout := new(float64)
	if !r.RequestTimeout.IsUnknown() && !r.RequestTimeout.IsNull() {
		*requestTimeout = r.RequestTimeout.ValueFloat64()
	} else {
		requestTimeout = nil
	}
	tags := new(string)
	if !r.Tags.IsUnknown() && !r.Tags.IsNull() {
		*tags = r.Tags.ValueString()
	} else {
		tags = nil
	}
	user := new(string)
	if !r.User.IsUnknown() && !r.User.IsNull() {
		*user = r.User.ValueString()
	} else {
		user = nil
	}
	out := shared.DatabaseConnectionConfig{
		AuthType:          authType,
		ConfigObj:         configObj,
		ConnectionString:  connectionString,
		ConnectionTimeout: connectionTimeout,
		DatabaseType:      databaseType,
		Description:       description,
		ID:                id,
		Password:          password,
		RequestTimeout:    requestTimeout,
		Tags:              tags,
		User:              user,
	}

	return &out, diags
}

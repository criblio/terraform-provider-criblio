// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/criblio/terraform-provider-criblio/internal/provider/typeconvert"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *WorkspaceResourceModel) RefreshFromSharedWorkspaceSchema(ctx context.Context, resp *shared.WorkspaceSchema) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Alias = types.StringPointerValue(resp.Alias)
		r.Description = types.StringPointerValue(resp.Description)
		r.LastUpdated = types.StringValue(typeconvert.TimeToString(resp.LastUpdated))
		r.LeaderFQDN = types.StringValue(resp.LeaderFQDN)
		r.Region = types.StringValue(string(resp.Region))
		r.State = types.StringValue(string(resp.State))
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}

func (r *WorkspaceResourceModel) ToOperationsV1WorkspacesCreateWorkspaceRequest(ctx context.Context) (*operations.V1WorkspacesCreateWorkspaceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var organizationID string
	organizationID = r.OrganizationID.ValueString()

	workspaceCreateRequestDTO, workspaceCreateRequestDTODiags := r.ToSharedWorkspaceCreateRequestDTO(ctx)
	diags.Append(workspaceCreateRequestDTODiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.V1WorkspacesCreateWorkspaceRequest{
		OrganizationID:            organizationID,
		WorkspaceCreateRequestDTO: *workspaceCreateRequestDTO,
	}

	return &out, diags
}

func (r *WorkspaceResourceModel) ToOperationsV1WorkspacesDeleteWorkspaceRequest(ctx context.Context) (*operations.V1WorkspacesDeleteWorkspaceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var organizationID string
	organizationID = r.OrganizationID.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	out := operations.V1WorkspacesDeleteWorkspaceRequest{
		OrganizationID: organizationID,
		WorkspaceID:    workspaceID,
	}

	return &out, diags
}

func (r *WorkspaceResourceModel) ToOperationsV1WorkspacesGetWorkspaceRequest(ctx context.Context) (*operations.V1WorkspacesGetWorkspaceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var organizationID string
	organizationID = r.OrganizationID.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	out := operations.V1WorkspacesGetWorkspaceRequest{
		OrganizationID: organizationID,
		WorkspaceID:    workspaceID,
	}

	return &out, diags
}

func (r *WorkspaceResourceModel) ToOperationsV1WorkspacesUpdateWorkspaceRequest(ctx context.Context) (*operations.V1WorkspacesUpdateWorkspaceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var organizationID string
	organizationID = r.OrganizationID.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	workspacePatchRequestDTO, workspacePatchRequestDTODiags := r.ToSharedWorkspacePatchRequestDTO(ctx)
	diags.Append(workspacePatchRequestDTODiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.V1WorkspacesUpdateWorkspaceRequest{
		OrganizationID:           organizationID,
		WorkspaceID:              workspaceID,
		WorkspacePatchRequestDTO: *workspacePatchRequestDTO,
	}

	return &out, diags
}

func (r *WorkspaceResourceModel) ToSharedWorkspaceCreateRequestDTO(ctx context.Context) (*shared.WorkspaceCreateRequestDTO, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	alias := new(string)
	if !r.Alias.IsUnknown() && !r.Alias.IsNull() {
		*alias = r.Alias.ValueString()
	} else {
		alias = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	tags := make([]string, 0, len(r.Tags))
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	out := shared.WorkspaceCreateRequestDTO{
		WorkspaceID: workspaceID,
		Alias:       alias,
		Description: description,
		Tags:        tags,
	}

	return &out, diags
}

func (r *WorkspaceResourceModel) ToSharedWorkspacePatchRequestDTO(ctx context.Context) (*shared.WorkspacePatchRequestDTO, diag.Diagnostics) {
	var diags diag.Diagnostics

	alias := new(string)
	if !r.Alias.IsUnknown() && !r.Alias.IsNull() {
		*alias = r.Alias.ValueString()
	} else {
		alias = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	tags := make([]string, 0, len(r.Tags))
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	out := shared.WorkspacePatchRequestDTO{
		Alias:       alias,
		Description: description,
		Tags:        tags,
	}

	return &out, diags
}

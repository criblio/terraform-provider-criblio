// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *ParquetSchemaResourceModel) RefreshFromOperationsGetSchemaByIDResponseBody(ctx context.Context, resp *operations.GetSchemaByIDResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.SchemaLibEntry{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.SchemaLibEntry

			items.ID = types.StringValue(itemsItem.ID)
			items.Description = types.StringPointerValue(itemsItem.Description)
			items.Schema = types.StringValue(itemsItem.Schema)

			r.Items = append(r.Items, items)
		}
	}

	return diags
}

func (r *ParquetSchemaResourceModel) RefreshFromSharedSchemaLibEntry(ctx context.Context, resp *shared.SchemaLibEntry) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Description = types.StringPointerValue(resp.Description)
	r.ID = types.StringValue(resp.ID)
	r.Schema = types.StringValue(resp.Schema)

	return diags
}

func (r *ParquetSchemaResourceModel) ToOperationsCreateSchemaRequest(ctx context.Context) (*operations.CreateSchemaRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	schemaLibEntry, schemaLibEntryDiags := r.ToSharedSchemaLibEntry(ctx)
	diags.Append(schemaLibEntryDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateSchemaRequest{
		GroupID:        groupID,
		SchemaLibEntry: *schemaLibEntry,
	}

	return &out, diags
}

func (r *ParquetSchemaResourceModel) ToOperationsDeleteSchemaByIDRequest(ctx context.Context) (*operations.DeleteSchemaByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.DeleteSchemaByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *ParquetSchemaResourceModel) ToOperationsGetSchemaByIDRequest(ctx context.Context) (*operations.GetSchemaByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.GetSchemaByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *ParquetSchemaResourceModel) ToOperationsUpdateSchemaByIDRequest(ctx context.Context) (*operations.UpdateSchemaByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	schemaLibEntry, schemaLibEntryDiags := r.ToSharedSchemaLibEntry(ctx)
	diags.Append(schemaLibEntryDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateSchemaByIDRequest{
		ID:             id,
		GroupID:        groupID,
		SchemaLibEntry: *schemaLibEntry,
	}

	return &out, diags
}

func (r *ParquetSchemaResourceModel) ToSharedSchemaLibEntry(ctx context.Context) (*shared.SchemaLibEntry, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var schema string
	schema = r.Schema.ValueString()

	out := shared.SchemaLibEntry{
		ID:          id,
		Description: description,
		Schema:      schema,
	}

	return &out, diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk/models/shared"
)

func (r *ParquetSchemaResourceModel) ToSharedSchemaLibEntry(ctx context.Context) (*shared.SchemaLibEntry, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var schema string
	schema = r.Schema.ValueString()

	var additionalProperties interface{}
	if !r.AdditionalProperties.IsUnknown() && !r.AdditionalProperties.IsNull() {
		_ = json.Unmarshal([]byte(r.AdditionalProperties.ValueString()), &additionalProperties)
	}
	out := shared.SchemaLibEntry{
		ID:                   id,
		Description:          description,
		Schema:               schema,
		AdditionalProperties: additionalProperties,
	}

	return &out, diags
}

func (r *ParquetSchemaResourceModel) ToOperationsCreateSchemaRequest(ctx context.Context) (*operations.CreateSchemaRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	schemaLibEntry, schemaLibEntryDiags := r.ToSharedSchemaLibEntry(ctx)
	diags.Append(schemaLibEntryDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateSchemaRequest{
		GroupID:        groupID,
		SchemaLibEntry: *schemaLibEntry,
	}

	return &out, diags
}

func (r *ParquetSchemaResourceModel) ToOperationsUpdateSchemaByIDRequest(ctx context.Context) (*operations.UpdateSchemaByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	schemaLibEntry, schemaLibEntryDiags := r.ToSharedSchemaLibEntry(ctx)
	diags.Append(schemaLibEntryDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateSchemaByIDRequest{
		ID:             id,
		GroupID:        groupID,
		SchemaLibEntry: *schemaLibEntry,
	}

	return &out, diags
}

func (r *ParquetSchemaResourceModel) ToOperationsListSchemaRequest(ctx context.Context) (*operations.ListSchemaRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.ListSchemaRequest{
		GroupID: groupID,
	}

	return &out, diags
}

func (r *ParquetSchemaResourceModel) ToOperationsDeleteSchemaByIDRequest(ctx context.Context) (*operations.DeleteSchemaByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.DeleteSchemaByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *ParquetSchemaResourceModel) RefreshFromSharedSchemaLibEntry(ctx context.Context, resp *shared.SchemaLibEntry) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp.AdditionalProperties == nil {
		r.AdditionalProperties = types.StringNull()
	} else {
		additionalPropertiesResult, _ := json.Marshal(resp.AdditionalProperties)
		r.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
	}
	r.Description = types.StringPointerValue(resp.Description)
	r.ID = types.StringValue(resp.ID)
	r.Schema = types.StringValue(resp.Schema)

	return diags
}

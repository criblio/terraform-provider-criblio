// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/speakeasy/terraform-provider-criblio/internal/provider/types"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk"
	"github.com/speakeasy/terraform-provider-criblio/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &PackDestinationResource{}
var _ resource.ResourceWithImportState = &PackDestinationResource{}

func NewPackDestinationResource() resource.Resource {
	return &PackDestinationResource{}
}

// PackDestinationResource defines the resource implementation.
type PackDestinationResource struct {
	// Provider configured SDK client.
	client *sdk.CriblIo
}

// PackDestinationResourceModel describes the resource data model.
type PackDestinationResourceModel struct {
	AllowCustomFunctions types.Bool                   `tfsdk:"allow_custom_functions"`
	Author               types.String                 `tfsdk:"author"`
	Description          types.String                 `tfsdk:"description"`
	DisplayName          types.String                 `tfsdk:"display_name"`
	Exports              []types.String               `tfsdk:"exports"`
	Force                types.Bool                   `tfsdk:"force"`
	GroupID              types.String                 `tfsdk:"group_id"`
	ID                   types.String                 `tfsdk:"id"`
	Inputs               types.Float64                `tfsdk:"inputs"`
	IsDisabled           types.Bool                   `tfsdk:"is_disabled"`
	Items                []tfTypes.Routes1            `tfsdk:"items"`
	MinLogStreamVersion  types.String                 `tfsdk:"min_log_stream_version"`
	Outputs              types.Float64                `tfsdk:"outputs"`
	Pack                 types.String                 `tfsdk:"pack"`
	Source               types.String                 `tfsdk:"source"`
	Spec                 types.String                 `tfsdk:"spec"`
	Tags                 *tfTypes.PackRequestBodyTags `tfsdk:"tags"`
	Version              types.String                 `tfsdk:"version"`
}

func (r *PackDestinationResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_pack_destination"
}

func (r *PackDestinationResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "PackDestination Resource",
		Attributes: map[string]schema.Attribute{
			"allow_custom_functions": schema.BoolAttribute{
				Optional: true,
			},
			"author": schema.StringAttribute{
				Optional: true,
			},
			"description": schema.StringAttribute{
				Optional: true,
			},
			"display_name": schema.StringAttribute{
				Optional: true,
			},
			"exports": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
			},
			"force": schema.BoolAttribute{
				Optional: true,
			},
			"group_id": schema.StringAttribute{
				Required:    true,
				Description: `group Id`,
			},
			"id": schema.StringAttribute{
				Required: true,
			},
			"inputs": schema.Float64Attribute{
				Optional: true,
			},
			"is_disabled": schema.BoolAttribute{
				Optional: true,
			},
			"items": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"comments": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"additional_properties": schema.StringAttribute{
										Computed:    true,
										Description: `Parsed as JSON.`,
										Validators: []validator.String{
											validators.IsValidJSON(),
										},
									},
									"comment": schema.StringAttribute{
										Computed:    true,
										Description: `Optional, short description of this Route's purpose`,
									},
								},
							},
							Description: `Comments`,
						},
						"conf": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"async_func_timeout": schema.Int64Attribute{
									Computed:    true,
									Description: `Time (in ms) to wait for an async function to complete processing of a data item`,
									Validators: []validator.Int64{
										int64validator.AtMost(10000),
									},
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"functions": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"conf": schema.SingleNestedAttribute{
												Computed: true,
											},
											"description": schema.StringAttribute{
												Computed:    true,
												Description: `Simple description of this step`,
											},
											"disabled": schema.BoolAttribute{
												Computed:    true,
												Description: `If true, data will not be pushed through this function`,
											},
											"filter": schema.StringAttribute{
												Computed:    true,
												Default:     stringdefault.StaticString(`true`),
												Description: `Filter that selects data to be fed through this Function. Default: "true"`,
											},
											"final": schema.BoolAttribute{
												Computed:    true,
												Description: `If enabled, stops the results of this Function from being passed to the downstream Functions`,
											},
											"group_id": schema.StringAttribute{
												Computed:    true,
												Description: `Group ID`,
											},
											"id": schema.StringAttribute{
												Computed:    true,
												Description: `Function ID`,
											},
										},
									},
									Description: `List of Functions to pass data through`,
								},
								"groups": schema.MapNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed:    true,
												Description: `Short description of this group`,
											},
											"disabled": schema.BoolAttribute{
												Computed:    true,
												Description: `Whether this group is disabled`,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
										},
									},
								},
								"output": schema.StringAttribute{
									Computed:    true,
									Default:     stringdefault.StaticString(`default`),
									Description: `The output destination for events processed by this Pipeline. Default: "default"`,
								},
								"streamtags": schema.ListAttribute{
									Computed:    true,
									Default:     listdefault.StaticValue(types.ListValueMust(types.StringType, []attr.Value{})),
									ElementType: types.StringType,
									Description: `Tags for filtering and grouping in @{product}`,
								},
							},
						},
						"groups": schema.MapNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"description": schema.StringAttribute{
										Computed:    true,
										Description: `Short description of this group`,
									},
									"disabled": schema.BoolAttribute{
										Computed:    true,
										Description: `Whether this group is disabled`,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"routes": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"additional_properties": schema.StringAttribute{
										Computed:    true,
										Description: `Parsed as JSON.`,
										Validators: []validator.String{
											validators.IsValidJSON(),
										},
									},
									"description": schema.StringAttribute{
										Computed: true,
									},
									"disabled": schema.BoolAttribute{
										Computed:    true,
										Description: `Disable this routing rule`,
									},
									"enable_output_expression": schema.BoolAttribute{
										Computed:    true,
										Default:     booldefault.StaticBool(false),
										Description: `Enable to use a JavaScript expression that evaluates to the name of the Description below. Default: false`,
									},
									"filter": schema.StringAttribute{
										Computed:    true,
										Default:     stringdefault.StaticString(`true`),
										Description: `JavaScript expression to select data to route. Default: "true"`,
									},
									"final": schema.BoolAttribute{
										Computed:    true,
										Default:     booldefault.StaticBool(true),
										Description: `Flag to control whether the event gets consumed by this Route (Final), or cloned into it. Default: true`,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"output": schema.StringAttribute{
										Computed:    true,
										Description: `Parsed as JSON.`,
										Validators: []validator.String{
											validators.IsValidJSON(),
										},
									},
									"output_expression": schema.StringAttribute{
										Computed:    true,
										Description: `Parsed as JSON.`,
										Validators: []validator.String{
											validators.IsValidJSON(),
										},
									},
									"pipeline": schema.StringAttribute{
										Computed:    true,
										Description: `Pipeline to send the matching data to`,
									},
								},
							},
							Description: `Pipeline routing rules`,
						},
					},
				},
			},
			"min_log_stream_version": schema.StringAttribute{
				Optional: true,
			},
			"outputs": schema.Float64Attribute{
				Optional: true,
			},
			"pack": schema.StringAttribute{
				Required:    true,
				Description: `pack inputs to POST`,
			},
			"source": schema.StringAttribute{
				Optional: true,
			},
			"spec": schema.StringAttribute{
				Optional: true,
			},
			"tags": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"data_type": schema.ListAttribute{
						Required:    true,
						ElementType: types.StringType,
					},
					"domain": schema.ListAttribute{
						Required:    true,
						ElementType: types.StringType,
					},
					"streamtags": schema.ListAttribute{
						Required:    true,
						ElementType: types.StringType,
					},
					"technology": schema.ListAttribute{
						Required:    true,
						ElementType: types.StringType,
					},
				},
			},
			"version": schema.StringAttribute{
				Optional: true,
			},
		},
	}
}

func (r *PackDestinationResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.CriblIo)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.CriblIo, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *PackDestinationResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *PackDestinationResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsCreateSystemOutputsByPackRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Pipelines.CreateSystemOutputsByPack(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromOperationsCreateSystemOutputsByPackResponseBody(ctx, res.Object)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsGetSystemOutputsByPackRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.Routes.GetSystemOutputsByPack(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromOperationsGetSystemOutputsByPackResponseBody(ctx, res1.Object)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PackDestinationResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *PackDestinationResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetSystemOutputsByPackRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Routes.GetSystemOutputsByPack(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromOperationsGetSystemOutputsByPackResponseBody(ctx, res.Object)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PackDestinationResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *PackDestinationResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateSystemOutputsByPackAndIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Pipelines.UpdateSystemOutputsByPackAndID(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromOperationsUpdateSystemOutputsByPackAndIDResponseBody(ctx, res.Object)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsGetSystemOutputsByPackRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.Routes.GetSystemOutputsByPack(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromOperationsGetSystemOutputsByPackResponseBody(ctx, res1.Object)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PackDestinationResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *PackDestinationResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteSystemOutputsByPackAndIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Pipelines.DeleteSystemOutputsByPackAndID(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *PackDestinationResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		GroupID string `json:"group_id"`
		ID      string `json:"id"`
		Pack    string `json:"pack"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The import ID is not valid. It is expected to be a JSON object string with the format: '{"group_id": "", "id": "", "pack": ""}': `+err.Error())
		return
	}

	if len(data.GroupID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field group_id is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("group_id"), data.GroupID)...)
	if len(data.ID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field id is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), data.ID)...)
	if len(data.Pack) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field pack is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("pack"), data.Pack)...)
}

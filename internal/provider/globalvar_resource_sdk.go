// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *GlobalVarResourceModel) RefreshFromSharedGlobalVar(ctx context.Context, resp *shared.GlobalVar) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Description = types.StringPointerValue(resp.Description)
	r.ID = types.StringValue(resp.ID)
	r.Lib = types.StringPointerValue(resp.Lib)
	r.Tags = types.StringPointerValue(resp.Tags)
	if resp.Type != nil {
		r.Type = types.StringValue(string(*resp.Type))
	} else {
		r.Type = types.StringNull()
	}
	r.Value = types.StringPointerValue(resp.Value)

	return diags
}

func (r *GlobalVarResourceModel) ToOperationsCreateGlobalVariableRequest(ctx context.Context) (*operations.CreateGlobalVariableRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	globalVar, globalVarDiags := r.ToSharedGlobalVar(ctx)
	diags.Append(globalVarDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateGlobalVariableRequest{
		GroupID:   groupID,
		GlobalVar: *globalVar,
	}

	return &out, diags
}

func (r *GlobalVarResourceModel) ToOperationsDeleteGlobalVariableByIDRequest(ctx context.Context) (*operations.DeleteGlobalVariableByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.DeleteGlobalVariableByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *GlobalVarResourceModel) ToOperationsGetGlobalVariableByIDRequest(ctx context.Context) (*operations.GetGlobalVariableByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.GetGlobalVariableByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *GlobalVarResourceModel) ToOperationsUpdateGlobalVariableByIDRequest(ctx context.Context) (*operations.UpdateGlobalVariableByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	globalVar, globalVarDiags := r.ToSharedGlobalVar(ctx)
	diags.Append(globalVarDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateGlobalVariableByIDRequest{
		ID:        id,
		GroupID:   groupID,
		GlobalVar: *globalVar,
	}

	return &out, diags
}

func (r *GlobalVarResourceModel) ToSharedGlobalVar(ctx context.Context) (*shared.GlobalVar, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	lib := new(string)
	if !r.Lib.IsUnknown() && !r.Lib.IsNull() {
		*lib = r.Lib.ValueString()
	} else {
		lib = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	typeVar := new(shared.GlobalVarType)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.GlobalVarType(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	value := new(string)
	if !r.Value.IsUnknown() && !r.Value.IsNull() {
		*value = r.Value.ValueString()
	} else {
		value = nil
	}
	tags := new(string)
	if !r.Tags.IsUnknown() && !r.Tags.IsNull() {
		*tags = r.Tags.ValueString()
	} else {
		tags = nil
	}
	out := shared.GlobalVar{
		ID:          id,
		Lib:         lib,
		Description: description,
		Type:        typeVar,
		Value:       value,
		Tags:        tags,
	}

	return &out, diags
}

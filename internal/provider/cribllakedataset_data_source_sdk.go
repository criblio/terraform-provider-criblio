// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/criblio/terraform-provider-criblio/internal/provider/typeconvert"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *CriblLakeDatasetDataSourceModel) RefreshFromSharedCriblLakeDataset(ctx context.Context, resp *shared.CriblLakeDataset) diag.Diagnostics {
	var diags diag.Diagnostics

	r.AcceleratedFields = make([]types.String, 0, len(resp.AcceleratedFields))
	for _, v := range resp.AcceleratedFields {
		r.AcceleratedFields = append(r.AcceleratedFields, types.StringValue(v))
	}
	r.BucketName = types.StringPointerValue(resp.BucketName)
	r.Description = types.StringPointerValue(resp.Description)
	if resp.Format != nil {
		r.Format = types.StringValue(string(*resp.Format))
	} else {
		r.Format = types.StringNull()
	}
	r.ID = types.StringValue(resp.ID)
	r.RetentionPeriodInDays = types.Float64PointerValue(resp.RetentionPeriodInDays)
	if resp.SearchConfig == nil {
		r.SearchConfig = nil
	} else {
		r.SearchConfig = &tfTypes.LakeDatasetSearchConfig{}
		r.SearchConfig.Datatypes = make([]types.String, 0, len(resp.SearchConfig.Datatypes))
		for _, v := range resp.SearchConfig.Datatypes {
			r.SearchConfig.Datatypes = append(r.SearchConfig.Datatypes, types.StringValue(v))
		}
		if resp.SearchConfig.Metadata == nil {
			r.SearchConfig.Metadata = nil
		} else {
			r.SearchConfig.Metadata = &tfTypes.DatasetMetadata{}
			r.SearchConfig.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.SearchConfig.Metadata.Created))
			r.SearchConfig.Metadata.EnableAcceleration = types.BoolPointerValue(resp.SearchConfig.Metadata.EnableAcceleration)
			r.SearchConfig.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.SearchConfig.Metadata.Modified))
			r.SearchConfig.Metadata.Tags = make([]types.String, 0, len(resp.SearchConfig.Metadata.Tags))
			for _, v := range resp.SearchConfig.Metadata.Tags {
				r.SearchConfig.Metadata.Tags = append(r.SearchConfig.Metadata.Tags, types.StringValue(v))
			}
		}
	}

	return diags
}

func (r *CriblLakeDatasetDataSourceModel) ToOperationsGetCriblLakeDatasetByLakeIDAndIDRequest(ctx context.Context) (*operations.GetCriblLakeDatasetByLakeIDAndIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var lakeID string
	lakeID = r.LakeID.ValueString()

	var id string
	id = r.ID.ValueString()

	out := operations.GetCriblLakeDatasetByLakeIDAndIDRequest{
		LakeID: lakeID,
		ID:     id,
	}

	return &out, diags
}

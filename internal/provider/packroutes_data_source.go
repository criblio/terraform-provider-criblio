// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &PackRoutesDataSource{}
var _ datasource.DataSourceWithConfigure = &PackRoutesDataSource{}

func NewPackRoutesDataSource() datasource.DataSource {
	return &PackRoutesDataSource{}
}

// PackRoutesDataSource is the data source implementation.
type PackRoutesDataSource struct {
	// Provider configured SDK client.
	client *sdk.CriblIo
}

// PackRoutesDataSourceModel describes the data model.
type PackRoutesDataSourceModel struct {
	GroupID types.String     `tfsdk:"group_id"`
	Items   []tfTypes.Routes `tfsdk:"items"`
	Pack    types.String     `tfsdk:"pack"`
}

// Metadata returns the data source type name.
func (r *PackRoutesDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_pack_routes"
}

// Schema defines the schema for the data source.
func (r *PackRoutesDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "PackRoutes DataSource",

		Attributes: map[string]schema.Attribute{
			"group_id": schema.StringAttribute{
				Required:    true,
				Description: `group Id`,
			},
			"items": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"comments": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"additional_properties": schema.StringAttribute{
										CustomType:  jsontypes.NormalizedType{},
										Computed:    true,
										Description: `Parsed as JSON.`,
									},
									"comment": schema.StringAttribute{
										Computed:    true,
										Description: `Optional, short description of this Route's purpose`,
									},
								},
							},
							Description: `Comments`,
						},
						"groups": schema.MapNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"description": schema.StringAttribute{
										Computed:    true,
										Description: `Short description of this group`,
									},
									"disabled": schema.BoolAttribute{
										Computed:    true,
										Description: `Whether this group is disabled`,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `Routes ID`,
						},
						"routes": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"additional_properties": schema.StringAttribute{
										CustomType:  jsontypes.NormalizedType{},
										Computed:    true,
										Description: `Parsed as JSON.`,
									},
									"description": schema.StringAttribute{
										Computed: true,
									},
									"disabled": schema.BoolAttribute{
										Computed:    true,
										Description: `Disable this routing rule`,
									},
									"enable_output_expression": schema.BoolAttribute{
										Computed:    true,
										Description: `Enable to use a JavaScript expression that evaluates to the name of the Description below`,
									},
									"filter": schema.StringAttribute{
										Computed:    true,
										Description: `JavaScript expression to select data to route`,
									},
									"final": schema.BoolAttribute{
										Computed:    true,
										Description: `Flag to control whether the event gets consumed by this Route (Final), or cloned into it`,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"output": schema.StringAttribute{
										CustomType:  jsontypes.NormalizedType{},
										Computed:    true,
										Description: `Parsed as JSON.`,
									},
									"output_expression": schema.StringAttribute{
										CustomType:  jsontypes.NormalizedType{},
										Computed:    true,
										Description: `Parsed as JSON.`,
									},
									"pipeline": schema.StringAttribute{
										Computed:    true,
										Description: `Pipeline to send the matching data to`,
									},
								},
							},
							Description: `Pipeline routing rules`,
						},
					},
				},
			},
			"pack": schema.StringAttribute{
				Required:    true,
				Description: `pack ID to GET`,
			},
		},
	}
}

func (r *PackRoutesDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.CriblIo)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.CriblIo, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *PackRoutesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *PackRoutesDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetRoutesByPackRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Routes.GetRoutesByPack(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromOperationsGetRoutesByPackResponseBody(ctx, res.Object)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SearchDashboardResourceModel) RefreshFromSharedSearchDashboard(ctx context.Context, resp *shared.SearchDashboard) diag.Diagnostics {
	var diags diag.Diagnostics

	r.CacheTTLSeconds = types.Float64PointerValue(resp.CacheTTLSeconds)
	r.Category = types.StringPointerValue(resp.Category)
	r.Created = types.Float64Value(resp.Created)
	r.CreatedBy = types.StringValue(resp.CreatedBy)
	r.Description = types.StringPointerValue(resp.Description)
	r.DisplayCreatedBy = types.StringPointerValue(resp.DisplayCreatedBy)
	r.DisplayModifiedBy = types.StringPointerValue(resp.DisplayModifiedBy)
	r.Elements = []tfTypes.ElementUnion{}

	for _, elementsItem := range resp.Elements {
		var elements tfTypes.ElementUnion

		if elementsItem.Element != nil {
			elements.Element = &tfTypes.Element{}
			elements.Element.Description = types.StringPointerValue(elementsItem.Element.Description)
			elements.Element.Empty = types.BoolPointerValue(elementsItem.Element.Empty)
			elements.Element.HidePanel = types.BoolPointerValue(elementsItem.Element.HidePanel)
			elements.Element.HorizontalChart = types.BoolPointerValue(elementsItem.Element.HorizontalChart)
			elements.Element.ID = types.StringValue(elementsItem.Element.ID)
			elements.Element.Index = types.Float64PointerValue(elementsItem.Element.Index)
			elements.Element.InputID = types.StringPointerValue(elementsItem.Element.InputID)
			elements.Element.Layout.H = types.Float64Value(elementsItem.Element.Layout.H)
			elements.Element.Layout.W = types.Float64Value(elementsItem.Element.Layout.W)
			elements.Element.Layout.X = types.Float64Value(elementsItem.Element.Layout.X)
			elements.Element.Layout.Y = types.Float64Value(elementsItem.Element.Layout.Y)
			if elementsItem.Element.Search.SearchQuerySaved != nil {
				elements.Element.Search.SearchQuerySaved = &tfTypes.SearchQuerySaved{}
				elements.Element.Search.SearchQuerySaved.Query = types.StringPointerValue(elementsItem.Element.Search.SearchQuerySaved.Query)
				elements.Element.Search.SearchQuerySaved.QueryID = types.StringValue(elementsItem.Element.Search.SearchQuerySaved.QueryID)
				if elementsItem.Element.Search.SearchQuerySaved.RunMode != nil {
					elements.Element.Search.SearchQuerySaved.RunMode = types.StringValue(string(*elementsItem.Element.Search.SearchQuerySaved.RunMode))
				} else {
					elements.Element.Search.SearchQuerySaved.RunMode = types.StringNull()
				}
				elements.Element.Search.SearchQuerySaved.Type = types.StringValue(string(elementsItem.Element.Search.SearchQuerySaved.Type))
			}
			if elementsItem.Element.Search.SearchQueryInline != nil {
				elements.Element.Search.SearchQueryInline = &tfTypes.SearchQueryInline{}
				if elementsItem.Element.Search.SearchQueryInline.Earliest != nil {
					elements.Element.Search.SearchQueryInline.Earliest = &tfTypes.SearchQueryEarliest{}
					if elementsItem.Element.Search.SearchQueryInline.Earliest.Str != nil {
						elements.Element.Search.SearchQueryInline.Earliest.Str = types.StringPointerValue(elementsItem.Element.Search.SearchQueryInline.Earliest.Str)
					}
					if elementsItem.Element.Search.SearchQueryInline.Earliest.Number != nil {
						elements.Element.Search.SearchQueryInline.Earliest.Number = types.Float64PointerValue(elementsItem.Element.Search.SearchQueryInline.Earliest.Number)
					}
				}
				if elementsItem.Element.Search.SearchQueryInline.Latest != nil {
					elements.Element.Search.SearchQueryInline.Latest = &tfTypes.SearchQueryLatest{}
					if elementsItem.Element.Search.SearchQueryInline.Latest.Str != nil {
						elements.Element.Search.SearchQueryInline.Latest.Str = types.StringPointerValue(elementsItem.Element.Search.SearchQueryInline.Latest.Str)
					}
					if elementsItem.Element.Search.SearchQueryInline.Latest.Number != nil {
						elements.Element.Search.SearchQueryInline.Latest.Number = types.Float64PointerValue(elementsItem.Element.Search.SearchQueryInline.Latest.Number)
					}
				}
				elements.Element.Search.SearchQueryInline.ParentSearchID = types.StringPointerValue(elementsItem.Element.Search.SearchQueryInline.ParentSearchID)
				elements.Element.Search.SearchQueryInline.Query = types.StringPointerValue(elementsItem.Element.Search.SearchQueryInline.Query)
				elements.Element.Search.SearchQueryInline.SampleRate = types.Float64PointerValue(elementsItem.Element.Search.SearchQueryInline.SampleRate)
				elements.Element.Search.SearchQueryInline.Timezone = types.StringPointerValue(elementsItem.Element.Search.SearchQueryInline.Timezone)
				elements.Element.Search.SearchQueryInline.Type = types.StringValue(string(elementsItem.Element.Search.SearchQueryInline.Type))
			}
			if elementsItem.Element.Search.SearchQueryValues != nil {
				elements.Element.Search.SearchQueryValues = &tfTypes.SearchQueryValues{}
				elements.Element.Search.SearchQueryValues.Type = types.StringValue(string(elementsItem.Element.Search.SearchQueryValues.Type))
				elements.Element.Search.SearchQueryValues.Values = make([]types.String, 0, len(elementsItem.Element.Search.SearchQueryValues.Values))
				for _, v := range elementsItem.Element.Search.SearchQueryValues.Values {
					elements.Element.Search.SearchQueryValues.Values = append(elements.Element.Search.SearchQueryValues.Values, types.StringValue(v))
				}
			}
			elements.Element.Title = types.StringPointerValue(elementsItem.Element.Title)
			elements.Element.Type = types.StringValue(string(elementsItem.Element.Type))
			if len(elementsItem.Element.Value) > 0 {
				elements.Element.Value = make(map[string]types.String, len(elementsItem.Element.Value))
				for key, value := range elementsItem.Element.Value {
					result, _ := json.Marshal(value)
					elements.Element.Value[key] = types.StringValue(string(result))
				}
			}
			if elementsItem.Element.Variant != nil {
				elements.Element.Variant = types.StringValue(string(*elementsItem.Element.Variant))
			} else {
				elements.Element.Variant = types.StringNull()
			}
		}
		if elementsItem.ElementMarkdown != nil {
			elements.ElementMarkdown = &tfTypes.ElementMarkdown{}
			elements.ElementMarkdown.Description = types.StringPointerValue(elementsItem.ElementMarkdown.Description)
			elements.ElementMarkdown.Empty = types.BoolPointerValue(elementsItem.ElementMarkdown.Empty)
			elements.ElementMarkdown.HidePanel = types.BoolPointerValue(elementsItem.ElementMarkdown.HidePanel)
			elements.ElementMarkdown.ID = types.StringValue(elementsItem.ElementMarkdown.ID)
			elements.ElementMarkdown.Index = types.Float64PointerValue(elementsItem.ElementMarkdown.Index)
			elements.ElementMarkdown.Layout.H = types.Float64Value(elementsItem.ElementMarkdown.Layout.H)
			elements.ElementMarkdown.Layout.W = types.Float64Value(elementsItem.ElementMarkdown.Layout.W)
			elements.ElementMarkdown.Layout.X = types.Float64Value(elementsItem.ElementMarkdown.Layout.X)
			elements.ElementMarkdown.Layout.Y = types.Float64Value(elementsItem.ElementMarkdown.Layout.Y)
			elements.ElementMarkdown.Title = types.StringPointerValue(elementsItem.ElementMarkdown.Title)
			elements.ElementMarkdown.Type = types.StringValue(string(elementsItem.ElementMarkdown.Type))
			elements.ElementMarkdown.Value = types.StringPointerValue(elementsItem.ElementMarkdown.Value)
			elements.ElementMarkdown.Variant = types.StringValue(string(elementsItem.ElementMarkdown.Variant))
		}

		r.Elements = append(r.Elements, elements)
	}
	r.ID = types.StringValue(resp.ID)
	r.Modified = types.Float64Value(resp.Modified)
	r.ModifiedBy = types.StringPointerValue(resp.ModifiedBy)
	r.Name = types.StringValue(resp.Name)
	r.PackID = types.StringPointerValue(resp.PackID)
	r.RefreshRate = types.Float64PointerValue(resp.RefreshRate)
	r.ResolvedDatasetIds = make([]types.String, 0, len(resp.ResolvedDatasetIds))
	for _, v := range resp.ResolvedDatasetIds {
		r.ResolvedDatasetIds = append(r.ResolvedDatasetIds, types.StringValue(v))
	}
	if resp.Schedule == nil {
		r.Schedule = nil
	} else {
		r.Schedule = &tfTypes.SavedQuerySchedule{}
		r.Schedule.CronSchedule = types.StringValue(resp.Schedule.CronSchedule)
		r.Schedule.Enabled = types.BoolValue(resp.Schedule.Enabled)
		r.Schedule.KeepLastN = types.Float64Value(resp.Schedule.KeepLastN)
		r.Schedule.Notifications.Disabled = types.BoolValue(resp.Schedule.Notifications.Disabled)
		r.Schedule.Tz = types.StringValue(resp.Schedule.Tz)
	}

	return diags
}

func (r *SearchDashboardResourceModel) ToOperationsDeleteSearchDashboardByIDRequest(ctx context.Context) (*operations.DeleteSearchDashboardByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteSearchDashboardByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *SearchDashboardResourceModel) ToOperationsUpdateSearchDashboardByIDRequest(ctx context.Context) (*operations.UpdateSearchDashboardByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	searchDashboard, searchDashboardDiags := r.ToSharedSearchDashboard(ctx)
	diags.Append(searchDashboardDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateSearchDashboardByIDRequest{
		ID:              id,
		SearchDashboard: *searchDashboard,
	}

	return &out, diags
}

func (r *SearchDashboardResourceModel) ToSharedSearchDashboard(ctx context.Context) (*shared.SearchDashboard, diag.Diagnostics) {
	var diags diag.Diagnostics

	cacheTTLSeconds := new(float64)
	if !r.CacheTTLSeconds.IsUnknown() && !r.CacheTTLSeconds.IsNull() {
		*cacheTTLSeconds = r.CacheTTLSeconds.ValueFloat64()
	} else {
		cacheTTLSeconds = nil
	}
	category := new(string)
	if !r.Category.IsUnknown() && !r.Category.IsNull() {
		*category = r.Category.ValueString()
	} else {
		category = nil
	}
	var created float64
	created = r.Created.ValueFloat64()

	var createdBy string
	createdBy = r.CreatedBy.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayCreatedBy := new(string)
	if !r.DisplayCreatedBy.IsUnknown() && !r.DisplayCreatedBy.IsNull() {
		*displayCreatedBy = r.DisplayCreatedBy.ValueString()
	} else {
		displayCreatedBy = nil
	}
	displayModifiedBy := new(string)
	if !r.DisplayModifiedBy.IsUnknown() && !r.DisplayModifiedBy.IsNull() {
		*displayModifiedBy = r.DisplayModifiedBy.ValueString()
	} else {
		displayModifiedBy = nil
	}
	elements := make([]shared.ElementUnion, 0, len(r.Elements))
	for _, elementsItem := range r.Elements {
		if elementsItem.Element != nil {
			description1 := new(string)
			if !elementsItem.Element.Description.IsUnknown() && !elementsItem.Element.Description.IsNull() {
				*description1 = elementsItem.Element.Description.ValueString()
			} else {
				description1 = nil
			}
			empty := new(bool)
			if !elementsItem.Element.Empty.IsUnknown() && !elementsItem.Element.Empty.IsNull() {
				*empty = elementsItem.Element.Empty.ValueBool()
			} else {
				empty = nil
			}
			hidePanel := new(bool)
			if !elementsItem.Element.HidePanel.IsUnknown() && !elementsItem.Element.HidePanel.IsNull() {
				*hidePanel = elementsItem.Element.HidePanel.ValueBool()
			} else {
				hidePanel = nil
			}
			horizontalChart := new(bool)
			if !elementsItem.Element.HorizontalChart.IsUnknown() && !elementsItem.Element.HorizontalChart.IsNull() {
				*horizontalChart = elementsItem.Element.HorizontalChart.ValueBool()
			} else {
				horizontalChart = nil
			}
			var id string
			id = elementsItem.Element.ID.ValueString()

			index := new(float64)
			if !elementsItem.Element.Index.IsUnknown() && !elementsItem.Element.Index.IsNull() {
				*index = elementsItem.Element.Index.ValueFloat64()
			} else {
				index = nil
			}
			inputID := new(string)
			if !elementsItem.Element.InputID.IsUnknown() && !elementsItem.Element.InputID.IsNull() {
				*inputID = elementsItem.Element.InputID.ValueString()
			} else {
				inputID = nil
			}
			var h float64
			h = elementsItem.Element.Layout.H.ValueFloat64()

			var w float64
			w = elementsItem.Element.Layout.W.ValueFloat64()

			var x float64
			x = elementsItem.Element.Layout.X.ValueFloat64()

			var y float64
			y = elementsItem.Element.Layout.Y.ValueFloat64()

			layout := shared.DashboardLayout{
				H: h,
				W: w,
				X: x,
				Y: y,
			}
			var search shared.SearchQuery
			var searchQuerySaved *shared.SearchQuerySaved
			if elementsItem.Element.Search.SearchQuerySaved != nil {
				query := new(string)
				if !elementsItem.Element.Search.SearchQuerySaved.Query.IsUnknown() && !elementsItem.Element.Search.SearchQuerySaved.Query.IsNull() {
					*query = elementsItem.Element.Search.SearchQuerySaved.Query.ValueString()
				} else {
					query = nil
				}
				var queryID string
				queryID = elementsItem.Element.Search.SearchQuerySaved.QueryID.ValueString()

				runMode := new(shared.SavesSearchRunMode)
				if !elementsItem.Element.Search.SearchQuerySaved.RunMode.IsUnknown() && !elementsItem.Element.Search.SearchQuerySaved.RunMode.IsNull() {
					*runMode = shared.SavesSearchRunMode(elementsItem.Element.Search.SearchQuerySaved.RunMode.ValueString())
				} else {
					runMode = nil
				}
				typeVar := shared.TypeSaved(elementsItem.Element.Search.SearchQuerySaved.Type.ValueString())
				searchQuerySaved = &shared.SearchQuerySaved{
					Query:   query,
					QueryID: queryID,
					RunMode: runMode,
					Type:    typeVar,
				}
			}
			if searchQuerySaved != nil {
				search = shared.SearchQuery{
					SearchQuerySaved: searchQuerySaved,
				}
			}
			var searchQueryInline *shared.SearchQueryInline
			if elementsItem.Element.Search.SearchQueryInline != nil {
				var earliest *shared.SearchQueryEarliest
				if elementsItem.Element.Search.SearchQueryInline.Earliest != nil {
					str := new(string)
					if !elementsItem.Element.Search.SearchQueryInline.Earliest.Str.IsUnknown() && !elementsItem.Element.Search.SearchQueryInline.Earliest.Str.IsNull() {
						*str = elementsItem.Element.Search.SearchQueryInline.Earliest.Str.ValueString()
					} else {
						str = nil
					}
					if str != nil {
						earliest = &shared.SearchQueryEarliest{
							Str: str,
						}
					}
					number := new(float64)
					if !elementsItem.Element.Search.SearchQueryInline.Earliest.Number.IsUnknown() && !elementsItem.Element.Search.SearchQueryInline.Earliest.Number.IsNull() {
						*number = elementsItem.Element.Search.SearchQueryInline.Earliest.Number.ValueFloat64()
					} else {
						number = nil
					}
					if number != nil {
						earliest = &shared.SearchQueryEarliest{
							Number: number,
						}
					}
				}
				var latest *shared.SearchQueryLatest
				if elementsItem.Element.Search.SearchQueryInline.Latest != nil {
					str1 := new(string)
					if !elementsItem.Element.Search.SearchQueryInline.Latest.Str.IsUnknown() && !elementsItem.Element.Search.SearchQueryInline.Latest.Str.IsNull() {
						*str1 = elementsItem.Element.Search.SearchQueryInline.Latest.Str.ValueString()
					} else {
						str1 = nil
					}
					if str1 != nil {
						latest = &shared.SearchQueryLatest{
							Str: str1,
						}
					}
					number1 := new(float64)
					if !elementsItem.Element.Search.SearchQueryInline.Latest.Number.IsUnknown() && !elementsItem.Element.Search.SearchQueryInline.Latest.Number.IsNull() {
						*number1 = elementsItem.Element.Search.SearchQueryInline.Latest.Number.ValueFloat64()
					} else {
						number1 = nil
					}
					if number1 != nil {
						latest = &shared.SearchQueryLatest{
							Number: number1,
						}
					}
				}
				parentSearchID := new(string)
				if !elementsItem.Element.Search.SearchQueryInline.ParentSearchID.IsUnknown() && !elementsItem.Element.Search.SearchQueryInline.ParentSearchID.IsNull() {
					*parentSearchID = elementsItem.Element.Search.SearchQueryInline.ParentSearchID.ValueString()
				} else {
					parentSearchID = nil
				}
				query1 := new(string)
				if !elementsItem.Element.Search.SearchQueryInline.Query.IsUnknown() && !elementsItem.Element.Search.SearchQueryInline.Query.IsNull() {
					*query1 = elementsItem.Element.Search.SearchQueryInline.Query.ValueString()
				} else {
					query1 = nil
				}
				sampleRate := new(float64)
				if !elementsItem.Element.Search.SearchQueryInline.SampleRate.IsUnknown() && !elementsItem.Element.Search.SearchQueryInline.SampleRate.IsNull() {
					*sampleRate = elementsItem.Element.Search.SearchQueryInline.SampleRate.ValueFloat64()
				} else {
					sampleRate = nil
				}
				timezone := new(string)
				if !elementsItem.Element.Search.SearchQueryInline.Timezone.IsUnknown() && !elementsItem.Element.Search.SearchQueryInline.Timezone.IsNull() {
					*timezone = elementsItem.Element.Search.SearchQueryInline.Timezone.ValueString()
				} else {
					timezone = nil
				}
				typeVar1 := shared.TypeInline(elementsItem.Element.Search.SearchQueryInline.Type.ValueString())
				searchQueryInline = &shared.SearchQueryInline{
					Earliest:       earliest,
					Latest:         latest,
					ParentSearchID: parentSearchID,
					Query:          query1,
					SampleRate:     sampleRate,
					Timezone:       timezone,
					Type:           typeVar1,
				}
			}
			if searchQueryInline != nil {
				search = shared.SearchQuery{
					SearchQueryInline: searchQueryInline,
				}
			}
			var searchQueryValues *shared.SearchQueryValues
			if elementsItem.Element.Search.SearchQueryValues != nil {
				typeVar2 := shared.TypeValues(elementsItem.Element.Search.SearchQueryValues.Type.ValueString())
				values := make([]string, 0, len(elementsItem.Element.Search.SearchQueryValues.Values))
				for _, valuesItem := range elementsItem.Element.Search.SearchQueryValues.Values {
					values = append(values, valuesItem.ValueString())
				}
				searchQueryValues = &shared.SearchQueryValues{
					Type:   typeVar2,
					Values: values,
				}
			}
			if searchQueryValues != nil {
				search = shared.SearchQuery{
					SearchQueryValues: searchQueryValues,
				}
			}
			title := new(string)
			if !elementsItem.Element.Title.IsUnknown() && !elementsItem.Element.Title.IsNull() {
				*title = elementsItem.Element.Title.ValueString()
			} else {
				title = nil
			}
			typeVar3 := shared.DashboardElementType(elementsItem.Element.Type.ValueString())
			value := make(map[string]interface{})
			for valueKey, valueValue := range elementsItem.Element.Value {
				var valueInst interface{}
				_ = json.Unmarshal([]byte(valueValue.ValueString()), &valueInst)
				value[valueKey] = valueInst
			}
			variant := new(shared.DashboardElementVariant)
			if !elementsItem.Element.Variant.IsUnknown() && !elementsItem.Element.Variant.IsNull() {
				*variant = shared.DashboardElementVariant(elementsItem.Element.Variant.ValueString())
			} else {
				variant = nil
			}
			element := shared.Element{
				Description:     description1,
				Empty:           empty,
				HidePanel:       hidePanel,
				HorizontalChart: horizontalChart,
				ID:              id,
				Index:           index,
				InputID:         inputID,
				Layout:          layout,
				Search:          search,
				Title:           title,
				Type:            typeVar3,
				Value:           value,
				Variant:         variant,
			}
			elements = append(elements, shared.ElementUnion{
				Element: &element,
			})
		}
		if elementsItem.ElementMarkdown != nil {
			description2 := new(string)
			if !elementsItem.ElementMarkdown.Description.IsUnknown() && !elementsItem.ElementMarkdown.Description.IsNull() {
				*description2 = elementsItem.ElementMarkdown.Description.ValueString()
			} else {
				description2 = nil
			}
			empty1 := new(bool)
			if !elementsItem.ElementMarkdown.Empty.IsUnknown() && !elementsItem.ElementMarkdown.Empty.IsNull() {
				*empty1 = elementsItem.ElementMarkdown.Empty.ValueBool()
			} else {
				empty1 = nil
			}
			hidePanel1 := new(bool)
			if !elementsItem.ElementMarkdown.HidePanel.IsUnknown() && !elementsItem.ElementMarkdown.HidePanel.IsNull() {
				*hidePanel1 = elementsItem.ElementMarkdown.HidePanel.ValueBool()
			} else {
				hidePanel1 = nil
			}
			var id1 string
			id1 = elementsItem.ElementMarkdown.ID.ValueString()

			index1 := new(float64)
			if !elementsItem.ElementMarkdown.Index.IsUnknown() && !elementsItem.ElementMarkdown.Index.IsNull() {
				*index1 = elementsItem.ElementMarkdown.Index.ValueFloat64()
			} else {
				index1 = nil
			}
			var h1 float64
			h1 = elementsItem.ElementMarkdown.Layout.H.ValueFloat64()

			var w1 float64
			w1 = elementsItem.ElementMarkdown.Layout.W.ValueFloat64()

			var x1 float64
			x1 = elementsItem.ElementMarkdown.Layout.X.ValueFloat64()

			var y1 float64
			y1 = elementsItem.ElementMarkdown.Layout.Y.ValueFloat64()

			layout1 := shared.DashboardLayout{
				H: h1,
				W: w1,
				X: x1,
				Y: y1,
			}
			title1 := new(string)
			if !elementsItem.ElementMarkdown.Title.IsUnknown() && !elementsItem.ElementMarkdown.Title.IsNull() {
				*title1 = elementsItem.ElementMarkdown.Title.ValueString()
			} else {
				title1 = nil
			}
			typeVar4 := shared.SearchDashboardType(elementsItem.ElementMarkdown.Type.ValueString())
			value1 := new(string)
			if !elementsItem.ElementMarkdown.Value.IsUnknown() && !elementsItem.ElementMarkdown.Value.IsNull() {
				*value1 = elementsItem.ElementMarkdown.Value.ValueString()
			} else {
				value1 = nil
			}
			variant1 := shared.Variant(elementsItem.ElementMarkdown.Variant.ValueString())
			elementMarkdown := shared.ElementMarkdown{
				Description: description2,
				Empty:       empty1,
				HidePanel:   hidePanel1,
				ID:          id1,
				Index:       index1,
				Layout:      layout1,
				Title:       title1,
				Type:        typeVar4,
				Value:       value1,
				Variant:     variant1,
			}
			elements = append(elements, shared.ElementUnion{
				ElementMarkdown: &elementMarkdown,
			})
		}
	}
	var id2 string
	id2 = r.ID.ValueString()

	var modified float64
	modified = r.Modified.ValueFloat64()

	modifiedBy := new(string)
	if !r.ModifiedBy.IsUnknown() && !r.ModifiedBy.IsNull() {
		*modifiedBy = r.ModifiedBy.ValueString()
	} else {
		modifiedBy = nil
	}
	var name string
	name = r.Name.ValueString()

	packID := new(string)
	if !r.PackID.IsUnknown() && !r.PackID.IsNull() {
		*packID = r.PackID.ValueString()
	} else {
		packID = nil
	}
	refreshRate := new(float64)
	if !r.RefreshRate.IsUnknown() && !r.RefreshRate.IsNull() {
		*refreshRate = r.RefreshRate.ValueFloat64()
	} else {
		refreshRate = nil
	}
	resolvedDatasetIds := make([]string, 0, len(r.ResolvedDatasetIds))
	for _, resolvedDatasetIdsItem := range r.ResolvedDatasetIds {
		resolvedDatasetIds = append(resolvedDatasetIds, resolvedDatasetIdsItem.ValueString())
	}
	var schedule *shared.SavedQuerySchedule
	if r.Schedule != nil {
		var cronSchedule string
		cronSchedule = r.Schedule.CronSchedule.ValueString()

		var enabled bool
		enabled = r.Schedule.Enabled.ValueBool()

		var keepLastN float64
		keepLastN = r.Schedule.KeepLastN.ValueFloat64()

		var disabled bool
		disabled = r.Schedule.Notifications.Disabled.ValueBool()

		notifications := shared.Notifications{
			Disabled: disabled,
		}
		var tz string
		tz = r.Schedule.Tz.ValueString()

		schedule = &shared.SavedQuerySchedule{
			CronSchedule:  cronSchedule,
			Enabled:       enabled,
			KeepLastN:     keepLastN,
			Notifications: notifications,
			Tz:            tz,
		}
	}
	out := shared.SearchDashboard{
		CacheTTLSeconds:    cacheTTLSeconds,
		Category:           category,
		Created:            created,
		CreatedBy:          createdBy,
		Description:        description,
		DisplayCreatedBy:   displayCreatedBy,
		DisplayModifiedBy:  displayModifiedBy,
		Elements:           elements,
		ID:                 id2,
		Modified:           modified,
		ModifiedBy:         modifiedBy,
		Name:               name,
		PackID:             packID,
		RefreshRate:        refreshRate,
		ResolvedDatasetIds: resolvedDatasetIds,
		Schedule:           schedule,
	}

	return &out, diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *NotificationDataSourceModel) RefreshFromSharedNotification(ctx context.Context, resp *shared.Notification) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Condition = types.StringValue(resp.Condition)
	if resp.Conf == nil {
		r.Conf = nil
	} else {
		r.Conf = &tfTypes.ConditionSpecificConfigs{}
		r.Conf.Message = types.StringValue(resp.Conf.Message)
		r.Conf.SavedQueryID = types.StringValue(resp.Conf.SavedQueryID)
		r.Conf.TriggerComparator = types.StringPointerValue(resp.Conf.TriggerComparator)
		r.Conf.TriggerCount = types.Float64PointerValue(resp.Conf.TriggerCount)
		r.Conf.TriggerType = types.StringPointerValue(resp.Conf.TriggerType)
	}
	r.Disabled = types.BoolPointerValue(resp.Disabled)
	r.Group = types.StringPointerValue(resp.Group)
	r.ID = types.StringValue(resp.ID)
	r.TargetConfigs = []tfTypes.TargetConfig{}

	for _, targetConfigsItem := range resp.TargetConfigs {
		var targetConfigs tfTypes.TargetConfig

		if targetConfigsItem.Conf == nil {
			targetConfigs.Conf = nil
		} else {
			targetConfigs.Conf = &tfTypes.TargetConfigConf{}
			if targetConfigsItem.Conf.AttachmentType != nil {
				targetConfigs.Conf.AttachmentType = types.StringValue(string(*targetConfigsItem.Conf.AttachmentType))
			} else {
				targetConfigs.Conf.AttachmentType = types.StringNull()
			}
			targetConfigs.Conf.IncludeResults = types.BoolPointerValue(targetConfigsItem.Conf.IncludeResults)
		}
		targetConfigs.ID = types.StringValue(targetConfigsItem.ID)

		r.TargetConfigs = append(r.TargetConfigs, targetConfigs)
	}
	r.Targets = make([]types.String, 0, len(resp.Targets))
	for _, v := range resp.Targets {
		r.Targets = append(r.Targets, types.StringValue(v))
	}

	return diags
}

func (r *NotificationDataSourceModel) ToOperationsGetNotificationByIDRequest(ctx context.Context) (*operations.GetNotificationByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetNotificationByIDRequest{
		ID: id,
	}

	return &out, diags
}

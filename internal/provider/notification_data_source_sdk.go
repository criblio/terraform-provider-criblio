// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *NotificationDataSourceModel) RefreshFromOperationsGetNotificationByIDResponseBody(ctx context.Context, resp *operations.GetNotificationByIDResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.Notification{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.Notification

			items.Condition = types.StringValue(itemsItem.Condition)
			if itemsItem.Conf == nil {
				items.Conf = nil
			} else {
				items.Conf = &tfTypes.ConditionSpecificConfigs{}
				items.Conf.Message = types.StringValue(itemsItem.Conf.Message)
				items.Conf.SavedQueryID = types.StringValue(itemsItem.Conf.SavedQueryID)
				items.Conf.TriggerComparator = types.StringPointerValue(itemsItem.Conf.TriggerComparator)
				items.Conf.TriggerCount = types.Float64PointerValue(itemsItem.Conf.TriggerCount)
				items.Conf.TriggerType = types.StringPointerValue(itemsItem.Conf.TriggerType)
			}
			items.Disabled = types.BoolPointerValue(itemsItem.Disabled)
			items.Group = types.StringPointerValue(itemsItem.Group)
			items.ID = types.StringValue(itemsItem.ID)
			items.TargetConfigs = []tfTypes.TargetConfig{}

			for _, targetConfigsItem := range itemsItem.TargetConfigs {
				var targetConfigs tfTypes.TargetConfig

				if targetConfigsItem.Conf == nil {
					targetConfigs.Conf = nil
				} else {
					targetConfigs.Conf = &tfTypes.TargetConfigConf{}
					if targetConfigsItem.Conf.AttachmentType != nil {
						targetConfigs.Conf.AttachmentType = types.StringValue(string(*targetConfigsItem.Conf.AttachmentType))
					} else {
						targetConfigs.Conf.AttachmentType = types.StringNull()
					}
					targetConfigs.Conf.IncludeResults = types.BoolPointerValue(targetConfigsItem.Conf.IncludeResults)
				}
				targetConfigs.ID = types.StringValue(targetConfigsItem.ID)

				items.TargetConfigs = append(items.TargetConfigs, targetConfigs)
			}
			items.Targets = make([]types.String, 0, len(itemsItem.Targets))
			for _, v := range itemsItem.Targets {
				items.Targets = append(items.Targets, types.StringValue(v))
			}

			r.Items = append(r.Items, items)
		}
	}

	return diags
}

func (r *NotificationDataSourceModel) ToOperationsGetNotificationByIDRequest(ctx context.Context) (*operations.GetNotificationByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetNotificationByIDRequest{
		ID: id,
	}

	return &out, diags
}

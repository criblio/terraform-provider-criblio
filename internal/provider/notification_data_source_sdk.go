// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *NotificationDataSourceModel) RefreshFromSharedNotification(ctx context.Context, resp *shared.Notification) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Condition = types.StringValue(resp.Condition)
	if resp.Conf == nil {
		r.Conf = nil
	} else {
		r.Conf = &tfTypes.ConditionSpecificConfigs{}
	}
	r.Disabled = types.BoolPointerValue(resp.Disabled)
	r.Group = types.StringPointerValue(resp.Group)
	r.ID = types.StringValue(resp.ID)
	r.Metadata = []tfTypes.MetadataItem{}
	if len(r.Metadata) > len(resp.Metadata) {
		r.Metadata = r.Metadata[:len(resp.Metadata)]
	}
	for metadataCount, metadataItem := range resp.Metadata {
		var metadata tfTypes.MetadataItem
		metadata.Name = types.StringValue(metadataItem.Name)
		metadata.Value = types.StringValue(metadataItem.Value)
		if metadataCount+1 > len(r.Metadata) {
			r.Metadata = append(r.Metadata, metadata)
		} else {
			r.Metadata[metadataCount].Name = metadata.Name
			r.Metadata[metadataCount].Value = metadata.Value
		}
	}
	r.TargetConfigs = []tfTypes.NotificationTargetConfig{}
	if len(r.TargetConfigs) > len(resp.TargetConfigs) {
		r.TargetConfigs = r.TargetConfigs[:len(resp.TargetConfigs)]
	}
	for targetConfigsCount, targetConfigsItem := range resp.TargetConfigs {
		var targetConfigs tfTypes.NotificationTargetConfig
		if targetConfigsItem.Conf == nil {
			targetConfigs.Conf = nil
		} else {
			targetConfigs.Conf = &tfTypes.SMTPTargetConfig{}
			targetConfigs.Conf.Body = types.StringPointerValue(targetConfigsItem.Conf.Body)
			if targetConfigsItem.Conf.EmailRecipient == nil {
				targetConfigs.Conf.EmailRecipient = nil
			} else {
				targetConfigs.Conf.EmailRecipient = &tfTypes.EmailRecipient{}
				targetConfigs.Conf.EmailRecipient.Bcc = types.StringPointerValue(targetConfigsItem.Conf.EmailRecipient.Bcc)
				targetConfigs.Conf.EmailRecipient.Cc = types.StringPointerValue(targetConfigsItem.Conf.EmailRecipient.Cc)
				targetConfigs.Conf.EmailRecipient.To = types.StringValue(targetConfigsItem.Conf.EmailRecipient.To)
			}
			targetConfigs.Conf.Subject = types.StringPointerValue(targetConfigsItem.Conf.Subject)
		}
		targetConfigs.ID = types.StringValue(targetConfigsItem.ID)
		if targetConfigsCount+1 > len(r.TargetConfigs) {
			r.TargetConfigs = append(r.TargetConfigs, targetConfigs)
		} else {
			r.TargetConfigs[targetConfigsCount].Conf = targetConfigs.Conf
			r.TargetConfigs[targetConfigsCount].ID = targetConfigs.ID
		}
	}
	r.Targets = make([]types.String, 0, len(resp.Targets))
	for _, v := range resp.Targets {
		r.Targets = append(r.Targets, types.StringValue(v))
	}

	return diags
}

func (r *NotificationDataSourceModel) ToOperationsGetNotificationByIDRequest(ctx context.Context) (*operations.GetNotificationByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetNotificationByIDRequest{
		ID: id,
	}

	return &out, diags
}

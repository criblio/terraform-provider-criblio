// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-criblio/internal/provider/types"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk/models/shared"
)

func (r *GroupDataSourceModel) ToOperationsGetGroupsByIDRequest(ctx context.Context) (*operations.GetGroupsByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	fields := new(string)
	if !r.Fields.IsUnknown() && !r.Fields.IsNull() {
		*fields = r.Fields.ValueString()
	} else {
		fields = nil
	}
	out := operations.GetGroupsByIDRequest{
		ID:     id,
		Fields: fields,
	}

	return &out, diags
}

func (r *GroupDataSourceModel) RefreshFromSharedGroup(ctx context.Context, resp *shared.Group) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp.Cloud == nil {
		r.Cloud = nil
	} else {
		r.Cloud = &tfTypes.Cloud{}
		r.Cloud.Provider = types.StringValue(string(resp.Cloud.Provider))
		r.Cloud.Region = types.StringValue(resp.Cloud.Region)
	}
	r.EstimatedIngestRate = types.Float64PointerValue(resp.EstimatedIngestRate)
	r.ID = types.StringValue(resp.ID)
	r.IsFleet = types.BoolPointerValue(resp.IsFleet)
	r.Name = types.StringPointerValue(resp.Name)
	r.OnPrem = types.BoolPointerValue(resp.OnPrem)
	r.Provisioned = types.BoolValue(resp.Provisioned)
	r.Streamtags = make([]types.String, 0, len(resp.Streamtags))
	for _, v := range resp.Streamtags {
		r.Streamtags = append(r.Streamtags, types.StringValue(v))
	}
	r.WorkerRemoteAccess = types.BoolPointerValue(resp.WorkerRemoteAccess)

	return diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-criblio/internal/provider/types"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-criblio/internal/sdk/models/shared"
)

func (r *PackDestinationDataSourceModel) RefreshFromOperationsGetSystemOutputsByPackResponseBody(ctx context.Context, resp *operations.GetSystemOutputsByPackResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.Routes{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items tfTypes.Routes
			items.Comments = []tfTypes.Comment{}
			for commentsCount, commentsItem := range itemsItem.Comments {
				var comments tfTypes.Comment
				if commentsItem.AdditionalProperties == nil {
					comments.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult, _ := json.Marshal(commentsItem.AdditionalProperties)
					comments.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
				}
				comments.Comment = types.StringPointerValue(commentsItem.Comment)
				if commentsCount+1 > len(items.Comments) {
					items.Comments = append(items.Comments, comments)
				} else {
					items.Comments[commentsCount].AdditionalProperties = comments.AdditionalProperties
					items.Comments[commentsCount].Comment = comments.Comment
				}
			}
			if len(itemsItem.Groups) > 0 {
				items.Groups = make(map[string]tfTypes.RoutesGroups, len(itemsItem.Groups))
				for routesGroupsKey, routesGroupsValue := range itemsItem.Groups {
					var routesGroupsResult tfTypes.RoutesGroups
					routesGroupsResult.Description = types.StringPointerValue(routesGroupsValue.Description)
					routesGroupsResult.Disabled = types.BoolPointerValue(routesGroupsValue.Disabled)
					routesGroupsResult.Name = types.StringValue(routesGroupsValue.Name)

					items.Groups[routesGroupsKey] = routesGroupsResult
				}
			}
			items.ID = types.StringPointerValue(itemsItem.ID)
			items.Routes = []tfTypes.RoutesRoute{}
			for routesCount, routesItem := range itemsItem.Routes {
				var routes tfTypes.RoutesRoute
				if routesItem.AdditionalProperties == nil {
					routes.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult1, _ := json.Marshal(routesItem.AdditionalProperties)
					routes.AdditionalProperties = types.StringValue(string(additionalPropertiesResult1))
				}
				routes.Description = types.StringPointerValue(routesItem.Description)
				routes.Disabled = types.BoolPointerValue(routesItem.Disabled)
				routes.EnableOutputExpression = types.BoolPointerValue(routesItem.EnableOutputExpression)
				routes.Filter = types.StringPointerValue(routesItem.Filter)
				routes.Final = types.BoolPointerValue(routesItem.Final)
				routes.ID = types.StringPointerValue(routesItem.ID)
				routes.Name = types.StringValue(routesItem.Name)
				if routesItem.Output == nil {
					routes.Output = types.StringNull()
				} else {
					outputResult, _ := json.Marshal(routesItem.Output)
					routes.Output = types.StringValue(string(outputResult))
				}
				if routesItem.OutputExpression == nil {
					routes.OutputExpression = types.StringNull()
				} else {
					outputExpressionResult, _ := json.Marshal(routesItem.OutputExpression)
					routes.OutputExpression = types.StringValue(string(outputExpressionResult))
				}
				routes.Pipeline = types.StringValue(routesItem.Pipeline)
				if routesCount+1 > len(items.Routes) {
					items.Routes = append(items.Routes, routes)
				} else {
					items.Routes[routesCount].AdditionalProperties = routes.AdditionalProperties
					items.Routes[routesCount].Description = routes.Description
					items.Routes[routesCount].Disabled = routes.Disabled
					items.Routes[routesCount].EnableOutputExpression = routes.EnableOutputExpression
					items.Routes[routesCount].Filter = routes.Filter
					items.Routes[routesCount].Final = routes.Final
					items.Routes[routesCount].ID = routes.ID
					items.Routes[routesCount].Name = routes.Name
					items.Routes[routesCount].Output = routes.Output
					items.Routes[routesCount].OutputExpression = routes.OutputExpression
					items.Routes[routesCount].Pipeline = routes.Pipeline
				}
			}
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items)
			} else {
				r.Items[itemsCount].Comments = items.Comments
				r.Items[itemsCount].Groups = items.Groups
				r.Items[itemsCount].ID = items.ID
				r.Items[itemsCount].Routes = items.Routes
			}
		}
	}

	return diags
}

func (r *PackDestinationDataSourceModel) ToOperationsGetSystemOutputsByPackRequest(ctx context.Context) (*operations.GetSystemOutputsByPackRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pack string
	pack = r.Pack.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	packRequestBody, packRequestBodyDiags := r.ToSharedPackRequestBody(ctx)
	diags.Append(packRequestBodyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.GetSystemOutputsByPackRequest{
		Pack:            pack,
		GroupID:         groupID,
		PackRequestBody: *packRequestBody,
	}

	return &out, diags
}

func (r *PackDestinationDataSourceModel) ToSharedPackRequestBody(ctx context.Context) (*shared.PackRequestBody, diag.Diagnostics) {
	var diags diag.Diagnostics

	allowCustomFunctions := new(bool)
	if !r.AllowCustomFunctions.IsUnknown() && !r.AllowCustomFunctions.IsNull() {
		*allowCustomFunctions = r.AllowCustomFunctions.ValueBool()
	} else {
		allowCustomFunctions = nil
	}
	author := new(string)
	if !r.Author.IsUnknown() && !r.Author.IsNull() {
		*author = r.Author.ValueString()
	} else {
		author = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	exports := make([]string, 0, len(r.Exports))
	for _, exportsItem := range r.Exports {
		exports = append(exports, exportsItem.ValueString())
	}
	force := new(bool)
	if !r.Force.IsUnknown() && !r.Force.IsNull() {
		*force = r.Force.ValueBool()
	} else {
		force = nil
	}
	var id string
	id = r.ID.ValueString()

	isDisabled := new(bool)
	if !r.IsDisabled.IsUnknown() && !r.IsDisabled.IsNull() {
		*isDisabled = r.IsDisabled.ValueBool()
	} else {
		isDisabled = nil
	}
	inputs := new(float64)
	if !r.Inputs.IsUnknown() && !r.Inputs.IsNull() {
		*inputs = r.Inputs.ValueFloat64()
	} else {
		inputs = nil
	}
	minLogStreamVersion := new(string)
	if !r.MinLogStreamVersion.IsUnknown() && !r.MinLogStreamVersion.IsNull() {
		*minLogStreamVersion = r.MinLogStreamVersion.ValueString()
	} else {
		minLogStreamVersion = nil
	}
	outputs := new(float64)
	if !r.Outputs.IsUnknown() && !r.Outputs.IsNull() {
		*outputs = r.Outputs.ValueFloat64()
	} else {
		outputs = nil
	}
	source := new(string)
	if !r.Source.IsUnknown() && !r.Source.IsNull() {
		*source = r.Source.ValueString()
	} else {
		source = nil
	}
	spec := new(string)
	if !r.Spec.IsUnknown() && !r.Spec.IsNull() {
		*spec = r.Spec.ValueString()
	} else {
		spec = nil
	}
	var tags *shared.PackRequestBodyTags
	if r.Tags != nil {
		dataType := make([]string, 0, len(r.Tags.DataType))
		for _, dataTypeItem := range r.Tags.DataType {
			dataType = append(dataType, dataTypeItem.ValueString())
		}
		domain := make([]string, 0, len(r.Tags.Domain))
		for _, domainItem := range r.Tags.Domain {
			domain = append(domain, domainItem.ValueString())
		}
		streamtags := make([]string, 0, len(r.Tags.Streamtags))
		for _, streamtagsItem := range r.Tags.Streamtags {
			streamtags = append(streamtags, streamtagsItem.ValueString())
		}
		technology := make([]string, 0, len(r.Tags.Technology))
		for _, technologyItem := range r.Tags.Technology {
			technology = append(technology, technologyItem.ValueString())
		}
		tags = &shared.PackRequestBodyTags{
			DataType:   dataType,
			Domain:     domain,
			Streamtags: streamtags,
			Technology: technology,
		}
	}
	version := new(string)
	if !r.Version.IsUnknown() && !r.Version.IsNull() {
		*version = r.Version.ValueString()
	} else {
		version = nil
	}
	out := shared.PackRequestBody{
		AllowCustomFunctions: allowCustomFunctions,
		Author:               author,
		Description:          description,
		DisplayName:          displayName,
		Exports:              exports,
		Force:                force,
		ID:                   id,
		IsDisabled:           isDisabled,
		Inputs:               inputs,
		MinLogStreamVersion:  minLogStreamVersion,
		Outputs:              outputs,
		Source:               source,
		Spec:                 spec,
		Tags:                 tags,
		Version:              version,
	}

	return &out, diags
}

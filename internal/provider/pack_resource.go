// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"os"
	"path/filepath"
	"strings"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &PackResource{}
var _ resource.ResourceWithImportState = &PackResource{}

func NewPackResource() resource.Resource {
	return &PackResource{}
}

// PackResource defines the resource implementation.
type PackResource struct {
	// Provider configured SDK client.
	client *sdk.CriblIo
}

// PackResourceModel describes the resource data model.
type PackResourceModel struct {
	AllowCustomFunctions types.Bool                   `tfsdk:"allow_custom_functions"`
	Author               types.String                 `tfsdk:"author"`
	Description          types.String                 `tfsdk:"description"`
	Disabled             types.Bool                   `queryParam:"style=form,explode=true,name=disabled" tfsdk:"disabled"`
	DisplayName          types.String                 `tfsdk:"display_name"`
	Exports              []types.String               `tfsdk:"exports"`
	Filename             types.String                 `queryParam:"style=form,explode=true,name=filename" tfsdk:"filename"`
	Force                types.Bool                   `tfsdk:"force"`
	GroupID              types.String                 `tfsdk:"group_id"`
	ID                   types.String                 `tfsdk:"id"`
	Inputs               types.Float64                `tfsdk:"inputs"`
	IsDisabled           types.Bool                   `tfsdk:"is_disabled"`
	Items                []tfTypes.PackInstallInfo    `tfsdk:"items"`
	MinLogStreamVersion  types.String                 `tfsdk:"min_log_stream_version"`
	Outputs              types.Float64                `tfsdk:"outputs"`
	Source               types.String                 `tfsdk:"source"`
	Spec                 types.String                 `tfsdk:"spec"`
	Tags                 *tfTypes.PackRequestBodyTags `tfsdk:"tags"`
	Version              types.String                 `tfsdk:"version"`
}

func (r *PackResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_pack"
}

func (r *PackResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Pack Resource",
		Attributes: map[string]schema.Attribute{
			"allow_custom_functions": schema.BoolAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"author": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"description": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"disabled": schema.BoolAttribute{
				Optional: true,
			},
			"display_name": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"exports": schema.ListAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				ElementType: types.StringType,
				Description: `Requires replacement if changed.`,
			},
			"filename": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `the file to upload. Requires replacement if changed.`,
			},
			"force": schema.BoolAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"group_id": schema.StringAttribute{
				Required:    true,
				Description: `The consumer group to which this instance belongs. Defaults to 'Cribl'.`,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `Pack name`,
			},
			"inputs": schema.Float64Attribute{
				Optional: true,
				PlanModifiers: []planmodifier.Float64{
					float64planmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"is_disabled": schema.BoolAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"items": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"author": schema.StringAttribute{
							Computed: true,
						},
						"description": schema.StringAttribute{
							Computed: true,
						},
						"display_name": schema.StringAttribute{
							Computed: true,
						},
						"exports": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"inputs": schema.Float64Attribute{
							Computed: true,
						},
						"is_disabled": schema.BoolAttribute{
							Computed: true,
						},
						"min_log_stream_version": schema.StringAttribute{
							Computed: true,
						},
						"outputs": schema.Float64Attribute{
							Computed: true,
						},
						"settings": schema.MapAttribute{
							Computed:    true,
							ElementType: jsontypes.NormalizedType{},
							Validators: []validator.Map{
								mapvalidator.ValueStringsAre(validators.IsValidJSON()),
							},
						},
						"source": schema.StringAttribute{
							Computed: true,
						},
						"spec": schema.StringAttribute{
							Computed: true,
						},
						"tags": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"data_type": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"domain": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"streamtags": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"technology": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
							},
						},
						"version": schema.StringAttribute{
							Computed: true,
						},
						"warnings": schema.StringAttribute{
							CustomType:  jsontypes.NormalizedType{},
							Computed:    true,
							Description: `Parsed as JSON.`,
						},
					},
				},
			},
			"min_log_stream_version": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"outputs": schema.Float64Attribute{
				Optional: true,
				PlanModifiers: []planmodifier.Float64{
					float64planmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"source": schema.StringAttribute{
				Optional:    true,
				Description: `body string required Pack source`,
			},
			"spec": schema.StringAttribute{
				Optional:    true,
				Description: `body string optional Specify a branch, tag or a semver spec`,
			},
			"tags": schema.SingleNestedAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
				},
				Attributes: map[string]schema.Attribute{
					"data_type": schema.ListAttribute{
						Required: true,
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplaceIfConfigured(),
						},
						ElementType: types.StringType,
						Description: `Requires replacement if changed.`,
					},
					"domain": schema.ListAttribute{
						Required: true,
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplaceIfConfigured(),
						},
						ElementType: types.StringType,
						Description: `Requires replacement if changed.`,
					},
					"streamtags": schema.ListAttribute{
						Required: true,
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplaceIfConfigured(),
						},
						ElementType: types.StringType,
						Description: `Requires replacement if changed.`,
					},
					"technology": schema.ListAttribute{
						Required: true,
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplaceIfConfigured(),
						},
						ElementType: types.StringType,
						Description: `Requires replacement if changed.`,
					},
				},
				Description: `Requires replacement if changed.`,
			},
			"version": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
		},
	}
}

func (r *PackResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.CriblIo)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.CriblIo, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *PackResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *PackResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If filename is provided, first upload the file via PUT
	if !data.Filename.IsUnknown() && !data.Filename.IsNull() {
		filename := data.Filename.ValueString()
		var filePath string

		// Resolve file path: absolute paths only (or use Terraform's path.module/path.root which resolve to absolute)
		// Terraform should resolve path.module/path.root to absolute paths, but if it doesn't, we handle relative paths
		if filepath.IsAbs(filename) {
			// Already absolute - use as-is
			filePath = filename
		} else {
			// Relative path - resolve using filepath.Abs which uses current working directory
			// This works correctly when path.module evaluates to an absolute path
			// If path.module evaluates to "./" or ".", filepath.Abs will resolve it relative to provider's working directory
			var err error
			filePath, err = filepath.Abs(filename)
			if err != nil {
				resp.Diagnostics.AddError("Unable to resolve file path", fmt.Sprintf("Failed to resolve path %s: %v", filename, err))
				return
			}
			filePath = filepath.Clean(filePath)
		}

		// Verify file exists
		if _, err := os.Stat(filePath); os.IsNotExist(err) {
			wd, _ := os.Getwd()
			resp.Diagnostics.AddError(
				"Pack file not found",
				fmt.Sprintf("File does not exist: %s\n\nWorking directory: %s\n\nPlease use an absolute path or Terraform's path functions:\n  filename = \"${path.module}/%s\"\n  or\n  filename = \"${path.root}/%s\"",
					filePath,
					wd,
					filepath.Base(filename),
					filepath.Base(filename),
				),
			)
			return
		}

		// Read the file content
		fileContent, err := os.ReadFile(filePath)
		if err != nil {
			resp.Diagnostics.AddError("Failed to read pack file", fmt.Sprintf("Unable to read file %s: %v", filePath, err))
			return
		}

		// Extract base filename from the found file path (use this for both PUT and POST)
		// This ensures we use the actual filename even if user provided a path
		baseFilename := filepath.Base(filePath)

		// Upload the file via PUT using the base filename
		uploadReq := operations.UpdatePacksRequest{
			GroupID:  data.GroupID.ValueString(),
			Filename: &baseFilename,
		}

		// Manually create PUT request with file content and get the stored filename from response
		storedFilename, putErr := r.uploadPackFile(ctx, uploadReq, fileContent, baseFilename)
		if putErr != nil {
			resp.Diagnostics.AddError("Failed to upload pack file", putErr.Error())
			return
		}

		// Use the stored filename returned from PUT response (may have random suffix added by server)
		// If PUT didn't return a stored filename, fall back to the original filename
		filenameForPost := storedFilename
		if filenameForPost == "" {
			filenameForPost = baseFilename
		}

		// Update the data model to use the stored filename for the POST request
		// This ensures the POST request references the uploaded file correctly
		// Set both filename query param and source in body (both reference the uploaded file)
		data.Filename = types.StringValue(filenameForPost)
		// Set source to the stored filename - matches UI behavior
		// The server will process this and return the full file: URI in the response
		data.Source = types.StringValue(filenameForPost)
	}

	request, requestDiags := data.ToOperationsCreatePacksRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	
	// Verify filename is set in the request for debugging
	if request.Filename != nil {
		// Filename is set correctly
	} else if !data.Filename.IsUnknown() && !data.Filename.IsNull() {
		// Filename should be set but wasn't - ensure it's set
		filename := data.Filename.ValueString()
		request.Filename = &filename
	}
	
	res, err := r.client.Packs.CreatePacks(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromOperationsCreatePacksResponseBody(ctx, res.Object)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsGetPacksByIDRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.Packs.GetPacksByID(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromOperationsGetPacksByIDResponseBody(ctx, res1.Object)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PackResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *PackResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetPacksByIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Packs.GetPacksByID(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromOperationsGetPacksByIDResponseBody(ctx, res.Object)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PackResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *PackResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdatePacksByIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Packs.UpdatePacksByID(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromOperationsUpdatePacksByIDResponseBody(ctx, res.Object)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsGetPacksByIDRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.Packs.GetPacksByID(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromOperationsGetPacksByIDResponseBody(ctx, res1.Object)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PackResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *PackResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeletePacksByIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Packs.DeletePacksByID(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

// uploadPackFile uploads a pack file via PUT request with file content in the body
// Returns the stored filename from the server response (which may have a random suffix)
// Since UpdatePacks returns nil on error (400), we use a successful GET request to extract the base URL
func (r *PackResource) uploadPackFile(ctx context.Context, uploadReq operations.UpdatePacksRequest, fileContent []byte, filename string) (string, error) {
	// Make a successful GET request to extract the processed URL and auth headers
	// Use GetPacksByGroup which should work even if the list is empty
	listReq := operations.GetPacksByGroupRequest{
		GroupID: uploadReq.GroupID,
	}
	listRes, _ := r.client.Packs.GetPacksByGroup(ctx, listReq)
	
	var baseURL string
	var authHeader string
	var path string
	
	// Extract base URL and headers from the response
	if listRes != nil && listRes.RawResponse != nil && listRes.RawResponse.Request != nil {
		originalReq := listRes.RawResponse.Request
		
		// Extract base URL
		if originalReq.URL != nil {
			if originalReq.URL.Host != "" {
				scheme := originalReq.URL.Scheme
				if scheme == "" {
					scheme = "https"
				}
				baseURL = fmt.Sprintf("%s://%s", scheme, originalReq.URL.Host)
			}
		}
		
		// Fallback to Host header
		if baseURL == "" && originalReq.Host != "" {
			baseURL = fmt.Sprintf("https://%s", originalReq.Host)
		}
		
		// Extract Authorization header
		if authVal := originalReq.Header.Get("Authorization"); authVal != "" {
			authHeader = authVal
		}
	}
	
	// Fallback: try GetPacksByID with a dummy ID if GetPacksByGroup didn't work
	if baseURL == "" {
		getReq := operations.GetPacksByIDRequest{
			GroupID: uploadReq.GroupID,
			ID:       "_dummy_for_url_extraction_",
			Disabled: nil,
		}
		getRes, _ := r.client.Packs.GetPacksByID(ctx, getReq)
		if getRes != nil && getRes.RawResponse != nil && getRes.RawResponse.Request != nil {
			originalReq := getRes.RawResponse.Request
			if originalReq.URL != nil && originalReq.URL.Host != "" {
				scheme := originalReq.URL.Scheme
				if scheme == "" {
					scheme = "https"
				}
				baseURL = fmt.Sprintf("%s://%s", scheme, originalReq.URL.Host)
			}
			if baseURL == "" && originalReq.Host != "" {
				baseURL = fmt.Sprintf("https://%s", originalReq.Host)
			}
			if authHeader == "" {
				authHeader = originalReq.Header.Get("Authorization")
			}
		}
	}
	
	// Last resort error
	if baseURL == "" {
		return "", fmt.Errorf("failed to extract base URL from API requests. Please check your provider configuration")
	}
	
	// Ensure path is set
	if path == "" {
		path = fmt.Sprintf("/api/v1/m/%s/packs", uploadReq.GroupID)
	}
	
	// Construct URL with filename and size in query params (matching UI behavior)
	queryParams := url.Values{}
	queryParams.Set("filename", filename)
	queryParams.Set("size", fmt.Sprintf("%d", len(fileContent)))
	processedURL := fmt.Sprintf("%s%s?%s", baseURL, path, queryParams.Encode())
	
	// Create PUT request with file content
	req, err := http.NewRequestWithContext(ctx, "PUT", processedURL, bytes.NewReader(fileContent))
	if err != nil {
		return "", fmt.Errorf("failed to create PUT request: %v", err)
	}
	
	// Set headers
	if authHeader != "" {
		req.Header.Set("Authorization", authHeader)
	}
	req.Header.Set("Content-Type", "application/octet-stream")
	req.Header.Set("Content-Length", fmt.Sprintf("%d", len(fileContent)))
	req.Header.Set("Accept", "application/json")
	req.Header.Set("User-Agent", "terraform-provider-criblio")
	
	// Execute request
	client := &http.Client{}
	httpRes, err := client.Do(req)
	if err != nil {
		return "", fmt.Errorf("failed to execute PUT request: %v", err)
	}
	defer httpRes.Body.Close()
	
	if httpRes.StatusCode != 200 {
		body, _ := io.ReadAll(httpRes.Body)
		return "", fmt.Errorf("pack file upload failed with status %d: %s", httpRes.StatusCode, string(body))
	}
	
	// Parse response to get the stored filename
	// The PUT response may contain the actual filename that was stored (with random suffix)
	var storedFilename string
	body, err := io.ReadAll(httpRes.Body)
	if err == nil && len(body) > 0 {
		var responseData struct {
			Source string `json:"source"`
		}
		if err := json.Unmarshal(body, &responseData); err == nil && responseData.Source != "" {
			// Extract filename from source path (e.g., "file:/path/to/file.JwhxyjU.crbl" -> "file.JwhxyjU.crbl")
			// Or if it's just the filename, use it directly
			if strings.HasPrefix(responseData.Source, "file:") {
				// Extract just the filename from the path
				path := strings.TrimPrefix(responseData.Source, "file:")
				storedFilename = filepath.Base(path)
			} else {
				storedFilename = responseData.Source
			}
		}
	}
	
	// If we couldn't parse the stored filename, return the original filename
	if storedFilename == "" {
		storedFilename = filename
	}
	
	return storedFilename, nil
}

func (r *PackResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		GroupID string `json:"group_id"`
		ID      string `json:"id"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The import ID is not valid. It is expected to be a JSON object string with the format: '{"group_id": "Cribl", "id": "observability-pack"}': `+err.Error())
		return
	}

	if len(data.GroupID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field group_id is required but was not found in the json encoded ID. It's expected to be a value alike '"Cribl"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("group_id"), data.GroupID)...)
	if len(data.ID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field id is required but was not found in the json encoded ID. It's expected to be a value alike '"observability-pack"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), data.ID)...)
}

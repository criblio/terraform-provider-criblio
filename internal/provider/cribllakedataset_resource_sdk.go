// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/criblio/terraform-provider-criblio/internal/provider/typeconvert"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *CriblLakeDatasetResourceModel) RefreshFromOperationsGetCriblLakeDatasetByLakeIDAndIDResponseBody(ctx context.Context, resp *operations.GetCriblLakeDatasetByLakeIDAndIDResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.CriblLakeDataset{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.CriblLakeDataset

			items.AcceleratedFields = make([]types.String, 0, len(itemsItem.AcceleratedFields))
			for _, v := range itemsItem.AcceleratedFields {
				items.AcceleratedFields = append(items.AcceleratedFields, types.StringValue(v))
			}
			items.BucketName = types.StringPointerValue(itemsItem.BucketName)
			items.Description = types.StringPointerValue(itemsItem.Description)
			if itemsItem.Format != nil {
				items.Format = types.StringValue(string(*itemsItem.Format))
			} else {
				items.Format = types.StringNull()
			}
			items.ID = types.StringValue(itemsItem.ID)
			items.RetentionPeriodInDays = types.Float64PointerValue(itemsItem.RetentionPeriodInDays)
			if itemsItem.SearchConfig == nil {
				items.SearchConfig = nil
			} else {
				items.SearchConfig = &tfTypes.LakeDatasetSearchConfig{}
				items.SearchConfig.Datatypes = make([]types.String, 0, len(itemsItem.SearchConfig.Datatypes))
				for _, v := range itemsItem.SearchConfig.Datatypes {
					items.SearchConfig.Datatypes = append(items.SearchConfig.Datatypes, types.StringValue(v))
				}
				if itemsItem.SearchConfig.Metadata == nil {
					items.SearchConfig.Metadata = nil
				} else {
					items.SearchConfig.Metadata = &tfTypes.DatasetMetadata{}
					items.SearchConfig.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.SearchConfig.Metadata.Created))
					items.SearchConfig.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.SearchConfig.Metadata.Modified))
					items.SearchConfig.Metadata.Tags = make([]types.String, 0, len(itemsItem.SearchConfig.Metadata.Tags))
					for _, v := range itemsItem.SearchConfig.Metadata.Tags {
						items.SearchConfig.Metadata.Tags = append(items.SearchConfig.Metadata.Tags, types.StringValue(v))
					}
					items.SearchConfig.Metadata.EnableAcceleration = types.BoolPointerValue(itemsItem.SearchConfig.Metadata.EnableAcceleration)
				}
			}

			r.Items = append(r.Items, items)
		}
	}

	return diags
}

func (r *CriblLakeDatasetResourceModel) RefreshFromSharedCriblLakeDataset(ctx context.Context, resp *shared.CriblLakeDataset) diag.Diagnostics {
	var diags diag.Diagnostics

	r.AcceleratedFields = make([]types.String, 0, len(resp.AcceleratedFields))
	for _, v := range resp.AcceleratedFields {
		r.AcceleratedFields = append(r.AcceleratedFields, types.StringValue(v))
	}
	r.BucketName = types.StringPointerValue(resp.BucketName)
	r.Description = types.StringPointerValue(resp.Description)
	if resp.Format != nil {
		r.Format = types.StringValue(string(*resp.Format))
	} else {
		r.Format = types.StringNull()
	}
	r.ID = types.StringValue(resp.ID)
	r.RetentionPeriodInDays = types.Float64PointerValue(resp.RetentionPeriodInDays)
	if resp.SearchConfig == nil {
		r.SearchConfig = nil
	} else {
		r.SearchConfig = &tfTypes.LakeDatasetSearchConfig{}
		r.SearchConfig.Datatypes = make([]types.String, 0, len(resp.SearchConfig.Datatypes))
		for _, v := range resp.SearchConfig.Datatypes {
			r.SearchConfig.Datatypes = append(r.SearchConfig.Datatypes, types.StringValue(v))
		}
		if resp.SearchConfig.Metadata == nil {
			r.SearchConfig.Metadata = nil
		} else {
			r.SearchConfig.Metadata = &tfTypes.DatasetMetadata{}
			r.SearchConfig.Metadata.Created = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.SearchConfig.Metadata.Created))
			r.SearchConfig.Metadata.EnableAcceleration = types.BoolPointerValue(resp.SearchConfig.Metadata.EnableAcceleration)
			r.SearchConfig.Metadata.Modified = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.SearchConfig.Metadata.Modified))
			r.SearchConfig.Metadata.Tags = make([]types.String, 0, len(resp.SearchConfig.Metadata.Tags))
			for _, v := range resp.SearchConfig.Metadata.Tags {
				r.SearchConfig.Metadata.Tags = append(r.SearchConfig.Metadata.Tags, types.StringValue(v))
			}
		}
	}

	return diags
}

func (r *CriblLakeDatasetResourceModel) ToOperationsCreateCriblLakeDatasetByLakeIDRequest(ctx context.Context) (*operations.CreateCriblLakeDatasetByLakeIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	lakeID := operations.CreateCriblLakeDatasetByLakeIDLakeID(r.LakeID.ValueString())
	criblLakeDataset, criblLakeDatasetDiags := r.ToSharedCriblLakeDataset(ctx)
	diags.Append(criblLakeDatasetDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateCriblLakeDatasetByLakeIDRequest{
		LakeID:           lakeID,
		CriblLakeDataset: *criblLakeDataset,
	}

	return &out, diags
}

func (r *CriblLakeDatasetResourceModel) ToOperationsDeleteCriblLakeDatasetByLakeIDAndIDRequest(ctx context.Context) (*operations.DeleteCriblLakeDatasetByLakeIDAndIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	lakeID := operations.DeleteCriblLakeDatasetByLakeIDAndIDLakeID(r.LakeID.ValueString())
	var id string
	id = r.ID.ValueString()

	out := operations.DeleteCriblLakeDatasetByLakeIDAndIDRequest{
		LakeID: lakeID,
		ID:     id,
	}

	return &out, diags
}

func (r *CriblLakeDatasetResourceModel) ToOperationsGetCriblLakeDatasetByLakeIDAndIDRequest(ctx context.Context) (*operations.GetCriblLakeDatasetByLakeIDAndIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	lakeID := operations.GetCriblLakeDatasetByLakeIDAndIDLakeID(r.LakeID.ValueString())
	var id string
	id = r.ID.ValueString()

	out := operations.GetCriblLakeDatasetByLakeIDAndIDRequest{
		LakeID: lakeID,
		ID:     id,
	}

	return &out, diags
}

func (r *CriblLakeDatasetResourceModel) ToOperationsUpdateCriblLakeDatasetByLakeIDAndIDRequest(ctx context.Context) (*operations.UpdateCriblLakeDatasetByLakeIDAndIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	lakeID := operations.UpdateCriblLakeDatasetByLakeIDAndIDLakeID(r.LakeID.ValueString())
	var id string
	id = r.ID.ValueString()

	criblLakeDataset, criblLakeDatasetDiags := r.ToSharedCriblLakeDataset(ctx)
	diags.Append(criblLakeDatasetDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateCriblLakeDatasetByLakeIDAndIDRequest{
		LakeID:           lakeID,
		ID:               id,
		CriblLakeDataset: *criblLakeDataset,
	}

	return &out, diags
}

func (r *CriblLakeDatasetResourceModel) ToSharedCriblLakeDataset(ctx context.Context) (*shared.CriblLakeDataset, diag.Diagnostics) {
	var diags diag.Diagnostics

	acceleratedFields := make([]string, 0, len(r.AcceleratedFields))
	for _, acceleratedFieldsItem := range r.AcceleratedFields {
		acceleratedFields = append(acceleratedFields, acceleratedFieldsItem.ValueString())
	}
	bucketName := new(string)
	if !r.BucketName.IsUnknown() && !r.BucketName.IsNull() {
		*bucketName = r.BucketName.ValueString()
	} else {
		bucketName = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	format := new(shared.CriblLakeDatasetFormat)
	if !r.Format.IsUnknown() && !r.Format.IsNull() {
		*format = shared.CriblLakeDatasetFormat(r.Format.ValueString())
	} else {
		format = nil
	}
	var id string
	id = r.ID.ValueString()

	retentionPeriodInDays := new(float64)
	if !r.RetentionPeriodInDays.IsUnknown() && !r.RetentionPeriodInDays.IsNull() {
		*retentionPeriodInDays = r.RetentionPeriodInDays.ValueFloat64()
	} else {
		retentionPeriodInDays = nil
	}
	var searchConfig *shared.LakeDatasetSearchConfig
	if r.SearchConfig != nil {
		datatypes := make([]string, 0, len(r.SearchConfig.Datatypes))
		for _, datatypesItem := range r.SearchConfig.Datatypes {
			datatypes = append(datatypes, datatypesItem.ValueString())
		}
		var metadata *shared.DatasetMetadata
		if r.SearchConfig.Metadata != nil {
			created := new(time.Time)
			if !r.SearchConfig.Metadata.Created.IsUnknown() && !r.SearchConfig.Metadata.Created.IsNull() {
				*created, _ = time.Parse(time.RFC3339Nano, r.SearchConfig.Metadata.Created.ValueString())
			} else {
				created = nil
			}
			modified := new(time.Time)
			if !r.SearchConfig.Metadata.Modified.IsUnknown() && !r.SearchConfig.Metadata.Modified.IsNull() {
				*modified, _ = time.Parse(time.RFC3339Nano, r.SearchConfig.Metadata.Modified.ValueString())
			} else {
				modified = nil
			}
			tags := make([]string, 0, len(r.SearchConfig.Metadata.Tags))
			for _, tagsItem := range r.SearchConfig.Metadata.Tags {
				tags = append(tags, tagsItem.ValueString())
			}
			enableAcceleration := new(bool)
			if !r.SearchConfig.Metadata.EnableAcceleration.IsUnknown() && !r.SearchConfig.Metadata.EnableAcceleration.IsNull() {
				*enableAcceleration = r.SearchConfig.Metadata.EnableAcceleration.ValueBool()
			} else {
				enableAcceleration = nil
			}
			metadata = &shared.DatasetMetadata{
				Created:            created,
				Modified:           modified,
				Tags:               tags,
				EnableAcceleration: enableAcceleration,
			}
		}
		searchConfig = &shared.LakeDatasetSearchConfig{
			Datatypes: datatypes,
			Metadata:  metadata,
		}
	}
	out := shared.CriblLakeDataset{
		AcceleratedFields:     acceleratedFields,
		BucketName:            bucketName,
		Description:           description,
		Format:                format,
		ID:                    id,
		RetentionPeriodInDays: retentionPeriodInDays,
		SearchConfig:          searchConfig,
	}

	return &out, diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *CriblLakeDatasetResourceModel) RefreshFromSharedCriblLakeDataset(ctx context.Context, resp *shared.CriblLakeDataset) diag.Diagnostics {
	var diags diag.Diagnostics

	r.AcceleratedFields = make([]types.String, 0, len(resp.AcceleratedFields))
	for _, v := range resp.AcceleratedFields {
		r.AcceleratedFields = append(r.AcceleratedFields, types.StringValue(v))
	}
	r.BucketName = types.StringPointerValue(resp.BucketName)
	r.Description = types.StringPointerValue(resp.Description)
	if resp.Format != nil {
		r.Format = types.StringValue(string(*resp.Format))
	} else {
		r.Format = types.StringNull()
	}
	r.ID = types.StringValue(resp.ID)
	r.RetentionPeriodInDays = types.Float64PointerValue(resp.RetentionPeriodInDays)
	if resp.SearchConfig == nil {
		r.SearchConfig = nil
	} else {
		r.SearchConfig = &tfTypes.LakeDatasetSearchConfig{}
		r.SearchConfig.Datatypes = make([]types.String, 0, len(resp.SearchConfig.Datatypes))
		for _, v := range resp.SearchConfig.Datatypes {
			r.SearchConfig.Datatypes = append(r.SearchConfig.Datatypes, types.StringValue(v))
		}
		if resp.SearchConfig.Metadata == nil {
			r.SearchConfig.Metadata = nil
		} else {
			r.SearchConfig.Metadata = &tfTypes.DatasetMetadata{}
			r.SearchConfig.Metadata.Earliest = types.StringValue(resp.SearchConfig.Metadata.Earliest)
			r.SearchConfig.Metadata.EnableAcceleration = types.BoolValue(resp.SearchConfig.Metadata.EnableAcceleration)
			r.SearchConfig.Metadata.FieldList = make([]types.String, 0, len(resp.SearchConfig.Metadata.FieldList))
			for _, v := range resp.SearchConfig.Metadata.FieldList {
				r.SearchConfig.Metadata.FieldList = append(r.SearchConfig.Metadata.FieldList, types.StringValue(v))
			}
			if resp.SearchConfig.Metadata.LatestRunInfo == nil {
				r.SearchConfig.Metadata.LatestRunInfo = nil
			} else {
				r.SearchConfig.Metadata.LatestRunInfo = &tfTypes.DatasetMetadataRunInfo{}
				r.SearchConfig.Metadata.LatestRunInfo.EarliestScannedTime = types.Float64PointerValue(resp.SearchConfig.Metadata.LatestRunInfo.EarliestScannedTime)
				r.SearchConfig.Metadata.LatestRunInfo.FinishedAt = types.Float64PointerValue(resp.SearchConfig.Metadata.LatestRunInfo.FinishedAt)
				r.SearchConfig.Metadata.LatestRunInfo.LatestScannedTime = types.Float64PointerValue(resp.SearchConfig.Metadata.LatestRunInfo.LatestScannedTime)
				r.SearchConfig.Metadata.LatestRunInfo.ObjectCount = types.Float64PointerValue(resp.SearchConfig.Metadata.LatestRunInfo.ObjectCount)
			}
			r.SearchConfig.Metadata.ScanMode = types.StringValue(string(resp.SearchConfig.Metadata.ScanMode))
		}
	}

	return diags
}

func (r *CriblLakeDatasetResourceModel) ToOperationsCreateCriblLakeDatasetByLakeIDRequest(ctx context.Context) (*operations.CreateCriblLakeDatasetByLakeIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	lakeID := operations.CreateCriblLakeDatasetByLakeIDLakeID(r.LakeID.ValueString())
	criblLakeDataset, criblLakeDatasetDiags := r.ToSharedCriblLakeDataset(ctx)
	diags.Append(criblLakeDatasetDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateCriblLakeDatasetByLakeIDRequest{
		LakeID:           lakeID,
		CriblLakeDataset: *criblLakeDataset,
	}

	return &out, diags
}

func (r *CriblLakeDatasetResourceModel) ToOperationsDeleteCriblLakeDatasetByLakeIDAndIDRequest(ctx context.Context) (*operations.DeleteCriblLakeDatasetByLakeIDAndIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	lakeID := operations.DeleteCriblLakeDatasetByLakeIDAndIDLakeID(r.LakeID.ValueString())
	var id string
	id = r.ID.ValueString()

	out := operations.DeleteCriblLakeDatasetByLakeIDAndIDRequest{
		LakeID: lakeID,
		ID:     id,
	}

	return &out, diags
}

func (r *CriblLakeDatasetResourceModel) ToOperationsGetCriblLakeDatasetByLakeIDAndIDRequest(ctx context.Context) (*operations.GetCriblLakeDatasetByLakeIDAndIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	lakeID := operations.GetCriblLakeDatasetByLakeIDAndIDLakeID(r.LakeID.ValueString())
	var id string
	id = r.ID.ValueString()

	out := operations.GetCriblLakeDatasetByLakeIDAndIDRequest{
		LakeID: lakeID,
		ID:     id,
	}

	return &out, diags
}

func (r *CriblLakeDatasetResourceModel) ToOperationsUpdateCriblLakeDatasetByLakeIDAndIDRequest(ctx context.Context) (*operations.UpdateCriblLakeDatasetByLakeIDAndIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	lakeID := operations.UpdateCriblLakeDatasetByLakeIDAndIDLakeID(r.LakeID.ValueString())
	var id string
	id = r.ID.ValueString()

	criblLakeDataset, criblLakeDatasetDiags := r.ToSharedCriblLakeDataset(ctx)
	diags.Append(criblLakeDatasetDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateCriblLakeDatasetByLakeIDAndIDRequest{
		LakeID:           lakeID,
		ID:               id,
		CriblLakeDataset: *criblLakeDataset,
	}

	return &out, diags
}

func (r *CriblLakeDatasetResourceModel) ToSharedCriblLakeDataset(ctx context.Context) (*shared.CriblLakeDataset, diag.Diagnostics) {
	var diags diag.Diagnostics

	acceleratedFields := make([]string, 0, len(r.AcceleratedFields))
	for _, acceleratedFieldsItem := range r.AcceleratedFields {
		acceleratedFields = append(acceleratedFields, acceleratedFieldsItem.ValueString())
	}
	bucketName := new(string)
	if !r.BucketName.IsUnknown() && !r.BucketName.IsNull() {
		*bucketName = r.BucketName.ValueString()
	} else {
		bucketName = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	format := new(shared.CriblLakeDatasetFormat)
	if !r.Format.IsUnknown() && !r.Format.IsNull() {
		*format = shared.CriblLakeDatasetFormat(r.Format.ValueString())
	} else {
		format = nil
	}
	var id string
	id = r.ID.ValueString()

	retentionPeriodInDays := new(float64)
	if !r.RetentionPeriodInDays.IsUnknown() && !r.RetentionPeriodInDays.IsNull() {
		*retentionPeriodInDays = r.RetentionPeriodInDays.ValueFloat64()
	} else {
		retentionPeriodInDays = nil
	}
	var searchConfig *shared.LakeDatasetSearchConfig
	if r.SearchConfig != nil {
		datatypes := make([]string, 0, len(r.SearchConfig.Datatypes))
		for _, datatypesItem := range r.SearchConfig.Datatypes {
			datatypes = append(datatypes, datatypesItem.ValueString())
		}
		var metadata *shared.DatasetMetadata
		if r.SearchConfig.Metadata != nil {
			var earliest string
			earliest = r.SearchConfig.Metadata.Earliest.ValueString()

			var enableAcceleration bool
			enableAcceleration = r.SearchConfig.Metadata.EnableAcceleration.ValueBool()

			fieldList := make([]string, 0, len(r.SearchConfig.Metadata.FieldList))
			for _, fieldListItem := range r.SearchConfig.Metadata.FieldList {
				fieldList = append(fieldList, fieldListItem.ValueString())
			}
			var latestRunInfo *shared.DatasetMetadataRunInfo
			if r.SearchConfig.Metadata.LatestRunInfo != nil {
				earliestScannedTime := new(float64)
				if !r.SearchConfig.Metadata.LatestRunInfo.EarliestScannedTime.IsUnknown() && !r.SearchConfig.Metadata.LatestRunInfo.EarliestScannedTime.IsNull() {
					*earliestScannedTime = r.SearchConfig.Metadata.LatestRunInfo.EarliestScannedTime.ValueFloat64()
				} else {
					earliestScannedTime = nil
				}
				finishedAt := new(float64)
				if !r.SearchConfig.Metadata.LatestRunInfo.FinishedAt.IsUnknown() && !r.SearchConfig.Metadata.LatestRunInfo.FinishedAt.IsNull() {
					*finishedAt = r.SearchConfig.Metadata.LatestRunInfo.FinishedAt.ValueFloat64()
				} else {
					finishedAt = nil
				}
				latestScannedTime := new(float64)
				if !r.SearchConfig.Metadata.LatestRunInfo.LatestScannedTime.IsUnknown() && !r.SearchConfig.Metadata.LatestRunInfo.LatestScannedTime.IsNull() {
					*latestScannedTime = r.SearchConfig.Metadata.LatestRunInfo.LatestScannedTime.ValueFloat64()
				} else {
					latestScannedTime = nil
				}
				objectCount := new(float64)
				if !r.SearchConfig.Metadata.LatestRunInfo.ObjectCount.IsUnknown() && !r.SearchConfig.Metadata.LatestRunInfo.ObjectCount.IsNull() {
					*objectCount = r.SearchConfig.Metadata.LatestRunInfo.ObjectCount.ValueFloat64()
				} else {
					objectCount = nil
				}
				latestRunInfo = &shared.DatasetMetadataRunInfo{
					EarliestScannedTime: earliestScannedTime,
					FinishedAt:          finishedAt,
					LatestScannedTime:   latestScannedTime,
					ObjectCount:         objectCount,
				}
			}
			scanMode := shared.ScanMode(r.SearchConfig.Metadata.ScanMode.ValueString())
			metadata = &shared.DatasetMetadata{
				Earliest:           earliest,
				EnableAcceleration: enableAcceleration,
				FieldList:          fieldList,
				LatestRunInfo:      latestRunInfo,
				ScanMode:           scanMode,
			}
		}
		searchConfig = &shared.LakeDatasetSearchConfig{
			Datatypes: datatypes,
			Metadata:  metadata,
		}
	}
	out := shared.CriblLakeDataset{
		AcceleratedFields:     acceleratedFields,
		BucketName:            bucketName,
		Description:           description,
		Format:                format,
		ID:                    id,
		RetentionPeriodInDays: retentionPeriodInDays,
		SearchConfig:          searchConfig,
	}

	return &out, diags
}

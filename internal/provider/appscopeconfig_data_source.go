// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &AppscopeConfigDataSource{}
var _ datasource.DataSourceWithConfigure = &AppscopeConfigDataSource{}

func NewAppscopeConfigDataSource() datasource.DataSource {
	return &AppscopeConfigDataSource{}
}

// AppscopeConfigDataSource is the data source implementation.
type AppscopeConfigDataSource struct {
	// Provider configured SDK client.
	client *sdk.CriblIo
}

// AppscopeConfigDataSourceModel describes the data model.
type AppscopeConfigDataSourceModel struct {
	Config      tfTypes.AppscopeConfigWithCustom `tfsdk:"config"`
	Description types.String                     `tfsdk:"description"`
	GroupID     types.String                     `tfsdk:"group_id"`
	ID          types.String                     `tfsdk:"id"`
	Lib         types.String                     `tfsdk:"lib"`
	Tags        types.String                     `tfsdk:"tags"`
}

// Metadata returns the data source type name.
func (r *AppscopeConfigDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_appscope_config"
}

// Schema defines the schema for the data source.
func (r *AppscopeConfigDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "AppscopeConfig DataSource",

		Attributes: map[string]schema.Attribute{
			"config": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"cribl": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"authtoken": schema.StringAttribute{
								Computed: true,
							},
							"enable": schema.BoolAttribute{
								Computed: true,
							},
							"transport": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"buffer": schema.StringAttribute{
										Computed: true,
									},
									"host": schema.StringAttribute{
										Computed: true,
									},
									"path": schema.StringAttribute{
										Computed: true,
									},
									"port": schema.Float64Attribute{
										Computed: true,
									},
									"tls": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"cacertpath": schema.StringAttribute{
												Computed: true,
											},
											"enable": schema.BoolAttribute{
												Computed: true,
											},
											"validateserver": schema.BoolAttribute{
												Computed: true,
											},
										},
									},
									"type": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"use_scope_source_transport": schema.BoolAttribute{
								Computed: true,
							},
						},
					},
					"custom": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"ancestor": schema.StringAttribute{
									Computed: true,
								},
								"arg": schema.StringAttribute{
									Computed: true,
								},
								"config": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"cribl": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"authtoken": schema.StringAttribute{
													Computed: true,
												},
												"enable": schema.BoolAttribute{
													Computed: true,
												},
												"transport": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"buffer": schema.StringAttribute{
															Computed: true,
														},
														"host": schema.StringAttribute{
															Computed: true,
														},
														"path": schema.StringAttribute{
															Computed: true,
														},
														"port": schema.Float64Attribute{
															Computed: true,
														},
														"tls": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"cacertpath": schema.StringAttribute{
																	Computed: true,
																},
																"enable": schema.BoolAttribute{
																	Computed: true,
																},
																"validateserver": schema.BoolAttribute{
																	Computed: true,
																},
															},
														},
														"type": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												"use_scope_source_transport": schema.BoolAttribute{
													Computed: true,
												},
											},
										},
										"event": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"enable": schema.BoolAttribute{
													Computed: true,
												},
												"format": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"enhancefs": schema.BoolAttribute{
															Computed: true,
														},
														"maxeventpersec": schema.Float64Attribute{
															Computed: true,
														},
													},
												},
												"transport": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"buffer": schema.StringAttribute{
															Computed: true,
														},
														"host": schema.StringAttribute{
															Computed: true,
														},
														"path": schema.StringAttribute{
															Computed: true,
														},
														"port": schema.Float64Attribute{
															Computed: true,
														},
														"tls": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"cacertpath": schema.StringAttribute{
																	Computed: true,
																},
																"enable": schema.BoolAttribute{
																	Computed: true,
																},
																"validateserver": schema.BoolAttribute{
																	Computed: true,
																},
															},
														},
														"type": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												"type": schema.StringAttribute{
													Computed: true,
												},
												"watch": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"allowbinary": schema.BoolAttribute{
																Computed: true,
															},
															"enabled": schema.BoolAttribute{
																Computed: true,
															},
															"field": schema.StringAttribute{
																Computed: true,
															},
															"headers": schema.ListAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"type": schema.StringAttribute{
																Computed: true,
															},
															"value": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
											},
										},
										"libscope": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"commanddir": schema.StringAttribute{
													Computed: true,
												},
												"configevent": schema.BoolAttribute{
													Computed: true,
												},
												"log": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"level": schema.StringAttribute{
															Computed: true,
														},
														"transport": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"buffer": schema.StringAttribute{
																	Computed: true,
																},
																"host": schema.StringAttribute{
																	Computed: true,
																},
																"path": schema.StringAttribute{
																	Computed: true,
																},
																"port": schema.Float64Attribute{
																	Computed: true,
																},
																"tls": schema.SingleNestedAttribute{
																	Computed: true,
																	Attributes: map[string]schema.Attribute{
																		"cacertpath": schema.StringAttribute{
																			Computed: true,
																		},
																		"enable": schema.BoolAttribute{
																			Computed: true,
																		},
																		"validateserver": schema.BoolAttribute{
																			Computed: true,
																		},
																	},
																},
																"type": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
													},
												},
												"summaryperiod": schema.Float64Attribute{
													Computed: true,
												},
											},
										},
										"metric": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"enable": schema.BoolAttribute{
													Computed: true,
												},
												"format": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"statsdmaxlen": schema.Float64Attribute{
															Computed: true,
														},
														"statsdprefix": schema.StringAttribute{
															Computed: true,
														},
														"type": schema.StringAttribute{
															Computed: true,
														},
														"verbosity": schema.Float64Attribute{
															Computed: true,
														},
													},
												},
												"transport": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"buffer": schema.StringAttribute{
															Computed: true,
														},
														"host": schema.StringAttribute{
															Computed: true,
														},
														"path": schema.StringAttribute{
															Computed: true,
														},
														"port": schema.Float64Attribute{
															Computed: true,
														},
														"tls": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"cacertpath": schema.StringAttribute{
																	Computed: true,
																},
																"enable": schema.BoolAttribute{
																	Computed: true,
																},
																"validateserver": schema.BoolAttribute{
																	Computed: true,
																},
															},
														},
														"type": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												"watch": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{},
													},
												},
											},
										},
										"payload": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"dir": schema.StringAttribute{
													Computed: true,
												},
												"enable": schema.BoolAttribute{
													Computed: true,
												},
											},
										},
										"protocol": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"binary": schema.BoolAttribute{
														Computed: true,
													},
													"detect": schema.BoolAttribute{
														Computed: true,
													},
													"len": schema.Float64Attribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"payload": schema.BoolAttribute{
														Computed: true,
													},
													"regex": schema.StringAttribute{
														Computed: true,
													},
												},
											},
										},
										"tags": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"key": schema.StringAttribute{
														Computed: true,
													},
													"value": schema.StringAttribute{
														Computed: true,
													},
												},
											},
										},
									},
								},
								"env": schema.StringAttribute{
									Computed: true,
								},
								"hostname": schema.StringAttribute{
									Computed: true,
								},
								"procname": schema.StringAttribute{
									Computed: true,
								},
								"username": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"event": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"enable": schema.BoolAttribute{
								Computed: true,
							},
							"format": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"enhancefs": schema.BoolAttribute{
										Computed: true,
									},
									"maxeventpersec": schema.Float64Attribute{
										Computed: true,
									},
								},
							},
							"transport": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"buffer": schema.StringAttribute{
										Computed: true,
									},
									"host": schema.StringAttribute{
										Computed: true,
									},
									"path": schema.StringAttribute{
										Computed: true,
									},
									"port": schema.Float64Attribute{
										Computed: true,
									},
									"tls": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"cacertpath": schema.StringAttribute{
												Computed: true,
											},
											"enable": schema.BoolAttribute{
												Computed: true,
											},
											"validateserver": schema.BoolAttribute{
												Computed: true,
											},
										},
									},
									"type": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"type": schema.StringAttribute{
								Computed: true,
							},
							"watch": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"allowbinary": schema.BoolAttribute{
											Computed: true,
										},
										"enabled": schema.BoolAttribute{
											Computed: true,
										},
										"field": schema.StringAttribute{
											Computed: true,
										},
										"headers": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"type": schema.StringAttribute{
											Computed: true,
										},
										"value": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
						},
					},
					"libscope": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"commanddir": schema.StringAttribute{
								Computed: true,
							},
							"configevent": schema.BoolAttribute{
								Computed: true,
							},
							"log": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"level": schema.StringAttribute{
										Computed: true,
									},
									"transport": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"buffer": schema.StringAttribute{
												Computed: true,
											},
											"host": schema.StringAttribute{
												Computed: true,
											},
											"path": schema.StringAttribute{
												Computed: true,
											},
											"port": schema.Float64Attribute{
												Computed: true,
											},
											"tls": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"cacertpath": schema.StringAttribute{
														Computed: true,
													},
													"enable": schema.BoolAttribute{
														Computed: true,
													},
													"validateserver": schema.BoolAttribute{
														Computed: true,
													},
												},
											},
											"type": schema.StringAttribute{
												Computed: true,
											},
										},
									},
								},
							},
							"summaryperiod": schema.Float64Attribute{
								Computed: true,
							},
						},
					},
					"metric": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"enable": schema.BoolAttribute{
								Computed: true,
							},
							"format": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"statsdmaxlen": schema.Float64Attribute{
										Computed: true,
									},
									"statsdprefix": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed: true,
									},
									"verbosity": schema.Float64Attribute{
										Computed: true,
									},
								},
							},
							"transport": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"buffer": schema.StringAttribute{
										Computed: true,
									},
									"host": schema.StringAttribute{
										Computed: true,
									},
									"path": schema.StringAttribute{
										Computed: true,
									},
									"port": schema.Float64Attribute{
										Computed: true,
									},
									"tls": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"cacertpath": schema.StringAttribute{
												Computed: true,
											},
											"enable": schema.BoolAttribute{
												Computed: true,
											},
											"validateserver": schema.BoolAttribute{
												Computed: true,
											},
										},
									},
									"type": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"watch": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{},
								},
							},
						},
					},
					"payload": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"dir": schema.StringAttribute{
								Computed: true,
							},
							"enable": schema.BoolAttribute{
								Computed: true,
							},
						},
					},
					"protocol": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"binary": schema.BoolAttribute{
									Computed: true,
								},
								"detect": schema.BoolAttribute{
									Computed: true,
								},
								"len": schema.Float64Attribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"payload": schema.BoolAttribute{
									Computed: true,
								},
								"regex": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"tags": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"key": schema.StringAttribute{
									Computed: true,
								},
								"value": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
				},
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"group_id": schema.StringAttribute{
				Required:    true,
				Description: `The consumer group to which this instance belongs. Defaults to 'Cribl'.`,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `Unique ID to GET`,
			},
			"lib": schema.StringAttribute{
				Computed: true,
			},
			"tags": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *AppscopeConfigDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.CriblIo)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.CriblIo, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AppscopeConfigDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *AppscopeConfigDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetAppscopeLibEntryByIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.AppscopeConfigs.GetAppscopeLibEntryByID(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Items != nil && len(res.Object.Items) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAppscopeLibEntry(ctx, &res.Object.Items[0])...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

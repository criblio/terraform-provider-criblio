// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework/diag"
)

func (r *LakehouseDatasetConnectionResourceModel) RefreshFromOperationsCreateLakehouseDatasetConnectionsResponseBody(ctx context.Context, resp *operations.CreateLakehouseDatasetConnectionsResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
	}

	return diags
}

func (r *LakehouseDatasetConnectionResourceModel) RefreshFromOperationsUpdateLakehouseDatasetConnectionsResponseBody(ctx context.Context, resp *operations.UpdateLakehouseDatasetConnectionsResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
	}

	return diags
}

func (r *LakehouseDatasetConnectionResourceModel) ToOperationsCreateLakehouseDatasetConnectionsRequest(ctx context.Context) (*operations.CreateLakehouseDatasetConnectionsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var lakehouseID string
	lakehouseID = r.LakehouseID.ValueString()

	var lakeDatasetID string
	lakeDatasetID = r.LakeDatasetID.ValueString()

	requestBody, requestBodyDiags := r.ToOperationsCreateLakehouseDatasetConnectionsRequestBody(ctx)
	diags.Append(requestBodyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateLakehouseDatasetConnectionsRequest{
		LakehouseID:   lakehouseID,
		LakeDatasetID: lakeDatasetID,
		RequestBody:   requestBody,
	}

	return &out, diags
}

func (r *LakehouseDatasetConnectionResourceModel) ToOperationsCreateLakehouseDatasetConnectionsRequestBody(ctx context.Context) (*operations.CreateLakehouseDatasetConnectionsRequestBody, diag.Diagnostics) {
	var diags diag.Diagnostics

	out := operations.CreateLakehouseDatasetConnectionsRequestBody{}

	return &out, diags
}

func (r *LakehouseDatasetConnectionResourceModel) ToOperationsDeleteLakehouseDatasetConnectionsRequest(ctx context.Context) (*operations.DeleteLakehouseDatasetConnectionsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var lakehouseID string
	lakehouseID = r.LakehouseID.ValueString()

	var lakeDatasetID string
	lakeDatasetID = r.LakeDatasetID.ValueString()

	out := operations.DeleteLakehouseDatasetConnectionsRequest{
		LakehouseID:   lakehouseID,
		LakeDatasetID: lakeDatasetID,
	}

	return &out, diags
}

func (r *LakehouseDatasetConnectionResourceModel) ToOperationsUpdateLakehouseDatasetConnectionsRequest(ctx context.Context) (*operations.UpdateLakehouseDatasetConnectionsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var lakehouseID string
	lakehouseID = r.LakehouseID.ValueString()

	var lakeDatasetID string
	lakeDatasetID = r.LakeDatasetID.ValueString()

	requestBody, requestBodyDiags := r.ToOperationsUpdateLakehouseDatasetConnectionsRequestBody(ctx)
	diags.Append(requestBodyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateLakehouseDatasetConnectionsRequest{
		LakehouseID:   lakehouseID,
		LakeDatasetID: lakeDatasetID,
		RequestBody:   requestBody,
	}

	return &out, diags
}

func (r *LakehouseDatasetConnectionResourceModel) ToOperationsUpdateLakehouseDatasetConnectionsRequestBody(ctx context.Context) (*operations.UpdateLakehouseDatasetConnectionsRequestBody, diag.Diagnostics) {
	var diags diag.Diagnostics

	out := operations.UpdateLakehouseDatasetConnectionsRequestBody{}

	return &out, diags
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *PackRoutesResourceModel) RefreshFromOperationsCreateRoutesByPackResponseBody(ctx context.Context, resp *operations.CreateRoutesByPackResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.Routes{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.Routes

			items.Comments = []tfTypes.Comment{}

			for _, commentsItem := range itemsItem.Comments {
				var comments tfTypes.Comment

				if commentsItem.AdditionalProperties == nil {
					comments.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult, _ := json.Marshal(commentsItem.AdditionalProperties)
					comments.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
				}
				comments.Comment = types.StringPointerValue(commentsItem.Comment)

				items.Comments = append(items.Comments, comments)
			}
			if len(itemsItem.Groups) > 0 {
				items.Groups = make(map[string]tfTypes.RoutesGroups, len(itemsItem.Groups))
				for routesGroupsKey, routesGroupsValue := range itemsItem.Groups {
					var routesGroupsResult tfTypes.RoutesGroups
					routesGroupsResult.Description = types.StringPointerValue(routesGroupsValue.Description)
					routesGroupsResult.Disabled = types.BoolPointerValue(routesGroupsValue.Disabled)
					routesGroupsResult.Name = types.StringValue(routesGroupsValue.Name)

					items.Groups[routesGroupsKey] = routesGroupsResult
				}
			}
			items.ID = types.StringPointerValue(itemsItem.ID)
			items.Routes = []tfTypes.RoutesRoute{}

			for _, routesItem := range itemsItem.Routes {
				var routes tfTypes.RoutesRoute

				if routesItem.AdditionalProperties == nil {
					routes.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult1, _ := json.Marshal(routesItem.AdditionalProperties)
					routes.AdditionalProperties = types.StringValue(string(additionalPropertiesResult1))
				}
				routes.Description = types.StringPointerValue(routesItem.Description)
				routes.Disabled = types.BoolPointerValue(routesItem.Disabled)
				routes.EnableOutputExpression = types.BoolPointerValue(routesItem.EnableOutputExpression)
				routes.Filter = types.StringPointerValue(routesItem.Filter)
				routes.Final = types.BoolPointerValue(routesItem.Final)
				routes.ID = types.StringPointerValue(routesItem.ID)
				routes.Name = types.StringValue(routesItem.Name)
				if routesItem.Output == nil {
					routes.Output = types.StringNull()
				} else {
					outputResult, _ := json.Marshal(routesItem.Output)
					routes.Output = types.StringValue(string(outputResult))
				}
				if routesItem.OutputExpression == nil {
					routes.OutputExpression = types.StringNull()
				} else {
					outputExpressionResult, _ := json.Marshal(routesItem.OutputExpression)
					routes.OutputExpression = types.StringValue(string(outputExpressionResult))
				}
				routes.Pipeline = types.StringValue(routesItem.Pipeline)

				items.Routes = append(items.Routes, routes)
			}

			r.Items = append(r.Items, items)
		}
	}

	return diags
}

func (r *PackRoutesResourceModel) RefreshFromOperationsGetRoutesByPackResponseBody(ctx context.Context, resp *operations.GetRoutesByPackResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.Routes{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.Routes

			items.Comments = []tfTypes.Comment{}

			for _, commentsItem := range itemsItem.Comments {
				var comments tfTypes.Comment

				if commentsItem.AdditionalProperties == nil {
					comments.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult, _ := json.Marshal(commentsItem.AdditionalProperties)
					comments.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
				}
				comments.Comment = types.StringPointerValue(commentsItem.Comment)

				items.Comments = append(items.Comments, comments)
			}
			if len(itemsItem.Groups) > 0 {
				items.Groups = make(map[string]tfTypes.RoutesGroups, len(itemsItem.Groups))
				for routesGroupsKey, routesGroupsValue := range itemsItem.Groups {
					var routesGroupsResult tfTypes.RoutesGroups
					routesGroupsResult.Description = types.StringPointerValue(routesGroupsValue.Description)
					routesGroupsResult.Disabled = types.BoolPointerValue(routesGroupsValue.Disabled)
					routesGroupsResult.Name = types.StringValue(routesGroupsValue.Name)

					items.Groups[routesGroupsKey] = routesGroupsResult
				}
			}
			items.ID = types.StringPointerValue(itemsItem.ID)
			items.Routes = []tfTypes.RoutesRoute{}

			for _, routesItem := range itemsItem.Routes {
				var routes tfTypes.RoutesRoute

				if routesItem.AdditionalProperties == nil {
					routes.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult1, _ := json.Marshal(routesItem.AdditionalProperties)
					routes.AdditionalProperties = types.StringValue(string(additionalPropertiesResult1))
				}
				routes.Description = types.StringPointerValue(routesItem.Description)
				routes.Disabled = types.BoolPointerValue(routesItem.Disabled)
				routes.EnableOutputExpression = types.BoolPointerValue(routesItem.EnableOutputExpression)
				routes.Filter = types.StringPointerValue(routesItem.Filter)
				routes.Final = types.BoolPointerValue(routesItem.Final)
				routes.ID = types.StringPointerValue(routesItem.ID)
				routes.Name = types.StringValue(routesItem.Name)
				if routesItem.Output == nil {
					routes.Output = types.StringNull()
				} else {
					outputResult, _ := json.Marshal(routesItem.Output)
					routes.Output = types.StringValue(string(outputResult))
				}
				if routesItem.OutputExpression == nil {
					routes.OutputExpression = types.StringNull()
				} else {
					outputExpressionResult, _ := json.Marshal(routesItem.OutputExpression)
					routes.OutputExpression = types.StringValue(string(outputExpressionResult))
				}
				routes.Pipeline = types.StringValue(routesItem.Pipeline)

				items.Routes = append(items.Routes, routes)
			}

			r.Items = append(r.Items, items)
		}
	}

	return diags
}

func (r *PackRoutesResourceModel) ToOperationsCreateRoutesByPackRequest(ctx context.Context) (*operations.CreateRoutesByPackRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pack string
	pack = r.Pack.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	routesPtr, routesDiags := r.ToSharedRoutesInput(ctx)
	diags.Append(routesDiags...)

	if diags.HasError() {
		return nil, diags
	}

	routes := *routesPtr
	out := operations.CreateRoutesByPackRequest{
		Pack:    pack,
		GroupID: groupID,
		Routes:  routes,
	}

	return &out, diags
}

func (r *PackRoutesResourceModel) ToOperationsGetRoutesByPackRequest(ctx context.Context) (*operations.GetRoutesByPackRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pack string
	pack = r.Pack.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.GetRoutesByPackRequest{
		Pack:    pack,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *PackRoutesResourceModel) ToSharedRoutesInput(ctx context.Context) (*shared.RoutesInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	routes := make([]shared.RoutesRouteInput, 0, len(r.Routes))
	for _, routesItem := range r.Routes {
		var name string
		name = routesItem.Name.ValueString()

		disabled := new(bool)
		if !routesItem.Disabled.IsUnknown() && !routesItem.Disabled.IsNull() {
			*disabled = routesItem.Disabled.ValueBool()
		} else {
			disabled = nil
		}
		filter := new(string)
		if !routesItem.Filter.IsUnknown() && !routesItem.Filter.IsNull() {
			*filter = routesItem.Filter.ValueString()
		} else {
			filter = nil
		}
		var pipeline string
		pipeline = routesItem.Pipeline.ValueString()

		enableOutputExpression := new(bool)
		if !routesItem.EnableOutputExpression.IsUnknown() && !routesItem.EnableOutputExpression.IsNull() {
			*enableOutputExpression = routesItem.EnableOutputExpression.ValueBool()
		} else {
			enableOutputExpression = nil
		}
		var output interface{}
		if !routesItem.Output.IsUnknown() && !routesItem.Output.IsNull() {
			_ = json.Unmarshal([]byte(routesItem.Output.ValueString()), &output)
		}
		var outputExpression interface{}
		if !routesItem.OutputExpression.IsUnknown() && !routesItem.OutputExpression.IsNull() {
			_ = json.Unmarshal([]byte(routesItem.OutputExpression.ValueString()), &outputExpression)
		}
		description := new(string)
		if !routesItem.Description.IsUnknown() && !routesItem.Description.IsNull() {
			*description = routesItem.Description.ValueString()
		} else {
			description = nil
		}
		final := new(bool)
		if !routesItem.Final.IsUnknown() && !routesItem.Final.IsNull() {
			*final = routesItem.Final.ValueBool()
		} else {
			final = nil
		}
		var additionalProperties interface{}
		if !routesItem.AdditionalProperties.IsUnknown() && !routesItem.AdditionalProperties.IsNull() {
			_ = json.Unmarshal([]byte(routesItem.AdditionalProperties.ValueString()), &additionalProperties)
		}
		routes = append(routes, shared.RoutesRouteInput{
			Name:                   name,
			Disabled:               disabled,
			Filter:                 filter,
			Pipeline:               pipeline,
			EnableOutputExpression: enableOutputExpression,
			Output:                 output,
			OutputExpression:       outputExpression,
			Description:            description,
			Final:                  final,
			AdditionalProperties:   additionalProperties,
		})
	}
	groups := make(map[string]shared.RoutesGroups)
	for groupsKey, groupsValue := range r.Groups {
		var name1 string
		name1 = groupsValue.Name.ValueString()

		description1 := new(string)
		if !groupsValue.Description.IsUnknown() && !groupsValue.Description.IsNull() {
			*description1 = groupsValue.Description.ValueString()
		} else {
			description1 = nil
		}
		disabled1 := new(bool)
		if !groupsValue.Disabled.IsUnknown() && !groupsValue.Disabled.IsNull() {
			*disabled1 = groupsValue.Disabled.ValueBool()
		} else {
			disabled1 = nil
		}
		groupsInst := shared.RoutesGroups{
			Name:        name1,
			Description: description1,
			Disabled:    disabled1,
		}
		groups[groupsKey] = groupsInst
	}
	comments := make([]shared.Comment, 0, len(r.Comments))
	for _, commentsItem := range r.Comments {
		comment := new(string)
		if !commentsItem.Comment.IsUnknown() && !commentsItem.Comment.IsNull() {
			*comment = commentsItem.Comment.ValueString()
		} else {
			comment = nil
		}
		var additionalProperties1 interface{}
		if !commentsItem.AdditionalProperties.IsUnknown() && !commentsItem.AdditionalProperties.IsNull() {
			_ = json.Unmarshal([]byte(commentsItem.AdditionalProperties.ValueString()), &additionalProperties1)
		}
		comments = append(comments, shared.Comment{
			Comment:              comment,
			AdditionalProperties: additionalProperties1,
		})
	}
	out := shared.RoutesInput{
		ID:       id,
		Routes:   routes,
		Groups:   groups,
		Comments: comments,
	}

	return &out, diags
}

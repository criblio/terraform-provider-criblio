// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk"
	speakeasy_listvalidators "github.com/criblio/terraform-provider-criblio/internal/validators/listvalidators"
	speakeasy_objectvalidators "github.com/criblio/terraform-provider-criblio/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/criblio/terraform-provider-criblio/internal/validators/stringvalidators"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"regexp"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &SearchDatasetProviderResource{}
var _ resource.ResourceWithImportState = &SearchDatasetProviderResource{}

func NewSearchDatasetProviderResource() resource.Resource {
	return &SearchDatasetProviderResource{}
}

// SearchDatasetProviderResource defines the resource implementation.
type SearchDatasetProviderResource struct {
	// Provider configured SDK client.
	client *sdk.CriblIo
}

// SearchDatasetProviderResourceModel describes the resource data model.
type SearchDatasetProviderResourceModel struct {
	APIAwsProvider               *tfTypes.APIAwsProvider               `queryParam:"inline" tfsdk:"api_aws_provider" tfPlanOnly:"true"`
	APIAzureDataExplorerProvider *tfTypes.APIAzureDataExplorerProvider `queryParam:"inline" tfsdk:"api_azure_data_explorer_provider" tfPlanOnly:"true"`
	APIAzureProvider             *tfTypes.APIAzureProvider             `queryParam:"inline" tfsdk:"api_azure_provider" tfPlanOnly:"true"`
	APIElasticSearchProvider     *tfTypes.APIElasticSearchProvider     `queryParam:"inline" tfsdk:"api_elastic_search_provider" tfPlanOnly:"true"`
	APIGcpProvider               *tfTypes.APIGcpProvider               `queryParam:"inline" tfsdk:"api_gcp_provider" tfPlanOnly:"true"`
	APIGoogleWorkspaceProvider   *tfTypes.APIGoogleWorkspaceProvider   `queryParam:"inline" tfsdk:"api_google_workspace_provider" tfPlanOnly:"true"`
	APIHTTPProvider              *tfTypes.APIHTTPProvider              `queryParam:"inline" tfsdk:"apihttp_provider" tfPlanOnly:"true"`
	APIMsGraphProvider           *tfTypes.APIMsGraphProvider           `queryParam:"inline" tfsdk:"api_ms_graph_provider" tfPlanOnly:"true"`
	APIOktaProvider              *tfTypes.APIOktaProvider              `queryParam:"inline" tfsdk:"api_okta_provider" tfPlanOnly:"true"`
	APIOpenSearchProvider        *tfTypes.APIOpenSearchProvider        `queryParam:"inline" tfsdk:"api_open_search_provider" tfPlanOnly:"true"`
	APITailscaleProvider         *tfTypes.APITailscaleProvider         `queryParam:"inline" tfsdk:"api_tailscale_provider" tfPlanOnly:"true"`
	APIZoomProvider              *tfTypes.APIZoomProvider              `queryParam:"inline" tfsdk:"api_zoom_provider" tfPlanOnly:"true"`
	AwsSecurityLakeProvider      *tfTypes.AwsSecurityLakeProvider      `queryParam:"inline" tfsdk:"aws_security_lake_provider" tfPlanOnly:"true"`
	AzureBlobProvider            *tfTypes.AzureBlobProvider            `queryParam:"inline" tfsdk:"azure_blob_provider" tfPlanOnly:"true"`
	ClickHouseProvider           *tfTypes.ClickHouseProvider           `queryParam:"inline" tfsdk:"click_house_provider" tfPlanOnly:"true"`
	CriblLeaderProvider          *tfTypes.CriblLeaderProvider          `queryParam:"inline" tfsdk:"cribl_leader_provider" tfPlanOnly:"true"`
	Description                  types.String                          `tfsdk:"description"`
	EdgeProvider                 *tfTypes.EdgeProvider                 `queryParam:"inline" tfsdk:"edge_provider" tfPlanOnly:"true"`
	GcsProvider                  *tfTypes.GcsProvider                  `queryParam:"inline" tfsdk:"gcs_provider" tfPlanOnly:"true"`
	ID                           types.String                          `tfsdk:"id"`
	MetaProvider                 *tfTypes.MetaProvider                 `queryParam:"inline" tfsdk:"meta_provider" tfPlanOnly:"true"`
	PrometheusProvider           *tfTypes.PrometheusProvider           `queryParam:"inline" tfsdk:"prometheus_provider" tfPlanOnly:"true"`
	S3Provider                   *tfTypes.S3Provider                   `queryParam:"inline" tfsdk:"s3_provider" tfPlanOnly:"true"`
	SnowflakeProvider            *tfTypes.SnowflakeProvider            `queryParam:"inline" tfsdk:"snowflake_provider" tfPlanOnly:"true"`
	Type                         types.String                          `tfsdk:"type"`
}

func (r *SearchDatasetProviderResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_search_dataset_provider"
}

func (r *SearchDatasetProviderResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SearchDatasetProvider Resource",
		Attributes: map[string]schema.Attribute{
			"api_aws_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"account_configs": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"assume_role_arn": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `ARN of the role to assume`,
								},
								"assume_role_external_id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `External ID for role assumption`,
								},
								"aws_api_key": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `AWS access key`,
								},
								"aws_secret_key": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `AWS secret key`,
								},
								"name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Account name. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
							},
						},
						Description: `A list of account configurations. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
						},
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"api_azure_data_explorer_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"client_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The Client ID (also known as Secret ID) of the authorized application. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"client_secret": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The Client Secret of the authorized application. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"tenant_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The Tenant ID of the authorized application. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"api_azure_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"account_configs": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"client_id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The clientId of the service principal. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.UTF8LengthAtLeast(1),
									},
								},
								"client_secret": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The client secret of the service principal. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.UTF8LengthAtLeast(1),
									},
								},
								"name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Account name. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"tenant_id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The ID of your Azure tenant. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.UTF8LengthAtLeast(1),
									},
								},
							},
						},
						Description: `A list of account configurations. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
						},
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"api_elastic_search_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"endpoint": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Elasticsearch API endpoint URL. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"password": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Elasticsearch password for authentication. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"username": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Elasticsearch username for authentication. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"api_gcp_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"account_configs": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Account name. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"service_account_credentials": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `JSON blob downloaded from the Google Cloud Console, containing creds for a service account. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
							},
						},
						Description: `A list of account configurations. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
						},
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"api_google_workspace_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"account_configs": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"service_account_credentials": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Contents of Google Cloud service account credentials (JSON keys) file. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.UTF8LengthAtLeast(1),
									},
								},
								"subject": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Email matching Google service account of the authorized principal whose role this integration is assuming. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
							},
						},
						Description: `A list of account configurations. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
						},
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"apihttp_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"authentication_method": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Default:     stringdefault.StaticString(`none`),
						Description: `The authentication method for API calls. Default: "none"; must be one of ["none", "basic", "login", "oauth"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"none",
								"basic",
								"login",
								"oauth",
							),
						},
					},
					"available_endpoints": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"data_field": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Within the response JSON, name of the field or array element to pull results from`,
								},
								"headers": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"name": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Header name. Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
												},
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Header value. Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
												},
											},
										},
									},
									Description: `Optional headers for the endpoint`,
								},
								"method": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Default:     stringdefault.StaticString(`GET`),
									Description: `Method for the endpoint. Default: "GET"; must be one of ["GET", "POST"]`,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"GET",
											"POST",
										),
									},
								},
								"name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"url": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The URL for this endpoint. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
							},
						},
						Description: `A list of the available endpoints for this provider. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
						},
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"api_ms_graph_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"account_configs": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"client_id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"client_secret": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Azure account name. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"tenant_id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
							},
						},
						Description: `A list of account configurations. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
						},
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"api_okta_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"account_configs": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"api_token": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `API token for authorizing requests. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"domain_endpoint": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `URL for the subdomain of your organization. Example: subdomain.okta.com. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Okta account name. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
							},
						},
						Description: `A list of account configurations. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
						},
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"api_open_search_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"endpoint": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `OpenSearch API endpoint URL. Example: https://opensearch.mycompany.com. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"password": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `OpenSearch password for authentication. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"username": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `OpenSearch username for authentication. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"api_tailscale_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"account_configs": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"client_id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Client ID string. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"client_secret": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Client secret string. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Tailscale account name. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
							},
						},
						Description: `A list of account configuration. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
						},
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"api_zoom_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"account_configs": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"account_id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Zoom account ID. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"client_id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Client ID string. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"client_secret": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Client secret string. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Zoom account name. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
							},
						},
						Description: `A list of account configurations. Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
						},
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"aws_security_lake_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"azure_blob_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"authentication_method": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Default:     stringdefault.StaticString(`connection_string`),
						Description: `Azure Storage authentication method. Default: "connection_string"; must be one of ["connection_string", "blob_sas_url", "client_secret"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"connection_string",
								"blob_sas_url",
								"client_secret",
							),
						},
					},
					"client_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The service principal's client ID`,
					},
					"client_secret": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The service principal's client secret`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"connection_string": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Storage account connection string`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"location": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Primary region in which the storage account is located. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"sas_configs": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"blob_sas_url": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Container-specific Blob SAS URL. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"container_name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Name of the Azure Blob Storage container. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
							},
						},
						Description: `A list of container-specific SAS configurations`,
					},
					"storage_account_name": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The name of your Azure storage account`,
					},
					"tenant_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The service principal's tenant ID`,
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"click_house_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"endpoint": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `URL to ClickHouse server with HTTP interface enabled. Ideally should be HTTPS over port 8443. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"password": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The ClickHouse user password for authentication`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"username": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The ClickHouse username for authentication. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"cribl_leader_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Description: `Description of the provider`,
			},
			"edge_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"gcs_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"endpoint": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Google Cloud Storage service endpoint`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"service_account_credentials": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Contents of Google Cloud service account credentials (JSON keys) file. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `Unique identifier for the provider`,
			},
			"meta_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"prometheus_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"auth_type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Default:     stringdefault.StaticString(`none`),
						Description: `Default: "none"; must be one of ["none", "basic", "token"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"none",
								"basic",
								"token",
							),
						},
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"endpoint": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Prometheus API endpoint URL. Example: https://prometheus.goats.biz. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.RegexMatches(regexp.MustCompile(`^https?://.+`), "must match pattern "+regexp.MustCompile(`^https?://.+`).String()),
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"max_concurrency": schema.Float64Attribute{
						Computed:    true,
						Optional:    true,
						Default:     float64default.StaticFloat64(3),
						Description: `Maximum number of concurrent API requests. Default: 3`,
					},
					"password": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Basic auth password`,
					},
					"token": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Bearer token`,
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"username": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Basic auth username`,
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"s3_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"assume_role_arn": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `ARN of the role to assume`,
					},
					"assume_role_external_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `External ID for role assumption`,
					},
					"aws_api_key": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `AWS access key`,
					},
					"aws_authentication_method": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `AWS authentication method. must be one of ["auto", "manual"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"auto",
								"manual",
							),
						},
					},
					"aws_secret_key": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `AWS secret key`,
					},
					"bucket": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `S3 bucket name`,
					},
					"bucket_path_suggestion": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Suggested bucket path`,
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"enable_abac_tagging": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Whether to enable ABAC source-ip tagging`,
					},
					"enable_assume_role": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Whether to enable role assumption`,
					},
					"endpoint": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `S3 endpoint URL`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"region": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `AWS region`,
					},
					"reject_unauthorized": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Whether to reject unauthorized requests`,
					},
					"reuse_connections": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Whether to reuse connections`,
					},
					"session_token": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `AWS session token`,
					},
					"signature_version": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `AWS signature version. Not Null; must be one of ["v2", "v4"]`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.OneOf("v2", "v4"),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("snowflake_provider"),
					}...),
				},
			},
			"snowflake_provider": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"account_identifier": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The Snowflake account identifier, in the format <orgname>-<account_name>. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"description": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Description of the provider`,
					},
					"endpoint": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Optional endpoint to override default REST API endpoint`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Unique identifier for the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"max_concurrency": schema.Int64Attribute{
						Computed:    true,
						Optional:    true,
						Description: `Total number of concurrent executors for processing Snowflake partitions`,
					},
					"passphrase": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The key password for the private key`,
					},
					"priv_key": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The private key string out of the key file, from the pair of keys generated for authentication. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Type of the provider. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"username": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The Snowflake user for key pair authentication. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("api_aws_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_data_explorer_provider"),
						path.MatchRelative().AtParent().AtName("api_azure_provider"),
						path.MatchRelative().AtParent().AtName("api_elastic_search_provider"),
						path.MatchRelative().AtParent().AtName("api_gcp_provider"),
						path.MatchRelative().AtParent().AtName("api_google_workspace_provider"),
						path.MatchRelative().AtParent().AtName("apihttp_provider"),
						path.MatchRelative().AtParent().AtName("api_ms_graph_provider"),
						path.MatchRelative().AtParent().AtName("api_okta_provider"),
						path.MatchRelative().AtParent().AtName("api_open_search_provider"),
						path.MatchRelative().AtParent().AtName("api_tailscale_provider"),
						path.MatchRelative().AtParent().AtName("api_zoom_provider"),
						path.MatchRelative().AtParent().AtName("aws_security_lake_provider"),
						path.MatchRelative().AtParent().AtName("azure_blob_provider"),
						path.MatchRelative().AtParent().AtName("click_house_provider"),
						path.MatchRelative().AtParent().AtName("cribl_leader_provider"),
						path.MatchRelative().AtParent().AtName("edge_provider"),
						path.MatchRelative().AtParent().AtName("gcs_provider"),
						path.MatchRelative().AtParent().AtName("meta_provider"),
						path.MatchRelative().AtParent().AtName("prometheus_provider"),
						path.MatchRelative().AtParent().AtName("s3_provider"),
					}...),
				},
			},
			"type": schema.StringAttribute{
				Computed:    true,
				Description: `Type of the provider`,
			},
		},
	}
}

func (r *SearchDatasetProviderResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.CriblIo)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.CriblIo, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SearchDatasetProviderResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *SearchDatasetProviderResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedGenericProvider(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Datasets.CreateDatasetProvider(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Items != nil && len(res.Object.Items) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedGenericProvider(ctx, &res.Object.Items[0])...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SearchDatasetProviderResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *SearchDatasetProviderResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetDatasetProviderByIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Datasets.GetDatasetProviderByID(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Items != nil && len(res.Object.Items) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedGenericProvider(ctx, &res.Object.Items[0])...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SearchDatasetProviderResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *SearchDatasetProviderResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateDatasetProviderByIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Datasets.UpdateDatasetProviderByID(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Items != nil && len(res.Object.Items) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedGenericProvider(ctx, &res.Object.Items[0])...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SearchDatasetProviderResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *SearchDatasetProviderResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteDatasetProviderByIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Datasets.DeleteDatasetProviderByID(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *SearchDatasetProviderResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}

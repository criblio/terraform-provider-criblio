// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/criblio/terraform-provider-criblio/internal/provider/types"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/operations"
	"github.com/criblio/terraform-provider-criblio/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *AppscopeConfigResourceModel) RefreshFromSharedAppscopeLibEntry(ctx context.Context, resp *shared.AppscopeLibEntry) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp.Config.Cribl == nil {
		r.Config.Cribl = nil
	} else {
		r.Config.Cribl = &tfTypes.AppscopeConfigWithCustomCribl{}
		r.Config.Cribl.Authtoken = types.StringPointerValue(resp.Config.Cribl.Authtoken)
		r.Config.Cribl.Enable = types.BoolPointerValue(resp.Config.Cribl.Enable)
		if resp.Config.Cribl.Transport == nil {
			r.Config.Cribl.Transport = nil
		} else {
			r.Config.Cribl.Transport = &tfTypes.AppscopeTransport{}
			if resp.Config.Cribl.Transport.Buffer != nil {
				r.Config.Cribl.Transport.Buffer = types.StringValue(string(*resp.Config.Cribl.Transport.Buffer))
			} else {
				r.Config.Cribl.Transport.Buffer = types.StringNull()
			}
			r.Config.Cribl.Transport.Host = types.StringPointerValue(resp.Config.Cribl.Transport.Host)
			r.Config.Cribl.Transport.Path = types.StringPointerValue(resp.Config.Cribl.Transport.Path)
			r.Config.Cribl.Transport.Port = types.Float64PointerValue(resp.Config.Cribl.Transport.Port)
			if resp.Config.Cribl.Transport.TLS == nil {
				r.Config.Cribl.Transport.TLS = nil
			} else {
				r.Config.Cribl.Transport.TLS = &tfTypes.AppscopeTransportTLS{}
				r.Config.Cribl.Transport.TLS.Cacertpath = types.StringPointerValue(resp.Config.Cribl.Transport.TLS.Cacertpath)
				r.Config.Cribl.Transport.TLS.Enable = types.BoolPointerValue(resp.Config.Cribl.Transport.TLS.Enable)
				r.Config.Cribl.Transport.TLS.Validateserver = types.BoolPointerValue(resp.Config.Cribl.Transport.TLS.Validateserver)
			}
			r.Config.Cribl.Transport.Type = types.StringPointerValue(resp.Config.Cribl.Transport.Type)
		}
		r.Config.Cribl.UseScopeSourceTransport = types.BoolPointerValue(resp.Config.Cribl.UseScopeSourceTransport)
	}
	r.Config.Custom = []tfTypes.AppscopeCustom{}

	for _, customItem := range resp.Config.Custom {
		var custom tfTypes.AppscopeCustom

		custom.Ancestor = types.StringPointerValue(customItem.Ancestor)
		custom.Arg = types.StringPointerValue(customItem.Arg)
		if customItem.Config.Cribl == nil {
			custom.Config.Cribl = nil
		} else {
			custom.Config.Cribl = &tfTypes.AppscopeConfigCribl{}
			custom.Config.Cribl.Authtoken = types.StringPointerValue(customItem.Config.Cribl.Authtoken)
			custom.Config.Cribl.Enable = types.BoolPointerValue(customItem.Config.Cribl.Enable)
			if customItem.Config.Cribl.Transport == nil {
				custom.Config.Cribl.Transport = nil
			} else {
				custom.Config.Cribl.Transport = &tfTypes.AppscopeTransport{}
				if customItem.Config.Cribl.Transport.Buffer != nil {
					custom.Config.Cribl.Transport.Buffer = types.StringValue(string(*customItem.Config.Cribl.Transport.Buffer))
				} else {
					custom.Config.Cribl.Transport.Buffer = types.StringNull()
				}
				custom.Config.Cribl.Transport.Host = types.StringPointerValue(customItem.Config.Cribl.Transport.Host)
				custom.Config.Cribl.Transport.Path = types.StringPointerValue(customItem.Config.Cribl.Transport.Path)
				custom.Config.Cribl.Transport.Port = types.Float64PointerValue(customItem.Config.Cribl.Transport.Port)
				if customItem.Config.Cribl.Transport.TLS == nil {
					custom.Config.Cribl.Transport.TLS = nil
				} else {
					custom.Config.Cribl.Transport.TLS = &tfTypes.AppscopeTransportTLS{}
					custom.Config.Cribl.Transport.TLS.Cacertpath = types.StringPointerValue(customItem.Config.Cribl.Transport.TLS.Cacertpath)
					custom.Config.Cribl.Transport.TLS.Enable = types.BoolPointerValue(customItem.Config.Cribl.Transport.TLS.Enable)
					custom.Config.Cribl.Transport.TLS.Validateserver = types.BoolPointerValue(customItem.Config.Cribl.Transport.TLS.Validateserver)
				}
				custom.Config.Cribl.Transport.Type = types.StringPointerValue(customItem.Config.Cribl.Transport.Type)
			}
			custom.Config.Cribl.UseScopeSourceTransport = types.BoolPointerValue(customItem.Config.Cribl.UseScopeSourceTransport)
		}
		if customItem.Config.Event == nil {
			custom.Config.Event = nil
		} else {
			custom.Config.Event = &tfTypes.AppscopeConfigEvent{}
			custom.Config.Event.Enable = types.BoolValue(customItem.Config.Event.Enable)
			custom.Config.Event.Format.Enhancefs = types.BoolValue(customItem.Config.Event.Format.Enhancefs)
			custom.Config.Event.Format.Maxeventpersec = types.Float64Value(customItem.Config.Event.Format.Maxeventpersec)
			if customItem.Config.Event.Transport.Buffer != nil {
				custom.Config.Event.Transport.Buffer = types.StringValue(string(*customItem.Config.Event.Transport.Buffer))
			} else {
				custom.Config.Event.Transport.Buffer = types.StringNull()
			}
			custom.Config.Event.Transport.Host = types.StringPointerValue(customItem.Config.Event.Transport.Host)
			custom.Config.Event.Transport.Path = types.StringPointerValue(customItem.Config.Event.Transport.Path)
			custom.Config.Event.Transport.Port = types.Float64PointerValue(customItem.Config.Event.Transport.Port)
			if customItem.Config.Event.Transport.TLS == nil {
				custom.Config.Event.Transport.TLS = nil
			} else {
				custom.Config.Event.Transport.TLS = &tfTypes.AppscopeTransportTLS{}
				custom.Config.Event.Transport.TLS.Cacertpath = types.StringPointerValue(customItem.Config.Event.Transport.TLS.Cacertpath)
				custom.Config.Event.Transport.TLS.Enable = types.BoolPointerValue(customItem.Config.Event.Transport.TLS.Enable)
				custom.Config.Event.Transport.TLS.Validateserver = types.BoolPointerValue(customItem.Config.Event.Transport.TLS.Validateserver)
			}
			custom.Config.Event.Transport.Type = types.StringPointerValue(customItem.Config.Event.Transport.Type)
			custom.Config.Event.Type = types.StringValue(string(customItem.Config.Event.Type))
			custom.Config.Event.Watch = []tfTypes.AppscopeConfigWatchNdjson{}

			for _, watchItem := range customItem.Config.Event.Watch {
				var watch tfTypes.AppscopeConfigWatchNdjson

				watch.Allowbinary = types.BoolPointerValue(watchItem.Allowbinary)
				watch.Enabled = types.BoolPointerValue(watchItem.Enabled)
				watch.Field = types.StringPointerValue(watchItem.Field)
				watch.Headers = make([]types.String, 0, len(watchItem.Headers))
				for _, v := range watchItem.Headers {
					watch.Headers = append(watch.Headers, types.StringValue(v))
				}
				watch.Name = types.StringPointerValue(watchItem.Name)
				watch.Type = types.StringValue(watchItem.Type)
				watch.Value = types.StringPointerValue(watchItem.Value)

				custom.Config.Event.Watch = append(custom.Config.Event.Watch, watch)
			}
		}
		if customItem.Config.Libscope == nil {
			custom.Config.Libscope = nil
		} else {
			custom.Config.Libscope = &tfTypes.AppscopeConfigLibscope{}
			custom.Config.Libscope.Commanddir = types.StringPointerValue(customItem.Config.Libscope.Commanddir)
			custom.Config.Libscope.Configevent = types.BoolPointerValue(customItem.Config.Libscope.Configevent)
			if customItem.Config.Libscope.Log == nil {
				custom.Config.Libscope.Log = nil
			} else {
				custom.Config.Libscope.Log = &tfTypes.AppscopeConfigLog{}
				if customItem.Config.Libscope.Log.Level != nil {
					custom.Config.Libscope.Log.Level = types.StringValue(string(*customItem.Config.Libscope.Log.Level))
				} else {
					custom.Config.Libscope.Log.Level = types.StringNull()
				}
				if customItem.Config.Libscope.Log.Transport == nil {
					custom.Config.Libscope.Log.Transport = nil
				} else {
					custom.Config.Libscope.Log.Transport = &tfTypes.AppscopeTransport{}
					if customItem.Config.Libscope.Log.Transport.Buffer != nil {
						custom.Config.Libscope.Log.Transport.Buffer = types.StringValue(string(*customItem.Config.Libscope.Log.Transport.Buffer))
					} else {
						custom.Config.Libscope.Log.Transport.Buffer = types.StringNull()
					}
					custom.Config.Libscope.Log.Transport.Host = types.StringPointerValue(customItem.Config.Libscope.Log.Transport.Host)
					custom.Config.Libscope.Log.Transport.Path = types.StringPointerValue(customItem.Config.Libscope.Log.Transport.Path)
					custom.Config.Libscope.Log.Transport.Port = types.Float64PointerValue(customItem.Config.Libscope.Log.Transport.Port)
					if customItem.Config.Libscope.Log.Transport.TLS == nil {
						custom.Config.Libscope.Log.Transport.TLS = nil
					} else {
						custom.Config.Libscope.Log.Transport.TLS = &tfTypes.AppscopeTransportTLS{}
						custom.Config.Libscope.Log.Transport.TLS.Cacertpath = types.StringPointerValue(customItem.Config.Libscope.Log.Transport.TLS.Cacertpath)
						custom.Config.Libscope.Log.Transport.TLS.Enable = types.BoolPointerValue(customItem.Config.Libscope.Log.Transport.TLS.Enable)
						custom.Config.Libscope.Log.Transport.TLS.Validateserver = types.BoolPointerValue(customItem.Config.Libscope.Log.Transport.TLS.Validateserver)
					}
					custom.Config.Libscope.Log.Transport.Type = types.StringPointerValue(customItem.Config.Libscope.Log.Transport.Type)
				}
			}
			custom.Config.Libscope.Summaryperiod = types.Float64PointerValue(customItem.Config.Libscope.Summaryperiod)
		}
		if customItem.Config.Metric == nil {
			custom.Config.Metric = nil
		} else {
			custom.Config.Metric = &tfTypes.AppscopeConfigMetric{}
			custom.Config.Metric.Enable = types.BoolValue(customItem.Config.Metric.Enable)
			custom.Config.Metric.Format.Statsdmaxlen = types.Float64PointerValue(customItem.Config.Metric.Format.Statsdmaxlen)
			custom.Config.Metric.Format.Statsdprefix = types.StringPointerValue(customItem.Config.Metric.Format.Statsdprefix)
			custom.Config.Metric.Format.Type = types.StringPointerValue(customItem.Config.Metric.Format.Type)
			custom.Config.Metric.Format.Verbosity = types.Float64PointerValue(customItem.Config.Metric.Format.Verbosity)
			if customItem.Config.Metric.Transport.Buffer != nil {
				custom.Config.Metric.Transport.Buffer = types.StringValue(string(*customItem.Config.Metric.Transport.Buffer))
			} else {
				custom.Config.Metric.Transport.Buffer = types.StringNull()
			}
			custom.Config.Metric.Transport.Host = types.StringPointerValue(customItem.Config.Metric.Transport.Host)
			custom.Config.Metric.Transport.Path = types.StringPointerValue(customItem.Config.Metric.Transport.Path)
			custom.Config.Metric.Transport.Port = types.Float64PointerValue(customItem.Config.Metric.Transport.Port)
			if customItem.Config.Metric.Transport.TLS == nil {
				custom.Config.Metric.Transport.TLS = nil
			} else {
				custom.Config.Metric.Transport.TLS = &tfTypes.AppscopeTransportTLS{}
				custom.Config.Metric.Transport.TLS.Cacertpath = types.StringPointerValue(customItem.Config.Metric.Transport.TLS.Cacertpath)
				custom.Config.Metric.Transport.TLS.Enable = types.BoolPointerValue(customItem.Config.Metric.Transport.TLS.Enable)
				custom.Config.Metric.Transport.TLS.Validateserver = types.BoolPointerValue(customItem.Config.Metric.Transport.TLS.Validateserver)
			}
			custom.Config.Metric.Transport.Type = types.StringPointerValue(customItem.Config.Metric.Transport.Type)
		}
		if customItem.Config.Payload == nil {
			custom.Config.Payload = nil
		} else {
			custom.Config.Payload = &tfTypes.AppscopeConfigPayload{}
			custom.Config.Payload.Dir = types.StringValue(customItem.Config.Payload.Dir)
			custom.Config.Payload.Enable = types.BoolValue(customItem.Config.Payload.Enable)
		}
		custom.Config.Protocol = []tfTypes.AppscopeConfigProtocol{}

		for _, protocolItem := range customItem.Config.Protocol {
			var protocol tfTypes.AppscopeConfigProtocol

			protocol.Binary = types.BoolValue(protocolItem.Binary)
			protocol.Detect = types.BoolValue(protocolItem.Detect)
			protocol.Len = types.Float64Value(protocolItem.Len)
			protocol.Name = types.StringValue(protocolItem.Name)
			protocol.Payload = types.BoolValue(protocolItem.Payload)
			protocol.Regex = types.StringValue(protocolItem.Regex)

			custom.Config.Protocol = append(custom.Config.Protocol, protocol)
		}
		custom.Config.Tags = []tfTypes.AppscopeConfigTag{}

		for _, tagsItem := range customItem.Config.Tags {
			var tags tfTypes.AppscopeConfigTag

			tags.Key = types.StringValue(tagsItem.Key)
			tags.Value = types.StringValue(tagsItem.Value)

			custom.Config.Tags = append(custom.Config.Tags, tags)
		}
		custom.Env = types.StringPointerValue(customItem.Env)
		custom.Hostname = types.StringPointerValue(customItem.Hostname)
		custom.Procname = types.StringPointerValue(customItem.Procname)
		custom.Username = types.StringPointerValue(customItem.Username)

		r.Config.Custom = append(r.Config.Custom, custom)
	}
	if resp.Config.Event == nil {
		r.Config.Event = nil
	} else {
		r.Config.Event = &tfTypes.AppscopeConfigWithCustomEvent{}
		r.Config.Event.Enable = types.BoolValue(resp.Config.Event.Enable)
		r.Config.Event.Format.Enhancefs = types.BoolValue(resp.Config.Event.Format.Enhancefs)
		r.Config.Event.Format.Maxeventpersec = types.Float64Value(resp.Config.Event.Format.Maxeventpersec)
		if resp.Config.Event.Transport.Buffer != nil {
			r.Config.Event.Transport.Buffer = types.StringValue(string(*resp.Config.Event.Transport.Buffer))
		} else {
			r.Config.Event.Transport.Buffer = types.StringNull()
		}
		r.Config.Event.Transport.Host = types.StringPointerValue(resp.Config.Event.Transport.Host)
		r.Config.Event.Transport.Path = types.StringPointerValue(resp.Config.Event.Transport.Path)
		r.Config.Event.Transport.Port = types.Float64PointerValue(resp.Config.Event.Transport.Port)
		if resp.Config.Event.Transport.TLS == nil {
			r.Config.Event.Transport.TLS = nil
		} else {
			r.Config.Event.Transport.TLS = &tfTypes.AppscopeTransportTLS{}
			r.Config.Event.Transport.TLS.Cacertpath = types.StringPointerValue(resp.Config.Event.Transport.TLS.Cacertpath)
			r.Config.Event.Transport.TLS.Enable = types.BoolPointerValue(resp.Config.Event.Transport.TLS.Enable)
			r.Config.Event.Transport.TLS.Validateserver = types.BoolPointerValue(resp.Config.Event.Transport.TLS.Validateserver)
		}
		r.Config.Event.Transport.Type = types.StringPointerValue(resp.Config.Event.Transport.Type)
		r.Config.Event.Type = types.StringValue(string(resp.Config.Event.Type))
		r.Config.Event.Watch = []tfTypes.AppscopeConfigWithCustomWatchNdjson{}

		for _, watchItem1 := range resp.Config.Event.Watch {
			var watch1 tfTypes.AppscopeConfigWithCustomWatchNdjson

			watch1.Allowbinary = types.BoolPointerValue(watchItem1.Allowbinary)
			watch1.Enabled = types.BoolPointerValue(watchItem1.Enabled)
			watch1.Field = types.StringPointerValue(watchItem1.Field)
			watch1.Headers = make([]types.String, 0, len(watchItem1.Headers))
			for _, v := range watchItem1.Headers {
				watch1.Headers = append(watch1.Headers, types.StringValue(v))
			}
			watch1.Name = types.StringPointerValue(watchItem1.Name)
			watch1.Type = types.StringValue(watchItem1.Type)
			watch1.Value = types.StringPointerValue(watchItem1.Value)

			r.Config.Event.Watch = append(r.Config.Event.Watch, watch1)
		}
	}
	if resp.Config.Libscope == nil {
		r.Config.Libscope = nil
	} else {
		r.Config.Libscope = &tfTypes.AppscopeConfigWithCustomLibscope{}
		r.Config.Libscope.Commanddir = types.StringPointerValue(resp.Config.Libscope.Commanddir)
		r.Config.Libscope.Configevent = types.BoolPointerValue(resp.Config.Libscope.Configevent)
		if resp.Config.Libscope.Log == nil {
			r.Config.Libscope.Log = nil
		} else {
			r.Config.Libscope.Log = &tfTypes.AppscopeConfigWithCustomLog{}
			if resp.Config.Libscope.Log.Level != nil {
				r.Config.Libscope.Log.Level = types.StringValue(string(*resp.Config.Libscope.Log.Level))
			} else {
				r.Config.Libscope.Log.Level = types.StringNull()
			}
			if resp.Config.Libscope.Log.Transport == nil {
				r.Config.Libscope.Log.Transport = nil
			} else {
				r.Config.Libscope.Log.Transport = &tfTypes.AppscopeTransport{}
				if resp.Config.Libscope.Log.Transport.Buffer != nil {
					r.Config.Libscope.Log.Transport.Buffer = types.StringValue(string(*resp.Config.Libscope.Log.Transport.Buffer))
				} else {
					r.Config.Libscope.Log.Transport.Buffer = types.StringNull()
				}
				r.Config.Libscope.Log.Transport.Host = types.StringPointerValue(resp.Config.Libscope.Log.Transport.Host)
				r.Config.Libscope.Log.Transport.Path = types.StringPointerValue(resp.Config.Libscope.Log.Transport.Path)
				r.Config.Libscope.Log.Transport.Port = types.Float64PointerValue(resp.Config.Libscope.Log.Transport.Port)
				if resp.Config.Libscope.Log.Transport.TLS == nil {
					r.Config.Libscope.Log.Transport.TLS = nil
				} else {
					r.Config.Libscope.Log.Transport.TLS = &tfTypes.AppscopeTransportTLS{}
					r.Config.Libscope.Log.Transport.TLS.Cacertpath = types.StringPointerValue(resp.Config.Libscope.Log.Transport.TLS.Cacertpath)
					r.Config.Libscope.Log.Transport.TLS.Enable = types.BoolPointerValue(resp.Config.Libscope.Log.Transport.TLS.Enable)
					r.Config.Libscope.Log.Transport.TLS.Validateserver = types.BoolPointerValue(resp.Config.Libscope.Log.Transport.TLS.Validateserver)
				}
				r.Config.Libscope.Log.Transport.Type = types.StringPointerValue(resp.Config.Libscope.Log.Transport.Type)
			}
		}
		r.Config.Libscope.Summaryperiod = types.Float64PointerValue(resp.Config.Libscope.Summaryperiod)
	}
	if resp.Config.Metric == nil {
		r.Config.Metric = nil
	} else {
		r.Config.Metric = &tfTypes.AppscopeConfigWithCustomMetric{}
		r.Config.Metric.Enable = types.BoolValue(resp.Config.Metric.Enable)
		r.Config.Metric.Format.Statsdmaxlen = types.Float64PointerValue(resp.Config.Metric.Format.Statsdmaxlen)
		r.Config.Metric.Format.Statsdprefix = types.StringPointerValue(resp.Config.Metric.Format.Statsdprefix)
		r.Config.Metric.Format.Type = types.StringPointerValue(resp.Config.Metric.Format.Type)
		r.Config.Metric.Format.Verbosity = types.Float64PointerValue(resp.Config.Metric.Format.Verbosity)
		if resp.Config.Metric.Transport.Buffer != nil {
			r.Config.Metric.Transport.Buffer = types.StringValue(string(*resp.Config.Metric.Transport.Buffer))
		} else {
			r.Config.Metric.Transport.Buffer = types.StringNull()
		}
		r.Config.Metric.Transport.Host = types.StringPointerValue(resp.Config.Metric.Transport.Host)
		r.Config.Metric.Transport.Path = types.StringPointerValue(resp.Config.Metric.Transport.Path)
		r.Config.Metric.Transport.Port = types.Float64PointerValue(resp.Config.Metric.Transport.Port)
		if resp.Config.Metric.Transport.TLS == nil {
			r.Config.Metric.Transport.TLS = nil
		} else {
			r.Config.Metric.Transport.TLS = &tfTypes.AppscopeTransportTLS{}
			r.Config.Metric.Transport.TLS.Cacertpath = types.StringPointerValue(resp.Config.Metric.Transport.TLS.Cacertpath)
			r.Config.Metric.Transport.TLS.Enable = types.BoolPointerValue(resp.Config.Metric.Transport.TLS.Enable)
			r.Config.Metric.Transport.TLS.Validateserver = types.BoolPointerValue(resp.Config.Metric.Transport.TLS.Validateserver)
		}
		r.Config.Metric.Transport.Type = types.StringPointerValue(resp.Config.Metric.Transport.Type)
	}
	if resp.Config.Payload == nil {
		r.Config.Payload = nil
	} else {
		r.Config.Payload = &tfTypes.AppscopeConfigWithCustomPayload{}
		r.Config.Payload.Dir = types.StringValue(resp.Config.Payload.Dir)
		r.Config.Payload.Enable = types.BoolValue(resp.Config.Payload.Enable)
	}
	r.Config.Protocol = []tfTypes.AppscopeConfigWithCustomProtocol{}

	for _, protocolItem1 := range resp.Config.Protocol {
		var protocol1 tfTypes.AppscopeConfigWithCustomProtocol

		protocol1.Binary = types.BoolValue(protocolItem1.Binary)
		protocol1.Detect = types.BoolValue(protocolItem1.Detect)
		protocol1.Len = types.Float64Value(protocolItem1.Len)
		protocol1.Name = types.StringValue(protocolItem1.Name)
		protocol1.Payload = types.BoolValue(protocolItem1.Payload)
		protocol1.Regex = types.StringValue(protocolItem1.Regex)

		r.Config.Protocol = append(r.Config.Protocol, protocol1)
	}
	r.Config.Tags = []tfTypes.AppscopeConfigWithCustomTag{}

	for _, tagsItem1 := range resp.Config.Tags {
		var tags1 tfTypes.AppscopeConfigWithCustomTag

		tags1.Key = types.StringValue(tagsItem1.Key)
		tags1.Value = types.StringValue(tagsItem1.Value)

		r.Config.Tags = append(r.Config.Tags, tags1)
	}
	r.Description = types.StringPointerValue(resp.Description)
	r.ID = types.StringValue(resp.ID)
	if resp.Lib != nil {
		r.Lib = types.StringValue(string(*resp.Lib))
	} else {
		r.Lib = types.StringNull()
	}
	r.Tags = types.StringPointerValue(resp.Tags)

	return diags
}

func (r *AppscopeConfigResourceModel) ToOperationsCreateAppscopeLibEntryRequest(ctx context.Context) (*operations.CreateAppscopeLibEntryRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	appscopeLibEntry, appscopeLibEntryDiags := r.ToSharedAppscopeLibEntry(ctx)
	diags.Append(appscopeLibEntryDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAppscopeLibEntryRequest{
		GroupID:          groupID,
		AppscopeLibEntry: *appscopeLibEntry,
	}

	return &out, diags
}

func (r *AppscopeConfigResourceModel) ToOperationsDeleteAppscopeLibEntryByIDRequest(ctx context.Context) (*operations.DeleteAppscopeLibEntryByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.DeleteAppscopeLibEntryByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *AppscopeConfigResourceModel) ToOperationsGetAppscopeLibEntryByIDRequest(ctx context.Context) (*operations.GetAppscopeLibEntryByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.GetAppscopeLibEntryByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *AppscopeConfigResourceModel) ToOperationsUpdateAppscopeLibEntryByIDRequest(ctx context.Context) (*operations.UpdateAppscopeLibEntryByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	appscopeLibEntry, appscopeLibEntryDiags := r.ToSharedAppscopeLibEntry(ctx)
	diags.Append(appscopeLibEntryDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAppscopeLibEntryByIDRequest{
		ID:               id,
		GroupID:          groupID,
		AppscopeLibEntry: *appscopeLibEntry,
	}

	return &out, diags
}

func (r *AppscopeConfigResourceModel) ToSharedAppscopeLibEntry(ctx context.Context) (*shared.AppscopeLibEntry, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	tags := new(string)
	if !r.Tags.IsUnknown() && !r.Tags.IsNull() {
		*tags = r.Tags.ValueString()
	} else {
		tags = nil
	}
	var cribl *shared.AppscopeConfigWithCustomCribl
	if r.Config.Cribl != nil {
		authtoken := new(string)
		if !r.Config.Cribl.Authtoken.IsUnknown() && !r.Config.Cribl.Authtoken.IsNull() {
			*authtoken = r.Config.Cribl.Authtoken.ValueString()
		} else {
			authtoken = nil
		}
		enable := new(bool)
		if !r.Config.Cribl.Enable.IsUnknown() && !r.Config.Cribl.Enable.IsNull() {
			*enable = r.Config.Cribl.Enable.ValueBool()
		} else {
			enable = nil
		}
		var transport *shared.AppscopeTransport
		if r.Config.Cribl.Transport != nil {
			buffer := new(shared.Buffer)
			if !r.Config.Cribl.Transport.Buffer.IsUnknown() && !r.Config.Cribl.Transport.Buffer.IsNull() {
				*buffer = shared.Buffer(r.Config.Cribl.Transport.Buffer.ValueString())
			} else {
				buffer = nil
			}
			host := new(string)
			if !r.Config.Cribl.Transport.Host.IsUnknown() && !r.Config.Cribl.Transport.Host.IsNull() {
				*host = r.Config.Cribl.Transport.Host.ValueString()
			} else {
				host = nil
			}
			path := new(string)
			if !r.Config.Cribl.Transport.Path.IsUnknown() && !r.Config.Cribl.Transport.Path.IsNull() {
				*path = r.Config.Cribl.Transport.Path.ValueString()
			} else {
				path = nil
			}
			port := new(float64)
			if !r.Config.Cribl.Transport.Port.IsUnknown() && !r.Config.Cribl.Transport.Port.IsNull() {
				*port = r.Config.Cribl.Transport.Port.ValueFloat64()
			} else {
				port = nil
			}
			var tls *shared.AppscopeTransportTLS
			if r.Config.Cribl.Transport.TLS != nil {
				cacertpath := new(string)
				if !r.Config.Cribl.Transport.TLS.Cacertpath.IsUnknown() && !r.Config.Cribl.Transport.TLS.Cacertpath.IsNull() {
					*cacertpath = r.Config.Cribl.Transport.TLS.Cacertpath.ValueString()
				} else {
					cacertpath = nil
				}
				enable1 := new(bool)
				if !r.Config.Cribl.Transport.TLS.Enable.IsUnknown() && !r.Config.Cribl.Transport.TLS.Enable.IsNull() {
					*enable1 = r.Config.Cribl.Transport.TLS.Enable.ValueBool()
				} else {
					enable1 = nil
				}
				validateserver := new(bool)
				if !r.Config.Cribl.Transport.TLS.Validateserver.IsUnknown() && !r.Config.Cribl.Transport.TLS.Validateserver.IsNull() {
					*validateserver = r.Config.Cribl.Transport.TLS.Validateserver.ValueBool()
				} else {
					validateserver = nil
				}
				tls = &shared.AppscopeTransportTLS{
					Cacertpath:     cacertpath,
					Enable:         enable1,
					Validateserver: validateserver,
				}
			}
			typeVar := new(string)
			if !r.Config.Cribl.Transport.Type.IsUnknown() && !r.Config.Cribl.Transport.Type.IsNull() {
				*typeVar = r.Config.Cribl.Transport.Type.ValueString()
			} else {
				typeVar = nil
			}
			transport = &shared.AppscopeTransport{
				Buffer: buffer,
				Host:   host,
				Path:   path,
				Port:   port,
				TLS:    tls,
				Type:   typeVar,
			}
		}
		useScopeSourceTransport := new(bool)
		if !r.Config.Cribl.UseScopeSourceTransport.IsUnknown() && !r.Config.Cribl.UseScopeSourceTransport.IsNull() {
			*useScopeSourceTransport = r.Config.Cribl.UseScopeSourceTransport.ValueBool()
		} else {
			useScopeSourceTransport = nil
		}
		cribl = &shared.AppscopeConfigWithCustomCribl{
			Authtoken:               authtoken,
			Enable:                  enable,
			Transport:               transport,
			UseScopeSourceTransport: useScopeSourceTransport,
		}
	}
	custom := make([]shared.AppscopeCustom, 0, len(r.Config.Custom))
	for _, customItem := range r.Config.Custom {
		ancestor := new(string)
		if !customItem.Ancestor.IsUnknown() && !customItem.Ancestor.IsNull() {
			*ancestor = customItem.Ancestor.ValueString()
		} else {
			ancestor = nil
		}
		arg := new(string)
		if !customItem.Arg.IsUnknown() && !customItem.Arg.IsNull() {
			*arg = customItem.Arg.ValueString()
		} else {
			arg = nil
		}
		var cribl1 *shared.AppscopeConfigCribl
		if customItem.Config.Cribl != nil {
			authtoken1 := new(string)
			if !customItem.Config.Cribl.Authtoken.IsUnknown() && !customItem.Config.Cribl.Authtoken.IsNull() {
				*authtoken1 = customItem.Config.Cribl.Authtoken.ValueString()
			} else {
				authtoken1 = nil
			}
			enable2 := new(bool)
			if !customItem.Config.Cribl.Enable.IsUnknown() && !customItem.Config.Cribl.Enable.IsNull() {
				*enable2 = customItem.Config.Cribl.Enable.ValueBool()
			} else {
				enable2 = nil
			}
			var transport1 *shared.AppscopeTransport
			if customItem.Config.Cribl.Transport != nil {
				buffer1 := new(shared.Buffer)
				if !customItem.Config.Cribl.Transport.Buffer.IsUnknown() && !customItem.Config.Cribl.Transport.Buffer.IsNull() {
					*buffer1 = shared.Buffer(customItem.Config.Cribl.Transport.Buffer.ValueString())
				} else {
					buffer1 = nil
				}
				host1 := new(string)
				if !customItem.Config.Cribl.Transport.Host.IsUnknown() && !customItem.Config.Cribl.Transport.Host.IsNull() {
					*host1 = customItem.Config.Cribl.Transport.Host.ValueString()
				} else {
					host1 = nil
				}
				path1 := new(string)
				if !customItem.Config.Cribl.Transport.Path.IsUnknown() && !customItem.Config.Cribl.Transport.Path.IsNull() {
					*path1 = customItem.Config.Cribl.Transport.Path.ValueString()
				} else {
					path1 = nil
				}
				port1 := new(float64)
				if !customItem.Config.Cribl.Transport.Port.IsUnknown() && !customItem.Config.Cribl.Transport.Port.IsNull() {
					*port1 = customItem.Config.Cribl.Transport.Port.ValueFloat64()
				} else {
					port1 = nil
				}
				var tls1 *shared.AppscopeTransportTLS
				if customItem.Config.Cribl.Transport.TLS != nil {
					cacertpath1 := new(string)
					if !customItem.Config.Cribl.Transport.TLS.Cacertpath.IsUnknown() && !customItem.Config.Cribl.Transport.TLS.Cacertpath.IsNull() {
						*cacertpath1 = customItem.Config.Cribl.Transport.TLS.Cacertpath.ValueString()
					} else {
						cacertpath1 = nil
					}
					enable3 := new(bool)
					if !customItem.Config.Cribl.Transport.TLS.Enable.IsUnknown() && !customItem.Config.Cribl.Transport.TLS.Enable.IsNull() {
						*enable3 = customItem.Config.Cribl.Transport.TLS.Enable.ValueBool()
					} else {
						enable3 = nil
					}
					validateserver1 := new(bool)
					if !customItem.Config.Cribl.Transport.TLS.Validateserver.IsUnknown() && !customItem.Config.Cribl.Transport.TLS.Validateserver.IsNull() {
						*validateserver1 = customItem.Config.Cribl.Transport.TLS.Validateserver.ValueBool()
					} else {
						validateserver1 = nil
					}
					tls1 = &shared.AppscopeTransportTLS{
						Cacertpath:     cacertpath1,
						Enable:         enable3,
						Validateserver: validateserver1,
					}
				}
				typeVar1 := new(string)
				if !customItem.Config.Cribl.Transport.Type.IsUnknown() && !customItem.Config.Cribl.Transport.Type.IsNull() {
					*typeVar1 = customItem.Config.Cribl.Transport.Type.ValueString()
				} else {
					typeVar1 = nil
				}
				transport1 = &shared.AppscopeTransport{
					Buffer: buffer1,
					Host:   host1,
					Path:   path1,
					Port:   port1,
					TLS:    tls1,
					Type:   typeVar1,
				}
			}
			useScopeSourceTransport1 := new(bool)
			if !customItem.Config.Cribl.UseScopeSourceTransport.IsUnknown() && !customItem.Config.Cribl.UseScopeSourceTransport.IsNull() {
				*useScopeSourceTransport1 = customItem.Config.Cribl.UseScopeSourceTransport.ValueBool()
			} else {
				useScopeSourceTransport1 = nil
			}
			cribl1 = &shared.AppscopeConfigCribl{
				Authtoken:               authtoken1,
				Enable:                  enable2,
				Transport:               transport1,
				UseScopeSourceTransport: useScopeSourceTransport1,
			}
		}
		var event *shared.AppscopeConfigEvent
		if customItem.Config.Event != nil {
			var enable4 bool
			enable4 = customItem.Config.Event.Enable.ValueBool()

			var enhancefs bool
			enhancefs = customItem.Config.Event.Format.Enhancefs.ValueBool()

			var maxeventpersec float64
			maxeventpersec = customItem.Config.Event.Format.Maxeventpersec.ValueFloat64()

			format := shared.AppscopeConfigFormatNdjson{
				Enhancefs:      enhancefs,
				Maxeventpersec: maxeventpersec,
			}
			buffer2 := new(shared.Buffer)
			if !customItem.Config.Event.Transport.Buffer.IsUnknown() && !customItem.Config.Event.Transport.Buffer.IsNull() {
				*buffer2 = shared.Buffer(customItem.Config.Event.Transport.Buffer.ValueString())
			} else {
				buffer2 = nil
			}
			host2 := new(string)
			if !customItem.Config.Event.Transport.Host.IsUnknown() && !customItem.Config.Event.Transport.Host.IsNull() {
				*host2 = customItem.Config.Event.Transport.Host.ValueString()
			} else {
				host2 = nil
			}
			path2 := new(string)
			if !customItem.Config.Event.Transport.Path.IsUnknown() && !customItem.Config.Event.Transport.Path.IsNull() {
				*path2 = customItem.Config.Event.Transport.Path.ValueString()
			} else {
				path2 = nil
			}
			port2 := new(float64)
			if !customItem.Config.Event.Transport.Port.IsUnknown() && !customItem.Config.Event.Transport.Port.IsNull() {
				*port2 = customItem.Config.Event.Transport.Port.ValueFloat64()
			} else {
				port2 = nil
			}
			var tls2 *shared.AppscopeTransportTLS
			if customItem.Config.Event.Transport.TLS != nil {
				cacertpath2 := new(string)
				if !customItem.Config.Event.Transport.TLS.Cacertpath.IsUnknown() && !customItem.Config.Event.Transport.TLS.Cacertpath.IsNull() {
					*cacertpath2 = customItem.Config.Event.Transport.TLS.Cacertpath.ValueString()
				} else {
					cacertpath2 = nil
				}
				enable5 := new(bool)
				if !customItem.Config.Event.Transport.TLS.Enable.IsUnknown() && !customItem.Config.Event.Transport.TLS.Enable.IsNull() {
					*enable5 = customItem.Config.Event.Transport.TLS.Enable.ValueBool()
				} else {
					enable5 = nil
				}
				validateserver2 := new(bool)
				if !customItem.Config.Event.Transport.TLS.Validateserver.IsUnknown() && !customItem.Config.Event.Transport.TLS.Validateserver.IsNull() {
					*validateserver2 = customItem.Config.Event.Transport.TLS.Validateserver.ValueBool()
				} else {
					validateserver2 = nil
				}
				tls2 = &shared.AppscopeTransportTLS{
					Cacertpath:     cacertpath2,
					Enable:         enable5,
					Validateserver: validateserver2,
				}
			}
			typeVar2 := new(string)
			if !customItem.Config.Event.Transport.Type.IsUnknown() && !customItem.Config.Event.Transport.Type.IsNull() {
				*typeVar2 = customItem.Config.Event.Transport.Type.ValueString()
			} else {
				typeVar2 = nil
			}
			transport2 := shared.AppscopeTransport{
				Buffer: buffer2,
				Host:   host2,
				Path:   path2,
				Port:   port2,
				TLS:    tls2,
				Type:   typeVar2,
			}
			typeVar3 := shared.AppscopeConfigType(customItem.Config.Event.Type.ValueString())
			watch := make([]shared.AppscopeConfigWatchNdjson, 0, len(customItem.Config.Event.Watch))
			for _, watchItem := range customItem.Config.Event.Watch {
				allowbinary := new(bool)
				if !watchItem.Allowbinary.IsUnknown() && !watchItem.Allowbinary.IsNull() {
					*allowbinary = watchItem.Allowbinary.ValueBool()
				} else {
					allowbinary = nil
				}
				enabled := new(bool)
				if !watchItem.Enabled.IsUnknown() && !watchItem.Enabled.IsNull() {
					*enabled = watchItem.Enabled.ValueBool()
				} else {
					enabled = nil
				}
				field := new(string)
				if !watchItem.Field.IsUnknown() && !watchItem.Field.IsNull() {
					*field = watchItem.Field.ValueString()
				} else {
					field = nil
				}
				headers := make([]string, 0, len(watchItem.Headers))
				for _, headersItem := range watchItem.Headers {
					headers = append(headers, headersItem.ValueString())
				}
				name := new(string)
				if !watchItem.Name.IsUnknown() && !watchItem.Name.IsNull() {
					*name = watchItem.Name.ValueString()
				} else {
					name = nil
				}
				var type1 string
				type1 = watchItem.Type.ValueString()

				value := new(string)
				if !watchItem.Value.IsUnknown() && !watchItem.Value.IsNull() {
					*value = watchItem.Value.ValueString()
				} else {
					value = nil
				}
				watch = append(watch, shared.AppscopeConfigWatchNdjson{
					Allowbinary: allowbinary,
					Enabled:     enabled,
					Field:       field,
					Headers:     headers,
					Name:        name,
					Type:        type1,
					Value:       value,
				})
			}
			event = &shared.AppscopeConfigEvent{
				Enable:    enable4,
				Format:    format,
				Transport: transport2,
				Type:      typeVar3,
				Watch:     watch,
			}
		}
		var libscope *shared.AppscopeConfigLibscope
		if customItem.Config.Libscope != nil {
			commanddir := new(string)
			if !customItem.Config.Libscope.Commanddir.IsUnknown() && !customItem.Config.Libscope.Commanddir.IsNull() {
				*commanddir = customItem.Config.Libscope.Commanddir.ValueString()
			} else {
				commanddir = nil
			}
			configevent := new(bool)
			if !customItem.Config.Libscope.Configevent.IsUnknown() && !customItem.Config.Libscope.Configevent.IsNull() {
				*configevent = customItem.Config.Libscope.Configevent.ValueBool()
			} else {
				configevent = nil
			}
			var log *shared.AppscopeConfigLog
			if customItem.Config.Libscope.Log != nil {
				level := new(shared.AppscopeConfigLevel)
				if !customItem.Config.Libscope.Log.Level.IsUnknown() && !customItem.Config.Libscope.Log.Level.IsNull() {
					*level = shared.AppscopeConfigLevel(customItem.Config.Libscope.Log.Level.ValueString())
				} else {
					level = nil
				}
				var transport3 *shared.AppscopeTransport
				if customItem.Config.Libscope.Log.Transport != nil {
					buffer3 := new(shared.Buffer)
					if !customItem.Config.Libscope.Log.Transport.Buffer.IsUnknown() && !customItem.Config.Libscope.Log.Transport.Buffer.IsNull() {
						*buffer3 = shared.Buffer(customItem.Config.Libscope.Log.Transport.Buffer.ValueString())
					} else {
						buffer3 = nil
					}
					host3 := new(string)
					if !customItem.Config.Libscope.Log.Transport.Host.IsUnknown() && !customItem.Config.Libscope.Log.Transport.Host.IsNull() {
						*host3 = customItem.Config.Libscope.Log.Transport.Host.ValueString()
					} else {
						host3 = nil
					}
					path3 := new(string)
					if !customItem.Config.Libscope.Log.Transport.Path.IsUnknown() && !customItem.Config.Libscope.Log.Transport.Path.IsNull() {
						*path3 = customItem.Config.Libscope.Log.Transport.Path.ValueString()
					} else {
						path3 = nil
					}
					port3 := new(float64)
					if !customItem.Config.Libscope.Log.Transport.Port.IsUnknown() && !customItem.Config.Libscope.Log.Transport.Port.IsNull() {
						*port3 = customItem.Config.Libscope.Log.Transport.Port.ValueFloat64()
					} else {
						port3 = nil
					}
					var tls3 *shared.AppscopeTransportTLS
					if customItem.Config.Libscope.Log.Transport.TLS != nil {
						cacertpath3 := new(string)
						if !customItem.Config.Libscope.Log.Transport.TLS.Cacertpath.IsUnknown() && !customItem.Config.Libscope.Log.Transport.TLS.Cacertpath.IsNull() {
							*cacertpath3 = customItem.Config.Libscope.Log.Transport.TLS.Cacertpath.ValueString()
						} else {
							cacertpath3 = nil
						}
						enable6 := new(bool)
						if !customItem.Config.Libscope.Log.Transport.TLS.Enable.IsUnknown() && !customItem.Config.Libscope.Log.Transport.TLS.Enable.IsNull() {
							*enable6 = customItem.Config.Libscope.Log.Transport.TLS.Enable.ValueBool()
						} else {
							enable6 = nil
						}
						validateserver3 := new(bool)
						if !customItem.Config.Libscope.Log.Transport.TLS.Validateserver.IsUnknown() && !customItem.Config.Libscope.Log.Transport.TLS.Validateserver.IsNull() {
							*validateserver3 = customItem.Config.Libscope.Log.Transport.TLS.Validateserver.ValueBool()
						} else {
							validateserver3 = nil
						}
						tls3 = &shared.AppscopeTransportTLS{
							Cacertpath:     cacertpath3,
							Enable:         enable6,
							Validateserver: validateserver3,
						}
					}
					typeVar4 := new(string)
					if !customItem.Config.Libscope.Log.Transport.Type.IsUnknown() && !customItem.Config.Libscope.Log.Transport.Type.IsNull() {
						*typeVar4 = customItem.Config.Libscope.Log.Transport.Type.ValueString()
					} else {
						typeVar4 = nil
					}
					transport3 = &shared.AppscopeTransport{
						Buffer: buffer3,
						Host:   host3,
						Path:   path3,
						Port:   port3,
						TLS:    tls3,
						Type:   typeVar4,
					}
				}
				log = &shared.AppscopeConfigLog{
					Level:     level,
					Transport: transport3,
				}
			}
			summaryperiod := new(float64)
			if !customItem.Config.Libscope.Summaryperiod.IsUnknown() && !customItem.Config.Libscope.Summaryperiod.IsNull() {
				*summaryperiod = customItem.Config.Libscope.Summaryperiod.ValueFloat64()
			} else {
				summaryperiod = nil
			}
			libscope = &shared.AppscopeConfigLibscope{
				Commanddir:    commanddir,
				Configevent:   configevent,
				Log:           log,
				Summaryperiod: summaryperiod,
			}
		}
		var metric *shared.AppscopeConfigMetric
		if customItem.Config.Metric != nil {
			var enable7 bool
			enable7 = customItem.Config.Metric.Enable.ValueBool()

			statsdmaxlen := new(float64)
			if !customItem.Config.Metric.Format.Statsdmaxlen.IsUnknown() && !customItem.Config.Metric.Format.Statsdmaxlen.IsNull() {
				*statsdmaxlen = customItem.Config.Metric.Format.Statsdmaxlen.ValueFloat64()
			} else {
				statsdmaxlen = nil
			}
			statsdprefix := new(string)
			if !customItem.Config.Metric.Format.Statsdprefix.IsUnknown() && !customItem.Config.Metric.Format.Statsdprefix.IsNull() {
				*statsdprefix = customItem.Config.Metric.Format.Statsdprefix.ValueString()
			} else {
				statsdprefix = nil
			}
			typeVar5 := new(string)
			if !customItem.Config.Metric.Format.Type.IsUnknown() && !customItem.Config.Metric.Format.Type.IsNull() {
				*typeVar5 = customItem.Config.Metric.Format.Type.ValueString()
			} else {
				typeVar5 = nil
			}
			verbosity := new(float64)
			if !customItem.Config.Metric.Format.Verbosity.IsUnknown() && !customItem.Config.Metric.Format.Verbosity.IsNull() {
				*verbosity = customItem.Config.Metric.Format.Verbosity.ValueFloat64()
			} else {
				verbosity = nil
			}
			format1 := shared.AppscopeConfigMetricFormat{
				Statsdmaxlen: statsdmaxlen,
				Statsdprefix: statsdprefix,
				Type:         typeVar5,
				Verbosity:    verbosity,
			}
			buffer4 := new(shared.Buffer)
			if !customItem.Config.Metric.Transport.Buffer.IsUnknown() && !customItem.Config.Metric.Transport.Buffer.IsNull() {
				*buffer4 = shared.Buffer(customItem.Config.Metric.Transport.Buffer.ValueString())
			} else {
				buffer4 = nil
			}
			host4 := new(string)
			if !customItem.Config.Metric.Transport.Host.IsUnknown() && !customItem.Config.Metric.Transport.Host.IsNull() {
				*host4 = customItem.Config.Metric.Transport.Host.ValueString()
			} else {
				host4 = nil
			}
			path4 := new(string)
			if !customItem.Config.Metric.Transport.Path.IsUnknown() && !customItem.Config.Metric.Transport.Path.IsNull() {
				*path4 = customItem.Config.Metric.Transport.Path.ValueString()
			} else {
				path4 = nil
			}
			port4 := new(float64)
			if !customItem.Config.Metric.Transport.Port.IsUnknown() && !customItem.Config.Metric.Transport.Port.IsNull() {
				*port4 = customItem.Config.Metric.Transport.Port.ValueFloat64()
			} else {
				port4 = nil
			}
			var tls4 *shared.AppscopeTransportTLS
			if customItem.Config.Metric.Transport.TLS != nil {
				cacertpath4 := new(string)
				if !customItem.Config.Metric.Transport.TLS.Cacertpath.IsUnknown() && !customItem.Config.Metric.Transport.TLS.Cacertpath.IsNull() {
					*cacertpath4 = customItem.Config.Metric.Transport.TLS.Cacertpath.ValueString()
				} else {
					cacertpath4 = nil
				}
				enable8 := new(bool)
				if !customItem.Config.Metric.Transport.TLS.Enable.IsUnknown() && !customItem.Config.Metric.Transport.TLS.Enable.IsNull() {
					*enable8 = customItem.Config.Metric.Transport.TLS.Enable.ValueBool()
				} else {
					enable8 = nil
				}
				validateserver4 := new(bool)
				if !customItem.Config.Metric.Transport.TLS.Validateserver.IsUnknown() && !customItem.Config.Metric.Transport.TLS.Validateserver.IsNull() {
					*validateserver4 = customItem.Config.Metric.Transport.TLS.Validateserver.ValueBool()
				} else {
					validateserver4 = nil
				}
				tls4 = &shared.AppscopeTransportTLS{
					Cacertpath:     cacertpath4,
					Enable:         enable8,
					Validateserver: validateserver4,
				}
			}
			typeVar6 := new(string)
			if !customItem.Config.Metric.Transport.Type.IsUnknown() && !customItem.Config.Metric.Transport.Type.IsNull() {
				*typeVar6 = customItem.Config.Metric.Transport.Type.ValueString()
			} else {
				typeVar6 = nil
			}
			transport4 := shared.AppscopeTransport{
				Buffer: buffer4,
				Host:   host4,
				Path:   path4,
				Port:   port4,
				TLS:    tls4,
				Type:   typeVar6,
			}
			watch1 := make([]shared.AppscopeConfigMetricWatch, len(customItem.Config.Metric.Watch))
			metric = &shared.AppscopeConfigMetric{
				Enable:    enable7,
				Format:    format1,
				Transport: transport4,
				Watch:     watch1,
			}
		}
		var payload *shared.AppscopeConfigPayload
		if customItem.Config.Payload != nil {
			var dir string
			dir = customItem.Config.Payload.Dir.ValueString()

			var enable9 bool
			enable9 = customItem.Config.Payload.Enable.ValueBool()

			payload = &shared.AppscopeConfigPayload{
				Dir:    dir,
				Enable: enable9,
			}
		}
		protocol := make([]shared.AppscopeConfigProtocol, 0, len(customItem.Config.Protocol))
		for _, protocolItem := range customItem.Config.Protocol {
			var binary bool
			binary = protocolItem.Binary.ValueBool()

			var detect bool
			detect = protocolItem.Detect.ValueBool()

			var len float64
			len = protocolItem.Len.ValueFloat64()

			var name1 string
			name1 = protocolItem.Name.ValueString()

			var payload1 bool
			payload1 = protocolItem.Payload.ValueBool()

			var regex string
			regex = protocolItem.Regex.ValueString()

			protocol = append(protocol, shared.AppscopeConfigProtocol{
				Binary:  binary,
				Detect:  detect,
				Len:     len,
				Name:    name1,
				Payload: payload1,
				Regex:   regex,
			})
		}
		tags1 := make([]shared.AppscopeConfigTag, 0, len(customItem.Config.Tags))
		for _, tagsItem := range customItem.Config.Tags {
			var key string
			key = tagsItem.Key.ValueString()

			var value1 string
			value1 = tagsItem.Value.ValueString()

			tags1 = append(tags1, shared.AppscopeConfigTag{
				Key:   key,
				Value: value1,
			})
		}
		config1 := shared.AppscopeConfig{
			Cribl:    cribl1,
			Event:    event,
			Libscope: libscope,
			Metric:   metric,
			Payload:  payload,
			Protocol: protocol,
			Tags:     tags1,
		}
		env := new(string)
		if !customItem.Env.IsUnknown() && !customItem.Env.IsNull() {
			*env = customItem.Env.ValueString()
		} else {
			env = nil
		}
		hostname := new(string)
		if !customItem.Hostname.IsUnknown() && !customItem.Hostname.IsNull() {
			*hostname = customItem.Hostname.ValueString()
		} else {
			hostname = nil
		}
		procname := new(string)
		if !customItem.Procname.IsUnknown() && !customItem.Procname.IsNull() {
			*procname = customItem.Procname.ValueString()
		} else {
			procname = nil
		}
		username := new(string)
		if !customItem.Username.IsUnknown() && !customItem.Username.IsNull() {
			*username = customItem.Username.ValueString()
		} else {
			username = nil
		}
		custom = append(custom, shared.AppscopeCustom{
			Ancestor: ancestor,
			Arg:      arg,
			Config:   config1,
			Env:      env,
			Hostname: hostname,
			Procname: procname,
			Username: username,
		})
	}
	var event1 *shared.AppscopeConfigWithCustomEvent
	if r.Config.Event != nil {
		var enable10 bool
		enable10 = r.Config.Event.Enable.ValueBool()

		var enhancefs1 bool
		enhancefs1 = r.Config.Event.Format.Enhancefs.ValueBool()

		var maxeventpersec1 float64
		maxeventpersec1 = r.Config.Event.Format.Maxeventpersec.ValueFloat64()

		format2 := shared.AppscopeConfigWithCustomFormatNdjson{
			Enhancefs:      enhancefs1,
			Maxeventpersec: maxeventpersec1,
		}
		buffer5 := new(shared.Buffer)
		if !r.Config.Event.Transport.Buffer.IsUnknown() && !r.Config.Event.Transport.Buffer.IsNull() {
			*buffer5 = shared.Buffer(r.Config.Event.Transport.Buffer.ValueString())
		} else {
			buffer5 = nil
		}
		host5 := new(string)
		if !r.Config.Event.Transport.Host.IsUnknown() && !r.Config.Event.Transport.Host.IsNull() {
			*host5 = r.Config.Event.Transport.Host.ValueString()
		} else {
			host5 = nil
		}
		path5 := new(string)
		if !r.Config.Event.Transport.Path.IsUnknown() && !r.Config.Event.Transport.Path.IsNull() {
			*path5 = r.Config.Event.Transport.Path.ValueString()
		} else {
			path5 = nil
		}
		port5 := new(float64)
		if !r.Config.Event.Transport.Port.IsUnknown() && !r.Config.Event.Transport.Port.IsNull() {
			*port5 = r.Config.Event.Transport.Port.ValueFloat64()
		} else {
			port5 = nil
		}
		var tls5 *shared.AppscopeTransportTLS
		if r.Config.Event.Transport.TLS != nil {
			cacertpath5 := new(string)
			if !r.Config.Event.Transport.TLS.Cacertpath.IsUnknown() && !r.Config.Event.Transport.TLS.Cacertpath.IsNull() {
				*cacertpath5 = r.Config.Event.Transport.TLS.Cacertpath.ValueString()
			} else {
				cacertpath5 = nil
			}
			enable11 := new(bool)
			if !r.Config.Event.Transport.TLS.Enable.IsUnknown() && !r.Config.Event.Transport.TLS.Enable.IsNull() {
				*enable11 = r.Config.Event.Transport.TLS.Enable.ValueBool()
			} else {
				enable11 = nil
			}
			validateserver5 := new(bool)
			if !r.Config.Event.Transport.TLS.Validateserver.IsUnknown() && !r.Config.Event.Transport.TLS.Validateserver.IsNull() {
				*validateserver5 = r.Config.Event.Transport.TLS.Validateserver.ValueBool()
			} else {
				validateserver5 = nil
			}
			tls5 = &shared.AppscopeTransportTLS{
				Cacertpath:     cacertpath5,
				Enable:         enable11,
				Validateserver: validateserver5,
			}
		}
		typeVar7 := new(string)
		if !r.Config.Event.Transport.Type.IsUnknown() && !r.Config.Event.Transport.Type.IsNull() {
			*typeVar7 = r.Config.Event.Transport.Type.ValueString()
		} else {
			typeVar7 = nil
		}
		transport5 := shared.AppscopeTransport{
			Buffer: buffer5,
			Host:   host5,
			Path:   path5,
			Port:   port5,
			TLS:    tls5,
			Type:   typeVar7,
		}
		typeVar8 := shared.AppscopeConfigWithCustomType(r.Config.Event.Type.ValueString())
		watch2 := make([]shared.AppscopeConfigWithCustomWatchNdjson, 0, len(r.Config.Event.Watch))
		for _, watchItem1 := range r.Config.Event.Watch {
			allowbinary1 := new(bool)
			if !watchItem1.Allowbinary.IsUnknown() && !watchItem1.Allowbinary.IsNull() {
				*allowbinary1 = watchItem1.Allowbinary.ValueBool()
			} else {
				allowbinary1 = nil
			}
			enabled1 := new(bool)
			if !watchItem1.Enabled.IsUnknown() && !watchItem1.Enabled.IsNull() {
				*enabled1 = watchItem1.Enabled.ValueBool()
			} else {
				enabled1 = nil
			}
			field1 := new(string)
			if !watchItem1.Field.IsUnknown() && !watchItem1.Field.IsNull() {
				*field1 = watchItem1.Field.ValueString()
			} else {
				field1 = nil
			}
			headers1 := make([]string, 0, len(watchItem1.Headers))
			for _, headersItem1 := range watchItem1.Headers {
				headers1 = append(headers1, headersItem1.ValueString())
			}
			name2 := new(string)
			if !watchItem1.Name.IsUnknown() && !watchItem1.Name.IsNull() {
				*name2 = watchItem1.Name.ValueString()
			} else {
				name2 = nil
			}
			var type2 string
			type2 = watchItem1.Type.ValueString()

			value2 := new(string)
			if !watchItem1.Value.IsUnknown() && !watchItem1.Value.IsNull() {
				*value2 = watchItem1.Value.ValueString()
			} else {
				value2 = nil
			}
			watch2 = append(watch2, shared.AppscopeConfigWithCustomWatchNdjson{
				Allowbinary: allowbinary1,
				Enabled:     enabled1,
				Field:       field1,
				Headers:     headers1,
				Name:        name2,
				Type:        type2,
				Value:       value2,
			})
		}
		event1 = &shared.AppscopeConfigWithCustomEvent{
			Enable:    enable10,
			Format:    format2,
			Transport: transport5,
			Type:      typeVar8,
			Watch:     watch2,
		}
	}
	var libscope1 *shared.AppscopeConfigWithCustomLibscope
	if r.Config.Libscope != nil {
		commanddir1 := new(string)
		if !r.Config.Libscope.Commanddir.IsUnknown() && !r.Config.Libscope.Commanddir.IsNull() {
			*commanddir1 = r.Config.Libscope.Commanddir.ValueString()
		} else {
			commanddir1 = nil
		}
		configevent1 := new(bool)
		if !r.Config.Libscope.Configevent.IsUnknown() && !r.Config.Libscope.Configevent.IsNull() {
			*configevent1 = r.Config.Libscope.Configevent.ValueBool()
		} else {
			configevent1 = nil
		}
		var log1 *shared.AppscopeConfigWithCustomLog
		if r.Config.Libscope.Log != nil {
			level1 := new(shared.AppscopeConfigWithCustomLevel)
			if !r.Config.Libscope.Log.Level.IsUnknown() && !r.Config.Libscope.Log.Level.IsNull() {
				*level1 = shared.AppscopeConfigWithCustomLevel(r.Config.Libscope.Log.Level.ValueString())
			} else {
				level1 = nil
			}
			var transport6 *shared.AppscopeTransport
			if r.Config.Libscope.Log.Transport != nil {
				buffer6 := new(shared.Buffer)
				if !r.Config.Libscope.Log.Transport.Buffer.IsUnknown() && !r.Config.Libscope.Log.Transport.Buffer.IsNull() {
					*buffer6 = shared.Buffer(r.Config.Libscope.Log.Transport.Buffer.ValueString())
				} else {
					buffer6 = nil
				}
				host6 := new(string)
				if !r.Config.Libscope.Log.Transport.Host.IsUnknown() && !r.Config.Libscope.Log.Transport.Host.IsNull() {
					*host6 = r.Config.Libscope.Log.Transport.Host.ValueString()
				} else {
					host6 = nil
				}
				path6 := new(string)
				if !r.Config.Libscope.Log.Transport.Path.IsUnknown() && !r.Config.Libscope.Log.Transport.Path.IsNull() {
					*path6 = r.Config.Libscope.Log.Transport.Path.ValueString()
				} else {
					path6 = nil
				}
				port6 := new(float64)
				if !r.Config.Libscope.Log.Transport.Port.IsUnknown() && !r.Config.Libscope.Log.Transport.Port.IsNull() {
					*port6 = r.Config.Libscope.Log.Transport.Port.ValueFloat64()
				} else {
					port6 = nil
				}
				var tls6 *shared.AppscopeTransportTLS
				if r.Config.Libscope.Log.Transport.TLS != nil {
					cacertpath6 := new(string)
					if !r.Config.Libscope.Log.Transport.TLS.Cacertpath.IsUnknown() && !r.Config.Libscope.Log.Transport.TLS.Cacertpath.IsNull() {
						*cacertpath6 = r.Config.Libscope.Log.Transport.TLS.Cacertpath.ValueString()
					} else {
						cacertpath6 = nil
					}
					enable12 := new(bool)
					if !r.Config.Libscope.Log.Transport.TLS.Enable.IsUnknown() && !r.Config.Libscope.Log.Transport.TLS.Enable.IsNull() {
						*enable12 = r.Config.Libscope.Log.Transport.TLS.Enable.ValueBool()
					} else {
						enable12 = nil
					}
					validateserver6 := new(bool)
					if !r.Config.Libscope.Log.Transport.TLS.Validateserver.IsUnknown() && !r.Config.Libscope.Log.Transport.TLS.Validateserver.IsNull() {
						*validateserver6 = r.Config.Libscope.Log.Transport.TLS.Validateserver.ValueBool()
					} else {
						validateserver6 = nil
					}
					tls6 = &shared.AppscopeTransportTLS{
						Cacertpath:     cacertpath6,
						Enable:         enable12,
						Validateserver: validateserver6,
					}
				}
				typeVar9 := new(string)
				if !r.Config.Libscope.Log.Transport.Type.IsUnknown() && !r.Config.Libscope.Log.Transport.Type.IsNull() {
					*typeVar9 = r.Config.Libscope.Log.Transport.Type.ValueString()
				} else {
					typeVar9 = nil
				}
				transport6 = &shared.AppscopeTransport{
					Buffer: buffer6,
					Host:   host6,
					Path:   path6,
					Port:   port6,
					TLS:    tls6,
					Type:   typeVar9,
				}
			}
			log1 = &shared.AppscopeConfigWithCustomLog{
				Level:     level1,
				Transport: transport6,
			}
		}
		summaryperiod1 := new(float64)
		if !r.Config.Libscope.Summaryperiod.IsUnknown() && !r.Config.Libscope.Summaryperiod.IsNull() {
			*summaryperiod1 = r.Config.Libscope.Summaryperiod.ValueFloat64()
		} else {
			summaryperiod1 = nil
		}
		libscope1 = &shared.AppscopeConfigWithCustomLibscope{
			Commanddir:    commanddir1,
			Configevent:   configevent1,
			Log:           log1,
			Summaryperiod: summaryperiod1,
		}
	}
	var metric1 *shared.AppscopeConfigWithCustomMetric
	if r.Config.Metric != nil {
		var enable13 bool
		enable13 = r.Config.Metric.Enable.ValueBool()

		statsdmaxlen1 := new(float64)
		if !r.Config.Metric.Format.Statsdmaxlen.IsUnknown() && !r.Config.Metric.Format.Statsdmaxlen.IsNull() {
			*statsdmaxlen1 = r.Config.Metric.Format.Statsdmaxlen.ValueFloat64()
		} else {
			statsdmaxlen1 = nil
		}
		statsdprefix1 := new(string)
		if !r.Config.Metric.Format.Statsdprefix.IsUnknown() && !r.Config.Metric.Format.Statsdprefix.IsNull() {
			*statsdprefix1 = r.Config.Metric.Format.Statsdprefix.ValueString()
		} else {
			statsdprefix1 = nil
		}
		typeVar10 := new(string)
		if !r.Config.Metric.Format.Type.IsUnknown() && !r.Config.Metric.Format.Type.IsNull() {
			*typeVar10 = r.Config.Metric.Format.Type.ValueString()
		} else {
			typeVar10 = nil
		}
		verbosity1 := new(float64)
		if !r.Config.Metric.Format.Verbosity.IsUnknown() && !r.Config.Metric.Format.Verbosity.IsNull() {
			*verbosity1 = r.Config.Metric.Format.Verbosity.ValueFloat64()
		} else {
			verbosity1 = nil
		}
		format3 := shared.AppscopeConfigWithCustomMetricFormat{
			Statsdmaxlen: statsdmaxlen1,
			Statsdprefix: statsdprefix1,
			Type:         typeVar10,
			Verbosity:    verbosity1,
		}
		buffer7 := new(shared.Buffer)
		if !r.Config.Metric.Transport.Buffer.IsUnknown() && !r.Config.Metric.Transport.Buffer.IsNull() {
			*buffer7 = shared.Buffer(r.Config.Metric.Transport.Buffer.ValueString())
		} else {
			buffer7 = nil
		}
		host7 := new(string)
		if !r.Config.Metric.Transport.Host.IsUnknown() && !r.Config.Metric.Transport.Host.IsNull() {
			*host7 = r.Config.Metric.Transport.Host.ValueString()
		} else {
			host7 = nil
		}
		path7 := new(string)
		if !r.Config.Metric.Transport.Path.IsUnknown() && !r.Config.Metric.Transport.Path.IsNull() {
			*path7 = r.Config.Metric.Transport.Path.ValueString()
		} else {
			path7 = nil
		}
		port7 := new(float64)
		if !r.Config.Metric.Transport.Port.IsUnknown() && !r.Config.Metric.Transport.Port.IsNull() {
			*port7 = r.Config.Metric.Transport.Port.ValueFloat64()
		} else {
			port7 = nil
		}
		var tls7 *shared.AppscopeTransportTLS
		if r.Config.Metric.Transport.TLS != nil {
			cacertpath7 := new(string)
			if !r.Config.Metric.Transport.TLS.Cacertpath.IsUnknown() && !r.Config.Metric.Transport.TLS.Cacertpath.IsNull() {
				*cacertpath7 = r.Config.Metric.Transport.TLS.Cacertpath.ValueString()
			} else {
				cacertpath7 = nil
			}
			enable14 := new(bool)
			if !r.Config.Metric.Transport.TLS.Enable.IsUnknown() && !r.Config.Metric.Transport.TLS.Enable.IsNull() {
				*enable14 = r.Config.Metric.Transport.TLS.Enable.ValueBool()
			} else {
				enable14 = nil
			}
			validateserver7 := new(bool)
			if !r.Config.Metric.Transport.TLS.Validateserver.IsUnknown() && !r.Config.Metric.Transport.TLS.Validateserver.IsNull() {
				*validateserver7 = r.Config.Metric.Transport.TLS.Validateserver.ValueBool()
			} else {
				validateserver7 = nil
			}
			tls7 = &shared.AppscopeTransportTLS{
				Cacertpath:     cacertpath7,
				Enable:         enable14,
				Validateserver: validateserver7,
			}
		}
		typeVar11 := new(string)
		if !r.Config.Metric.Transport.Type.IsUnknown() && !r.Config.Metric.Transport.Type.IsNull() {
			*typeVar11 = r.Config.Metric.Transport.Type.ValueString()
		} else {
			typeVar11 = nil
		}
		transport7 := shared.AppscopeTransport{
			Buffer: buffer7,
			Host:   host7,
			Path:   path7,
			Port:   port7,
			TLS:    tls7,
			Type:   typeVar11,
		}
		watch3 := make([]shared.AppscopeConfigWithCustomMetricWatch, len(r.Config.Metric.Watch))
		metric1 = &shared.AppscopeConfigWithCustomMetric{
			Enable:    enable13,
			Format:    format3,
			Transport: transport7,
			Watch:     watch3,
		}
	}
	var payload2 *shared.AppscopeConfigWithCustomPayload
	if r.Config.Payload != nil {
		var dir1 string
		dir1 = r.Config.Payload.Dir.ValueString()

		var enable15 bool
		enable15 = r.Config.Payload.Enable.ValueBool()

		payload2 = &shared.AppscopeConfigWithCustomPayload{
			Dir:    dir1,
			Enable: enable15,
		}
	}
	protocol1 := make([]shared.AppscopeConfigWithCustomProtocol, 0, len(r.Config.Protocol))
	for _, protocolItem1 := range r.Config.Protocol {
		var binary1 bool
		binary1 = protocolItem1.Binary.ValueBool()

		var detect1 bool
		detect1 = protocolItem1.Detect.ValueBool()

		var len1 float64
		len1 = protocolItem1.Len.ValueFloat64()

		var name3 string
		name3 = protocolItem1.Name.ValueString()

		var payload3 bool
		payload3 = protocolItem1.Payload.ValueBool()

		var regex1 string
		regex1 = protocolItem1.Regex.ValueString()

		protocol1 = append(protocol1, shared.AppscopeConfigWithCustomProtocol{
			Binary:  binary1,
			Detect:  detect1,
			Len:     len1,
			Name:    name3,
			Payload: payload3,
			Regex:   regex1,
		})
	}
	tags2 := make([]shared.AppscopeConfigWithCustomTag, 0, len(r.Config.Tags))
	for _, tagsItem1 := range r.Config.Tags {
		var key1 string
		key1 = tagsItem1.Key.ValueString()

		var value3 string
		value3 = tagsItem1.Value.ValueString()

		tags2 = append(tags2, shared.AppscopeConfigWithCustomTag{
			Key:   key1,
			Value: value3,
		})
	}
	config := shared.AppscopeConfigWithCustom{
		Cribl:    cribl,
		Custom:   custom,
		Event:    event1,
		Libscope: libscope1,
		Metric:   metric1,
		Payload:  payload2,
		Protocol: protocol1,
		Tags:     tags2,
	}
	lib := new(shared.CriblLib)
	if !r.Lib.IsUnknown() && !r.Lib.IsNull() {
		*lib = shared.CriblLib(r.Lib.ValueString())
	} else {
		lib = nil
	}
	out := shared.AppscopeLibEntry{
		ID:          id,
		Description: description,
		Tags:        tags,
		Config:      config,
		Lib:         lib,
	}

	return &out, diags
}

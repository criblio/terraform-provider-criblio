lockVersion: 2.0.0
id: 1efe501f-0805-447e-ab12-75eb7c79386e
management:
  docChecksum: 1296afe15499bdd1082c1de8cf97b815
  docVersion: 4.12.2-4b17c8d4
  speakeasyVersion: 1.631.5
  generationVersion: 2.716.16
  releaseVersion: 1.14.5
  configChecksum: 51eec6be593eed443749b86b63c6073e
  published: true
features:
  terraform:
    additionalDependencies: 0.1.0
    additionalProperties: 0.1.2
    constsAndDefaults: 0.3.0
    core: 3.45.1
    deprecations: 2.82.0
    getRequestBodies: 2.81.1
    globalSecurity: 2.82.1
    globalServerURLs: 2.83.0
    groups: 2.81.2
    ignores: 2.81.1
    inputOutputModels: 2.83.0
    methodServerURLs: 2.82.1
    nameOverrides: 2.81.3
    nullables: 0.0.0
    oauth2ClientCredentials: 0.1.5
    retries: 2.81.4
    serverIDs: 2.81.1
    unions: 2.81.17
generatedFiles:
  - .gitattributes
  - USAGE.md
  - examples/data-sources/criblio_appscope_config/data-source.tf
  - examples/data-sources/criblio_collector/data-source.tf
  - examples/data-sources/criblio_config_version/data-source.tf
  - examples/data-sources/criblio_cribl_lake_dataset/data-source.tf
  - examples/data-sources/criblio_cribl_lake_house/data-source.tf
  - examples/data-sources/criblio_database_connection/data-source.tf
  - examples/data-sources/criblio_destination/data-source.tf
  - examples/data-sources/criblio_event_breaker_ruleset/data-source.tf
  - examples/data-sources/criblio_global_var/data-source.tf
  - examples/data-sources/criblio_grok/data-source.tf
  - examples/data-sources/criblio_group/data-source.tf
  - examples/data-sources/criblio_hmac_function/data-source.tf
  - examples/data-sources/criblio_instance_settings/data-source.tf
  - examples/data-sources/criblio_lookup_file/data-source.tf
  - examples/data-sources/criblio_notification/data-source.tf
  - examples/data-sources/criblio_notification_target/data-source.tf
  - examples/data-sources/criblio_pack/data-source.tf
  - examples/data-sources/criblio_pack_breakers/data-source.tf
  - examples/data-sources/criblio_pack_destination/data-source.tf
  - examples/data-sources/criblio_pack_lookups/data-source.tf
  - examples/data-sources/criblio_pack_pipeline/data-source.tf
  - examples/data-sources/criblio_pack_routes/data-source.tf
  - examples/data-sources/criblio_pack_source/data-source.tf
  - examples/data-sources/criblio_pack_vars/data-source.tf
  - examples/data-sources/criblio_parquet_schema/data-source.tf
  - examples/data-sources/criblio_parser_lib_entry/data-source.tf
  - examples/data-sources/criblio_pipeline/data-source.tf
  - examples/data-sources/criblio_project/data-source.tf
  - examples/data-sources/criblio_regex/data-source.tf
  - examples/data-sources/criblio_routes/data-source.tf
  - examples/data-sources/criblio_schema/data-source.tf
  - examples/data-sources/criblio_search_dashboard/data-source.tf
  - examples/data-sources/criblio_search_dashboard_category/data-source.tf
  - examples/data-sources/criblio_search_dataset/data-source.tf
  - examples/data-sources/criblio_search_dataset_provider/data-source.tf
  - examples/data-sources/criblio_search_macro/data-source.tf
  - examples/data-sources/criblio_search_saved_query/data-source.tf
  - examples/data-sources/criblio_search_usage_group/data-source.tf
  - examples/data-sources/criblio_source/data-source.tf
  - examples/data-sources/criblio_subscription/data-source.tf
  - examples/data-sources/criblio_workspace/data-source.tf
  - examples/data-sources/criblio_workspaces/data-source.tf
  - examples/provider/provider.tf
  - examples/resources/criblio_appscope_config/import-by-string-id.tf
  - examples/resources/criblio_appscope_config/import.sh
  - examples/resources/criblio_appscope_config/resource.tf
  - examples/resources/criblio_collector/import-by-string-id.tf
  - examples/resources/criblio_collector/import.sh
  - examples/resources/criblio_collector/resource.tf
  - examples/resources/criblio_commit/resource.tf
  - examples/resources/criblio_cribl_lake_dataset/import-by-string-id.tf
  - examples/resources/criblio_cribl_lake_dataset/import.sh
  - examples/resources/criblio_cribl_lake_dataset/resource.tf
  - examples/resources/criblio_cribl_lake_house/import-by-string-id.tf
  - examples/resources/criblio_cribl_lake_house/import.sh
  - examples/resources/criblio_cribl_lake_house/resource.tf
  - examples/resources/criblio_database_connection/import-by-string-id.tf
  - examples/resources/criblio_database_connection/import.sh
  - examples/resources/criblio_database_connection/resource.tf
  - examples/resources/criblio_deploy/resource.tf
  - examples/resources/criblio_destination/import-by-string-id.tf
  - examples/resources/criblio_destination/import.sh
  - examples/resources/criblio_destination/resource.tf
  - examples/resources/criblio_event_breaker_ruleset/import-by-string-id.tf
  - examples/resources/criblio_event_breaker_ruleset/import.sh
  - examples/resources/criblio_event_breaker_ruleset/resource.tf
  - examples/resources/criblio_global_var/import-by-string-id.tf
  - examples/resources/criblio_global_var/import.sh
  - examples/resources/criblio_global_var/resource.tf
  - examples/resources/criblio_grok/import-by-string-id.tf
  - examples/resources/criblio_grok/import.sh
  - examples/resources/criblio_grok/resource.tf
  - examples/resources/criblio_group/import-by-string-id.tf
  - examples/resources/criblio_group/import.sh
  - examples/resources/criblio_group/resource.tf
  - examples/resources/criblio_hmac_function/import-by-string-id.tf
  - examples/resources/criblio_hmac_function/import.sh
  - examples/resources/criblio_hmac_function/resource.tf
  - examples/resources/criblio_lakehouse_dataset_connection/resource.tf
  - examples/resources/criblio_lookup_file/import-by-string-id.tf
  - examples/resources/criblio_lookup_file/import.sh
  - examples/resources/criblio_lookup_file/resource.tf
  - examples/resources/criblio_notification/import-by-string-id.tf
  - examples/resources/criblio_notification/import.sh
  - examples/resources/criblio_notification/resource.tf
  - examples/resources/criblio_notification_target/resource.tf
  - examples/resources/criblio_pack/import-by-string-id.tf
  - examples/resources/criblio_pack/import.sh
  - examples/resources/criblio_pack/resource.tf
  - examples/resources/criblio_pack_breakers/import-by-string-id.tf
  - examples/resources/criblio_pack_breakers/import.sh
  - examples/resources/criblio_pack_breakers/resource.tf
  - examples/resources/criblio_pack_destination/import-by-string-id.tf
  - examples/resources/criblio_pack_destination/import.sh
  - examples/resources/criblio_pack_destination/resource.tf
  - examples/resources/criblio_pack_lookups/import-by-string-id.tf
  - examples/resources/criblio_pack_lookups/import.sh
  - examples/resources/criblio_pack_lookups/resource.tf
  - examples/resources/criblio_pack_pipeline/import-by-string-id.tf
  - examples/resources/criblio_pack_pipeline/import.sh
  - examples/resources/criblio_pack_pipeline/resource.tf
  - examples/resources/criblio_pack_routes/import-by-string-id.tf
  - examples/resources/criblio_pack_routes/import.sh
  - examples/resources/criblio_pack_routes/resource.tf
  - examples/resources/criblio_pack_source/import-by-string-id.tf
  - examples/resources/criblio_pack_source/import.sh
  - examples/resources/criblio_pack_source/resource.tf
  - examples/resources/criblio_pack_vars/import-by-string-id.tf
  - examples/resources/criblio_pack_vars/import.sh
  - examples/resources/criblio_pack_vars/resource.tf
  - examples/resources/criblio_parquet_schema/import-by-string-id.tf
  - examples/resources/criblio_parquet_schema/import.sh
  - examples/resources/criblio_parquet_schema/resource.tf
  - examples/resources/criblio_parser_lib_entry/import-by-string-id.tf
  - examples/resources/criblio_parser_lib_entry/import.sh
  - examples/resources/criblio_parser_lib_entry/resource.tf
  - examples/resources/criblio_pipeline/import-by-string-id.tf
  - examples/resources/criblio_pipeline/import.sh
  - examples/resources/criblio_pipeline/resource.tf
  - examples/resources/criblio_project/import-by-string-id.tf
  - examples/resources/criblio_project/import.sh
  - examples/resources/criblio_project/resource.tf
  - examples/resources/criblio_regex/import-by-string-id.tf
  - examples/resources/criblio_regex/import.sh
  - examples/resources/criblio_regex/resource.tf
  - examples/resources/criblio_routes/import-by-string-id.tf
  - examples/resources/criblio_routes/import.sh
  - examples/resources/criblio_routes/resource.tf
  - examples/resources/criblio_schema/import-by-string-id.tf
  - examples/resources/criblio_schema/import.sh
  - examples/resources/criblio_schema/resource.tf
  - examples/resources/criblio_search_dashboard/resource.tf
  - examples/resources/criblio_search_dashboard_category/resource.tf
  - examples/resources/criblio_search_dataset/import-by-string-id.tf
  - examples/resources/criblio_search_dataset/import.sh
  - examples/resources/criblio_search_dataset/resource.tf
  - examples/resources/criblio_search_dataset_provider/import-by-string-id.tf
  - examples/resources/criblio_search_dataset_provider/import.sh
  - examples/resources/criblio_search_dataset_provider/resource.tf
  - examples/resources/criblio_search_macro/resource.tf
  - examples/resources/criblio_search_saved_query/import-by-string-id.tf
  - examples/resources/criblio_search_saved_query/import.sh
  - examples/resources/criblio_search_saved_query/resource.tf
  - examples/resources/criblio_search_usage_group/resource.tf
  - examples/resources/criblio_source/import-by-string-id.tf
  - examples/resources/criblio_source/import.sh
  - examples/resources/criblio_source/resource.tf
  - examples/resources/criblio_subscription/import-by-string-id.tf
  - examples/resources/criblio_subscription/import.sh
  - examples/resources/criblio_subscription/resource.tf
  - examples/resources/criblio_workspace/import-by-string-id.tf
  - examples/resources/criblio_workspace/import.sh
  - examples/resources/criblio_workspace/resource.tf
  - go.mod
  - go.sum
  - internal/planmodifiers/boolplanmodifier/suppress_diff.go
  - internal/planmodifiers/float32planmodifier/suppress_diff.go
  - internal/planmodifiers/float64planmodifier/suppress_diff.go
  - internal/planmodifiers/int32planmodifier/suppress_diff.go
  - internal/planmodifiers/int64planmodifier/suppress_diff.go
  - internal/planmodifiers/listplanmodifier/suppress_diff.go
  - internal/planmodifiers/mapplanmodifier/suppress_diff.go
  - internal/planmodifiers/numberplanmodifier/suppress_diff.go
  - internal/planmodifiers/objectplanmodifier/suppress_diff.go
  - internal/planmodifiers/setplanmodifier/suppress_diff.go
  - internal/planmodifiers/stringplanmodifier/suppress_diff.go
  - internal/planmodifiers/utils/state_check.go
  - internal/provider/appscopeconfig_data_source.go
  - internal/provider/appscopeconfig_data_source_sdk.go
  - internal/provider/appscopeconfig_resource.go
  - internal/provider/appscopeconfig_resource_sdk.go
  - internal/provider/collector_data_source.go
  - internal/provider/collector_data_source_sdk.go
  - internal/provider/collector_resource.go
  - internal/provider/collector_resource_sdk.go
  - internal/provider/commit_resource.go
  - internal/provider/commit_resource_sdk.go
  - internal/provider/configversion_data_source.go
  - internal/provider/configversion_data_source_sdk.go
  - internal/provider/cribllakedataset_data_source.go
  - internal/provider/cribllakedataset_data_source_sdk.go
  - internal/provider/cribllakedataset_resource.go
  - internal/provider/cribllakedataset_resource_sdk.go
  - internal/provider/cribllakehouse_data_source.go
  - internal/provider/cribllakehouse_data_source_sdk.go
  - internal/provider/cribllakehouse_resource.go
  - internal/provider/cribllakehouse_resource_sdk.go
  - internal/provider/databaseconnection_data_source.go
  - internal/provider/databaseconnection_data_source_sdk.go
  - internal/provider/databaseconnection_resource.go
  - internal/provider/databaseconnection_resource_sdk.go
  - internal/provider/deploy_resource.go
  - internal/provider/deploy_resource_sdk.go
  - internal/provider/destination_data_source.go
  - internal/provider/destination_data_source_sdk.go
  - internal/provider/destination_resource.go
  - internal/provider/destination_resource_sdk.go
  - internal/provider/eventbreakerruleset_data_source.go
  - internal/provider/eventbreakerruleset_data_source_sdk.go
  - internal/provider/eventbreakerruleset_resource.go
  - internal/provider/eventbreakerruleset_resource_sdk.go
  - internal/provider/globalvar_data_source.go
  - internal/provider/globalvar_data_source_sdk.go
  - internal/provider/globalvar_resource.go
  - internal/provider/globalvar_resource_sdk.go
  - internal/provider/grok_data_source.go
  - internal/provider/grok_data_source_sdk.go
  - internal/provider/grok_resource.go
  - internal/provider/grok_resource_sdk.go
  - internal/provider/group_data_source.go
  - internal/provider/group_data_source_sdk.go
  - internal/provider/group_resource.go
  - internal/provider/group_resource_sdk.go
  - internal/provider/hmacfunction_data_source.go
  - internal/provider/hmacfunction_data_source_sdk.go
  - internal/provider/hmacfunction_resource.go
  - internal/provider/hmacfunction_resource_sdk.go
  - internal/provider/instancesettings_data_source.go
  - internal/provider/instancesettings_data_source_sdk.go
  - internal/provider/lakehousedatasetconnection_resource.go
  - internal/provider/lakehousedatasetconnection_resource_sdk.go
  - internal/provider/lookupfile_data_source.go
  - internal/provider/lookupfile_data_source_sdk.go
  - internal/provider/lookupfile_resource.go
  - internal/provider/lookupfile_resource_sdk.go
  - internal/provider/notification_data_source.go
  - internal/provider/notification_data_source_sdk.go
  - internal/provider/notification_resource.go
  - internal/provider/notification_resource_sdk.go
  - internal/provider/notificationtarget_data_source.go
  - internal/provider/notificationtarget_data_source_sdk.go
  - internal/provider/notificationtarget_resource.go
  - internal/provider/notificationtarget_resource_sdk.go
  - internal/provider/pack_data_source.go
  - internal/provider/pack_data_source_sdk.go
  - internal/provider/pack_resource.go
  - internal/provider/pack_resource_sdk.go
  - internal/provider/packbreakers_data_source.go
  - internal/provider/packbreakers_data_source_sdk.go
  - internal/provider/packbreakers_resource.go
  - internal/provider/packbreakers_resource_sdk.go
  - internal/provider/packdestination_data_source.go
  - internal/provider/packdestination_data_source_sdk.go
  - internal/provider/packdestination_resource.go
  - internal/provider/packdestination_resource_sdk.go
  - internal/provider/packlookups_data_source.go
  - internal/provider/packlookups_data_source_sdk.go
  - internal/provider/packlookups_resource.go
  - internal/provider/packlookups_resource_sdk.go
  - internal/provider/packpipeline_data_source.go
  - internal/provider/packpipeline_data_source_sdk.go
  - internal/provider/packpipeline_resource.go
  - internal/provider/packpipeline_resource_sdk.go
  - internal/provider/packroutes_data_source.go
  - internal/provider/packroutes_data_source_sdk.go
  - internal/provider/packroutes_resource.go
  - internal/provider/packroutes_resource_sdk.go
  - internal/provider/packsource_data_source.go
  - internal/provider/packsource_data_source_sdk.go
  - internal/provider/packsource_resource.go
  - internal/provider/packsource_resource_sdk.go
  - internal/provider/packvars_data_source.go
  - internal/provider/packvars_data_source_sdk.go
  - internal/provider/packvars_resource.go
  - internal/provider/packvars_resource_sdk.go
  - internal/provider/parquetschema_data_source.go
  - internal/provider/parquetschema_data_source_sdk.go
  - internal/provider/parquetschema_resource.go
  - internal/provider/parquetschema_resource_sdk.go
  - internal/provider/parserlibentry_data_source.go
  - internal/provider/parserlibentry_data_source_sdk.go
  - internal/provider/parserlibentry_resource.go
  - internal/provider/parserlibentry_resource_sdk.go
  - internal/provider/pipeline_data_source.go
  - internal/provider/pipeline_data_source_sdk.go
  - internal/provider/pipeline_resource.go
  - internal/provider/pipeline_resource_sdk.go
  - internal/provider/project_data_source.go
  - internal/provider/project_data_source_sdk.go
  - internal/provider/project_resource.go
  - internal/provider/project_resource_sdk.go
  - internal/provider/provider.go
  - internal/provider/reflect/diags.go
  - internal/provider/reflect/doc.go
  - internal/provider/reflect/generic_attr_value.go
  - internal/provider/reflect/helpers.go
  - internal/provider/reflect/interfaces.go
  - internal/provider/reflect/into.go
  - internal/provider/reflect/map.go
  - internal/provider/reflect/number.go
  - internal/provider/reflect/options.go
  - internal/provider/reflect/outof.go
  - internal/provider/reflect/pointer.go
  - internal/provider/reflect/primitive.go
  - internal/provider/reflect/slice.go
  - internal/provider/reflect/struct.go
  - internal/provider/regex_data_source.go
  - internal/provider/regex_data_source_sdk.go
  - internal/provider/regex_resource.go
  - internal/provider/regex_resource_sdk.go
  - internal/provider/routes_data_source.go
  - internal/provider/routes_data_source_sdk.go
  - internal/provider/routes_resource.go
  - internal/provider/routes_resource_sdk.go
  - internal/provider/schema_data_source.go
  - internal/provider/schema_data_source_sdk.go
  - internal/provider/schema_resource.go
  - internal/provider/schema_resource_sdk.go
  - internal/provider/searchdashboard_data_source.go
  - internal/provider/searchdashboard_data_source_sdk.go
  - internal/provider/searchdashboard_resource.go
  - internal/provider/searchdashboard_resource_sdk.go
  - internal/provider/searchdashboardcategory_data_source.go
  - internal/provider/searchdashboardcategory_data_source_sdk.go
  - internal/provider/searchdashboardcategory_resource.go
  - internal/provider/searchdashboardcategory_resource_sdk.go
  - internal/provider/searchdataset_data_source.go
  - internal/provider/searchdataset_data_source_sdk.go
  - internal/provider/searchdataset_resource.go
  - internal/provider/searchdataset_resource_sdk.go
  - internal/provider/searchdatasetprovider_data_source.go
  - internal/provider/searchdatasetprovider_data_source_sdk.go
  - internal/provider/searchdatasetprovider_resource.go
  - internal/provider/searchdatasetprovider_resource_sdk.go
  - internal/provider/searchmacro_data_source.go
  - internal/provider/searchmacro_data_source_sdk.go
  - internal/provider/searchmacro_resource.go
  - internal/provider/searchmacro_resource_sdk.go
  - internal/provider/searchsavedquery_data_source.go
  - internal/provider/searchsavedquery_data_source_sdk.go
  - internal/provider/searchsavedquery_resource.go
  - internal/provider/searchsavedquery_resource_sdk.go
  - internal/provider/searchusagegroup_data_source.go
  - internal/provider/searchusagegroup_data_source_sdk.go
  - internal/provider/searchusagegroup_resource.go
  - internal/provider/searchusagegroup_resource_sdk.go
  - internal/provider/source_data_source.go
  - internal/provider/source_data_source_sdk.go
  - internal/provider/source_resource.go
  - internal/provider/source_resource_sdk.go
  - internal/provider/subscription_data_source.go
  - internal/provider/subscription_data_source_sdk.go
  - internal/provider/subscription_resource.go
  - internal/provider/subscription_resource_sdk.go
  - internal/provider/typeconvert/date.go
  - internal/provider/typeconvert/datetime.go
  - internal/provider/typeconvert/int.go
  - internal/provider/types/additional_property.go
  - internal/provider/types/allow.go
  - internal/provider/types/api_aws_dataset.go
  - internal/provider/types/api_aws_provider.go
  - internal/provider/types/api_azure_data_explorer_dataset.go
  - internal/provider/types/api_azure_data_explorer_provider.go
  - internal/provider/types/api_azure_dataset.go
  - internal/provider/types/api_azure_provider.go
  - internal/provider/types/api_elastic_search_dataset.go
  - internal/provider/types/api_elastic_search_provider.go
  - internal/provider/types/api_gcp_dataset.go
  - internal/provider/types/api_gcp_provider.go
  - internal/provider/types/api_google_workspace_dataset.go
  - internal/provider/types/api_google_workspace_provider.go
  - internal/provider/types/api_ms_graph_dataset.go
  - internal/provider/types/api_ms_graph_provider.go
  - internal/provider/types/api_okta_dataset.go
  - internal/provider/types/api_okta_provider.go
  - internal/provider/types/api_open_search_dataset.go
  - internal/provider/types/api_open_search_provider.go
  - internal/provider/types/api_tailscale_dataset.go
  - internal/provider/types/api_tailscale_provider.go
  - internal/provider/types/api_zoom_dataset.go
  - internal/provider/types/api_zoom_provider.go
  - internal/provider/types/apihttp_dataset.go
  - internal/provider/types/apihttp_provider.go
  - internal/provider/types/appscope_config.go
  - internal/provider/types/appscope_config_cribl.go
  - internal/provider/types/appscope_config_event.go
  - internal/provider/types/appscope_config_format_ndjson.go
  - internal/provider/types/appscope_config_libscope.go
  - internal/provider/types/appscope_config_log.go
  - internal/provider/types/appscope_config_metric.go
  - internal/provider/types/appscope_config_metric_format.go
  - internal/provider/types/appscope_config_metric_watch.go
  - internal/provider/types/appscope_config_payload.go
  - internal/provider/types/appscope_config_protocol.go
  - internal/provider/types/appscope_config_tag.go
  - internal/provider/types/appscope_config_watch_ndjson.go
  - internal/provider/types/appscope_config_with_custom.go
  - internal/provider/types/appscope_config_with_custom_cribl.go
  - internal/provider/types/appscope_config_with_custom_event.go
  - internal/provider/types/appscope_config_with_custom_format_ndjson.go
  - internal/provider/types/appscope_config_with_custom_libscope.go
  - internal/provider/types/appscope_config_with_custom_log.go
  - internal/provider/types/appscope_config_with_custom_metric.go
  - internal/provider/types/appscope_config_with_custom_metric_format.go
  - internal/provider/types/appscope_config_with_custom_metric_watch.go
  - internal/provider/types/appscope_config_with_custom_payload.go
  - internal/provider/types/appscope_config_with_custom_protocol.go
  - internal/provider/types/appscope_config_with_custom_tag.go
  - internal/provider/types/appscope_config_with_custom_watch_ndjson.go
  - internal/provider/types/appscope_custom.go
  - internal/provider/types/appscope_transport.go
  - internal/provider/types/appscope_transport_tls.go
  - internal/provider/types/auth_request_header.go
  - internal/provider/types/auth_request_param.go
  - internal/provider/types/author.go
  - internal/provider/types/aws_account_config.go
  - internal/provider/types/aws_security_lake_dataset.go
  - internal/provider/types/aws_security_lake_provider.go
  - internal/provider/types/azure_account_config.go
  - internal/provider/types/azure_blob_dataset.go
  - internal/provider/types/azure_blob_dataset_extra_path.go
  - internal/provider/types/azure_blob_provider.go
  - internal/provider/types/cert_options.go
  - internal/provider/types/click_house_dataset.go
  - internal/provider/types/click_house_provider.go
  - internal/provider/types/cloud.go
  - internal/provider/types/cloud_workspace_schema.go
  - internal/provider/types/cloud_workspace_schema_check_server_identity.go
  - internal/provider/types/cloud_workspace_schema_tls.go
  - internal/provider/types/collect_request_header.go
  - internal/provider/types/collect_request_param.go
  - internal/provider/types/collectors.go
  - internal/provider/types/comment.go
  - internal/provider/types/commit.go
  - internal/provider/types/condition_specific_configs.go
  - internal/provider/types/config_bundles.go
  - internal/provider/types/config_group.go
  - internal/provider/types/config_group_cloud.go
  - internal/provider/types/config_group_git.go
  - internal/provider/types/config_group_lookups.go
  - internal/provider/types/consumers.go
  - internal/provider/types/create_lakehouse_dataset_connections_request_body.go
  - internal/provider/types/cribl_leader_dataset.go
  - internal/provider/types/cribl_leader_dataset_extra_path.go
  - internal/provider/types/cribl_leader_provider.go
  - internal/provider/types/custom_label.go
  - internal/provider/types/dashboard_layout.go
  - internal/provider/types/dataset_metadata.go
  - internal/provider/types/discover_request_header.go
  - internal/provider/types/discover_request_param.go
  - internal/provider/types/discovery_configuration.go
  - internal/provider/types/disks_and_file_systems.go
  - internal/provider/types/dns.go
  - internal/provider/types/edge_dataset.go
  - internal/provider/types/edge_provider.go
  - internal/provider/types/element.go
  - internal/provider/types/element_markdown.go
  - internal/provider/types/element_union.go
  - internal/provider/types/endpoint_header.go
  - internal/provider/types/endpoint_param.go
  - internal/provider/types/event_breaker_ruleset_rule.go
  - internal/provider/types/event_breaker_ruleset_timestamp_format.go
  - internal/provider/types/extent_tag.go
  - internal/provider/types/extra_log_type.go
  - internal/provider/types/failover_configs.go
  - internal/provider/types/field.go
  - internal/provider/types/firewall.go
  - internal/provider/types/gcp_account_config.go
  - internal/provider/types/gcp_endpoint_config.go
  - internal/provider/types/gcs_dataset.go
  - internal/provider/types/gcs_dataset_extra_path.go
  - internal/provider/types/gcs_provider.go
  - internal/provider/types/generic_provider.go
  - internal/provider/types/git_commit_summary.go
  - internal/provider/types/git_commit_summary_files.go
  - internal/provider/types/global_var.go
  - internal/provider/types/google_workspace_account_config.go
  - internal/provider/types/grok_file.go
  - internal/provider/types/group.go
  - internal/provider/types/host_info.go
  - internal/provider/types/hosts_file.go
  - internal/provider/types/http_endpoint.go
  - internal/provider/types/http_header.go
  - internal/provider/types/indexer_discovery_configs.go
  - internal/provider/types/ingest_if_not_exist.go
  - internal/provider/types/input_appscope.go
  - internal/provider/types/input_appscope_connection.go
  - internal/provider/types/input_appscope_filter.go
  - internal/provider/types/input_appscope_metadatum.go
  - internal/provider/types/input_appscope_persistence.go
  - internal/provider/types/input_appscope_pq.go
  - internal/provider/types/input_appscope_tls_settings_server_side.go
  - internal/provider/types/input_azure_blob.go
  - internal/provider/types/input_azure_blob_certificate.go
  - internal/provider/types/input_azure_blob_connection.go
  - internal/provider/types/input_azure_blob_metadatum.go
  - internal/provider/types/input_azure_blob_pq.go
  - internal/provider/types/input_collection.go
  - internal/provider/types/input_collection_connection.go
  - internal/provider/types/input_collection_metadatum.go
  - internal/provider/types/input_collection_pq.go
  - internal/provider/types/input_collection_preprocess.go
  - internal/provider/types/input_collector_azure_blob.go
  - internal/provider/types/input_collector_azure_blob_collector.go
  - internal/provider/types/input_collector_azure_blob_conf.go
  - internal/provider/types/input_collector_azure_blob_extractor.go
  - internal/provider/types/input_collector_azure_blob_input.go
  - internal/provider/types/input_collector_azure_blob_metadatum.go
  - internal/provider/types/input_collector_azure_blob_preprocess.go
  - internal/provider/types/input_collector_azure_blob_run_settings.go
  - internal/provider/types/input_collector_azure_blob_saved_state.go
  - internal/provider/types/input_collector_azure_blob_schedule.go
  - internal/provider/types/input_collector_azure_blob_state_tracking.go
  - internal/provider/types/input_collector_azure_blob_time_warning.go
  - internal/provider/types/input_collector_cribl_lake.go
  - internal/provider/types/input_collector_cribl_lake_collector.go
  - internal/provider/types/input_collector_cribl_lake_conf.go
  - internal/provider/types/input_collector_cribl_lake_input.go
  - internal/provider/types/input_collector_cribl_lake_metadatum.go
  - internal/provider/types/input_collector_cribl_lake_preprocess.go
  - internal/provider/types/input_collector_cribl_lake_run_settings.go
  - internal/provider/types/input_collector_cribl_lake_saved_state.go
  - internal/provider/types/input_collector_cribl_lake_schedule.go
  - internal/provider/types/input_collector_cribl_lake_state_tracking.go
  - internal/provider/types/input_collector_cribl_lake_time_warning.go
  - internal/provider/types/input_collector_database.go
  - internal/provider/types/input_collector_database_collector.go
  - internal/provider/types/input_collector_database_conf.go
  - internal/provider/types/input_collector_database_input.go
  - internal/provider/types/input_collector_database_metadatum.go
  - internal/provider/types/input_collector_database_preprocess.go
  - internal/provider/types/input_collector_database_run_settings.go
  - internal/provider/types/input_collector_database_saved_state.go
  - internal/provider/types/input_collector_database_schedule.go
  - internal/provider/types/input_collector_database_state_tracking.go
  - internal/provider/types/input_collector_database_time_warning.go
  - internal/provider/types/input_collector_gcs.go
  - internal/provider/types/input_collector_gcs_collector.go
  - internal/provider/types/input_collector_gcs_conf.go
  - internal/provider/types/input_collector_gcs_extractor.go
  - internal/provider/types/input_collector_gcs_input.go
  - internal/provider/types/input_collector_gcs_metadatum.go
  - internal/provider/types/input_collector_gcs_preprocess.go
  - internal/provider/types/input_collector_gcs_run_settings.go
  - internal/provider/types/input_collector_gcs_saved_state.go
  - internal/provider/types/input_collector_gcs_schedule.go
  - internal/provider/types/input_collector_gcs_state_tracking.go
  - internal/provider/types/input_collector_gcs_time_warning.go
  - internal/provider/types/input_collector_health_check.go
  - internal/provider/types/input_collector_health_check_collector.go
  - internal/provider/types/input_collector_health_check_conf.go
  - internal/provider/types/input_collector_health_check_input.go
  - internal/provider/types/input_collector_health_check_metadatum.go
  - internal/provider/types/input_collector_health_check_preprocess.go
  - internal/provider/types/input_collector_health_check_run_settings.go
  - internal/provider/types/input_collector_health_check_saved_state.go
  - internal/provider/types/input_collector_health_check_schedule.go
  - internal/provider/types/input_collector_health_check_state_tracking.go
  - internal/provider/types/input_collector_health_check_time_warning.go
  - internal/provider/types/input_collector_rest.go
  - internal/provider/types/input_collector_rest_collector.go
  - internal/provider/types/input_collector_rest_conf.go
  - internal/provider/types/input_collector_rest_input.go
  - internal/provider/types/input_collector_rest_metadatum.go
  - internal/provider/types/input_collector_rest_preprocess.go
  - internal/provider/types/input_collector_rest_run_settings.go
  - internal/provider/types/input_collector_rest_run_state_tracking.go
  - internal/provider/types/input_collector_rest_saved_state.go
  - internal/provider/types/input_collector_rest_schedule.go
  - internal/provider/types/input_collector_rest_time_warning.go
  - internal/provider/types/input_collector_s3.go
  - internal/provider/types/input_collector_s3_collector.go
  - internal/provider/types/input_collector_s3_conf.go
  - internal/provider/types/input_collector_s3_extractor.go
  - internal/provider/types/input_collector_s3_input.go
  - internal/provider/types/input_collector_s3_metadatum.go
  - internal/provider/types/input_collector_s3_preprocess.go
  - internal/provider/types/input_collector_s3_run_settings.go
  - internal/provider/types/input_collector_s3_saved_state.go
  - internal/provider/types/input_collector_s3_schedule.go
  - internal/provider/types/input_collector_s3_state_tracking.go
  - internal/provider/types/input_collector_s3_time_warning.go
  - internal/provider/types/input_collector_splunk.go
  - internal/provider/types/input_collector_splunk_collector.go
  - internal/provider/types/input_collector_splunk_conf.go
  - internal/provider/types/input_collector_splunk_input.go
  - internal/provider/types/input_collector_splunk_metadatum.go
  - internal/provider/types/input_collector_splunk_preprocess.go
  - internal/provider/types/input_collector_splunk_run_settings.go
  - internal/provider/types/input_collector_splunk_saved_state.go
  - internal/provider/types/input_collector_splunk_schedule.go
  - internal/provider/types/input_collector_splunk_state_tracking.go
  - internal/provider/types/input_collector_splunk_time_warning.go
  - internal/provider/types/input_confluent_cloud.go
  - internal/provider/types/input_confluent_cloud_auth.go
  - internal/provider/types/input_confluent_cloud_authentication.go
  - internal/provider/types/input_confluent_cloud_connection.go
  - internal/provider/types/input_confluent_cloud_kafka_schema_registry_authentication.go
  - internal/provider/types/input_confluent_cloud_kafka_schema_registry_tls_settings_client_side.go
  - internal/provider/types/input_confluent_cloud_metadatum.go
  - internal/provider/types/input_confluent_cloud_pq.go
  - internal/provider/types/input_confluent_cloud_tls_settings_client_side.go
  - internal/provider/types/input_cribl.go
  - internal/provider/types/input_cribl_connection.go
  - internal/provider/types/input_cribl_http.go
  - internal/provider/types/input_cribl_http_connection.go
  - internal/provider/types/input_cribl_http_metadatum.go
  - internal/provider/types/input_cribl_http_pq.go
  - internal/provider/types/input_cribl_httptls_settings_server_side.go
  - internal/provider/types/input_cribl_lake_http.go
  - internal/provider/types/input_cribl_lake_http_connection.go
  - internal/provider/types/input_cribl_lake_http_metadatum.go
  - internal/provider/types/input_cribl_lake_http_pq.go
  - internal/provider/types/input_cribl_lake_httptls_settings_server_side.go
  - internal/provider/types/input_cribl_metadatum.go
  - internal/provider/types/input_cribl_pq.go
  - internal/provider/types/input_cribl_tcp.go
  - internal/provider/types/input_cribl_tcp_connection.go
  - internal/provider/types/input_cribl_tcp_metadatum.go
  - internal/provider/types/input_cribl_tcp_pq.go
  - internal/provider/types/input_cribl_tcptls_settings_server_side.go
  - internal/provider/types/input_criblmetrics.go
  - internal/provider/types/input_criblmetrics_connection.go
  - internal/provider/types/input_criblmetrics_metadatum.go
  - internal/provider/types/input_criblmetrics_pq.go
  - internal/provider/types/input_crowdstrike.go
  - internal/provider/types/input_crowdstrike_checkpointing.go
  - internal/provider/types/input_crowdstrike_connection.go
  - internal/provider/types/input_crowdstrike_metadatum.go
  - internal/provider/types/input_crowdstrike_pq.go
  - internal/provider/types/input_crowdstrike_preprocess.go
  - internal/provider/types/input_datadog_agent.go
  - internal/provider/types/input_datadog_agent_connection.go
  - internal/provider/types/input_datadog_agent_metadatum.go
  - internal/provider/types/input_datadog_agent_pq.go
  - internal/provider/types/input_datadog_agent_proxy_mode.go
  - internal/provider/types/input_datadog_agent_tls_settings_server_side.go
  - internal/provider/types/input_datagen.go
  - internal/provider/types/input_datagen_connection.go
  - internal/provider/types/input_datagen_metadatum.go
  - internal/provider/types/input_datagen_pq.go
  - internal/provider/types/input_edge_prometheus.go
  - internal/provider/types/input_edge_prometheus_connection.go
  - internal/provider/types/input_edge_prometheus_disk_spooling.go
  - internal/provider/types/input_edge_prometheus_metadatum.go
  - internal/provider/types/input_edge_prometheus_pq.go
  - internal/provider/types/input_edge_prometheus_search_filter.go
  - internal/provider/types/input_elastic.go
  - internal/provider/types/input_elastic_connection.go
  - internal/provider/types/input_elastic_extra_http_header.go
  - internal/provider/types/input_elastic_metadatum.go
  - internal/provider/types/input_elastic_pq.go
  - internal/provider/types/input_elastic_proxy_mode.go
  - internal/provider/types/input_elastic_tls_settings_server_side.go
  - internal/provider/types/input_eventhub.go
  - internal/provider/types/input_eventhub_authentication.go
  - internal/provider/types/input_eventhub_connection.go
  - internal/provider/types/input_eventhub_metadatum.go
  - internal/provider/types/input_eventhub_pq.go
  - internal/provider/types/input_eventhub_tls_settings_client_side.go
  - internal/provider/types/input_exec.go
  - internal/provider/types/input_exec_connection.go
  - internal/provider/types/input_exec_metadatum.go
  - internal/provider/types/input_exec_pq.go
  - internal/provider/types/input_file.go
  - internal/provider/types/input_file_connection.go
  - internal/provider/types/input_file_metadatum.go
  - internal/provider/types/input_file_pq.go
  - internal/provider/types/input_firehose.go
  - internal/provider/types/input_firehose_connection.go
  - internal/provider/types/input_firehose_metadatum.go
  - internal/provider/types/input_firehose_pq.go
  - internal/provider/types/input_firehose_tls_settings_server_side.go
  - internal/provider/types/input_google_pubsub.go
  - internal/provider/types/input_google_pubsub_connection.go
  - internal/provider/types/input_google_pubsub_metadatum.go
  - internal/provider/types/input_google_pubsub_pq.go
  - internal/provider/types/input_grafana.go
  - internal/provider/types/input_grafana_connection1.go
  - internal/provider/types/input_grafana_connection2.go
  - internal/provider/types/input_grafana_grafana1.go
  - internal/provider/types/input_grafana_grafana2.go
  - internal/provider/types/input_grafana_loki_auth1.go
  - internal/provider/types/input_grafana_loki_auth2.go
  - internal/provider/types/input_grafana_metadatum1.go
  - internal/provider/types/input_grafana_metadatum2.go
  - internal/provider/types/input_grafana_pq1.go
  - internal/provider/types/input_grafana_pq2.go
  - internal/provider/types/input_grafana_prometheus_auth1.go
  - internal/provider/types/input_grafana_prometheus_auth2.go
  - internal/provider/types/input_grafana_tls_settings_server_side1.go
  - internal/provider/types/input_grafana_tls_settings_server_side2.go
  - internal/provider/types/input_http.go
  - internal/provider/types/input_http_auth_tokens_ext.go
  - internal/provider/types/input_http_auth_tokens_ext_metadatum.go
  - internal/provider/types/input_http_connection.go
  - internal/provider/types/input_http_metadatum.go
  - internal/provider/types/input_http_pq.go
  - internal/provider/types/input_http_raw.go
  - internal/provider/types/input_http_raw_auth_tokens_ext.go
  - internal/provider/types/input_http_raw_auth_tokens_ext_metadatum.go
  - internal/provider/types/input_http_raw_connection.go
  - internal/provider/types/input_http_raw_metadatum.go
  - internal/provider/types/input_http_raw_pq.go
  - internal/provider/types/input_http_raw_tls_settings_server_side.go
  - internal/provider/types/input_httptls_settings_server_side.go
  - internal/provider/types/input_journal_files.go
  - internal/provider/types/input_journal_files_connection.go
  - internal/provider/types/input_journal_files_metadatum.go
  - internal/provider/types/input_journal_files_pq.go
  - internal/provider/types/input_journal_files_rule.go
  - internal/provider/types/input_kafka.go
  - internal/provider/types/input_kafka_auth.go
  - internal/provider/types/input_kafka_authentication.go
  - internal/provider/types/input_kafka_connection.go
  - internal/provider/types/input_kafka_kafka_schema_registry_authentication.go
  - internal/provider/types/input_kafka_kafka_schema_registry_tls_settings_client_side.go
  - internal/provider/types/input_kafka_metadatum.go
  - internal/provider/types/input_kafka_pq.go
  - internal/provider/types/input_kafka_tls_settings_client_side.go
  - internal/provider/types/input_kinesis.go
  - internal/provider/types/input_kinesis_connection.go
  - internal/provider/types/input_kinesis_metadatum.go
  - internal/provider/types/input_kinesis_pq.go
  - internal/provider/types/input_kube_events.go
  - internal/provider/types/input_kube_events_connection.go
  - internal/provider/types/input_kube_events_metadatum.go
  - internal/provider/types/input_kube_events_pq.go
  - internal/provider/types/input_kube_events_rule.go
  - internal/provider/types/input_kube_logs.go
  - internal/provider/types/input_kube_logs_connection.go
  - internal/provider/types/input_kube_logs_disk_spooling.go
  - internal/provider/types/input_kube_logs_metadatum.go
  - internal/provider/types/input_kube_logs_pq.go
  - internal/provider/types/input_kube_logs_rule.go
  - internal/provider/types/input_kube_metrics.go
  - internal/provider/types/input_kube_metrics_connection.go
  - internal/provider/types/input_kube_metrics_metadatum.go
  - internal/provider/types/input_kube_metrics_persistence.go
  - internal/provider/types/input_kube_metrics_pq.go
  - internal/provider/types/input_kube_metrics_rule.go
  - internal/provider/types/input_loki.go
  - internal/provider/types/input_loki_connection.go
  - internal/provider/types/input_loki_metadatum.go
  - internal/provider/types/input_loki_oauth_header.go
  - internal/provider/types/input_loki_oauth_param.go
  - internal/provider/types/input_loki_pq.go
  - internal/provider/types/input_loki_tls_settings_server_side.go
  - internal/provider/types/input_metrics.go
  - internal/provider/types/input_metrics_connection.go
  - internal/provider/types/input_metrics_metadatum.go
  - internal/provider/types/input_metrics_pq.go
  - internal/provider/types/input_metrics_tls_settings_server_side.go
  - internal/provider/types/input_model_driven_telemetry.go
  - internal/provider/types/input_model_driven_telemetry_connection.go
  - internal/provider/types/input_model_driven_telemetry_metadatum.go
  - internal/provider/types/input_model_driven_telemetry_pq.go
  - internal/provider/types/input_model_driven_telemetry_tls_settings_server_side.go
  - internal/provider/types/input_msk.go
  - internal/provider/types/input_msk_auth.go
  - internal/provider/types/input_msk_connection.go
  - internal/provider/types/input_msk_kafka_schema_registry_authentication.go
  - internal/provider/types/input_msk_kafka_schema_registry_tls_settings_client_side.go
  - internal/provider/types/input_msk_metadatum.go
  - internal/provider/types/input_msk_pq.go
  - internal/provider/types/input_msk_tls_settings_client_side.go
  - internal/provider/types/input_netflow.go
  - internal/provider/types/input_netflow_connection.go
  - internal/provider/types/input_netflow_metadatum.go
  - internal/provider/types/input_netflow_pq.go
  - internal/provider/types/input_office365_mgmt.go
  - internal/provider/types/input_office365_mgmt_connection.go
  - internal/provider/types/input_office365_mgmt_content_config.go
  - internal/provider/types/input_office365_mgmt_metadatum.go
  - internal/provider/types/input_office365_mgmt_pq.go
  - internal/provider/types/input_office365_mgmt_retry_rules.go
  - internal/provider/types/input_office365_msg_trace.go
  - internal/provider/types/input_office365_msg_trace_connection.go
  - internal/provider/types/input_office365_msg_trace_metadatum.go
  - internal/provider/types/input_office365_msg_trace_pq.go
  - internal/provider/types/input_office365_msg_trace_retry_rules.go
  - internal/provider/types/input_office365_service.go
  - internal/provider/types/input_office365_service_connection.go
  - internal/provider/types/input_office365_service_content_config.go
  - internal/provider/types/input_office365_service_metadatum.go
  - internal/provider/types/input_office365_service_pq.go
  - internal/provider/types/input_office365_service_retry_rules.go
  - internal/provider/types/input_open_telemetry.go
  - internal/provider/types/input_open_telemetry_connection.go
  - internal/provider/types/input_open_telemetry_metadatum.go
  - internal/provider/types/input_open_telemetry_oauth_header.go
  - internal/provider/types/input_open_telemetry_oauth_param.go
  - internal/provider/types/input_open_telemetry_pq.go
  - internal/provider/types/input_open_telemetry_tls_settings_server_side.go
  - internal/provider/types/input_prometheus.go
  - internal/provider/types/input_prometheus_connection.go
  - internal/provider/types/input_prometheus_metadatum.go
  - internal/provider/types/input_prometheus_pq.go
  - internal/provider/types/input_prometheus_rw.go
  - internal/provider/types/input_prometheus_rw_connection.go
  - internal/provider/types/input_prometheus_rw_metadatum.go
  - internal/provider/types/input_prometheus_rw_oauth_header.go
  - internal/provider/types/input_prometheus_rw_oauth_param.go
  - internal/provider/types/input_prometheus_rw_pq.go
  - internal/provider/types/input_prometheus_rw_tls_settings_server_side.go
  - internal/provider/types/input_prometheus_search_filter.go
  - internal/provider/types/input_raw_udp.go
  - internal/provider/types/input_raw_udp_connection.go
  - internal/provider/types/input_raw_udp_metadatum.go
  - internal/provider/types/input_raw_udp_pq.go
  - internal/provider/types/input_s3.go
  - internal/provider/types/input_s3_checkpointing.go
  - internal/provider/types/input_s3_connection.go
  - internal/provider/types/input_s3_inventory.go
  - internal/provider/types/input_s3_inventory_checkpointing.go
  - internal/provider/types/input_s3_inventory_connection.go
  - internal/provider/types/input_s3_inventory_metadatum.go
  - internal/provider/types/input_s3_inventory_pq.go
  - internal/provider/types/input_s3_inventory_preprocess.go
  - internal/provider/types/input_s3_metadatum.go
  - internal/provider/types/input_s3_pq.go
  - internal/provider/types/input_s3_preprocess.go
  - internal/provider/types/input_security_lake.go
  - internal/provider/types/input_security_lake_checkpointing.go
  - internal/provider/types/input_security_lake_connection.go
  - internal/provider/types/input_security_lake_metadatum.go
  - internal/provider/types/input_security_lake_pq.go
  - internal/provider/types/input_security_lake_preprocess.go
  - internal/provider/types/input_snmp.go
  - internal/provider/types/input_snmp_connection.go
  - internal/provider/types/input_snmp_metadatum.go
  - internal/provider/types/input_snmp_pq.go
  - internal/provider/types/input_splunk.go
  - internal/provider/types/input_splunk_auth_token.go
  - internal/provider/types/input_splunk_connection.go
  - internal/provider/types/input_splunk_hec.go
  - internal/provider/types/input_splunk_hec_auth_token.go
  - internal/provider/types/input_splunk_hec_auth_token_metadatum.go
  - internal/provider/types/input_splunk_hec_connection.go
  - internal/provider/types/input_splunk_hec_metadatum.go
  - internal/provider/types/input_splunk_hec_pq.go
  - internal/provider/types/input_splunk_hec_tls_settings_server_side.go
  - internal/provider/types/input_splunk_metadatum.go
  - internal/provider/types/input_splunk_pq.go
  - internal/provider/types/input_splunk_search.go
  - internal/provider/types/input_splunk_search_connection.go
  - internal/provider/types/input_splunk_search_metadatum.go
  - internal/provider/types/input_splunk_search_oauth_header.go
  - internal/provider/types/input_splunk_search_oauth_param.go
  - internal/provider/types/input_splunk_search_pq.go
  - internal/provider/types/input_splunk_search_retry_rules.go
  - internal/provider/types/input_splunk_tls_settings_server_side.go
  - internal/provider/types/input_sqs.go
  - internal/provider/types/input_sqs_connection.go
  - internal/provider/types/input_sqs_metadatum.go
  - internal/provider/types/input_sqs_pq.go
  - internal/provider/types/input_syslog.go
  - internal/provider/types/input_syslog_connection1.go
  - internal/provider/types/input_syslog_connection2.go
  - internal/provider/types/input_syslog_metadatum1.go
  - internal/provider/types/input_syslog_metadatum2.go
  - internal/provider/types/input_syslog_pq1.go
  - internal/provider/types/input_syslog_pq2.go
  - internal/provider/types/input_syslog_syslog1.go
  - internal/provider/types/input_syslog_syslog2.go
  - internal/provider/types/input_syslog_tls_settings_server_side1.go
  - internal/provider/types/input_syslog_tls_settings_server_side2.go
  - internal/provider/types/input_system_metrics.go
  - internal/provider/types/input_system_metrics_connection.go
  - internal/provider/types/input_system_metrics_container.go
  - internal/provider/types/input_system_metrics_cpu.go
  - internal/provider/types/input_system_metrics_custom.go
  - internal/provider/types/input_system_metrics_disk.go
  - internal/provider/types/input_system_metrics_filter.go
  - internal/provider/types/input_system_metrics_host.go
  - internal/provider/types/input_system_metrics_memory.go
  - internal/provider/types/input_system_metrics_metadatum.go
  - internal/provider/types/input_system_metrics_network.go
  - internal/provider/types/input_system_metrics_persistence.go
  - internal/provider/types/input_system_metrics_pq.go
  - internal/provider/types/input_system_metrics_process.go
  - internal/provider/types/input_system_metrics_set.go
  - internal/provider/types/input_system_metrics_system.go
  - internal/provider/types/input_system_state.go
  - internal/provider/types/input_system_state_connection.go
  - internal/provider/types/input_system_state_metadatum.go
  - internal/provider/types/input_system_state_persistence.go
  - internal/provider/types/input_system_state_pq.go
  - internal/provider/types/input_system_state_routes.go
  - internal/provider/types/input_tcp.go
  - internal/provider/types/input_tcp_connection.go
  - internal/provider/types/input_tcp_metadatum.go
  - internal/provider/types/input_tcp_pq.go
  - internal/provider/types/input_tcp_preprocess.go
  - internal/provider/types/input_tcpjson.go
  - internal/provider/types/input_tcpjson_connection.go
  - internal/provider/types/input_tcpjson_metadatum.go
  - internal/provider/types/input_tcpjson_pq.go
  - internal/provider/types/input_tcpjson_tls_settings_server_side.go
  - internal/provider/types/input_tcptls_settings_server_side.go
  - internal/provider/types/input_wef.go
  - internal/provider/types/input_wef_connection.go
  - internal/provider/types/input_wef_metadatum.go
  - internal/provider/types/input_wef_pq.go
  - internal/provider/types/input_wef_subscription.go
  - internal/provider/types/input_win_event_logs.go
  - internal/provider/types/input_win_event_logs_connection.go
  - internal/provider/types/input_win_event_logs_metadatum.go
  - internal/provider/types/input_win_event_logs_pq.go
  - internal/provider/types/input_windows_metrics.go
  - internal/provider/types/input_windows_metrics_connection.go
  - internal/provider/types/input_windows_metrics_cpu.go
  - internal/provider/types/input_windows_metrics_custom.go
  - internal/provider/types/input_windows_metrics_disk.go
  - internal/provider/types/input_windows_metrics_host.go
  - internal/provider/types/input_windows_metrics_memory.go
  - internal/provider/types/input_windows_metrics_metadatum.go
  - internal/provider/types/input_windows_metrics_network.go
  - internal/provider/types/input_windows_metrics_persistence.go
  - internal/provider/types/input_windows_metrics_pq.go
  - internal/provider/types/input_windows_metrics_process.go
  - internal/provider/types/input_windows_metrics_set.go
  - internal/provider/types/input_windows_metrics_system.go
  - internal/provider/types/input_wiz.go
  - internal/provider/types/input_wiz_connection.go
  - internal/provider/types/input_wiz_content_config.go
  - internal/provider/types/input_wiz_metadatum.go
  - internal/provider/types/input_wiz_pq.go
  - internal/provider/types/input_wiz_retry_rules.go
  - internal/provider/types/input_zscaler_hec.go
  - internal/provider/types/input_zscaler_hec_auth_token.go
  - internal/provider/types/input_zscaler_hec_auth_token_metadatum.go
  - internal/provider/types/input_zscaler_hec_connection.go
  - internal/provider/types/input_zscaler_hec_metadatum.go
  - internal/provider/types/input_zscaler_hec_pq.go
  - internal/provider/types/input_zscaler_hec_tls_settings_server_side.go
  - internal/provider/types/instance_settings_schema1.go
  - internal/provider/types/instance_settings_schema2.go
  - internal/provider/types/instance_settings_schema_union.go
  - internal/provider/types/interfaces.go
  - internal/provider/types/internal_scheduling.go
  - internal/provider/types/lake_dataset_search_config.go
  - internal/provider/types/listening_ports.go
  - internal/provider/types/log_label.go
  - internal/provider/types/logged_in_users.go
  - internal/provider/types/loki_auth_oauth_header1.go
  - internal/provider/types/loki_auth_oauth_header2.go
  - internal/provider/types/loki_auth_oauth_param1.go
  - internal/provider/types/loki_auth_oauth_param2.go
  - internal/provider/types/lookup.go
  - internal/provider/types/master_schema.go
  - internal/provider/types/master_schema_check_server_identity.go
  - internal/provider/types/master_schema_tls.go
  - internal/provider/types/meta_dataset.go
  - internal/provider/types/meta_provider.go
  - internal/provider/types/ms_graph_account_config.go
  - internal/provider/types/mtls_settings.go
  - internal/provider/types/notifications.go
  - internal/provider/types/okta_account_config.go
  - internal/provider/types/output_azure_blob.go
  - internal/provider/types/output_azure_blob_certificate.go
  - internal/provider/types/output_azure_blob_key_value_metadatum.go
  - internal/provider/types/output_azure_data_explorer.go
  - internal/provider/types/output_azure_data_explorer_certificate.go
  - internal/provider/types/output_azure_data_explorer_pq_controls.go
  - internal/provider/types/output_azure_data_explorer_response_retry_setting.go
  - internal/provider/types/output_azure_data_explorer_timeout_retry_settings.go
  - internal/provider/types/output_azure_eventhub.go
  - internal/provider/types/output_azure_eventhub_authentication.go
  - internal/provider/types/output_azure_eventhub_pq_controls.go
  - internal/provider/types/output_azure_eventhub_tls_settings_client_side.go
  - internal/provider/types/output_azure_logs.go
  - internal/provider/types/output_azure_logs_extra_http_header.go
  - internal/provider/types/output_azure_logs_pq_controls.go
  - internal/provider/types/output_azure_logs_response_retry_setting.go
  - internal/provider/types/output_azure_logs_timeout_retry_settings.go
  - internal/provider/types/output_click_house.go
  - internal/provider/types/output_click_house_column_mapping.go
  - internal/provider/types/output_click_house_extra_http_header.go
  - internal/provider/types/output_click_house_oauth_header.go
  - internal/provider/types/output_click_house_oauth_param.go
  - internal/provider/types/output_click_house_pq_controls.go
  - internal/provider/types/output_click_house_response_retry_setting.go
  - internal/provider/types/output_click_house_timeout_retry_settings.go
  - internal/provider/types/output_click_house_tls_settings_client_side.go
  - internal/provider/types/output_cloudwatch.go
  - internal/provider/types/output_cloudwatch_pq_controls.go
  - internal/provider/types/output_confluent_cloud.go
  - internal/provider/types/output_confluent_cloud_auth.go
  - internal/provider/types/output_confluent_cloud_authentication.go
  - internal/provider/types/output_confluent_cloud_kafka_schema_registry_authentication.go
  - internal/provider/types/output_confluent_cloud_kafka_schema_registry_tls_settings_client_side.go
  - internal/provider/types/output_confluent_cloud_pq_controls.go
  - internal/provider/types/output_confluent_cloud_tls_settings_client_side.go
  - internal/provider/types/output_cribl_http.go
  - internal/provider/types/output_cribl_http_extra_http_header.go
  - internal/provider/types/output_cribl_http_pq_controls.go
  - internal/provider/types/output_cribl_http_response_retry_setting.go
  - internal/provider/types/output_cribl_http_timeout_retry_settings.go
  - internal/provider/types/output_cribl_httptls_settings_client_side.go
  - internal/provider/types/output_cribl_httpurl.go
  - internal/provider/types/output_cribl_lake.go
  - internal/provider/types/output_cribl_tcp.go
  - internal/provider/types/output_cribl_tcp_host.go
  - internal/provider/types/output_cribl_tcp_pq_controls.go
  - internal/provider/types/output_cribl_tcptls_settings_client_side.go
  - internal/provider/types/output_crowdstrike_next_gen_siem.go
  - internal/provider/types/output_crowdstrike_next_gen_siem_extra_http_header.go
  - internal/provider/types/output_crowdstrike_next_gen_siem_pq_controls.go
  - internal/provider/types/output_crowdstrike_next_gen_siem_response_retry_setting.go
  - internal/provider/types/output_crowdstrike_next_gen_siem_timeout_retry_settings.go
  - internal/provider/types/output_datadog.go
  - internal/provider/types/output_datadog_extra_http_header.go
  - internal/provider/types/output_datadog_pq_controls.go
  - internal/provider/types/output_datadog_response_retry_setting.go
  - internal/provider/types/output_datadog_timeout_retry_settings.go
  - internal/provider/types/output_dataset.go
  - internal/provider/types/output_dataset_extra_http_header.go
  - internal/provider/types/output_dataset_pq_controls.go
  - internal/provider/types/output_dataset_response_retry_setting.go
  - internal/provider/types/output_dataset_timeout_retry_settings.go
  - internal/provider/types/output_default.go
  - internal/provider/types/output_devnull.go
  - internal/provider/types/output_disk_spool.go
  - internal/provider/types/output_dl_s3.go
  - internal/provider/types/output_dl_s3_key_value_metadatum.go
  - internal/provider/types/output_dynatrace_http.go
  - internal/provider/types/output_dynatrace_http_extra_http_header.go
  - internal/provider/types/output_dynatrace_http_pq_controls.go
  - internal/provider/types/output_dynatrace_http_response_retry_setting.go
  - internal/provider/types/output_dynatrace_http_timeout_retry_settings.go
  - internal/provider/types/output_dynatrace_otlp.go
  - internal/provider/types/output_dynatrace_otlp_extra_http_header.go
  - internal/provider/types/output_dynatrace_otlp_metadatum.go
  - internal/provider/types/output_dynatrace_otlp_pq_controls.go
  - internal/provider/types/output_dynatrace_otlp_response_retry_setting.go
  - internal/provider/types/output_dynatrace_otlp_timeout_retry_settings.go
  - internal/provider/types/output_elastic.go
  - internal/provider/types/output_elastic_auth.go
  - internal/provider/types/output_elastic_cloud.go
  - internal/provider/types/output_elastic_cloud_auth.go
  - internal/provider/types/output_elastic_cloud_extra_http_header.go
  - internal/provider/types/output_elastic_cloud_extra_param.go
  - internal/provider/types/output_elastic_cloud_pq_controls.go
  - internal/provider/types/output_elastic_cloud_response_retry_setting.go
  - internal/provider/types/output_elastic_cloud_timeout_retry_settings.go
  - internal/provider/types/output_elastic_extra_http_header.go
  - internal/provider/types/output_elastic_extra_param.go
  - internal/provider/types/output_elastic_pq_controls.go
  - internal/provider/types/output_elastic_response_retry_setting.go
  - internal/provider/types/output_elastic_timeout_retry_settings.go
  - internal/provider/types/output_elastic_url.go
  - internal/provider/types/output_exabeam.go
  - internal/provider/types/output_filesystem.go
  - internal/provider/types/output_filesystem_key_value_metadatum.go
  - internal/provider/types/output_google_chronicle.go
  - internal/provider/types/output_google_chronicle_extra_http_header.go
  - internal/provider/types/output_google_chronicle_pq_controls.go
  - internal/provider/types/output_google_chronicle_response_retry_setting.go
  - internal/provider/types/output_google_chronicle_timeout_retry_settings.go
  - internal/provider/types/output_google_cloud_logging.go
  - internal/provider/types/output_google_cloud_logging_pq_controls.go
  - internal/provider/types/output_google_cloud_storage.go
  - internal/provider/types/output_google_cloud_storage_key_value_metadatum.go
  - internal/provider/types/output_google_pubsub.go
  - internal/provider/types/output_google_pubsub_pq_controls.go
  - internal/provider/types/output_grafana_cloud.go
  - internal/provider/types/output_grafana_cloud_extra_http_header1.go
  - internal/provider/types/output_grafana_cloud_extra_http_header2.go
  - internal/provider/types/output_grafana_cloud_grafana_cloud1.go
  - internal/provider/types/output_grafana_cloud_grafana_cloud2.go
  - internal/provider/types/output_grafana_cloud_label1.go
  - internal/provider/types/output_grafana_cloud_label2.go
  - internal/provider/types/output_grafana_cloud_loki_auth1.go
  - internal/provider/types/output_grafana_cloud_loki_auth2.go
  - internal/provider/types/output_grafana_cloud_pq_controls1.go
  - internal/provider/types/output_grafana_cloud_pq_controls2.go
  - internal/provider/types/output_grafana_cloud_prometheus_auth1.go
  - internal/provider/types/output_grafana_cloud_prometheus_auth2.go
  - internal/provider/types/output_grafana_cloud_response_retry_setting1.go
  - internal/provider/types/output_grafana_cloud_response_retry_setting2.go
  - internal/provider/types/output_grafana_cloud_timeout_retry_settings1.go
  - internal/provider/types/output_grafana_cloud_timeout_retry_settings2.go
  - internal/provider/types/output_graphite.go
  - internal/provider/types/output_graphite_pq_controls.go
  - internal/provider/types/output_honeycomb.go
  - internal/provider/types/output_honeycomb_extra_http_header.go
  - internal/provider/types/output_honeycomb_pq_controls.go
  - internal/provider/types/output_honeycomb_response_retry_setting.go
  - internal/provider/types/output_honeycomb_timeout_retry_settings.go
  - internal/provider/types/output_humio_hec.go
  - internal/provider/types/output_humio_hec_extra_http_header.go
  - internal/provider/types/output_humio_hec_pq_controls.go
  - internal/provider/types/output_humio_hec_response_retry_setting.go
  - internal/provider/types/output_humio_hec_timeout_retry_settings.go
  - internal/provider/types/output_influxdb.go
  - internal/provider/types/output_influxdb_extra_http_header.go
  - internal/provider/types/output_influxdb_oauth_header.go
  - internal/provider/types/output_influxdb_oauth_param.go
  - internal/provider/types/output_influxdb_pq_controls.go
  - internal/provider/types/output_influxdb_response_retry_setting.go
  - internal/provider/types/output_influxdb_timeout_retry_settings.go
  - internal/provider/types/output_kafka.go
  - internal/provider/types/output_kafka_auth.go
  - internal/provider/types/output_kafka_authentication.go
  - internal/provider/types/output_kafka_kafka_schema_registry_authentication.go
  - internal/provider/types/output_kafka_kafka_schema_registry_tls_settings_client_side.go
  - internal/provider/types/output_kafka_pq_controls.go
  - internal/provider/types/output_kafka_tls_settings_client_side.go
  - internal/provider/types/output_kinesis.go
  - internal/provider/types/output_kinesis_pq_controls.go
  - internal/provider/types/output_loki.go
  - internal/provider/types/output_loki_extra_http_header.go
  - internal/provider/types/output_loki_label.go
  - internal/provider/types/output_loki_pq_controls.go
  - internal/provider/types/output_loki_response_retry_setting.go
  - internal/provider/types/output_loki_timeout_retry_settings.go
  - internal/provider/types/output_minio.go
  - internal/provider/types/output_minio_key_value_metadatum.go
  - internal/provider/types/output_msk.go
  - internal/provider/types/output_msk_auth.go
  - internal/provider/types/output_msk_kafka_schema_registry_authentication.go
  - internal/provider/types/output_msk_kafka_schema_registry_tls_settings_client_side.go
  - internal/provider/types/output_msk_pq_controls.go
  - internal/provider/types/output_msk_tls_settings_client_side.go
  - internal/provider/types/output_netflow.go
  - internal/provider/types/output_netflow_host.go
  - internal/provider/types/output_newrelic.go
  - internal/provider/types/output_newrelic_events.go
  - internal/provider/types/output_newrelic_events_extra_http_header.go
  - internal/provider/types/output_newrelic_events_pq_controls.go
  - internal/provider/types/output_newrelic_events_response_retry_setting.go
  - internal/provider/types/output_newrelic_events_timeout_retry_settings.go
  - internal/provider/types/output_newrelic_extra_http_header.go
  - internal/provider/types/output_newrelic_metadatum.go
  - internal/provider/types/output_newrelic_pq_controls.go
  - internal/provider/types/output_newrelic_response_retry_setting.go
  - internal/provider/types/output_newrelic_timeout_retry_settings.go
  - internal/provider/types/output_open_telemetry.go
  - internal/provider/types/output_open_telemetry_extra_http_header.go
  - internal/provider/types/output_open_telemetry_metadatum.go
  - internal/provider/types/output_open_telemetry_oauth_header.go
  - internal/provider/types/output_open_telemetry_oauth_param.go
  - internal/provider/types/output_open_telemetry_pq_controls.go
  - internal/provider/types/output_open_telemetry_response_retry_setting.go
  - internal/provider/types/output_open_telemetry_timeout_retry_settings.go
  - internal/provider/types/output_open_telemetry_tls_settings_client_side.go
  - internal/provider/types/output_prometheus.go
  - internal/provider/types/output_prometheus_extra_http_header.go
  - internal/provider/types/output_prometheus_oauth_header.go
  - internal/provider/types/output_prometheus_oauth_param.go
  - internal/provider/types/output_prometheus_pq_controls.go
  - internal/provider/types/output_prometheus_response_retry_setting.go
  - internal/provider/types/output_prometheus_timeout_retry_settings.go
  - internal/provider/types/output_ring.go
  - internal/provider/types/output_router.go
  - internal/provider/types/output_router_rule.go
  - internal/provider/types/output_s3.go
  - internal/provider/types/output_s3_key_value_metadatum.go
  - internal/provider/types/output_security_lake.go
  - internal/provider/types/output_security_lake_key_value_metadatum.go
  - internal/provider/types/output_sentinel.go
  - internal/provider/types/output_sentinel_extra_http_header.go
  - internal/provider/types/output_sentinel_pq_controls.go
  - internal/provider/types/output_sentinel_response_retry_setting.go
  - internal/provider/types/output_sentinel_timeout_retry_settings.go
  - internal/provider/types/output_service_now.go
  - internal/provider/types/output_service_now_extra_http_header.go
  - internal/provider/types/output_service_now_metadatum.go
  - internal/provider/types/output_service_now_pq_controls.go
  - internal/provider/types/output_service_now_response_retry_setting.go
  - internal/provider/types/output_service_now_timeout_retry_settings.go
  - internal/provider/types/output_service_now_tls_settings_client_side.go
  - internal/provider/types/output_signalfx.go
  - internal/provider/types/output_signalfx_extra_http_header.go
  - internal/provider/types/output_signalfx_pq_controls.go
  - internal/provider/types/output_signalfx_response_retry_setting.go
  - internal/provider/types/output_signalfx_timeout_retry_settings.go
  - internal/provider/types/output_snmp.go
  - internal/provider/types/output_snmp_host.go
  - internal/provider/types/output_sns.go
  - internal/provider/types/output_sns_pq_controls.go
  - internal/provider/types/output_splunk.go
  - internal/provider/types/output_splunk_hec.go
  - internal/provider/types/output_splunk_hec_extra_http_header.go
  - internal/provider/types/output_splunk_hec_pq_controls.go
  - internal/provider/types/output_splunk_hec_response_retry_setting.go
  - internal/provider/types/output_splunk_hec_timeout_retry_settings.go
  - internal/provider/types/output_splunk_hec_url.go
  - internal/provider/types/output_splunk_lb.go
  - internal/provider/types/output_splunk_lb_auth_token.go
  - internal/provider/types/output_splunk_lb_host.go
  - internal/provider/types/output_splunk_lb_pq_controls.go
  - internal/provider/types/output_splunk_lb_tls_settings_client_side.go
  - internal/provider/types/output_splunk_pq_controls.go
  - internal/provider/types/output_splunk_tls_settings_client_side.go
  - internal/provider/types/output_sqs.go
  - internal/provider/types/output_sqs_pq_controls.go
  - internal/provider/types/output_statsd.go
  - internal/provider/types/output_statsd_ext.go
  - internal/provider/types/output_statsd_ext_pq_controls.go
  - internal/provider/types/output_statsd_pq_controls.go
  - internal/provider/types/output_sumo_logic.go
  - internal/provider/types/output_sumo_logic_extra_http_header.go
  - internal/provider/types/output_sumo_logic_pq_controls.go
  - internal/provider/types/output_sumo_logic_response_retry_setting.go
  - internal/provider/types/output_sumo_logic_timeout_retry_settings.go
  - internal/provider/types/output_syslog.go
  - internal/provider/types/output_syslog_pq_controls.go
  - internal/provider/types/output_syslog_tls_settings_client_side.go
  - internal/provider/types/output_tcpjson.go
  - internal/provider/types/output_tcpjson_host.go
  - internal/provider/types/output_tcpjson_pq_controls.go
  - internal/provider/types/output_tcpjson_tls_settings_client_side.go
  - internal/provider/types/output_wavefront.go
  - internal/provider/types/output_wavefront_extra_http_header.go
  - internal/provider/types/output_wavefront_pq_controls.go
  - internal/provider/types/output_wavefront_response_retry_setting.go
  - internal/provider/types/output_wavefront_timeout_retry_settings.go
  - internal/provider/types/output_webhook.go
  - internal/provider/types/output_webhook_extra_http_header.go
  - internal/provider/types/output_webhook_oauth_header.go
  - internal/provider/types/output_webhook_oauth_param.go
  - internal/provider/types/output_webhook_pq_controls.go
  - internal/provider/types/output_webhook_response_retry_setting.go
  - internal/provider/types/output_webhook_timeout_retry_settings.go
  - internal/provider/types/output_webhook_tls_settings_client_side.go
  - internal/provider/types/output_webhook_url.go
  - internal/provider/types/output_xsiam.go
  - internal/provider/types/output_xsiam_extra_http_header.go
  - internal/provider/types/output_xsiam_pq_controls.go
  - internal/provider/types/output_xsiam_response_retry_setting.go
  - internal/provider/types/output_xsiam_timeout_retry_settings.go
  - internal/provider/types/output_xsiam_url.go
  - internal/provider/types/pack_install_info.go
  - internal/provider/types/pack_install_info_tags.go
  - internal/provider/types/pack_request_body_tags.go
  - internal/provider/types/pager_duty_target.go
  - internal/provider/types/pagination_config.go
  - internal/provider/types/parser_lib_entry.go
  - internal/provider/types/pipeline_conf.go
  - internal/provider/types/pipeline_function_conf.go
  - internal/provider/types/pipeline_groups.go
  - internal/provider/types/pod_filter.go
  - internal/provider/types/prometheus_auth_oauth_header1.go
  - internal/provider/types/prometheus_auth_oauth_header2.go
  - internal/provider/types/prometheus_auth_oauth_param1.go
  - internal/provider/types/prometheus_auth_oauth_param2.go
  - internal/provider/types/prometheus_dataset.go
  - internal/provider/types/prometheus_provider.go
  - internal/provider/types/resource_type_label.go
  - internal/provider/types/retry_rules_configuration.go
  - internal/provider/types/routes.go
  - internal/provider/types/routes1.go
  - internal/provider/types/routes_groups.go
  - internal/provider/types/routes_route.go
  - internal/provider/types/routes_route1.go
  - internal/provider/types/s3_bucket.go
  - internal/provider/types/s3_dataset.go
  - internal/provider/types/s3_dataset_extra_path.go
  - internal/provider/types/s3_provider.go
  - internal/provider/types/sample.go
  - internal/provider/types/sas_config.go
  - internal/provider/types/saved_query_schedule.go
  - internal/provider/types/scheduling_state_tracking.go
  - internal/provider/types/schema_lib_entry.go
  - internal/provider/types/search_dashboard.go
  - internal/provider/types/search_query.go
  - internal/provider/types/search_query_earliest.go
  - internal/provider/types/search_query_inline.go
  - internal/provider/types/search_query_latest.go
  - internal/provider/types/search_query_saved.go
  - internal/provider/types/search_query_values.go
  - internal/provider/types/services.go
  - internal/provider/types/slack_target.go
  - internal/provider/types/smtp_target.go
  - internal/provider/types/snm_pv3_authentication.go
  - internal/provider/types/snowflake_dataset.go
  - internal/provider/types/snowflake_provider.go
  - internal/provider/types/sns_target.go
  - internal/provider/types/socks_proxy_opts.go
  - internal/provider/types/subscription.go
  - internal/provider/types/subscription_metadatum.go
  - internal/provider/types/summary.go
  - internal/provider/types/tailscale_account_config.go
  - internal/provider/types/target.go
  - internal/provider/types/target_config.go
  - internal/provider/types/target_config_conf.go
  - internal/provider/types/tls_configuration.go
  - internal/provider/types/usage_group.go
  - internal/provider/types/users_and_groups.go
  - internal/provider/types/v3_user.go
  - internal/provider/types/webhook_target.go
  - internal/provider/types/workspace_schema.go
  - internal/provider/types/zoom_account_config.go
  - internal/provider/utils.go
  - internal/provider/workspace_data_source.go
  - internal/provider/workspace_data_source_sdk.go
  - internal/provider/workspace_resource.go
  - internal/provider/workspace_resource_sdk.go
  - internal/provider/workspaces_data_source.go
  - internal/provider/workspaces_data_source_sdk.go
  - internal/sdk/.gitattributes
  - internal/sdk/aisettings.go
  - internal/sdk/appscopeconfigs.go
  - internal/sdk/auth.go
  - internal/sdk/authorize.go
  - internal/sdk/banners.go
  - internal/sdk/certificates.go
  - internal/sdk/changelog.go
  - internal/sdk/clickhouse.go
  - internal/sdk/clui.go
  - internal/sdk/collectors.go
  - internal/sdk/conditions.go
  - internal/sdk/consent.go
  - internal/sdk/criblio.go
  - internal/sdk/dashboardcategories.go
  - internal/sdk/dashboards.go
  - internal/sdk/databaseconnections.go
  - internal/sdk/datasets.go
  - internal/sdk/diag.go
  - internal/sdk/distributed.go
  - internal/sdk/docs/models/operations/option.md
  - internal/sdk/edge.go
  - internal/sdk/edgeappscopeprocesses.go
  - internal/sdk/edgecontainers.go
  - internal/sdk/edgeevents.go
  - internal/sdk/edgefiles.go
  - internal/sdk/edgels.go
  - internal/sdk/edgeprocesses.go
  - internal/sdk/eventbreakerrules.go
  - internal/sdk/events.go
  - internal/sdk/executors.go
  - internal/sdk/expressions.go
  - internal/sdk/features.go
  - internal/sdk/file.go
  - internal/sdk/filesampler.go
  - internal/sdk/functions.go
  - internal/sdk/git.go
  - internal/sdk/globalvariables.go
  - internal/sdk/grokfiles.go
  - internal/sdk/groups.go
  - internal/sdk/health.go
  - internal/sdk/hmacfunctions.go
  - internal/sdk/ingest.go
  - internal/sdk/inputs.go
  - internal/sdk/internal/config/sdkconfiguration.go
  - internal/sdk/internal/hooks/clientcredentials.go
  - internal/sdk/internal/hooks/hooks.go
  - internal/sdk/internal/utils/contenttype.go
  - internal/sdk/internal/utils/env.go
  - internal/sdk/internal/utils/form.go
  - internal/sdk/internal/utils/headers.go
  - internal/sdk/internal/utils/json.go
  - internal/sdk/internal/utils/oauth2_credentials.go
  - internal/sdk/internal/utils/oauth2_sessions.go
  - internal/sdk/internal/utils/pathparams.go
  - internal/sdk/internal/utils/queryparams.go
  - internal/sdk/internal/utils/requestbody.go
  - internal/sdk/internal/utils/retries.go
  - internal/sdk/internal/utils/security.go
  - internal/sdk/internal/utils/utils.go
  - internal/sdk/iometrics.go
  - internal/sdk/jobs.go
  - internal/sdk/keys.go
  - internal/sdk/kubelogs.go
  - internal/sdk/kubeproxy.go
  - internal/sdk/lake.go
  - internal/sdk/lakehouse.go
  - internal/sdk/lakehousedatasetconnections.go
  - internal/sdk/licenses.go
  - internal/sdk/logger.go
  - internal/sdk/logging.go
  - internal/sdk/lookups.go
  - internal/sdk/macros.go
  - internal/sdk/messages.go
  - internal/sdk/metrics.go
  - internal/sdk/models/errors/apierror.go
  - internal/sdk/models/operations/createaiconsent.go
  - internal/sdk/models/operations/createaisettingsfeatures.go
  - internal/sdk/models/operations/createaisettingsfeaturesbyfeature.go
  - internal/sdk/models/operations/createappscopelibentry.go
  - internal/sdk/models/operations/createauthslocallback.go
  - internal/sdk/models/operations/createauthssocallback.go
  - internal/sdk/models/operations/createbannermessage.go
  - internal/sdk/models/operations/createbreakersbypack.go
  - internal/sdk/models/operations/createbulletinmessage.go
  - internal/sdk/models/operations/createcertificate.go
  - internal/sdk/models/operations/createcribllakedatasetbylakeid.go
  - internal/sdk/models/operations/createdashboardcategory.go
  - internal/sdk/models/operations/createdatabaseconnectionconfig.go
  - internal/sdk/models/operations/createdatasample.go
  - internal/sdk/models/operations/createdataset.go
  - internal/sdk/models/operations/createdatasetaclapplybyid.go
  - internal/sdk/models/operations/createdatasetaclteamsapplybyid.go
  - internal/sdk/models/operations/createdatasetprovider.go
  - internal/sdk/models/operations/createdatasetprovidertype.go
  - internal/sdk/models/operations/createdefaultlakelakehouse.go
  - internal/sdk/models/operations/createedgeappscopeprocesses.go
  - internal/sdk/models/operations/createedgefileingest.go
  - internal/sdk/models/operations/createedgekubelogs.go
  - internal/sdk/models/operations/createeventbreakerruleset.go
  - internal/sdk/models/operations/createglobalvariable.go
  - internal/sdk/models/operations/createglobalvariablelibvarsbypack.go
  - internal/sdk/models/operations/creategrokfile.go
  - internal/sdk/models/operations/createhmacfunction.go
  - internal/sdk/models/operations/createinput.go
  - internal/sdk/models/operations/createinputhectokenbyid.go
  - internal/sdk/models/operations/createjobs.go
  - internal/sdk/models/operations/createkeymetadataentity.go
  - internal/sdk/models/operations/createlakehousedatasetconnections.go
  - internal/sdk/models/operations/createlibdatabaseconnectionstest.go
  - internal/sdk/models/operations/createlibexpression.go
  - internal/sdk/models/operations/createlibschemas.go
  - internal/sdk/models/operations/createlicense.go
  - internal/sdk/models/operations/createlookupfile.go
  - internal/sdk/models/operations/createnotification.go
  - internal/sdk/models/operations/createnotificationtarget.go
  - internal/sdk/models/operations/createoutput.go
  - internal/sdk/models/operations/createoutputclickhousedescribetable.go
  - internal/sdk/models/operations/createoutputtestbyid.go
  - internal/sdk/models/operations/createpackoutput.go
  - internal/sdk/models/operations/createpacks.go
  - internal/sdk/models/operations/createpacksclone.go
  - internal/sdk/models/operations/createpackspublishbyid.go
  - internal/sdk/models/operations/createparser.go
  - internal/sdk/models/operations/createpipeline.go
  - internal/sdk/models/operations/createpipelinebypack.go
  - internal/sdk/models/operations/createpolicyrule.go
  - internal/sdk/models/operations/createpreview.go
  - internal/sdk/models/operations/createproductsedgemapquery.go
  - internal/sdk/models/operations/createproductsgroupsbyproduct.go
  - internal/sdk/models/operations/createprofileritem.go
  - internal/sdk/models/operations/createproject.go
  - internal/sdk/models/operations/createprojectaclapplybyid.go
  - internal/sdk/models/operations/createprojectaclteamsapplybyid.go
  - internal/sdk/models/operations/createregexlibentry.go
  - internal/sdk/models/operations/createrestsecret.go
  - internal/sdk/models/operations/createrole.go
  - internal/sdk/models/operations/createroutesappendbyid.go
  - internal/sdk/models/operations/createroutesbygroupid.go
  - internal/sdk/models/operations/createroutesbypack.go
  - internal/sdk/models/operations/createsavedjob.go
  - internal/sdk/models/operations/createsavedquery.go
  - internal/sdk/models/operations/createschema.go
  - internal/sdk/models/operations/createschemalibbypack.go
  - internal/sdk/models/operations/createscript.go
  - internal/sdk/models/operations/createsearchdashboard.go
  - internal/sdk/models/operations/createsearchdashboardaclapplybyid.go
  - internal/sdk/models/operations/createsearchdashboardaclteamsapplybyid.go
  - internal/sdk/models/operations/createsearcheventbreakerpreview.go
  - internal/sdk/models/operations/createsearchjob.go
  - internal/sdk/models/operations/createsearchjobdispatchexecutorsbyid.go
  - internal/sdk/models/operations/createsearchmacro.go
  - internal/sdk/models/operations/createsearchpreview.go
  - internal/sdk/models/operations/createsubscription.go
  - internal/sdk/models/operations/createsystemcapture.go
  - internal/sdk/models/operations/createsystemdiagsend.go
  - internal/sdk/models/operations/createsystemdistributedupgradebygroup.go
  - internal/sdk/models/operations/createsystemdistributedupgradecancelbygroup.go
  - internal/sdk/models/operations/createsystemdistributedupgradestagebygroup.go
  - internal/sdk/models/operations/createsysteminputsbypack.go
  - internal/sdk/models/operations/createsystemlookupsbypack.go
  - internal/sdk/models/operations/createsystemlookupsbypackandid.go
  - internal/sdk/models/operations/createsystemmetricsenum.go
  - internal/sdk/models/operations/createsystemmetricsquery.go
  - internal/sdk/models/operations/createsystemprojectscapturebygroupidandprojectid.go
  - internal/sdk/models/operations/createsystemprojectscapturebyprojectid.go
  - internal/sdk/models/operations/createsystemprojectspipelinesbygroupidandprojectid.go
  - internal/sdk/models/operations/createsystemprojectspreviewbygroupidandprojectid.go
  - internal/sdk/models/operations/createsystemprojectssubscriptionscapturebygroupidandsubscriptionid.go
  - internal/sdk/models/operations/createsystemprojectssubscriptionscapturebyprojectidandsubscriptionid.go
  - internal/sdk/models/operations/createsystemprojectsversioncommitbygroupidandprojectid.go
  - internal/sdk/models/operations/createsystemprojectsversioncommitbyprojectid.go
  - internal/sdk/models/operations/createsystemprojectsversionrevertbyprojectid.go
  - internal/sdk/models/operations/createsystemsettingsupgradebyversion.go
  - internal/sdk/models/operations/createsystemsettingsupgradefrompackage.go
  - internal/sdk/models/operations/createteam.go
  - internal/sdk/models/operations/createteamusersbyid.go
  - internal/sdk/models/operations/createusagegroup.go
  - internal/sdk/models/operations/createuser.go
  - internal/sdk/models/operations/createversioncommit.go
  - internal/sdk/models/operations/createversionpush.go
  - internal/sdk/models/operations/createversionrevert.go
  - internal/sdk/models/operations/createversionsync.go
  - internal/sdk/models/operations/deleteappscopelibentrybyid.go
  - internal/sdk/models/operations/deleteauthusersinvalidationbyid.go
  - internal/sdk/models/operations/deleteauthuserstokenbyid.go
  - internal/sdk/models/operations/deletebannermessagebyid.go
  - internal/sdk/models/operations/deletebreakersbypackandid.go
  - internal/sdk/models/operations/deletebulletinmessagebyid.go
  - internal/sdk/models/operations/deletecertificatebyid.go
  - internal/sdk/models/operations/deletecollectorbyid.go
  - internal/sdk/models/operations/deletecribllakedatasetbylakeidandid.go
  - internal/sdk/models/operations/deletedashboardcategorybyid.go
  - internal/sdk/models/operations/deletedatabaseconnectionconfigbyid.go
  - internal/sdk/models/operations/deletedatasamplebyid.go
  - internal/sdk/models/operations/deletedatasetbyid.go
  - internal/sdk/models/operations/deletedatasetproviderbyid.go
  - internal/sdk/models/operations/deletedatasetprovidertypebyid.go
  - internal/sdk/models/operations/deletedefaultlakelakehousebyid.go
  - internal/sdk/models/operations/deleteedgeappscopeprocessesbypid.go
  - internal/sdk/models/operations/deleteeventbreakerrulesetbyid.go
  - internal/sdk/models/operations/deleteglobalvariablebyid.go
  - internal/sdk/models/operations/deleteglobalvariablelibvarsbypackandid.go
  - internal/sdk/models/operations/deletegrokfilebyid.go
  - internal/sdk/models/operations/deletegroupsbyid.go
  - internal/sdk/models/operations/deletehmacfunctionbyid.go
  - internal/sdk/models/operations/deleteinputbyid.go
  - internal/sdk/models/operations/deleteiometricsentrybyid.go
  - internal/sdk/models/operations/deletejobsbyid.go
  - internal/sdk/models/operations/deletekeymetadataentitybyid.go
  - internal/sdk/models/operations/deletelakehousedatasetconnections.go
  - internal/sdk/models/operations/deletelibschemasbyid.go
  - internal/sdk/models/operations/deletelicensebyid.go
  - internal/sdk/models/operations/deleteloggerconfigbyid.go
  - internal/sdk/models/operations/deletelookupfilebyid.go
  - internal/sdk/models/operations/deletenotificationbyid.go
  - internal/sdk/models/operations/deletenotificationtargetbyid.go
  - internal/sdk/models/operations/deleteoutputbyid.go
  - internal/sdk/models/operations/deleteoutputpqbyid.go
  - internal/sdk/models/operations/deletepackoutputbyid.go
  - internal/sdk/models/operations/deletepacksbyid.go
  - internal/sdk/models/operations/deleteparserbyid.go
  - internal/sdk/models/operations/deletepipelinebyid.go
  - internal/sdk/models/operations/deletepolicyrulebyid.go
  - internal/sdk/models/operations/deleteproductsuserscachebyproduct.go
  - internal/sdk/models/operations/deleteprofileritembyid.go
  - internal/sdk/models/operations/deleteprojectbyid.go
  - internal/sdk/models/operations/deleteregexlibentrybyid.go
  - internal/sdk/models/operations/deleterestsecretbyid.go
  - internal/sdk/models/operations/deleterolebyid.go
  - internal/sdk/models/operations/deletesavedquerybyid.go
  - internal/sdk/models/operations/deleteschemabyid.go
  - internal/sdk/models/operations/deleteschemalibbypackandid.go
  - internal/sdk/models/operations/deletescriptbyid.go
  - internal/sdk/models/operations/deletesearchdashboardbyid.go
  - internal/sdk/models/operations/deletesearchjobbyid.go
  - internal/sdk/models/operations/deletesearchmacrobyid.go
  - internal/sdk/models/operations/deletesubscriptionbyid.go
  - internal/sdk/models/operations/deletesystemdiag.go
  - internal/sdk/models/operations/deletesysteminputsbypack.go
  - internal/sdk/models/operations/deletesystemlookupsbypackandid.go
  - internal/sdk/models/operations/deletesystemprojectspipelinesbygroupidandprojectidandpipelineid.go
  - internal/sdk/models/operations/deleteteambyid.go
  - internal/sdk/models/operations/deleteusagegroupbyid.go
  - internal/sdk/models/operations/deleteuserbyid.go
  - internal/sdk/models/operations/getaiconsent.go
  - internal/sdk/models/operations/getaisettingsfeatures.go
  - internal/sdk/models/operations/getaisettingsfeaturesbyfeature.go
  - internal/sdk/models/operations/getappscopelibentrybyid.go
  - internal/sdk/models/operations/getauthauthorizationcodecallback.go
  - internal/sdk/models/operations/getauthgroups.go
  - internal/sdk/models/operations/getauthmetadata.go
  - internal/sdk/models/operations/getauthmultifactor.go
  - internal/sdk/models/operations/getauthorizepolicy.go
  - internal/sdk/models/operations/getauthorizeroles.go
  - internal/sdk/models/operations/getauthslo.go
  - internal/sdk/models/operations/getauthslocallback.go
  - internal/sdk/models/operations/getauthsso.go
  - internal/sdk/models/operations/getauthssocallback.go
  - internal/sdk/models/operations/getbannermessagebyid.go
  - internal/sdk/models/operations/getbreakersbypack.go
  - internal/sdk/models/operations/getbreakersbypackandid.go
  - internal/sdk/models/operations/getbulletinmessagebyid.go
  - internal/sdk/models/operations/getcertificatebyid.go
  - internal/sdk/models/operations/getchangelogviewed.go
  - internal/sdk/models/operations/getclui.go
  - internal/sdk/models/operations/getcollectorbyid.go
  - internal/sdk/models/operations/getconditionbyid.go
  - internal/sdk/models/operations/getconfigbundlesbygroupandversion.go
  - internal/sdk/models/operations/getcribllakedatasetbylakeid.go
  - internal/sdk/models/operations/getcribllakedatasetbylakeidandid.go
  - internal/sdk/models/operations/getdashboardcategorybyid.go
  - internal/sdk/models/operations/getdatabaseconnectionconfig.go
  - internal/sdk/models/operations/getdatabaseconnectionconfigbyid.go
  - internal/sdk/models/operations/getdatasamplebyid.go
  - internal/sdk/models/operations/getdatasamplecontentbyid.go
  - internal/sdk/models/operations/getdatasetaclbyid.go
  - internal/sdk/models/operations/getdatasetaclteamsbyid.go
  - internal/sdk/models/operations/getdatasetbyid.go
  - internal/sdk/models/operations/getdatasetproviderbyid.go
  - internal/sdk/models/operations/getdatasetprovidertypebyid.go
  - internal/sdk/models/operations/getdefaultlakelakehousebyid.go
  - internal/sdk/models/operations/getdiagbundle.go
  - internal/sdk/models/operations/getedgeappscopeprocesses.go
  - internal/sdk/models/operations/getedgeappscopeprocessesbypid.go
  - internal/sdk/models/operations/getedgecontainers.go
  - internal/sdk/models/operations/getedgecontainersbyid.go
  - internal/sdk/models/operations/getedgeeventscollectors.go
  - internal/sdk/models/operations/getedgeeventsquery.go
  - internal/sdk/models/operations/getedgefileinspect.go
  - internal/sdk/models/operations/getedgefilesample.go
  - internal/sdk/models/operations/getedgekubeproxy.go
  - internal/sdk/models/operations/getedgelogs.go
  - internal/sdk/models/operations/getedgelsbypath.go
  - internal/sdk/models/operations/getedgemetadata.go
  - internal/sdk/models/operations/getedgeprocesses.go
  - internal/sdk/models/operations/getedgeprocessesbypid.go
  - internal/sdk/models/operations/geteventbreakerrulesetbyid.go
  - internal/sdk/models/operations/getexecutorbyid.go
  - internal/sdk/models/operations/getfeaturesentry.go
  - internal/sdk/models/operations/getfeaturesentrybyid.go
  - internal/sdk/models/operations/getfunctionbyid.go
  - internal/sdk/models/operations/getfunctionbypack.go
  - internal/sdk/models/operations/getfunctionbypackandid.go
  - internal/sdk/models/operations/getglobalvariable.go
  - internal/sdk/models/operations/getglobalvariablebyid.go
  - internal/sdk/models/operations/getglobalvariablelibvarsbypack.go
  - internal/sdk/models/operations/getglobalvariablelibvarsbypackandid.go
  - internal/sdk/models/operations/getgrokfilebyid.go
  - internal/sdk/models/operations/getgroupsaclbyid.go
  - internal/sdk/models/operations/getgroupsbyid.go
  - internal/sdk/models/operations/getgroupsconfigversionbyid.go
  - internal/sdk/models/operations/gethealthinfo.go
  - internal/sdk/models/operations/gethealthstatus.go
  - internal/sdk/models/operations/gethmacfunctionbyid.go
  - internal/sdk/models/operations/getinputbyid.go
  - internal/sdk/models/operations/getinputstatusbyid.go
  - internal/sdk/models/operations/getiometricsentrybyid.go
  - internal/sdk/models/operations/getjobresultsbyid.go
  - internal/sdk/models/operations/getjobs.go
  - internal/sdk/models/operations/getjobsbyid.go
  - internal/sdk/models/operations/getjobserrorsbyid.go
  - internal/sdk/models/operations/getjobserrorsbyidandgroup.go
  - internal/sdk/models/operations/getjobsresultsbyidandgroup.go
  - internal/sdk/models/operations/getkeymetadataentitybyid.go
  - internal/sdk/models/operations/getlibschemasbyid.go
  - internal/sdk/models/operations/getlicense.go
  - internal/sdk/models/operations/getlicensebyid.go
  - internal/sdk/models/operations/getloggerconfigbyid.go
  - internal/sdk/models/operations/getlookupfilebyid.go
  - internal/sdk/models/operations/getnotificationbyid.go
  - internal/sdk/models/operations/getnotificationtargetbyid.go
  - internal/sdk/models/operations/getoutputbyid.go
  - internal/sdk/models/operations/getoutputpqbyid.go
  - internal/sdk/models/operations/getoutputsamplesbyid.go
  - internal/sdk/models/operations/getoutputstatusbyid.go
  - internal/sdk/models/operations/getpackoutputbyid.go
  - internal/sdk/models/operations/getpacks.go
  - internal/sdk/models/operations/getpacksbygroup.go
  - internal/sdk/models/operations/getpacksbyid.go
  - internal/sdk/models/operations/getpacksexportbyid.go
  - internal/sdk/models/operations/getpacksrefsbyid.go
  - internal/sdk/models/operations/getparserbyid.go
  - internal/sdk/models/operations/getpipelinebyid.go
  - internal/sdk/models/operations/getpipelinesbypack.go
  - internal/sdk/models/operations/getpipelinesbypackwithid.go
  - internal/sdk/models/operations/getpolicyrulebyid.go
  - internal/sdk/models/operations/getproductsgroupsaclteamsbyproductandid.go
  - internal/sdk/models/operations/getproductsgroupsbyproduct.go
  - internal/sdk/models/operations/getproductsusersaclbyproductandid.go
  - internal/sdk/models/operations/getproductsusersbyproduct.go
  - internal/sdk/models/operations/getprofileritembyid.go
  - internal/sdk/models/operations/getprojectaclbyid.go
  - internal/sdk/models/operations/getprojectaclteamsbyid.go
  - internal/sdk/models/operations/getprojectbyid.go
  - internal/sdk/models/operations/getprojectdestinationsbyprojectid.go
  - internal/sdk/models/operations/getprotobuflibraryconfig.go
  - internal/sdk/models/operations/getprotobuflibraryconfigbyid.go
  - internal/sdk/models/operations/getprotobuflibraryconfigencodingsbyid.go
  - internal/sdk/models/operations/getprotobuflibraryconfigencodingsbyidandencid.go
  - internal/sdk/models/operations/getregexlibentrybyid.go
  - internal/sdk/models/operations/getrestsecretbyid.go
  - internal/sdk/models/operations/getrolebyid.go
  - internal/sdk/models/operations/getroutesbygroupid.go
  - internal/sdk/models/operations/getroutesbyid.go
  - internal/sdk/models/operations/getroutesbypack.go
  - internal/sdk/models/operations/getsavedjobbyid.go
  - internal/sdk/models/operations/getsavedquerybyid.go
  - internal/sdk/models/operations/getschemabyid.go
  - internal/sdk/models/operations/getschemalibbypack.go
  - internal/sdk/models/operations/getschemalibbypackandid.go
  - internal/sdk/models/operations/getscriptbyid.go
  - internal/sdk/models/operations/getsearchdashboardaclbyid.go
  - internal/sdk/models/operations/getsearchdashboardaclteamsbyid.go
  - internal/sdk/models/operations/getsearchdashboardbyid.go
  - internal/sdk/models/operations/getsearchhealthcheck.go
  - internal/sdk/models/operations/getsearchjobbyid.go
  - internal/sdk/models/operations/getsearchjoblogsbyid.go
  - internal/sdk/models/operations/getsearchjobmetrics.go
  - internal/sdk/models/operations/getsearchjobsmetricsbyid.go
  - internal/sdk/models/operations/getsearchjobsresultsbyid.go
  - internal/sdk/models/operations/getsearchjobsresultspollbyid.go
  - internal/sdk/models/operations/getsearchjobsstagesresultsbyidandstageid.go
  - internal/sdk/models/operations/getsearchmacrobyid.go
  - internal/sdk/models/operations/getsecuritykmsconfig.go
  - internal/sdk/models/operations/getsecuritykmshealth.go
  - internal/sdk/models/operations/getsubscriptionbyid.go
  - internal/sdk/models/operations/getsubscriptionbyprojectid.go
  - internal/sdk/models/operations/getsummary.go
  - internal/sdk/models/operations/getsummaryworkers.go
  - internal/sdk/models/operations/getsystemdiag.go
  - internal/sdk/models/operations/getsystemdistributedupgradedownloadbyfile.go
  - internal/sdk/models/operations/getsysteminfo.go
  - internal/sdk/models/operations/getsysteminputsbypack.go
  - internal/sdk/models/operations/getsysteminputsbypackandid.go
  - internal/sdk/models/operations/getsystemjobslogsbyidandgroupid.go
  - internal/sdk/models/operations/getsystemlogs.go
  - internal/sdk/models/operations/getsystemlogsbyid.go
  - internal/sdk/models/operations/getsystemlogssearch.go
  - internal/sdk/models/operations/getsystemlookupsbypack.go
  - internal/sdk/models/operations/getsystemlookupsbypackandid.go
  - internal/sdk/models/operations/getsystemmetrics.go
  - internal/sdk/models/operations/getsystemprocesses.go
  - internal/sdk/models/operations/getsystemprojectspipelinesbygroupidandprojectid.go
  - internal/sdk/models/operations/getsystemprojectspipelinesbygroupidandprojectidandpipelineid.go
  - internal/sdk/models/operations/getsystemprojectssubscriptionsbygroupidbyandprojectid.go
  - internal/sdk/models/operations/getsystemprojectsversioncountbygroupidandprojectid.go
  - internal/sdk/models/operations/getsystemprojectsversioncountbyprojectid.go
  - internal/sdk/models/operations/getsystemprojectsversiondiffbygroupidandprojectid.go
  - internal/sdk/models/operations/getsystemprojectsversiondiffbyprojectid.go
  - internal/sdk/models/operations/getsystemprojectsversionfilesbygroupidandprojectid.go
  - internal/sdk/models/operations/getsystemprojectsversionfilesbyprojectid.go
  - internal/sdk/models/operations/getsystemprojectsversionshowbyprojectid.go
  - internal/sdk/models/operations/getsystemsettings.go
  - internal/sdk/models/operations/getsystemsettingsauth.go
  - internal/sdk/models/operations/getsystemsettingsconf.go
  - internal/sdk/models/operations/getsystemsettingscribl.go
  - internal/sdk/models/operations/getsystemsettingsgitsettings.go
  - internal/sdk/models/operations/getsystemsettingssearchlimits.go
  - internal/sdk/models/operations/getsystemsettingsupgrade.go
  - internal/sdk/models/operations/getteam.go
  - internal/sdk/models/operations/getteamaclbyid.go
  - internal/sdk/models/operations/getteambyid.go
  - internal/sdk/models/operations/getteamrolesbyid.go
  - internal/sdk/models/operations/getteamusersbyid.go
  - internal/sdk/models/operations/getuibykey.go
  - internal/sdk/models/operations/getusagegroupbyid.go
  - internal/sdk/models/operations/getuserbyid.go
  - internal/sdk/models/operations/getversionbranch.go
  - internal/sdk/models/operations/getversioncount.go
  - internal/sdk/models/operations/getversioncurrentbranch.go
  - internal/sdk/models/operations/getversiondiff.go
  - internal/sdk/models/operations/getversionfiles.go
  - internal/sdk/models/operations/getversioninfo.go
  - internal/sdk/models/operations/getversionshow.go
  - internal/sdk/models/operations/getversionstatus.go
  - internal/sdk/models/operations/getworkers.go
  - internal/sdk/models/operations/listappscopelibentry.go
  - internal/sdk/models/operations/listbannermessage.go
  - internal/sdk/models/operations/listbulletinmessage.go
  - internal/sdk/models/operations/listcertificate.go
  - internal/sdk/models/operations/listcollector.go
  - internal/sdk/models/operations/listcollectors.go
  - internal/sdk/models/operations/listcondition.go
  - internal/sdk/models/operations/listdashboardcategory.go
  - internal/sdk/models/operations/listdatasample.go
  - internal/sdk/models/operations/listdataset.go
  - internal/sdk/models/operations/listdatasetprovider.go
  - internal/sdk/models/operations/listdatasetprovidertype.go
  - internal/sdk/models/operations/listdefaultlakelakehouses.go
  - internal/sdk/models/operations/listeventbreakerruleset.go
  - internal/sdk/models/operations/listexecutor.go
  - internal/sdk/models/operations/listfunction.go
  - internal/sdk/models/operations/listgrokfile.go
  - internal/sdk/models/operations/listhmacfunction.go
  - internal/sdk/models/operations/listinput.go
  - internal/sdk/models/operations/listinputstatus.go
  - internal/sdk/models/operations/listinstancesettingsschema.go
  - internal/sdk/models/operations/listiometricsentry.go
  - internal/sdk/models/operations/listkeymetadataentity.go
  - internal/sdk/models/operations/listlibschemas.go
  - internal/sdk/models/operations/listlicense.go
  - internal/sdk/models/operations/listloggerconfig.go
  - internal/sdk/models/operations/listlookupfile.go
  - internal/sdk/models/operations/listnotification.go
  - internal/sdk/models/operations/listnotificationtarget.go
  - internal/sdk/models/operations/listoutput.go
  - internal/sdk/models/operations/listoutputstatus.go
  - internal/sdk/models/operations/listpackoutput.go
  - internal/sdk/models/operations/listparser.go
  - internal/sdk/models/operations/listpipeline.go
  - internal/sdk/models/operations/listpolicyrule.go
  - internal/sdk/models/operations/listprofileritem.go
  - internal/sdk/models/operations/listproject.go
  - internal/sdk/models/operations/listregexlibentry.go
  - internal/sdk/models/operations/listrestsecret.go
  - internal/sdk/models/operations/listrole.go
  - internal/sdk/models/operations/listroutes.go
  - internal/sdk/models/operations/listsavedquery.go
  - internal/sdk/models/operations/listschema.go
  - internal/sdk/models/operations/listscript.go
  - internal/sdk/models/operations/listsearchdashboard.go
  - internal/sdk/models/operations/listsearchjob.go
  - internal/sdk/models/operations/listsearchmacro.go
  - internal/sdk/models/operations/listsubscription.go
  - internal/sdk/models/operations/listtrustpolicy.go
  - internal/sdk/models/operations/listusagegroup.go
  - internal/sdk/models/operations/listuser.go
  - internal/sdk/models/operations/login.go
  - internal/sdk/models/operations/logout.go
  - internal/sdk/models/operations/options.go
  - internal/sdk/models/operations/reloadsettings.go
  - internal/sdk/models/operations/triggerrestart.go
  - internal/sdk/models/operations/undolastcommit.go
  - internal/sdk/models/operations/updateappscopelibentrybyid.go
  - internal/sdk/models/operations/updatebannermessagebyid.go
  - internal/sdk/models/operations/updatebreakersbypackandid.go
  - internal/sdk/models/operations/updatecertificatebyid.go
  - internal/sdk/models/operations/updatechangelogviewed.go
  - internal/sdk/models/operations/updatecollectorbyid.go
  - internal/sdk/models/operations/updatecribllakedatasetbylakeidandid.go
  - internal/sdk/models/operations/updatedashboardcategorybyid.go
  - internal/sdk/models/operations/updatedatabaseconnectionconfigbyid.go
  - internal/sdk/models/operations/updatedatasamplebyid.go
  - internal/sdk/models/operations/updatedatasetbyid.go
  - internal/sdk/models/operations/updatedatasetproviderbyid.go
  - internal/sdk/models/operations/updatedatasetprovidertypebyid.go
  - internal/sdk/models/operations/updatedefaultlakelakehousebyid.go
  - internal/sdk/models/operations/updateedgeappscopeprocessesbypid.go
  - internal/sdk/models/operations/updateeventbreakerrulesetbyid.go
  - internal/sdk/models/operations/updateglobalvariablebyid.go
  - internal/sdk/models/operations/updateglobalvariablelibvarsbypackandid.go
  - internal/sdk/models/operations/updategrokfilebyid.go
  - internal/sdk/models/operations/updategroupsbyid.go
  - internal/sdk/models/operations/updategroupsdeploybyid.go
  - internal/sdk/models/operations/updatehmacfunctionbyid.go
  - internal/sdk/models/operations/updateinputbyid.go
  - internal/sdk/models/operations/updateinputhectokenbyidandtoken.go
  - internal/sdk/models/operations/updateiometricsentrybyid.go
  - internal/sdk/models/operations/updatejobscancelbyid.go
  - internal/sdk/models/operations/updatejobskeepbyid.go
  - internal/sdk/models/operations/updatejobspausebyid.go
  - internal/sdk/models/operations/updatejobsresumebyid.go
  - internal/sdk/models/operations/updatekeymetadataentitybyid.go
  - internal/sdk/models/operations/updatelakehousedatasetconnections.go
  - internal/sdk/models/operations/updatelibschemasbyid.go
  - internal/sdk/models/operations/updateloggerconfigbyid.go
  - internal/sdk/models/operations/updatelookupfilebyid.go
  - internal/sdk/models/operations/updatenotificationbyid.go
  - internal/sdk/models/operations/updatenotificationtargetbyid.go
  - internal/sdk/models/operations/updateoutputbyid.go
  - internal/sdk/models/operations/updatepackoutputbyid.go
  - internal/sdk/models/operations/updatepacks.go
  - internal/sdk/models/operations/updatepacksbyid.go
  - internal/sdk/models/operations/updateparserbyid.go
  - internal/sdk/models/operations/updatepipelinebyid.go
  - internal/sdk/models/operations/updatepipelinebypackandid.go
  - internal/sdk/models/operations/updatepolicyrulebyid.go
  - internal/sdk/models/operations/updateprofileritembyid.go
  - internal/sdk/models/operations/updateprojectbyid.go
  - internal/sdk/models/operations/updateregexlibentrybyid.go
  - internal/sdk/models/operations/updaterestsecretbyid.go
  - internal/sdk/models/operations/updaterolebyid.go
  - internal/sdk/models/operations/updateroutesbyid.go
  - internal/sdk/models/operations/updatesavedquerybyid.go
  - internal/sdk/models/operations/updateschemabyid.go
  - internal/sdk/models/operations/updateschemalibbypackandid.go
  - internal/sdk/models/operations/updatescriptbyid.go
  - internal/sdk/models/operations/updatesearchdashboardbyid.go
  - internal/sdk/models/operations/updatesearchjobbyid.go
  - internal/sdk/models/operations/updatesearchmacrobyid.go
  - internal/sdk/models/operations/updatesecuritykmsconfig.go
  - internal/sdk/models/operations/updatesubscriptionbyid.go
  - internal/sdk/models/operations/updatesysteminputsbypack.go
  - internal/sdk/models/operations/updatesystemprojectspipelinesbygroupidandprojectidandpipelineid.go
  - internal/sdk/models/operations/updatesystemsettings.go
  - internal/sdk/models/operations/updatesystemsettingsauth.go
  - internal/sdk/models/operations/updatesystemsettingsconf.go
  - internal/sdk/models/operations/updatesystemsettingsgitsettings.go
  - internal/sdk/models/operations/updateteambyid.go
  - internal/sdk/models/operations/updateuibykey.go
  - internal/sdk/models/operations/updateusagegroupbyid.go
  - internal/sdk/models/operations/updateuserbyid.go
  - internal/sdk/models/operations/updateuserinfobyid.go
  - internal/sdk/models/operations/updateworkersrestart.go
  - internal/sdk/models/operations/v1workspacescreateworkspace.go
  - internal/sdk/models/operations/v1workspacesdeleteworkspace.go
  - internal/sdk/models/operations/v1workspacesgetworkspace.go
  - internal/sdk/models/operations/v1workspaceslistworkspaces.go
  - internal/sdk/models/operations/v1workspacesupdateworkspace.go
  - internal/sdk/models/shared/accesscontrol.go
  - internal/sdk/models/shared/accesscontrolschema.go
  - internal/sdk/models/shared/addhectokenrequest.go
  - internal/sdk/models/shared/aggregationmgroptions.go
  - internal/sdk/models/shared/amtrustpolicy.go
  - internal/sdk/models/shared/appmode.go
  - internal/sdk/models/shared/appscopeconfig.go
  - internal/sdk/models/shared/appscopeconfigwithcustom.go
  - internal/sdk/models/shared/appscopecustom.go
  - internal/sdk/models/shared/appscopelibentry.go
  - internal/sdk/models/shared/appscopeprocess.go
  - internal/sdk/models/shared/appscopeprocessingstatus.go
  - internal/sdk/models/shared/appscopeprocessstatus.go
  - internal/sdk/models/shared/appscopetransport.go
  - internal/sdk/models/shared/authconfig.go
  - internal/sdk/models/shared/authpolicyentry.go
  - internal/sdk/models/shared/authprovider.go
  - internal/sdk/models/shared/authtoken.go
  - internal/sdk/models/shared/awsaccountconfig.go
  - internal/sdk/models/shared/awskmsserviceconfig.go
  - internal/sdk/models/shared/awsmetadata.go
  - internal/sdk/models/shared/azureaccountconfig.go
  - internal/sdk/models/shared/bannermessage.go
  - internal/sdk/models/shared/bulletinmessage.go
  - internal/sdk/models/shared/captureparams.go
  - internal/sdk/models/shared/certificate.go
  - internal/sdk/models/shared/changelogstate.go
  - internal/sdk/models/shared/choutconfig.go
  - internal/sdk/models/shared/clickhousedescriptioncolumn.go
  - internal/sdk/models/shared/clickhousedescriptionresult.go
  - internal/sdk/models/shared/cloudprovider.go
  - internal/sdk/models/shared/cloudworkspaceschema.go
  - internal/sdk/models/shared/cluiitem.go
  - internal/sdk/models/shared/cluitype.go
  - internal/sdk/models/shared/collector.go
  - internal/sdk/models/shared/columnfiltersettings.go
  - internal/sdk/models/shared/columnformatsettings.go
  - internal/sdk/models/shared/columnordersettings.go
  - internal/sdk/models/shared/columnsortsettings.go
  - internal/sdk/models/shared/commit.go
  - internal/sdk/models/shared/commonservicelimitconfigs.go
  - internal/sdk/models/shared/condition.go
  - internal/sdk/models/shared/configbundles.go
  - internal/sdk/models/shared/configgroup.go
  - internal/sdk/models/shared/configgroupcloud.go
  - internal/sdk/models/shared/configgrouplookups.go
  - internal/sdk/models/shared/container.go
  - internal/sdk/models/shared/containerdcontainer.go
  - internal/sdk/models/shared/containerdinfo.go
  - internal/sdk/models/shared/containerdmount.go
  - internal/sdk/models/shared/containerdroot.go
  - internal/sdk/models/shared/containerdtask.go
  - internal/sdk/models/shared/containerport.go
  - internal/sdk/models/shared/cputimemetric.go
  - internal/sdk/models/shared/criblevent.go
  - internal/sdk/models/shared/cribllakedataset.go
  - internal/sdk/models/shared/cribllib.go
  - internal/sdk/models/shared/criblmetadata.go
  - internal/sdk/models/shared/crudentitybase.go
  - internal/sdk/models/shared/dailyusagemetrics.go
  - internal/sdk/models/shared/dashboardcategory.go
  - internal/sdk/models/shared/dashboardelementtype.go
  - internal/sdk/models/shared/dashboardelementvariant.go
  - internal/sdk/models/shared/dashboardlayout.go
  - internal/sdk/models/shared/databaseconnectionconfig.go
  - internal/sdk/models/shared/databaseconnectiontest.go
  - internal/sdk/models/shared/databaseconnectiontestresult.go
  - internal/sdk/models/shared/databaseconnectiontype.go
  - internal/sdk/models/shared/datasample.go
  - internal/sdk/models/shared/datasetmetadata.go
  - internal/sdk/models/shared/datasetorigin.go
  - internal/sdk/models/shared/datasetprovidertype.go
  - internal/sdk/models/shared/datatypeoverrides.go
  - internal/sdk/models/shared/datatypepreviewinput.go
  - internal/sdk/models/shared/datatypepreviewrequestbody.go
  - internal/sdk/models/shared/deployrequest.go
  - internal/sdk/models/shared/diag.go
  - internal/sdk/models/shared/distributedsummary.go
  - internal/sdk/models/shared/distributedupgraderequest.go
  - internal/sdk/models/shared/dockergraphdriver.go
  - internal/sdk/models/shared/dockergraphdriverdata.go
  - internal/sdk/models/shared/dockerinfo.go
  - internal/sdk/models/shared/dockermount.go
  - internal/sdk/models/shared/edgefile.go
  - internal/sdk/models/shared/edgefileinspectresponse.go
  - internal/sdk/models/shared/edgeheartbeatmetricsmode.go
  - internal/sdk/models/shared/edgemapqueryresult.go
  - internal/sdk/models/shared/envmetadata.go
  - internal/sdk/models/shared/error.go
  - internal/sdk/models/shared/eventbreakerrule.go
  - internal/sdk/models/shared/eventbreakerrulefields.go
  - internal/sdk/models/shared/eventbreakerruleset.go
  - internal/sdk/models/shared/executor.go
  - internal/sdk/models/shared/expression.go
  - internal/sdk/models/shared/exprlibentry.go
  - internal/sdk/models/shared/failoverconfigs.go
  - internal/sdk/models/shared/featuresentry.go
  - internal/sdk/models/shared/fileprocessinfo.go
  - internal/sdk/models/shared/filesystementry.go
  - internal/sdk/models/shared/formatenum.go
  - internal/sdk/models/shared/function.go
  - internal/sdk/models/shared/gcpaccountconfig.go
  - internal/sdk/models/shared/gcpendpointconfig.go
  - internal/sdk/models/shared/genericdataset.go
  - internal/sdk/models/shared/genericprovider.go
  - internal/sdk/models/shared/gitcommitparams.go
  - internal/sdk/models/shared/gitcommitsummary.go
  - internal/sdk/models/shared/gitfile.go
  - internal/sdk/models/shared/gitfilesresponse.go
  - internal/sdk/models/shared/gitinfo.go
  - internal/sdk/models/shared/gitopstype.go
  - internal/sdk/models/shared/gitrevertparams.go
  - internal/sdk/models/shared/gitrevertresult.go
  - internal/sdk/models/shared/gitsettings.go
  - internal/sdk/models/shared/gitstatusresult.go
  - internal/sdk/models/shared/globalvar.go
  - internal/sdk/models/shared/googleworkspaceaccountconfig.go
  - internal/sdk/models/shared/grokfile.go
  - internal/sdk/models/shared/group.go
  - internal/sdk/models/shared/hbcriblinfo.go
  - internal/sdk/models/shared/hbleaderinfo.go
  - internal/sdk/models/shared/healthstatus.go
  - internal/sdk/models/shared/heartbeatmetadata.go
  - internal/sdk/models/shared/hmacfunction.go
  - internal/sdk/models/shared/httpendpoint.go
  - internal/sdk/models/shared/httpheader.go
  - internal/sdk/models/shared/httpoutauthconfig.go
  - internal/sdk/models/shared/httpoutextraparamconfig.go
  - internal/sdk/models/shared/httpoutresponseretryconfig.go
  - internal/sdk/models/shared/input.go
  - internal/sdk/models/shared/inputappscope.go
  - internal/sdk/models/shared/inputazureblob.go
  - internal/sdk/models/shared/inputcollection.go
  - internal/sdk/models/shared/inputcollector.go
  - internal/sdk/models/shared/inputcollectorazureblob.go
  - internal/sdk/models/shared/inputcollectorcribllake.go
  - internal/sdk/models/shared/inputcollectordatabase.go
  - internal/sdk/models/shared/inputcollectorgcs.go
  - internal/sdk/models/shared/inputcollectorhealthcheck.go
  - internal/sdk/models/shared/inputcollectorrest.go
  - internal/sdk/models/shared/inputcollectors3.go
  - internal/sdk/models/shared/inputcollectorsplunk.go
  - internal/sdk/models/shared/inputconfluentcloud.go
  - internal/sdk/models/shared/inputcribl.go
  - internal/sdk/models/shared/inputcriblhttp.go
  - internal/sdk/models/shared/inputcribllakehttp.go
  - internal/sdk/models/shared/inputcriblmetrics.go
  - internal/sdk/models/shared/inputcribltcp.go
  - internal/sdk/models/shared/inputcrowdstrike.go
  - internal/sdk/models/shared/inputdatadogagent.go
  - internal/sdk/models/shared/inputdatagen.go
  - internal/sdk/models/shared/inputedgeprometheus.go
  - internal/sdk/models/shared/inputelastic.go
  - internal/sdk/models/shared/inputeventhub.go
  - internal/sdk/models/shared/inputexec.go
  - internal/sdk/models/shared/inputfile.go
  - internal/sdk/models/shared/inputfirehose.go
  - internal/sdk/models/shared/inputgooglepubsub.go
  - internal/sdk/models/shared/inputgrafana.go
  - internal/sdk/models/shared/inputhttp.go
  - internal/sdk/models/shared/inputhttpraw.go
  - internal/sdk/models/shared/inputjournalfiles.go
  - internal/sdk/models/shared/inputkafka.go
  - internal/sdk/models/shared/inputkinesis.go
  - internal/sdk/models/shared/inputkubeevents.go
  - internal/sdk/models/shared/inputkubelogs.go
  - internal/sdk/models/shared/inputkubemetrics.go
  - internal/sdk/models/shared/inputloki.go
  - internal/sdk/models/shared/inputmetrics.go
  - internal/sdk/models/shared/inputmodeldriventelemetry.go
  - internal/sdk/models/shared/inputmsk.go
  - internal/sdk/models/shared/inputnetflow.go
  - internal/sdk/models/shared/inputoffice365mgmt.go
  - internal/sdk/models/shared/inputoffice365msgtrace.go
  - internal/sdk/models/shared/inputoffice365service.go
  - internal/sdk/models/shared/inputopentelemetry.go
  - internal/sdk/models/shared/inputprometheus.go
  - internal/sdk/models/shared/inputprometheusrw.go
  - internal/sdk/models/shared/inputrawudp.go
  - internal/sdk/models/shared/inputs3.go
  - internal/sdk/models/shared/inputs3inventory.go
  - internal/sdk/models/shared/inputsecuritylake.go
  - internal/sdk/models/shared/inputsnmp.go
  - internal/sdk/models/shared/inputsplunk.go
  - internal/sdk/models/shared/inputsplunkhec.go
  - internal/sdk/models/shared/inputsplunksearch.go
  - internal/sdk/models/shared/inputsqs.go
  - internal/sdk/models/shared/inputstatus.go
  - internal/sdk/models/shared/inputsyslog.go
  - internal/sdk/models/shared/inputsystemmetrics.go
  - internal/sdk/models/shared/inputsystemstate.go
  - internal/sdk/models/shared/inputtcp.go
  - internal/sdk/models/shared/inputtcpjson.go
  - internal/sdk/models/shared/inputwef.go
  - internal/sdk/models/shared/inputwindowsmetrics.go
  - internal/sdk/models/shared/inputwineventlogs.go
  - internal/sdk/models/shared/inputwiz.go
  - internal/sdk/models/shared/inputzscalerhec.go
  - internal/sdk/models/shared/instancesettingsschemaunion.go
  - internal/sdk/models/shared/iometricsentry.go
  - internal/sdk/models/shared/iometricsentrylevel.go
  - internal/sdk/models/shared/jobexecutionwarning.go
  - internal/sdk/models/shared/jobinfo.go
  - internal/sdk/models/shared/jobsettings.go
  - internal/sdk/models/shared/jobstate.go
  - internal/sdk/models/shared/jobstatus.go
  - internal/sdk/models/shared/keymetadataentity.go
  - internal/sdk/models/shared/kmshealth.go
  - internal/sdk/models/shared/kmshealthstatus.go
  - internal/sdk/models/shared/kmshealthtest.go
  - internal/sdk/models/shared/kmsproviderconfig.go
  - internal/sdk/models/shared/kubemetadata.go
  - internal/sdk/models/shared/lakedatasetsearchconfig.go
  - internal/sdk/models/shared/lakehouse.go
  - internal/sdk/models/shared/license.go
  - internal/sdk/models/shared/licenseinfo.go
  - internal/sdk/models/shared/licenselimits.go
  - internal/sdk/models/shared/licenserequest.go
  - internal/sdk/models/shared/limits.go
  - internal/sdk/models/shared/logfileinfo.go
  - internal/sdk/models/shared/loggerconfig.go
  - internal/sdk/models/shared/loggerentry.go
  - internal/sdk/models/shared/logininfo.go
  - internal/sdk/models/shared/lookupfile.go
  - internal/sdk/models/shared/lookupversions.go
  - internal/sdk/models/shared/mappingtype.go
  - internal/sdk/models/shared/masterschema.go
  - internal/sdk/models/shared/masterworkerentry.go
  - internal/sdk/models/shared/membershipschema.go
  - internal/sdk/models/shared/metadata.go
  - internal/sdk/models/shared/metadataitem.go
  - internal/sdk/models/shared/metricnameinfo.go
  - internal/sdk/models/shared/metricsaggopts.go
  - internal/sdk/models/shared/metricsstore.go
  - internal/sdk/models/shared/msgraphaccountconfig.go
  - internal/sdk/models/shared/multifactorauthschema.go
  - internal/sdk/models/shared/namevalue.go
  - internal/sdk/models/shared/networkinterfaces.go
  - internal/sdk/models/shared/nodeactiveupgradestatus.go
  - internal/sdk/models/shared/nodefailedupgradestatus.go
  - internal/sdk/models/shared/nodeprovidedinfo.go
  - internal/sdk/models/shared/nodeskippedupgradestatus.go
  - internal/sdk/models/shared/nodeupgradestate.go
  - internal/sdk/models/shared/nodeupgradestatus.go
  - internal/sdk/models/shared/notification.go
  - internal/sdk/models/shared/notificationtarget.go
  - internal/sdk/models/shared/oktaaccountconfig.go
  - internal/sdk/models/shared/originconfig.go
  - internal/sdk/models/shared/osmetadata.go
  - internal/sdk/models/shared/output.go
  - internal/sdk/models/shared/outputazureblob.go
  - internal/sdk/models/shared/outputazuredataexplorer.go
  - internal/sdk/models/shared/outputazureeventhub.go
  - internal/sdk/models/shared/outputazurelogs.go
  - internal/sdk/models/shared/outputclickhouse.go
  - internal/sdk/models/shared/outputcloudwatch.go
  - internal/sdk/models/shared/outputconfluentcloud.go
  - internal/sdk/models/shared/outputcriblhttp.go
  - internal/sdk/models/shared/outputcribllake.go
  - internal/sdk/models/shared/outputcribltcp.go
  - internal/sdk/models/shared/outputcrowdstrikenextgensiem.go
  - internal/sdk/models/shared/outputdatadog.go
  - internal/sdk/models/shared/outputdataset.go
  - internal/sdk/models/shared/outputdefault.go
  - internal/sdk/models/shared/outputdevnull.go
  - internal/sdk/models/shared/outputdiskspool.go
  - internal/sdk/models/shared/outputdls3.go
  - internal/sdk/models/shared/outputdynatracehttp.go
  - internal/sdk/models/shared/outputdynatraceotlp.go
  - internal/sdk/models/shared/outputelastic.go
  - internal/sdk/models/shared/outputelasticcloud.go
  - internal/sdk/models/shared/outputexabeam.go
  - internal/sdk/models/shared/outputfilesystem.go
  - internal/sdk/models/shared/outputgooglechronicle.go
  - internal/sdk/models/shared/outputgooglecloudlogging.go
  - internal/sdk/models/shared/outputgooglecloudstorage.go
  - internal/sdk/models/shared/outputgooglepubsub.go
  - internal/sdk/models/shared/outputgrafanacloud.go
  - internal/sdk/models/shared/outputgraphite.go
  - internal/sdk/models/shared/outputhoneycomb.go
  - internal/sdk/models/shared/outputhumiohec.go
  - internal/sdk/models/shared/outputinfluxdb.go
  - internal/sdk/models/shared/outputkafka.go
  - internal/sdk/models/shared/outputkinesis.go
  - internal/sdk/models/shared/outputloki.go
  - internal/sdk/models/shared/outputminio.go
  - internal/sdk/models/shared/outputmsk.go
  - internal/sdk/models/shared/outputnetflow.go
  - internal/sdk/models/shared/outputnewrelic.go
  - internal/sdk/models/shared/outputnewrelicevents.go
  - internal/sdk/models/shared/outputopentelemetry.go
  - internal/sdk/models/shared/outputprometheus.go
  - internal/sdk/models/shared/outputring.go
  - internal/sdk/models/shared/outputrouter.go
  - internal/sdk/models/shared/outputs3.go
  - internal/sdk/models/shared/outputsamplesresponse.go
  - internal/sdk/models/shared/outputsecuritylake.go
  - internal/sdk/models/shared/outputsentinel.go
  - internal/sdk/models/shared/outputservicenow.go
  - internal/sdk/models/shared/outputsignalfx.go
  - internal/sdk/models/shared/outputsnmp.go
  - internal/sdk/models/shared/outputsns.go
  - internal/sdk/models/shared/outputsplunk.go
  - internal/sdk/models/shared/outputsplunkhec.go
  - internal/sdk/models/shared/outputsplunklb.go
  - internal/sdk/models/shared/outputsqs.go
  - internal/sdk/models/shared/outputstatsd.go
  - internal/sdk/models/shared/outputstatsdext.go
  - internal/sdk/models/shared/outputstatus.go
  - internal/sdk/models/shared/outputsumologic.go
  - internal/sdk/models/shared/outputsyslog.go
  - internal/sdk/models/shared/outputtcpjson.go
  - internal/sdk/models/shared/outputtestrequest.go
  - internal/sdk/models/shared/outputtestresponse.go
  - internal/sdk/models/shared/outputwavefront.go
  - internal/sdk/models/shared/outputwebhook.go
  - internal/sdk/models/shared/outputxsiam.go
  - internal/sdk/models/shared/packclone.go
  - internal/sdk/models/shared/packinstallinfo.go
  - internal/sdk/models/shared/packrequestbody.go
  - internal/sdk/models/shared/pagerdutytarget.go
  - internal/sdk/models/shared/paginationconfig.go
  - internal/sdk/models/shared/parserlibentry.go
  - internal/sdk/models/shared/parsermode.go
  - internal/sdk/models/shared/pipeline.go
  - internal/sdk/models/shared/pipelinefunctionconf.go
  - internal/sdk/models/shared/policyrule.go
  - internal/sdk/models/shared/previewdataparams.go
  - internal/sdk/models/shared/previewoptions.go
  - internal/sdk/models/shared/previewrequestbody.go
  - internal/sdk/models/shared/previewresponsebody.go
  - internal/sdk/models/shared/process.go
  - internal/sdk/models/shared/processentry.go
  - internal/sdk/models/shared/profileritem.go
  - internal/sdk/models/shared/projectconfig.go
  - internal/sdk/models/shared/projectdestination.go
  - internal/sdk/models/shared/projectgitcommitparams.go
  - internal/sdk/models/shared/protobufbytesconversion.go
  - internal/sdk/models/shared/protobufencodingconfig.go
  - internal/sdk/models/shared/protobufenumconversion.go
  - internal/sdk/models/shared/protobuflibraryconfig.go
  - internal/sdk/models/shared/protobuflibraryconversionconfig.go
  - internal/sdk/models/shared/protobuflongconversion.go
  - internal/sdk/models/shared/publicsettings.go
  - internal/sdk/models/shared/publishpackresponse.go
  - internal/sdk/models/shared/publishpacktogitstatustype.go
  - internal/sdk/models/shared/rbacresource.go
  - internal/sdk/models/shared/redirectinfo.go
  - internal/sdk/models/shared/rediscachelimits.go
  - internal/sdk/models/shared/redisconnectionlimits.go
  - internal/sdk/models/shared/redislimits.go
  - internal/sdk/models/shared/referencedentity.go
  - internal/sdk/models/shared/referencingentity.go
  - internal/sdk/models/shared/regexlibentry.go
  - internal/sdk/models/shared/resiliencytype.go
  - internal/sdk/models/shared/resourcepolicy.go
  - internal/sdk/models/shared/restartresponse.go
  - internal/sdk/models/shared/restsecret.go
  - internal/sdk/models/shared/retrybackoffoptions.go
  - internal/sdk/models/shared/role.go
  - internal/sdk/models/shared/routecloneconf.go
  - internal/sdk/models/shared/routeconf.go
  - internal/sdk/models/shared/routes.go
  - internal/sdk/models/shared/routesroute.go
  - internal/sdk/models/shared/routesrouteinput.go
  - internal/sdk/models/shared/runnablejob.go
  - internal/sdk/models/shared/runnablejobcollection.go
  - internal/sdk/models/shared/runnablejobexecutor.go
  - internal/sdk/models/shared/runnablejobscheduledsearch.go
  - internal/sdk/models/shared/samplefile.go
  - internal/sdk/models/shared/savedjob.go
  - internal/sdk/models/shared/savedjobcollection.go
  - internal/sdk/models/shared/savedjobexecutor.go
  - internal/sdk/models/shared/savedjobscheduledsearch.go
  - internal/sdk/models/shared/savedquery.go
  - internal/sdk/models/shared/savedqueryschedule.go
  - internal/sdk/models/shared/savessearchrunmode.go
  - internal/sdk/models/shared/schemalibentry.go
  - internal/sdk/models/shared/schemeclientoauth.go
  - internal/sdk/models/shared/scriptlibentry.go
  - internal/sdk/models/shared/searchaggmode.go
  - internal/sdk/models/shared/searchauditmetrics.go
  - internal/sdk/models/shared/searchconfig.go
  - internal/sdk/models/shared/searchdashboard.go
  - internal/sdk/models/shared/searchhealthcheckstatus.go
  - internal/sdk/models/shared/searchjob.go
  - internal/sdk/models/shared/searchjoberrorstateconfig.go
  - internal/sdk/models/shared/searchjobmetadata.go
  - internal/sdk/models/shared/searchjobresults.go
  - internal/sdk/models/shared/searchjobstageconfig.go
  - internal/sdk/models/shared/searchmacro.go
  - internal/sdk/models/shared/searchparameter.go
  - internal/sdk/models/shared/searchparametertype.go
  - internal/sdk/models/shared/searchparametervalue.go
  - internal/sdk/models/shared/searchquery.go
  - internal/sdk/models/shared/searchsettings.go
  - internal/sdk/models/shared/searchterm.go
  - internal/sdk/models/shared/secretprovider.go
  - internal/sdk/models/shared/secrettype.go
  - internal/sdk/models/shared/security.go
  - internal/sdk/models/shared/senddiagbundle.go
  - internal/sdk/models/shared/serviceslimits.go
  - internal/sdk/models/shared/slacktarget.go
  - internal/sdk/models/shared/smtptarget.go
  - internal/sdk/models/shared/snstarget.go
  - internal/sdk/models/shared/socksproxyopts.go
  - internal/sdk/models/shared/sortbyfield.go
  - internal/sdk/models/shared/stagedependency.go
  - internal/sdk/models/shared/stagedependencytype.go
  - internal/sdk/models/shared/subscription.go
  - internal/sdk/models/shared/symlinkinfo.go
  - internal/sdk/models/shared/systemconf.go
  - internal/sdk/models/shared/systeminfo.go
  - internal/sdk/models/shared/systemmetricsenum.go
  - internal/sdk/models/shared/systemsettings.go
  - internal/sdk/models/shared/systemsettingsconf.go
  - internal/sdk/models/shared/tableviewsettings.go
  - internal/sdk/models/shared/tailscaleaccountconfig.go
  - internal/sdk/models/shared/targetconfig.go
  - internal/sdk/models/shared/targetconfigconf.go
  - internal/sdk/models/shared/tcpoutcompression.go
  - internal/sdk/models/shared/team.go
  - internal/sdk/models/shared/teamaccesscontrollist.go
  - internal/sdk/models/shared/tlsclientparams.go
  - internal/sdk/models/shared/trustpolicy.go
  - internal/sdk/models/shared/uistatepatch.go
  - internal/sdk/models/shared/updatehectokenrequest.go
  - internal/sdk/models/shared/upgradegroupsettings.go
  - internal/sdk/models/shared/upgrademasterrequest.go
  - internal/sdk/models/shared/upgradepackageurls.go
  - internal/sdk/models/shared/upgraderesult.go
  - internal/sdk/models/shared/upgradesettings.go
  - internal/sdk/models/shared/usagegroup.go
  - internal/sdk/models/shared/user.go
  - internal/sdk/models/shared/useraccesscontrollist.go
  - internal/sdk/models/shared/userinfo.go
  - internal/sdk/models/shared/userprofile.go
  - internal/sdk/models/shared/vaultkmstlsclientconfig.go
  - internal/sdk/models/shared/versioninfo.go
  - internal/sdk/models/shared/webhooktarget.go
  - internal/sdk/models/shared/workspacecreaterequestdto.go
  - internal/sdk/models/shared/workspacepatchrequestdto.go
  - internal/sdk/models/shared/workspaceschema.go
  - internal/sdk/models/shared/workspaceslistresponsedto.go
  - internal/sdk/models/shared/zoomaccountconfig.go
  - internal/sdk/notifications.go
  - internal/sdk/notificationtargets.go
  - internal/sdk/onlyonprem.go
  - internal/sdk/optionalnullable/optionalnullable.go
  - internal/sdk/optionalnullable/optionalnullable_test.go
  - internal/sdk/outputs.go
  - internal/sdk/packs.go
  - internal/sdk/parquetschemas.go
  - internal/sdk/parsers.go
  - internal/sdk/pipelines.go
  - internal/sdk/policies.go
  - internal/sdk/preview.go
  - internal/sdk/processes.go
  - internal/sdk/profiler.go
  - internal/sdk/projects.go
  - internal/sdk/protobuflibraries.go
  - internal/sdk/regexes.go
  - internal/sdk/retry/config.go
  - internal/sdk/roles.go
  - internal/sdk/routes.go
  - internal/sdk/samples.go
  - internal/sdk/savedjobs.go
  - internal/sdk/savedqueries.go
  - internal/sdk/schemas.go
  - internal/sdk/scripts.go
  - internal/sdk/search.go
  - internal/sdk/secrets.go
  - internal/sdk/security.go
  - internal/sdk/subscriptions.go
  - internal/sdk/system.go
  - internal/sdk/teams.go
  - internal/sdk/teamsacl.go
  - internal/sdk/trustpolicies.go
  - internal/sdk/types/bigint.go
  - internal/sdk/types/date.go
  - internal/sdk/types/datetime.go
  - internal/sdk/types/pointers.go
  - internal/sdk/uistate.go
  - internal/sdk/usagegroups.go
  - internal/sdk/users.go
  - internal/sdk/usersacl.go
  - internal/sdk/versioning.go
  - internal/sdk/workers.go
  - internal/sdk/workspaces.go
  - internal/validators/DateValidator.go
  - internal/validators/ExactlyOneChild.go
  - internal/validators/JSONParseValidator.go
  - internal/validators/RFC3339Validator.go
  - internal/validators/boolvalidators/not_null.go
  - internal/validators/float32validators/not_null.go
  - internal/validators/float64validators/not_null.go
  - internal/validators/int32validators/not_null.go
  - internal/validators/int64validators/not_null.go
  - internal/validators/listvalidators/not_null.go
  - internal/validators/mapvalidators/not_null.go
  - internal/validators/numbervalidators/not_null.go
  - internal/validators/objectvalidators/not_null.go
  - internal/validators/setvalidators/not_null.go
  - internal/validators/stringvalidators/not_null.go
  - main.go
  - terraform-registry-manifest.json
  - tools/tools.go
examples:
  v5.billing.consumption.getSingleProductUsageBreakdown:
    speakeasy-default-v5-billing-consumption-get-single-product-usage-breakdown:
      parameters:
        path:
          organizationId: "<id>"
          productSlug: "search"
        query:
          startingOn: "2025-03-28T04:10:29.767Z"
          endingBefore: "2025-08-23T12:12:01.524Z"
          window: "monthly"
      responses:
        "200":
          application/json: {"items": [{"date": "2025-02-28T17:04:28.291Z", "credits": 1847.68, "perUnit": [{"quantity": 203.1, "credits": 433.4}, {"quantity": 203.1, "credits": 433.4}]}], "count": 3500.11}
  v5.billing.consumption.getProductsConsumptionStats:
    speakeasy-default-v5-billing-consumption-get-products-consumption-stats:
      parameters:
        path:
          organizationId: "<id>"
        query:
          startingOn: "2024-03-31T21:13:56.508Z"
          endingBefore: "2024-12-04T01:38:53.458Z"
          window: "monthly"
      responses:
        "200":
          application/json: {"items": [], "count": 6690.32}
  v5.billing.consumption.getCreditsSummary:
    speakeasy-default-v5-billing-consumption-get-credits-summary:
      parameters:
        path:
          organizationId: "<id>"
        query:
          startingOn: "2025-02-25T15:37:48.375Z"
          endingBefore: "2024-12-05T16:43:01.239Z"
          window: "monthly"
      responses:
        "200":
          application/json: {"data": {"totalCreditsPurchased": 9567.15, "totalCreditsUsed": 7154.18, "averageConsumption": 8558.14}}
  v5.billing.consumption.getCumulativeConsumption:
    speakeasy-default-v5-billing-consumption-get-cumulative-consumption:
      parameters:
        path:
          organizationId: "<id>"
        query:
          startingOn: "2024-01-12T17:37:50.927Z"
          endingBefore: "2025-05-04T07:02:05.603Z"
          window: "monthly"
      responses:
        "200":
          application/json: {"items": [], "count": 2077.17}
  v5.billing.consumption.getProductsBreakdown:
    speakeasy-default-v5-billing-consumption-get-products-breakdown:
      parameters:
        path:
          organizationId: "<id>"
        query:
          startingOn: "2024-12-09T08:31:46.418Z"
          endingBefore: "2023-03-16T08:43:24.828Z"
          window: "monthly"
      responses:
        "200":
          application/json: {"items": [{"date": "2023-12-03T07:18:39.274Z", "products": [{"slug": "<value>", "credits": 545.31}]}, {"date": "2023-12-03T07:18:39.274Z", "products": [{"slug": "<value>", "credits": 545.31}]}, {"date": "2023-12-03T07:18:39.274Z", "products": [{"slug": "<value>", "credits": 545.31}]}], "count": 4088.88}
  v5.billing.invoices.getInvoices:
    speakeasy-default-v5-billing-invoices-get-invoices:
      parameters:
        path:
          organizationId: "<id>"
      responses:
        "200":
          application/json: {"items": [{"id": "<id>", "fromDate": "2023-01-25T16:26:25.504Z", "toDate": "2023-11-17T04:47:30.693Z", "totalCredits": 5240.12, "status": "VOID", "products": [{"slug": "infrastructure", "name": "<value>", "totalCredits": 6273.19, "lineItems": []}]}, {"id": "<id>", "fromDate": "2023-01-25T16:26:25.504Z", "toDate": "2023-11-17T04:47:30.693Z", "totalCredits": 5240.12, "status": "VOID", "products": [{"slug": "infrastructure", "name": "<value>", "totalCredits": 6273.19, "lineItems": []}]}], "count": 5760.94}
  v5.billing.invoices.getInvoice:
    speakeasy-default-v5-billing-invoices-get-invoice:
      parameters:
        path:
          organizationId: "<id>"
          invoiceId: "<id>"
      responses:
        "200":
          application/json: {"data": {"id": "<id>", "fromDate": "2025-10-07T16:43:23.196Z", "toDate": "2023-07-20T14:53:20.480Z", "totalCredits": 2475.85, "status": "DRAFT", "products": [{"slug": "other", "name": "<value>", "totalCredits": 4237.94, "lineItems": [{"name": "<value>", "quantity": 2191.5, "credits": 660.46, "groups": []}, {"name": "<value>", "quantity": 2191.5, "credits": 660.46, "groups": []}, {"name": "<value>", "quantity": 2191.5, "credits": 660.46, "groups": []}]}]}}
  getCosts:
    speakeasy-default-get-costs:
      parameters:
        path:
          organizationId: "<id>"
        query:
          startingOn: "<value>"
          endingBefore: "<value>"
      responses:
        "200":
          application/json: {"startingOn": "<value>", "endingBefore": "<value>", "costs": {}}
  getInvoices:
    speakeasy-default-get-invoices:
      parameters:
        path:
          organizationId: "<id>"
      responses:
        "200":
          application/json: {"items": [{"id": "<id>", "fromDate": "<value>", "toDate": "<value>", "totalCredits": 3064.55, "products": [{"productName": "<value>"}], "status": "DRAFT"}, {"id": "<id>", "fromDate": "<value>", "toDate": "<value>", "totalCredits": 3064.55, "products": [{"productName": "<value>"}], "status": "DRAFT"}], "count": 9277.96}
  getInvoice:
    speakeasy-default-get-invoice:
      parameters:
        path:
          organizationId: "<id>"
          invoiceId: "<id>"
      responses:
        "200":
          application/json: {"id": "<id>", "fromDate": "<value>", "toDate": "<value>", "totalCredits": 1967.8, "products": [{"productName": "<value>"}, {"productName": "<value>"}, {"productName": "<value>"}], "status": "VOID"}
  getCredits:
    speakeasy-default-get-credits:
      parameters:
        path:
          organizationId: "<id>"
      responses:
        "200":
          application/json: {"totalCreditsPurchased": 1683.62, "totalCreditsUsed": 2963.62, "totalCreditsAvailable": 167.02}
  getPlan:
    speakeasy-default-get-plan:
      parameters:
        path:
          organizationId: "<id>"
      responses:
        "200":
          application/json: {"id": "<id>", "name": "<value>", "description": "vivid lucky round feather whoever gee athwart", "startDate": "<value>", "isActive": false}
  getUsage:
    speakeasy-default-get-usage:
      parameters:
        path:
          organizationId: "<id>"
          metricType: "Connected Edge GBs In"
        query:
          startingOn: "<value>"
          endingBefore: "<value>"
      responses:
        "200":
          application/json: {"startingOn": "<value>", "endingBefore": "<value>", "data": {"sum": 2452.73, "mean": 4170.42, "dataPoints": [{"category": "<value>", "startTimestamp": "<value>", "endTimestamp": "<value>", "value": 4990.46}, {"category": "<value>", "startTimestamp": "<value>", "endTimestamp": "<value>", "value": 4990.46}, {"category": "<value>", "startTimestamp": "<value>", "endTimestamp": "<value>", "value": 4990.46}]}}
  WorkspacesController_listWorkspaces:
    speakeasy-default-workspaces-controller-list-workspaces:
      parameters:
        path:
          organizationId: "<id>"
      responses:
        "200":
          application/json: {"items": [{"workspaceId": "<id>", "region": "<value>", "lastUpdated": "2024-09-11T02:35:00.185Z", "leaderFQDN": "<value>", "state": "Workspace-Cleanup-Terraform-Failed"}], "count": 5425.59}
  WorkspacesController_createWorkspace:
    speakeasy-default-workspaces-controller-create-workspace:
      parameters:
        path:
          organizationId: "<id>"
      requestBody:
        application/json: {"workspaceId": "<id>", "region": "eu-west-2"}
      responses:
        "200":
          application/json: {"workspaceId": "<id>", "region": "<value>", "lastUpdated": "2023-02-05T22:40:44.208Z", "leaderFQDN": "<value>", "state": "Workspace-Cleanup-Terraform-Completed"}
  WorkspacesController_getWorkspace:
    speakeasy-default-workspaces-controller-get-workspace:
      parameters:
        path:
          organizationId: "<id>"
          workspaceId: "<id>"
      responses:
        "200":
          application/json: {"workspaceId": "<id>", "region": "<value>", "lastUpdated": "2025-03-04T09:27:59.270Z", "leaderFQDN": "<value>", "state": "Workspace-Cleanup-Completed"}
  WorkspacesController_deleteWorkspace:
    speakeasy-default-workspaces-controller-delete-workspace:
      parameters:
        path:
          organizationId: "<id>"
          workspaceId: "<id>"
  WorkspacesController_patchWorkspace:
    speakeasy-default-workspaces-controller-patch-workspace:
      parameters:
        path:
          organizationId: "<id>"
          workspaceId: "<id>"
      requestBody:
        application/json: {}
      responses:
        "200":
          application/json: {"workspaceId": "<id>", "region": "<value>", "lastUpdated": "2024-03-02T09:21:19.090Z", "leaderFQDN": "<value>", "state": "Workspace-Cleanup-Failed"}
  getAssignments:
    speakeasy-default-get-assignments:
      responses:
        "200":
          application/json: [{"organizationId": "<id>", "workspaceId": "<id>", "state": "ASSIGNED", "createdAt": "2025-08-31T13:02:06.568Z", "updatedAt": "2023-02-27T20:44:43.168Z"}, {"organizationId": "<id>", "workspaceId": "<id>", "state": "ASSIGNED", "createdAt": "2025-08-31T13:02:06.568Z", "updatedAt": "2023-02-27T20:44:43.168Z"}, {"organizationId": "<id>", "workspaceId": "<id>", "state": "ASSIGNED", "createdAt": "2025-08-31T13:02:06.568Z", "updatedAt": "2023-02-27T20:44:43.168Z"}]
  assignSandboxWorkspaceToUser:
    speakeasy-default-assign-sandbox-workspace-to-user:
      parameters:
        path:
          courseId: "<id>"
      responses:
        "200":
          application/json: {"organizationId": "<id>", "workspaceId": "<id>", "state": "ASSIGNED", "userId": "<id>", "courseId": "<id>", "assignedAt": "2023-03-08T16:00:24.052Z", "expiresAt": "2023-12-27T00:39:22.127Z"}
  getSystemProjectsSubscriptionsByGroupIdByAndProjectId:
    speakeasy-default-get-system-projects-subscriptions-by-group-id-by-and-project-id:
      parameters:
        path:
          groupId: "myExistingGroupId"
          projectId: "myExistingProjectId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemProjectsVersionCountByGroupIdAndProjectId:
    speakeasy-default-get-system-projects-version-count-by-group-id-and-project-id:
      parameters:
        path:
          groupId: "myExistingGroupId"
          projectId: "myExistingProjectId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemProjectsVersionDiffByGroupIdAndProjectId:
    speakeasy-default-get-system-projects-version-diff-by-group-id-and-project-id:
      parameters:
        path:
          groupId: "myExistingGroupId"
          projectId: "myExistingProjectId"
        query:
          commit: "212b3cc"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemProjectsVersionFilesByGroupIdAndProjectId:
    speakeasy-default-get-system-projects-version-files-by-group-id-and-project-id:
      parameters:
        path:
          groupId: "myExistingGroupId"
          projectId: "myExistingProjectId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemProjectsVersionCommitByGroupIdAndProjectId:
    speakeasy-default-create-system-projects-version-commit-by-group-id-and-project-id:
      parameters:
        path:
          groupId: "myExistingGroupId"
          projectId: "myExistingProjectId"
      requestBody:
        application/json: {"message": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemProjectsSubscriptionsCaptureByGroupIdAndSubscriptionId:
    speakeasy-default-create-system-projects-subscriptions-capture-by-group-id-and-subscription-id:
      parameters:
        path:
          groupId: "myExistingGroupId"
          projectId: "myExistingProjectId"
          subscriptionId: "myExistingSubscriptionId"
      requestBody:
        application/json: {"duration": 9977.94, "filter": "<value>", "level": 7371.6, "maxEvents": 5232.64}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemProjectsCaptureByGroupIdAndProjectId:
    speakeasy-default-create-system-projects-capture-by-group-id-and-project-id:
      parameters:
        path:
          groupId: "myExistingGroupId"
          projectId: "myExistingProjectId"
      requestBody:
        application/json: {"duration": 7020.88, "filter": "<value>", "level": 4494.37, "maxEvents": 7103.16}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemProjectsPreviewByGroupIdAndProjectId:
    speakeasy-default-create-system-projects-preview-by-group-id-and-project-id:
      parameters:
        path:
          groupId: "myExistingGroupId"
          projectId: "myExistingProjectId"
      requestBody:
        application/json: {"mode": "route", "pipelineId": "<id>", "sampleId": "<id>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemProjectsPipelinesByGroupIdAndProjectId:
    speakeasy-default-get-system-projects-pipelines-by-group-id-and-project-id:
      parameters:
        path:
          groupId: "myExistingGroupId"
          projectId: "myExistingProjectId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemProjectsPipelinesByGroupIdAndProjectId:
    speakeasy-default-create-system-projects-pipelines-by-group-id-and-project-id:
      parameters:
        path:
          groupId: "myExistingGroupId"
          projectId: "myExistingProjectId"
      requestBody:
        application/json: {"id": "<id>", "conf": {"output": "default", "streamtags": []}}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemProjectsPipelinesByGroupIdAndProjectIdAndPipelineId:
    speakeasy-default-get-system-projects-pipelines-by-group-id-and-project-id-and-pipeline-id:
      parameters:
        path:
          groupId: "myExistingGroupId"
          projectId: "myExistingProjectId"
          pipelineId: "myNewPipelineIdToCreate"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateSystemProjectsPipelinesByGroupIdAndProjectIdAndPipelineId:
    speakeasy-default-update-system-projects-pipelines-by-group-id-and-project-id-and-pipeline-id:
      parameters:
        path:
          groupId: "myExistingGroupId"
          projectId: "myExistingProjectId"
          pipelineId: "myExistingPipelineIdToUpdate"
      requestBody:
        application/json: {"id": "<id>", "conf": {"output": "default", "streamtags": []}}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteSystemProjectsPipelinesByGroupIdAndProjectIdAndPipelineId:
    speakeasy-default-delete-system-projects-pipelines-by-group-id-and-project-id-and-pipeline-id:
      parameters:
        path:
          groupId: "myExistingGroupId"
          projectId: "myExistingProjectId"
          pipelineId: "myExistingPipelineIdToDelete"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemProjectsVersionCommitByProjectId:
    speakeasy-default-create-system-projects-version-commit-by-project-id:
      parameters:
        path:
          projectId: "myExistingProjectId"
      requestBody:
        application/json: {"message": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemProjectsVersionCountByProjectId:
    speakeasy-default-get-system-projects-version-count-by-project-id:
      parameters:
        path:
          projectId: "myExistingProjectId"
        query:
          ID: "fa07060"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemProjectsVersionDiffByProjectId:
    speakeasy-default-get-system-projects-version-diff-by-project-id:
      parameters:
        path:
          projectId: "myExistingProjectId"
        query:
          commit: "fa07060"
          filename: "localOutputFile.txt"
          diffLineLimit: 1000
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemProjectsVersionFilesByProjectId:
    speakeasy-default-get-system-projects-version-files-by-project-id:
      parameters:
        path:
          projectId: "myExistingProjectId"
        query:
          ID: "fa07060"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemProjectsVersionRevertByProjectId:
    speakeasy-default-create-system-projects-version-revert-by-project-id:
      parameters:
        path:
          projectId: "myExistingProjectId"
      requestBody:
        application/json: {"message": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemProjectsVersionShowByProjectId:
    speakeasy-default-get-system-projects-version-show-by-project-id:
      parameters:
        path:
          projectId: "myExistingProjectId"
        query:
          ID: "fa07060"
          filename: "myLocalOutputFile.txt"
          diffLineLimit: 1000
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listProject:
    speakeasy-default-list-project:
      parameters:
        path:
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createProject:
    speakeasy-default-create-project:
      parameters:
        path:
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"destinations": ["<value 1>", "<value 2>", "<value 3>"], "id": "<id>", "subscriptions": ["<value 1>"]}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getProjectById:
    speakeasy-default-get-project-by-id:
      parameters:
        path:
          id: "myExistingProjectId"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateProjectById:
    speakeasy-default-update-project-by-id:
      parameters:
        path:
          id: "myUniqueProjectIdToCRUD"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"destinations": ["<value 1>", "<value 2>"], "id": "<id>", "subscriptions": ["<value 1>"]}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteProjectById:
    speakeasy-default-delete-project-by-id:
      parameters:
        path:
          id: "myUniqueProjectIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getProjectAclById:
    speakeasy-default-get-project-acl-by-id:
      parameters:
        path:
          id: "myExistingProjectId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createProjectAclApplyById:
    speakeasy-default-create-project-acl-apply-by-id:
      parameters:
        path:
          id: "myExistingProjectId"
      requestBody:
        application/json: {}
      responses:
        "500":
          application/json: {"message": "This is my error message string"}
  getProjectAclTeamsById:
    speakeasy-default-get-project-acl-teams-by-id:
      parameters:
        path:
          id: "myExistingProjectId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createProjectAclTeamsApplyById:
    speakeasy-default-create-project-acl-teams-apply-by-id:
      parameters:
        path:
          id: "myExistingProjectId"
      requestBody:
        application/json: {}
      responses:
        "500":
          application/json: {"message": "This is my error message string"}
  getProjectDestinationsByProjectId:
    speakeasy-default-get-project-destinations-by-project-id:
      parameters:
        path:
          projectId: "myExistingProjectId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSubscriptionByProjectId:
    speakeasy-default-get-subscription-by-project-id:
      parameters:
        path:
          projectId: "myExistingProjectId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listSubscription:
    speakeasy-default-list-subscription:
      parameters:
        path:
          groupId: "myExistingGroupId"
        query:
          disabled: true
          description: "This is how you describe a project with runes that form words"
          filter: "truthy"
          pipeline: "myExistingPipelineId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSubscription:
    speakeasy-default-create-subscription:
      parameters:
        path:
          groupId: "myExistingGroupId"
        query:
          pipeline: "myExistingPipelineId"
          id: "myUniqueSubscriptionId"
          disabled: false
          description: "Words describe things"
          filter: "truthy"
      requestBody:
        application/json: {"id": "<id>", "pipeline": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSubscriptionById:
    speakeasy-default-get-subscription-by-id:
      parameters:
        path:
          id: "myExistingSubscriptionId"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateSubscriptionById:
    speakeasy-default-update-subscription-by-id:
      parameters:
        path:
          id: "myUniqueSubscriptionIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteSubscriptionById:
    speakeasy-default-delete-subscription-by-id:
      parameters:
        path:
          id: "myUniqueSubscriptionIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  undoLastCommit:
    speakeasy-default-undo-last-commit:
      parameters:
        query:
          group: "myExistingGroupId"
      responses:
        "500":
          application/json: {"message": "This is my error message string"}
  getVersionBranch:
    speakeasy-default-get-version-branch:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createVersionCommit:
    speakeasy-default-create-version-commit:
      requestBody:
        application/json: {"message": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getVersionCount:
    speakeasy-default-get-version-count:
      parameters:
        query:
          group: "myExistingGroupId"
          ID: "fa07060"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getVersionCurrentBranch:
    speakeasy-default-get-version-current-branch:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getVersionDiff:
    speakeasy-default-get-version-diff:
      parameters:
        query:
          commit: "fa07060"
          group: "myExistingGroupId"
          filename: "myLocalFile.txt"
          diffLineLimit: 1000
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getVersionFiles:
    speakeasy-default-get-version-files:
      parameters:
        query:
          group: "myExistingGroupId"
          ID: "fa07060"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getVersionInfo:
    speakeasy-default-get-version-info:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createVersionPush:
    speakeasy-default-create-version-push:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createVersionRevert:
    speakeasy-default-create-version-revert:
      parameters:
        query:
          group: "myExistingGroupId"
      requestBody:
        application/json: {"commit": "<value>", "message": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getVersionShow:
    speakeasy-default-get-version-show:
      parameters:
        query:
          commit: "HEAD"
          group: "myExistingGroupId"
          filename: "myLocalFile.txt"
          diffLineLimit: 1000
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getVersionStatus:
    speakeasy-default-get-version-status:
      parameters:
        query:
          group: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createVersionSync:
    speakeasy-default-create-version-sync:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemSettingsGitSettings:
    speakeasy-default-get-system-settings-git-settings:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateSystemSettingsGitSettings:
    speakeasy-default-update-system-settings-git-settings:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemCapture:
    speakeasy-default-create-system-capture:
      requestBody:
        application/json: {"duration": 5717.32, "filter": "<value>", "level": 6094.12, "maxEvents": 9941.84}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemProjectsCaptureByProjectId:
    speakeasy-default-create-system-projects-capture-by-project-id:
      parameters:
        path:
          projectId: "myExistingProjectId"
      requestBody:
        application/json: {"duration": 4855.02, "filter": "<value>", "level": 8634.29, "maxEvents": 5475.12}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemProjectsSubscriptionsCaptureByProjectIdAndSubscriptionId:
    speakeasy-default-create-system-projects-subscriptions-capture-by-project-id-and-subscription-id:
      parameters:
        path:
          projectId: "myExistingProjectId"
          subscriptionId: "myExistingSubscriptionId"
      requestBody:
        application/json: {"duration": 9984.14, "filter": "<value>", "level": 8613.29, "maxEvents": 502.1}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createPreview:
    speakeasy-default-create-preview:
      requestBody:
        application/json: {"mode": "pipe", "pipelineId": "<id>", "sampleId": "<id>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listDataSample:
    speakeasy-default-list-data-sample:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createDataSample:
    speakeasy-default-create-data-sample:
      requestBody:
        application/json: {"id": "<id>", "sampleName": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getDataSampleById:
    speakeasy-default-get-data-sample-by-id:
      parameters:
        path:
          id: "myUniqueSampleIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateDataSampleById:
    speakeasy-default-update-data-sample-by-id:
      parameters:
        path:
          id: "myUniqueSampleIdToCRUD"
      requestBody:
        application/json: {"id": "<id>", "sampleName": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteDataSampleById:
    speakeasy-default-delete-data-sample-by-id:
      parameters:
        path:
          id: "myUniqueSampleIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getDataSampleContentById:
    speakeasy-default-get-data-sample-content-by-id:
      parameters:
        path:
          id: "myExistingSampleId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listPipeline:
    speakeasy-default-list-pipeline:
      parameters:
        path:
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createPipeline:
    speakeasy-default-create-pipeline:
      parameters:
        path:
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "<id>", "conf": {"output": "default", "streamtags": []}}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getPipelineById:
    speakeasy-default-get-pipeline-by-id:
      parameters:
        path:
          id: "myUniquePipelineIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updatePipelineById:
    speakeasy-default-update-pipeline-by-id:
      parameters:
        path:
          id: "myUniquePipelineIdToCRUD"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "<id>", "conf": {"output": "default", "streamtags": []}}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deletePipelineById:
    speakeasy-default-delete-pipeline-by-id:
      parameters:
        path:
          id: "myUniquePipelineIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getPipelineByPack:
    speakeasy-default-get-pipeline-by-pack:
      parameters:
        path:
          pack: "<value>"
          groupId: "<id>"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {}
  createPipelineByPack:
    speakeasy-default-create-pipeline-by-pack:
      parameters:
        path:
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "<id>", "conf": {"output": "default", "streamtags": []}}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getPipelineByPackAndId:
    speakeasy-default-get-pipeline-by-pack-and-id:
      parameters:
        path:
          id: "<id>"
          pack: "<value>"
          groupId: "<id>"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {}
  updatePipelineByPackAndId:
    speakeasy-default-update-pipeline-by-pack-and-id:
      parameters:
        path:
          id: "myUniquePipelineIdToCRUD"
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
        query:
          disabled: false
      requestBody:
        application/json: {"id": "<id>", "conf": {"output": "default", "streamtags": []}}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deletePipelineByPackAndId:
    speakeasy-default-delete-pipeline-by-pack-and-id:
      parameters:
        path:
          id: "<id>"
          pack: "<value>"
          groupId: "<id>"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {}
  listBannerMessage:
    speakeasy-default-list-banner-message:
      responses:
        "200":
          application/json: {"items": [{"id": "myUniqueBannerMessageId", "enabled": true, "type": "custom", "theme": "<value>", "message": "<value>"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  createBannerMessage:
    speakeasy-default-create-banner-message:
      requestBody:
        application/json: {"id": "myUniqueBannerMessageId", "enabled": true, "type": "custom", "created": 2025, "theme": "purple", "invertFontColor": false, "message": "This is the banner message to be displayed", "link": "https://thisisarealwebsite.com", "linkDisplay": "This flavor text redirects to link", "customThemes": ["themes"]}
      responses:
        "200":
          application/json: {"items": [{"id": "myUniqueBannerMessageId", "enabled": true, "type": "custom", "theme": "<value>", "message": "<value>"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  getBannerMessageById:
    speakeasy-default-get-banner-message-by-id:
      parameters:
        path:
          id: "myExistingId"
      responses:
        "200":
          application/json: {"items": [{"id": "myUniqueBannerMessageId", "enabled": true, "type": "custom", "theme": "<value>", "message": "<value>"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  updateBannerMessageById:
    speakeasy-default-update-banner-message-by-id:
      parameters:
        path:
          id: "myExistingIdtoUpdate"
      requestBody:
        application/json: {"id": "myUniqueBannerMessageId", "enabled": true, "type": "custom", "created": 2025, "theme": "purple", "invertFontColor": false, "message": "This is the banner message to be displayed", "link": "https://thisisarealwebsite.com", "linkDisplay": "This flavor text redirects to link", "customThemes": ["themes"]}
      responses:
        "200":
          application/json: {"items": [{"id": "myUniqueBannerMessageId", "enabled": true, "type": "custom", "theme": "<value>", "message": "<value>"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteBannerMessageById:
    speakeasy-default-delete-banner-message-by-id:
      parameters:
        path:
          id: "myExistingIdToDelete"
      responses:
        "200":
          application/json: {"items": [{"id": "myUniqueBannerMessageId", "enabled": true, "type": "custom", "theme": "<value>", "message": "<value>"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  listCertificate:
    speakeasy-default-list-certificate:
      responses:
        "200":
          application/json: {"items": [{"id": "myUniqueCertId", "description": "Short description of x509 certificate", "cert": "LS0tLS1CR...FLS0tLS0K", "privKey": "dont-share-this-key", "passphrase": "Security.jpg", "ca": "LS0tLS1CR...FLS0tLS0K", "inUse": ["list", "of", "configurations"]}]}
        "500":
          application/json: {"message": "This is my error message string"}
  createCertificate:
    speakeasy-default-create-certificate:
      requestBody:
        application/json: {"id": "myUniqueCertId", "description": "Short description of x509 certificate", "cert": "LS0tLS1CR...FLS0tLS0K", "privKey": "dont-share-this-key", "passphrase": "Security.jpg", "ca": "LS0tLS1CR...FLS0tLS0K", "inUse": ["list", "of", "configurations"]}
      responses:
        "200":
          application/json: {"items": [{"id": "myUniqueCertId", "description": "Short description of x509 certificate", "cert": "LS0tLS1CR...FLS0tLS0K", "privKey": "dont-share-this-key", "passphrase": "Security.jpg", "ca": "LS0tLS1CR...FLS0tLS0K", "inUse": ["list", "of", "configurations"]}]}
        "500":
          application/json: {"message": "This is my error message string"}
  getCertificateById:
    speakeasy-default-get-certificate-by-id:
      parameters:
        path:
          id: "myExistingId"
      responses:
        "200":
          application/json: {"items": [{"id": "myUniqueCertId", "description": "Short description of x509 certificate", "cert": "LS0tLS1CR...FLS0tLS0K", "privKey": "dont-share-this-key", "passphrase": "Security.jpg", "ca": "LS0tLS1CR...FLS0tLS0K", "inUse": ["list", "of", "configurations"]}]}
        "500":
          application/json: {"message": "This is my error message string"}
  updateCertificateById:
    speakeasy-default-update-certificate-by-id:
      parameters:
        path:
          id: "myIdToUpdate"
      requestBody:
        application/json: {"id": "myUniqueCertId", "description": "Short description of x509 certificate", "cert": "LS0tLS1CR...FLS0tLS0K", "privKey": "dont-share-this-key", "passphrase": "Security.jpg", "ca": "LS0tLS1CR...FLS0tLS0K", "inUse": ["list", "of", "configurations"]}
      responses:
        "200":
          application/json: {"items": [{"id": "myUniqueCertId", "description": "Short description of x509 certificate", "cert": "LS0tLS1CR...FLS0tLS0K", "privKey": "dont-share-this-key", "passphrase": "Security.jpg", "ca": "LS0tLS1CR...FLS0tLS0K", "inUse": ["list", "of", "configurations"]}]}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteCertificateById:
    speakeasy-default-delete-certificate-by-id:
      parameters:
        path:
          id: "myExistingIdToDelete"
      responses:
        "200":
          application/json: {"items": [{"id": "myUniqueCertId", "description": "Short description of x509 certificate", "cert": "LS0tLS1CR...FLS0tLS0K", "privKey": "dont-share-this-key", "passphrase": "Security.jpg", "ca": "LS0tLS1CR...FLS0tLS0K", "inUse": ["list", "of", "configurations"]}]}
        "500":
          application/json: {"message": "This is my error message string"}
  getFeaturesEntryById:
    speakeasy-default-get-features-entry-by-id:
      parameters:
        path:
          id: "myExistingFeatureId"
      responses:
        "200":
          application/json: {"items": [{"disabled": true, "id": "myUniqueFeatureEntry"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  getFeaturesEntry:
    speakeasy-default-get-features-entry:
      responses:
        "200":
          application/json: {"items": [{"disabled": true, "id": "myUniqueFeatureEntry"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  listSavedJob:
    speakeasy-default-list-saved-job:
      parameters:
        path:
          groupId: "default"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {}
  createSavedJob:
    speakeasy-default-create-saved-job:
      parameters:
        path:
          groupId: "myExistingGroupId"
        query:
          id: "myJobIdToQuery"
      requestBody:
        application/json: {"type": "collection", "ttl": "4h", "ignoreGroupJobsLimit": false, "removeFields": [], "resumeOnBoot": true, "streamtags": [], "workerAffinity": false, "collector": {"type": "splunk"}}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSavedJobById:
    speakeasy-default-get-saved-job-by-id:
      parameters:
        path:
          id: "myExistingJobId"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateSavedJobById:
    speakeasy-default-update-saved-job-by-id:
      parameters:
        path:
          id: "<id>"
          groupId: "default"
      requestBody:
        application/json: {"type": "collection", "ttl": "4h", "ignoreGroupJobsLimit": false, "removeFields": [], "resumeOnBoot": false, "streamtags": [], "workerAffinity": false, "collector": {"type": "cribl_lake", "conf": {"authType": "manual", "containerName": "<value>", "recurse": true, "includeMetadata": true, "includeTags": true, "maxBatchSize": 10, "parquetChunkSizeMB": 5, "parquetChunkDownloadTimeout": 600, "azureCloud": "azure"}, "destructive": false}}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {}
  deleteSavedJobById:
    speakeasy-default-delete-saved-job-by-id:
      parameters:
        path:
          id: "<id>"
          groupId: "default"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {}
  listKeyMetadataEntity:
    speakeasy-default-list-key-metadata-entity:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createKeyMetadataEntity:
    speakeasy-default-create-key-metadata-entity:
      requestBody:
        application/json: {"keyId": "<id>", "algorithm": "aes-256-cbc", "kms": "local", "keyclass": 0, "useIV": false, "ivSize": 12}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getKeyMetadataEntityById:
    speakeasy-default-get-key-metadata-entity-by-id:
      parameters:
        path:
          id: "myExistingKeyId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateKeyMetadataEntityById:
    speakeasy-default-update-key-metadata-entity-by-id:
      parameters:
        path:
          id: "keyIdToCRUD"
      requestBody:
        application/json: {"keyId": "<id>", "algorithm": "aes-256-cbc", "kms": "local", "keyclass": 0, "useIV": false, "ivSize": 12}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteKeyMetadataEntityById:
    speakeasy-default-delete-key-metadata-entity-by-id:
      parameters:
        path:
          id: "keyIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listBulletinMessage:
    speakeasy-default-list-bulletin-message:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createBulletinMessage:
    speakeasy-default-create-bulletin-message:
      requestBody:
        application/json: {"id": "<id>", "text": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getBulletinMessageById:
    speakeasy-default-get-bulletin-message-by-id:
      parameters:
        path:
          id: "myUniqueMessageId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteBulletinMessageById:
    speakeasy-default-delete-bulletin-message-by-id:
      parameters:
        path:
          id: "myMessageIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listNotificationTarget:
    speakeasy-default-list-notification-target:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createNotificationTarget:
    speakeasy-default-create-notification-target:
      requestBody:
        application/json: {"id": "<id>", "type": "webhook", "systemFields": ["cribl_host"], "url": "https://physical-plumber.info/", "format": "json_array", "method": "PUT", "authType": "none"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getNotificationTargetById:
    speakeasy-default-get-notification-target-by-id:
      parameters:
        path:
          id: "uniqueNotificationIdToGet"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateNotificationTargetById:
    speakeasy-default-update-notification-target-by-id:
      parameters:
        path:
          id: "uniqueNotificationIdToCRUD"
      requestBody:
        application/json: {"id": "<id>", "type": "sns", "systemFields": ["cribl_host"], "region": "<value>", "allowlist": [], "destinationType": "topic", "topicType": "fifo"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteNotificationTargetById:
    speakeasy-default-delete-notification-target-by-id:
      parameters:
        path:
          id: "NotificationIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listNotification:
    speakeasy-default-list-notification:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createNotification:
    speakeasy-default-create-notification:
      requestBody:
        application/json: {"id": "<id>", "disabled": false, "condition": "<value>", "targets": [], "group": "default_search"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getNotificationById:
    speakeasy-default-get-notification-by-id:
      parameters:
        path:
          id: "myNotificationIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateNotificationById:
    speakeasy-default-update-notification-by-id:
      parameters:
        path:
          id: "myNotificationIdToCRUD"
      requestBody:
        application/json: {"id": "<id>", "disabled": false, "condition": "<value>", "targets": [], "group": "default_search"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteNotificationById:
    speakeasy-default-delete-notification-by-id:
      parameters:
        path:
          id: "myNotificationIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listPolicyRule:
    speakeasy-default-list-policy-rule:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createPolicyRule:
    speakeasy-default-create-policy-rule:
      requestBody:
        application/json: {"id": "<id>", "template": []}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getPolicyRuleById:
    speakeasy-default-get-policy-rule-by-id:
      parameters:
        path:
          id: "myUniqueSystemPolicyIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updatePolicyRuleById:
    speakeasy-default-update-policy-rule-by-id:
      parameters:
        path:
          id: "myUniqueSystemPolicyIdToCRUD"
      requestBody:
        application/json: {"id": "<id>", "template": ["<value 1>", "<value 2>", "<value 3>"]}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deletePolicyRuleById:
    speakeasy-default-delete-policy-rule-by-id:
      parameters:
        path:
          id: "myUniqueSystemPolicyIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listRole:
    speakeasy-default-list-role:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createRole:
    speakeasy-default-create-role:
      requestBody:
        application/json: {"id": "<id>", "policy": []}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getRoleById:
    speakeasy-default-get-role-by-id:
      parameters:
        path:
          id: "myUniqueRoleIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateRoleById:
    speakeasy-default-update-role-by-id:
      parameters:
        path:
          id: "myUniqueRoleIdToCRUD"
      requestBody:
        application/json: {"id": "<id>", "policy": ["<value 1>", "<value 2>", "<value 3>"]}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteRoleById:
    speakeasy-default-delete-role-by-id:
      parameters:
        path:
          id: "myUniqueRoleIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listScript:
    speakeasy-default-list-script:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createScript:
    speakeasy-default-create-script:
      requestBody:
        application/json: {"id": "<id>", "command": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getScriptById:
    speakeasy-default-get-script-by-id:
      parameters:
        path:
          id: "myUniqueScriptIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateScriptById:
    speakeasy-default-update-script-by-id:
      parameters:
        path:
          id: "myUniqueScriptIdToCRUD"
      requestBody:
        application/json: {"id": "<id>", "command": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteScriptById:
    speakeasy-default-delete-script-by-id:
      parameters:
        path:
          id: "myUniqueScriptIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createTeam:
    speakeasy-default-create-team:
      requestBody:
        application/json: {"description": "once well-lit rigid anti", "id": "<id>", "name": "<value>", "roles": ["<value 1>", "<value 2>", "<value 3>"]}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getTeam:
    speakeasy-default-get-team:
      parameters:
        query:
          product: "stream"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getTeamById:
    speakeasy-default-get-team-by-id:
      parameters:
        path:
          id: "myUniqueTeamIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateTeamById:
    speakeasy-default-update-team-by-id:
      parameters:
        path:
          id: "myUniqueTeamIdToCRUD"
      requestBody:
        application/json: {"description": "vibration below but once whoever and", "id": "<id>", "name": "<value>", "roles": ["<value 1>", "<value 2>", "<value 3>"]}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteTeamById:
    speakeasy-default-delete-team-by-id:
      parameters:
        path:
          id: "myUniqueTeamIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getTeamAclById:
    speakeasy-default-get-team-acl-by-id:
      parameters:
        path:
          id: "myExistingUniqueTeamId"
        query:
          type: "projects"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getTeamRolesById:
    speakeasy-default-get-team-roles-by-id:
      parameters:
        path:
          id: "myExistingUserIdToRead"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getTeamUsersById:
    speakeasy-default-get-team-users-by-id:
      parameters:
        path:
          id: "myExistingTeamToReadUsersFrom"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createTeamUsersById:
    speakeasy-default-create-team-users-by-id:
      parameters:
        path:
          id: "myExistingTeamToUpdate"
      requestBody:
        application/json: {}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getProductsGroupsAclTeamsByProductAndId:
    speakeasy-default-get-products-groups-acl-teams-by-product-and-id:
      parameters:
        path:
          product: "stream"
          id: "myExistingGroupId"
        query:
          type: "groups"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listUser:
    speakeasy-default-list-user:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createUser:
    speakeasy-default-create-user:
      requestBody:
        application/json: {"disabled": true, "email": "Aliya_Gorczany97@gmail.com", "first": "<value>", "id": "<id>", "last": "<value>", "username": "Virginie47"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getUserById:
    speakeasy-default-get-user-by-id:
      parameters:
        path:
          id: "myUniqueUserIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateUserById:
    speakeasy-default-update-user-by-id:
      parameters:
        path:
          id: "myUniqueUserIdToCRUD"
      requestBody:
        application/json: {"disabled": false, "email": "Gladys_Kohler@hotmail.com", "first": "<value>", "id": "<id>", "last": "<value>", "username": "Deondre.Hilll"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteUserById:
    speakeasy-default-delete-user-by-id:
      parameters:
        path:
          id: "myUniqueUserIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateUserInfoById:
    speakeasy-default-update-user-info-by-id:
      parameters:
        path:
          id: "myUniqueUserIdToCRUD"
      requestBody:
        application/json: {"disabled": false, "email": "Devan_Aufderhar@yahoo.com", "first": "<value>", "id": "<id>", "last": "<value>", "username": "Eliane85"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getProductsUsersAclByProductAndId:
    speakeasy-default-get-products-users-acl-by-product-and-id:
      parameters:
        path:
          product: "stream"
          id: "myExistingGroupId"
        query:
          type: "groups"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getProductsUsersByProduct:
    speakeasy-default-get-products-users-by-product:
      parameters:
        path:
          product: "stream"
        query:
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteProductsUsersCacheByProduct:
    speakeasy-default-delete-products-users-cache-by-product:
      parameters:
        path:
          product: "search"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createCriblLakeDatasetByLakeId:
    speakeasy-default-create-cribl-lake-dataset-by-lake-id:
      parameters:
        path:
          lakeId: "default"
      requestBody:
        application/json: {"bucketName": "lake-${workspaceName}-${organizationId}", "id": "<id>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getCriblLakeDatasetByLakeId:
    speakeasy-default-get-cribl-lake-dataset-by-lake-id:
      parameters:
        path:
          lakeId: "default"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteCriblLakeDatasetByLakeIdAndId:
    speakeasy-default-delete-cribl-lake-dataset-by-lake-id-and-id:
      parameters:
        path:
          lakeId: "default"
          id: "myLakeDatasetToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getCriblLakeDatasetByLakeIdAndId:
    speakeasy-default-get-cribl-lake-dataset-by-lake-id-and-id:
      parameters:
        path:
          lakeId: "default"
          id: "myLakeDatasetToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateCriblLakeDatasetByLakeIdAndId:
    speakeasy-default-update-cribl-lake-dataset-by-lake-id-and-id:
      parameters:
        path:
          lakeId: "default"
          id: "myLakeDatasetToCRUD"
      requestBody:
        application/json: {"bucketName": "lake-${workspaceName}-${organizationId}", "id": "<id>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listDashboardCategory:
    speakeasy-default-list-dashboard-category:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createDashboardCategory:
    speakeasy-default-create-dashboard-category:
      requestBody:
        application/json: {"id": "<id>", "name": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getDashboardCategoryById:
    speakeasy-default-get-dashboard-category-by-id:
      parameters:
        path:
          id: "<id>"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateDashboardCategoryById:
    speakeasy-default-update-dashboard-category-by-id:
      parameters:
        path:
          id: "myUniqueDashboardCategoryToCRUD"
      requestBody:
        application/json: {"id": "<id>", "name": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteDashboardCategoryById:
    speakeasy-default-delete-dashboard-category-by-id:
      parameters:
        path:
          id: "myUniqueDashboardCategoryToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listUsageGroup:
    speakeasy-default-list-usage-group:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createUsageGroup:
    speakeasy-default-create-usage-group:
      requestBody:
        application/json: {"id": "<id>", "rules": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getUsageGroupById:
    speakeasy-default-get-usage-group-by-id:
      parameters:
        path:
          id: "myUniqueUsageGroupToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateUsageGroupById:
    speakeasy-default-update-usage-group-by-id:
      parameters:
        path:
          id: "myUniqueUsageGroupToCRUD"
      requestBody:
        application/json: {"id": "<id>", "rules": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteUsageGroupById:
    speakeasy-default-delete-usage-group-by-id:
      parameters:
        path:
          id: "myUniqueUsageGroupToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listDatasetProviderType:
    speakeasy-default-list-dataset-provider-type:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createDatasetProviderType:
    speakeasy-default-create-dataset-provider-type:
      requestBody:
        application/json: {"id": "api_elasticsearch"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getDatasetProviderTypeById:
    speakeasy-default-get-dataset-provider-type-by-id:
      parameters:
        path:
          id: "myUniqueDatasetProviderTypeIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateDatasetProviderTypeById:
    speakeasy-default-update-dataset-provider-type-by-id:
      parameters:
        path:
          id: "myUniqueDatasetProviderTypeIdToCRUD"
      requestBody:
        application/json: {"id": "api_http"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteDatasetProviderTypeById:
    speakeasy-default-delete-dataset-provider-type-by-id:
      parameters:
        path:
          id: "myUniqueDatasetProviderTypeIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listDatasetProvider:
    speakeasy-default-list-dataset-provider:
      parameters:
        path:
          groupId: "<id>"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createDatasetProvider:
    speakeasy-default-create-dataset-provider:
      parameters:
        path:
          groupId: "<id>"
      requestBody:
        application/json: {"id": "amazon_security_lake", "type": "<value>", "accountConfigs": []}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getDatasetProviderById:
    speakeasy-default-get-dataset-provider-by-id:
      parameters:
        path:
          id: "myUniqueDatasetProviderIdToCRUD"
          groupId: "<id>"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateDatasetProviderById:
    speakeasy-default-update-dataset-provider-by-id:
      parameters:
        path:
          id: "myUniqueDatasetProviderIdToCRUD"
          groupId: "<id>"
      requestBody:
        application/json: {"id": "api_elasticsearch", "type": "<value>", "endpoint": "<value>", "authType": "none", "maxConcurrency": 3}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteDatasetProviderById:
    speakeasy-default-delete-dataset-provider-by-id:
      parameters:
        path:
          id: "myUniqueDatasetProviderIdToCRUD"
          groupId: "<id>"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listDataset:
    speakeasy-default-list-dataset:
      parameters:
        path:
          groupId: "<id>"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createDataset:
    speakeasy-default-create-dataset:
      parameters:
        path:
          groupId: "<id>"
      requestBody:
        application/json: {"id": "<id>", "provider": "<value>", "type": "<value>", "enabledEndpoints": []}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getDatasetById:
    speakeasy-default-get-dataset-by-id:
      parameters:
        path:
          id: "myUniqueDatasetIdToCRUD"
          groupId: "<id>"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateDatasetById:
    speakeasy-default-update-dataset-by-id:
      parameters:
        path:
          id: "myUniqueDatasetIdToCRUD"
          groupId: "<id>"
      requestBody:
        application/json: {"id": "<id>", "provider": "<value>", "type": "<value>", "table": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteDatasetById:
    speakeasy-default-delete-dataset-by-id:
      parameters:
        path:
          id: "myUniqueDatasetIdToCRUD"
          groupId: "<id>"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getDatasetAclById:
    speakeasy-default-get-dataset-acl-by-id:
      parameters:
        path:
          id: "myExistingDatasetId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createDatasetAclApplyById:
    speakeasy-default-create-dataset-acl-apply-by-id:
      parameters:
        path:
          id: "myExistingDatasetId"
      requestBody:
        application/json: {}
      responses:
        "500":
          application/json: {"message": "This is my error message string"}
  getDatasetAclTeamsById:
    speakeasy-default-get-dataset-acl-teams-by-id:
      parameters:
        path:
          id: "myExistingDatasetId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createDatasetAclTeamsApplyById:
    speakeasy-default-create-dataset-acl-teams-apply-by-id:
      parameters:
        path:
          id: "myExistingDatasetId"
      requestBody:
        application/json: {}
      responses:
        "500":
          application/json: {"message": "This is my error message string"}
  getSearchDashboardAclById:
    speakeasy-default-get-search-dashboard-acl-by-id:
      parameters:
        path:
          id: "myExistingDashboardId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSearchDashboardAclApplyById:
    speakeasy-default-create-search-dashboard-acl-apply-by-id:
      parameters:
        path:
          id: "myExistingDashboardId"
      requestBody:
        application/json: {}
      responses:
        "500":
          application/json: {"message": "This is my error message string"}
  getGroupsAclById:
    speakeasy-default-get-groups-acl-by-id:
      parameters:
        path:
          id: "myExistingGroupId"
        query:
          type: "groups"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSearchDashboardAclTeamsById:
    speakeasy-default-get-search-dashboard-acl-teams-by-id:
      parameters:
        path:
          id: "myExistingDashboardId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSearchDashboardAclTeamsApplyById:
    speakeasy-default-create-search-dashboard-acl-teams-apply-by-id:
      parameters:
        path:
          id: "myExistingDashboardId"
      requestBody:
        application/json: {}
      responses:
        "500":
          application/json: {"message": "This is my error message string"}
  listAppscopeLibEntry:
    speakeasy-default-list-appscope-lib-entry:
      parameters:
        path:
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createAppscopeLibEntry:
    speakeasy-default-create-appscope-lib-entry:
      parameters:
        path:
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"config": {}, "description": "neatly floodlight athwart fearless scamper dispose", "id": "<id>", "lib": "cribl"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getAppscopeLibEntryById:
    speakeasy-default-get-appscope-lib-entry-by-id:
      parameters:
        path:
          id: "myUniqueAppscopeConfigToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateAppscopeLibEntryById:
    speakeasy-default-update-appscope-lib-entry-by-id:
      parameters:
        path:
          id: "myUniqueAppscopeConfigToCRUD"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"config": {}, "description": "blaspheme failing smug yet part diver dramatize", "id": "<id>", "lib": "cribl"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteAppscopeLibEntryById:
    speakeasy-default-delete-appscope-lib-entry-by-id:
      parameters:
        path:
          id: "myUniqueAppscopeConfigToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listGrokFile:
    speakeasy-default-list-grok-file:
      parameters:
        path:
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createGrokFile:
    speakeasy-default-create-grok-file:
      parameters:
        path:
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"content": "<value>", "id": "<id>", "size": 8001.66}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getGrokFileById:
    speakeasy-default-get-grok-file-by-id:
      parameters:
        path:
          id: "myGrokIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateGrokFileById:
    speakeasy-default-update-grok-file-by-id:
      parameters:
        path:
          id: "myGrokIdToCRUD"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"content": "<value>", "id": "<id>", "size": 7435.13}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteGrokFileById:
    speakeasy-default-delete-grok-file-by-id:
      parameters:
        path:
          id: "myGrokIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listLookupFile:
    speakeasy-default-list-lookup-file:
      parameters:
        path:
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createLookupFile:
    speakeasy-default-create-lookup-file:
      parameters:
        path:
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "<id>", "mode": "memory"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateLookupFile:
    speakeasy-default-update-lookup-file:
      parameters:
        path:
          groupId: "<id>"
      requestBody:
        text/csv: "<value>"
      responses:
        "200":
          application/json: {"filename": "example.file", "rows": 8202.91, "size": 3894.55}
        "500":
          application/json: {}
  getLookupFileById:
    speakeasy-default-get-lookup-file-by-id:
      parameters:
        path:
          id: "myNewLookupIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateLookupFileById:
    speakeasy-default-update-lookup-file-by-id:
      parameters:
        path:
          id: "myNewLookupIdToCRUD"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "<id>", "mode": "memory"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteLookupFileById:
    speakeasy-default-delete-lookup-file-by-id:
      parameters:
        path:
          id: "myNewLookupIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listParser:
    speakeasy-default-list-parser:
      parameters:
        path:
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createParser:
    speakeasy-default-create-parser:
      parameters:
        path:
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "<id>", "type": "csv"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getParserById:
    speakeasy-default-get-parser-by-id:
      parameters:
        path:
          id: "myUniqueParserIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateParserById:
    speakeasy-default-update-parser-by-id:
      parameters:
        path:
          id: "myUniqueParserIdToCRUD"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "<id>", "type": "csv"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteParserById:
    speakeasy-default-delete-parser-by-id:
      parameters:
        path:
          id: "myUniqueParserIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getProtobufLibraryConfig:
    speakeasy-default-get-protobuf-library-config:
      parameters:
        query:
          onlyWithEncodings: "UTF-8"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getProtobufLibraryConfigById:
    speakeasy-default-get-protobuf-library-config-by-id:
      parameters:
        path:
          id: "myUniqueProtobufIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getProtobufLibraryConfigEncodingsByIdAndEncId:
    speakeasy-default-get-protobuf-library-config-encodings-by-id-and-enc-id:
      parameters:
        path:
          id: "myExistingProtobufIdToCRUD"
          encid: "myUniqueEncodingIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getProtobufLibraryConfigEncodingsById:
    speakeasy-default-get-protobuf-library-config-encodings-by-id:
      parameters:
        path:
          id: "myExistingProtobufId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listRegexLibEntry:
    speakeasy-default-list-regex-lib-entry:
      parameters:
        path:
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {"items": [{"id": "test_id", "lib": "custom", "description": "A sample regex", "regex": "/\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b/", "sampleData": "192.168.1.1, 10.0.0.1, 172.16.0.1", "tags": "test"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  createRegexLibEntry:
    speakeasy-default-create-regex-lib-entry:
      parameters:
        path:
          groupId: "default"
      requestBody:
        application/json: {"id": "test_id", "lib": "custom", "description": "A sample regex", "regex": "/\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b/", "sampleData": "192.168.1.1, 10.0.0.1, 172.16.0.1", "tags": "test"}
      responses:
        "200":
          application/json: {"items": [{"id": "test_id", "lib": "custom", "description": "A sample regex", "regex": "/\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b/", "sampleData": "192.168.1.1, 10.0.0.1, 172.16.0.1", "tags": "test"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  getRegexLibEntryById:
    speakeasy-default-get-regex-lib-entry-by-id:
      parameters:
        path:
          id: "myUniqueRegexIdToCrud"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {"items": [{"id": "test_id", "lib": "custom", "description": "A sample regex", "regex": "/\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b/", "sampleData": "192.168.1.1, 10.0.0.1, 172.16.0.1", "tags": "test"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  updateRegexLibEntryById:
    speakeasy-default-update-regex-lib-entry-by-id:
      parameters:
        path:
          id: "myUniqueRegexToCRUD"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "test_id", "lib": "custom", "description": "A sample regex", "regex": "/\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b/", "sampleData": "192.168.1.1, 10.0.0.1, 172.16.0.1", "tags": "test"}
      responses:
        "200":
          application/json: {"items": [{"id": "test_id", "lib": "custom", "description": "A sample regex", "regex": "/\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b/", "sampleData": "192.168.1.1, 10.0.0.1, 172.16.0.1", "tags": "test"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteRegexLibEntryById:
    speakeasy-default-delete-regex-lib-entry-by-id:
      parameters:
        path:
          id: "myUniqueRegexToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {"items": [{"id": "test_id", "lib": "custom", "description": "A sample regex", "regex": "/\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b/", "sampleData": "192.168.1.1, 10.0.0.1, 172.16.0.1", "tags": "test"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  listSearchDashboard:
    speakeasy-default-list-search-dashboard:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSearchDashboard:
    speakeasy-default-create-search-dashboard:
      requestBody:
        application/json: {"created": 9377.15, "createdBy": "<value>", "elements": [{"id": "<id>", "layout": {"h": 5003.17, "w": 3536.4, "x": 839.93, "y": 6172.28}, "type": "markdown.default", "variant": "markdown"}, {"id": "<id>", "layout": {"h": 5003.17, "w": 3536.4, "x": 839.93, "y": 6172.28}, "type": "markdown.default", "variant": "markdown"}], "id": "<id>", "modified": 5138.81, "name": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSearchDashboardById:
    speakeasy-default-get-search-dashboard-by-id:
      parameters:
        path:
          id: "myUniqueDashboardIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateSearchDashboardById:
    speakeasy-default-update-search-dashboard-by-id:
      parameters:
        path:
          id: "myUniqueDashboardIdToCRUD"
      requestBody:
        application/json: {"created": 9322.04, "createdBy": "<value>", "elements": [{"id": "<id>", "layout": {"h": 639.57, "w": 6274.13, "x": 2916.93, "y": 2991.89}, "search": {"earliest": "<value>", "latest": "<value>", "query": "<value>", "type": "inline"}, "type": "chart.funnel"}, {"id": "<id>", "layout": {"h": 639.57, "w": 6274.13, "x": 2916.93, "y": 2991.89}, "search": {"earliest": "<value>", "latest": "<value>", "query": "<value>", "type": "inline"}, "type": "chart.funnel"}], "id": "<id>", "modified": 6157.19, "name": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteSearchDashboardById:
    speakeasy-default-delete-search-dashboard-by-id:
      parameters:
        path:
          id: "myUniqueDashboardIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listSearchMacro:
    speakeasy-default-list-search-macro:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSearchMacro:
    speakeasy-default-create-search-macro:
      requestBody:
        application/json: {"id": "<id>", "replacement": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSearchMacroById:
    speakeasy-default-get-search-macro-by-id:
      parameters:
        path:
          id: "myUniqueMacroIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateSearchMacroById:
    speakeasy-default-update-search-macro-by-id:
      parameters:
        path:
          id: "myUniqueMacroIdToCRUD"
      requestBody:
        application/json: {"id": "<id>", "replacement": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteSearchMacroById:
    speakeasy-default-delete-search-macro-by-id:
      parameters:
        path:
          id: "myUniqueMacroIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listSavedQuery:
    speakeasy-default-list-saved-query:
      responses:
        "200":
          application/json: {"items": [{"name": "test_saved", "isPrivate": true, "query": "dataset=\"cribl_edge_appscope_metrics\" | limit 1000", "earliest": "-1h", "latest": "now", "user": "google-oauth2|115928590796700585084", "displayUsername": "First Last", "id": "test_saved"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  createSavedQuery:
    speakeasy-default-create-saved-query:
      requestBody:
        application/json: {"name": "test_saved", "isPrivate": true, "query": "dataset=\"cribl_edge_appscope_metrics\" | limit 1000", "earliest": "-1h", "latest": "now", "description": "test saved query", "user": "google-oauth2|115928590796700585084", "displayUsername": "First Last", "id": "test_saved"}
      responses:
        "200":
          application/json: {"items": [{"name": "test_saved", "isPrivate": true, "query": "dataset=\"cribl_edge_appscope_metrics\" | limit 1000", "earliest": "-1h", "latest": "now", "user": "google-oauth2|115928590796700585084", "displayUsername": "First Last", "id": "test_saved"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  getSavedQueryById:
    speakeasy-default-get-saved-query-by-id:
      parameters:
        path:
          id: "myUniqueSavedSearchIdToCRUD"
      responses:
        "200":
          application/json: {"items": [{"name": "test_saved", "isPrivate": true, "query": "dataset=\"cribl_edge_appscope_metrics\" | limit 1000", "earliest": "-1h", "latest": "now", "user": "google-oauth2|115928590796700585084", "displayUsername": "First Last", "id": "test_saved"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  updateSavedQueryById:
    speakeasy-default-update-saved-query-by-id:
      parameters:
        path:
          id: "myUniqueSavedSearchIdToCRUD"
      requestBody:
        application/json: {"name": "test_saved", "isPrivate": true, "query": "dataset=\"cribl_edge_appscope_metrics\" | limit 1000", "earliest": "-1h", "latest": "now", "description": "test saved query", "user": "google-oauth2|115928590796700585084", "displayUsername": "First Last", "id": "test_saved"}
      responses:
        "200":
          application/json: {"items": [{"name": "test_saved", "isPrivate": true, "query": "dataset=\"cribl_edge_appscope_metrics\" | limit 1000", "earliest": "-1h", "latest": "now", "user": "google-oauth2|115928590796700585084", "displayUsername": "First Last", "id": "test_saved"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteSavedQueryById:
    speakeasy-default-delete-saved-query-by-id:
      parameters:
        path:
          id: "myUniqueSavedSearchIdToCRUD"
      responses:
        "200":
          application/json: {"items": [{"name": "test_saved", "isPrivate": true, "query": "dataset=\"cribl_edge_appscope_metrics\" | limit 1000", "earliest": "-1h", "latest": "now", "user": "google-oauth2|115928590796700585084", "displayUsername": "First Last", "id": "test_saved"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  listSearchJob:
    speakeasy-default-list-search-job:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSearchJob:
    speakeasy-default-create-search-job:
      requestBody:
        application/json: {"displayUsername": "<value>", "group": "<value>", "id": "<id>", "query": "<value>", "status": "canceled", "timeCreated": 328.87, "timeStarted": 4693.49, "user": "Alena71"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSearchJobById:
    speakeasy-default-get-search-job-by-id:
      parameters:
        path:
          id: "myUniqueJobIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateSearchJobById:
    speakeasy-default-update-search-job-by-id:
      parameters:
        path:
          id: "myUniqueJobIdToCRUD"
      requestBody:
        application/json: {"displayUsername": "<value>", "group": "<value>", "id": "<id>", "query": "<value>", "status": "running", "timeCreated": 6068.64, "timeStarted": 6166.23, "user": "Karlee.Blick60"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteSearchJobById:
    speakeasy-default-delete-search-job-by-id:
      parameters:
        path:
          id: "myUniqueJobIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSearchJobDispatchExecutorsById:
    speakeasy-default-create-search-job-dispatch-executors-by-id:
      parameters:
        path:
          id: "myExistingSearchJobId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSearchJobLogsById:
    speakeasy-default-get-search-job-logs-by-id:
      parameters:
        path:
          id: "myExistingSearchJobId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSearchEventBreakerPreview:
    speakeasy-default-create-search-event-breaker-preview:
      requestBody:
        application/json: {"input": {"dataset": "<value>", "type": "dataset"}}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSearchHealthcheck:
    speakeasy-default-get-search-healthcheck:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSearchJobsMetricsById:
    speakeasy-default-get-search-jobs-metrics-by-id:
      parameters:
        path:
          id: "myExistingSearchJobId"
      responses:
        "200":
          application/json: "<value>"
        "500":
          application/json: {"message": "This is my error message string"}
  getSearchJobMetrics:
    speakeasy-default-get-search-job-metrics:
      responses:
        "200":
          application/json: "<value>"
        "500":
          application/json: {"message": "This is my error message string"}
  createSearchPreview:
    speakeasy-default-create-search-preview:
      requestBody:
        application/json: {"events": [], "query": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSearchJobsStagesResultsByIdAndStageId:
    speakeasy-default-get-search-jobs-stages-results-by-id-and-stage-id:
      parameters:
        path:
          id: "myExistingSearchJobId"
          stageId: "myExistingStageId"
      responses:
        "200":
          application/json: "<value>"
        "500":
          application/json: {"message": "This is my error message string"}
  getSearchJobsResultsPollById:
    speakeasy-default-get-search-jobs-results-poll-by-id:
      parameters:
        path:
          id: "myExistingSearchJobId"
        query:
          limit: 1000
          offset: 100
          lowerBound: 1759255372
          upperBound: 1759258372
          lastJobStatus: "failed"
      responses:
        "200":
          application/json: {"isFinished": false, "job": "Human Factors Strategist", "offset": 6995.43, "persistedEventCount": 2187.56, "totalEventCount": 7686.72}
        "500":
          application/json: {"message": "This is my error message string"}
  getDatabaseConnectionConfig:
    speakeasy-default-get-database-connection-config:
      parameters:
        path:
          groupId: "myExistingGroupId"
        query:
          databaseType: "SQL Server"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createDatabaseConnectionConfig:
    speakeasy-default-create-database-connection-config:
      parameters:
        path:
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"authType": "<value>", "databaseType": "postgres", "description": "besides investigate yowza skyline promptly daintily afore contravene meanwhile", "id": "<id>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getDatabaseConnectionConfigById:
    speakeasy-default-get-database-connection-config-by-id:
      parameters:
        path:
          id: "myUniqueDatabaseConnIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateDatabaseConnectionConfigById:
    speakeasy-default-update-database-connection-config-by-id:
      parameters:
        path:
          id: "myUniqueDatabaseConnIdToCRUD"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"authType": "<value>", "databaseType": "oracle", "description": "developmental oof hourly", "id": "<id>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteDatabaseConnectionConfigById:
    speakeasy-default-delete-database-connection-config-by-id:
      parameters:
        path:
          id: "myUniqueDatabaseConnIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createLibDatabaseConnectionsTest:
    speakeasy-default-create-lib-database-connections-test:
      requestBody:
        application/json: {"authType": "<value>", "databaseType": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listEventBreakerRuleset:
    speakeasy-default-list-event-breaker-ruleset:
      parameters:
        path:
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createEventBreakerRuleset:
    speakeasy-default-create-event-breaker-ruleset:
      parameters:
        path:
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "<id>", "lib": "custom", "minRawLength": 256}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getEventBreakerRulesetById:
    speakeasy-default-get-event-breaker-ruleset-by-id:
      parameters:
        path:
          id: "myUniqueBreakerIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateEventBreakerRulesetById:
    speakeasy-default-update-event-breaker-ruleset-by-id:
      parameters:
        path:
          id: "myUniqueBreakerIdToCRUD"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "<id>", "lib": "custom", "minRawLength": 256}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteEventBreakerRulesetById:
    speakeasy-default-delete-event-breaker-ruleset-by-id:
      parameters:
        path:
          id: "myUniqueBreakerIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getGlobalVariable:
    speakeasy-default-get-global-variable:
      parameters:
        path:
          groupId: "myExistingGroupId"
        query:
          with: "{ '$ref': '#/components/schemas/ComplexModel' }"
      responses:
        "200":
          application/json: {"items": [{"id": "test_var", "lib": "custom", "description": "This is a test var.", "type": "number", "value": "100", "tags": "test"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  createGlobalVariable:
    speakeasy-default-create-global-variable:
      parameters:
        path:
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "test_var", "lib": "custom", "description": "This is a test var.", "type": "number", "value": "100", "tags": "test"}
      responses:
        "200":
          application/json: {"items": [{"id": "test_var", "lib": "custom", "description": "This is a test var.", "type": "number", "value": "100", "tags": "test"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  getGlobalVariableById:
    speakeasy-default-get-global-variable-by-id:
      parameters:
        path:
          id: "myUniqueVarIdToCrud"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {"items": [{"id": "test_var", "lib": "custom", "description": "This is a test var.", "type": "number", "value": "100", "tags": "test"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  updateGlobalVariableById:
    speakeasy-default-update-global-variable-by-id:
      parameters:
        path:
          id: "myUniqueVarIdToCrud"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "test_var", "lib": "custom", "description": "This is a test var.", "type": "number", "value": "100", "tags": "test"}
      responses:
        "200":
          application/json: {"items": [{"id": "test_var", "lib": "custom", "description": "This is a test var.", "type": "number", "value": "100", "tags": "test"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteGlobalVariableById:
    speakeasy-default-delete-global-variable-by-id:
      parameters:
        path:
          id: "myUniqueVarIdToCrud"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {"items": [{"id": "test_var", "lib": "custom", "description": "This is a test var.", "type": "number", "value": "100", "tags": "test"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  getGlobalVariableLibVarsByPack:
    speakeasy-default-get-global-variable-lib-vars-by-pack:
      parameters:
        path:
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
        query:
          with: "{ '$ref': '#/components/schemas/ComplexModel' }"
      responses:
        "200":
          application/json: {"items": [{"id": "test_var", "lib": "custom", "description": "This is a test var.", "type": "number", "value": "100", "tags": "test"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  createGlobalVariableLibVarsByPack:
    speakeasy-default-create-global-variable-lib-vars-by-pack:
      parameters:
        path:
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "test_var", "lib": "custom", "description": "This is a test var.", "type": "number", "value": "100", "tags": "test"}
      responses:
        "200":
          application/json: {"items": [{"id": "test_var", "lib": "custom", "description": "This is a test var.", "type": "number", "value": "100", "tags": "test"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  getGlobalVariableLibVarsByPackAndId:
    speakeasy-default-get-global-variable-lib-vars-by-pack-and-id:
      parameters:
        path:
          id: "myUniquePackVarIdToCRUD"
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {"items": [{"id": "test_var", "lib": "custom", "description": "This is a test var.", "type": "number", "value": "100", "tags": "test"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  updateGlobalVariableLibVarsByPackAndId:
    speakeasy-default-update-global-variable-lib-vars-by-pack-and-id:
      parameters:
        path:
          id: "myUniquePackVarIdToCRUD"
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "test_var", "lib": "custom", "description": "This is a test var.", "type": "number", "value": "100", "tags": "test"}
      responses:
        "200":
          application/json: {"items": [{"id": "test_var", "lib": "custom", "description": "This is a test var.", "type": "number", "value": "100", "tags": "test"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteGlobalVariableLibVarsByPackAndId:
    speakeasy-default-delete-global-variable-lib-vars-by-pack-and-id:
      parameters:
        path:
          id: "myUniquePackVarIdToCRUD"
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {"items": [{"id": "test_var", "lib": "custom", "description": "This is a test var.", "type": "number", "value": "100", "tags": "test"}]}
        "500":
          application/json: {"message": "This is my error message string"}
  listHmacFunction:
    speakeasy-default-list-hmac-function:
      parameters:
        path:
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createHmacFunction:
    speakeasy-default-create-hmac-function:
      parameters:
        path:
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"headerExpression": "<value>", "headerName": "<value>", "id": "<id>", "lib": "custom", "stringBuilders": ["<value 1>"]}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getHmacFunctionById:
    speakeasy-default-get-hmac-function-by-id:
      parameters:
        path:
          id: "myUniqueHMACFuntionIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateHmacFunctionById:
    speakeasy-default-update-hmac-function-by-id:
      parameters:
        path:
          id: "myUniqueHMACFuntionIdToCRUD"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"headerExpression": "<value>", "headerName": "<value>", "id": "<id>", "lib": "cribl", "stringBuilders": ["<value 1>"]}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteHmacFunctionById:
    speakeasy-default-delete-hmac-function-by-id:
      parameters:
        path:
          id: "myUniqueHMACFuntionIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listInput:
    speakeasy-default-list-input:
      parameters:
        path:
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createInput:
    speakeasy-default-create-input:
      parameters:
        path:
          groupId: "myExistingGroupId"
        query:
          id: "myUniqueInputIdToCRUD"
      requestBody:
        application/json: {"disabled": false, "sendToRoutes": true, "pqEnabled": false, "streamtags": [], "host": "0.0.0.0", "port": 301.76, "ipWhitelistRegex": "/.*/", "maxActiveCxn": 1000, "socketIdleTimeout": 0, "socketEndingMaxWait": 30, "socketMaxLifespan": 0, "enableProxyHeader": false, "staleChannelFlushMs": 10000, "enableHeader": false, "authType": "manual"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getInputById:
    speakeasy-default-get-input-by-id:
      parameters:
        path:
          id: "myUniqueInputIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateInputById:
    speakeasy-default-update-input-by-id:
      parameters:
        path:
          id: "myUniqueInputIdToCRUD"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "<id>", "type": "kube_events", "disabled": false, "sendToRoutes": true, "pqEnabled": false, "streamtags": [], "rules": []}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteInputById:
    speakeasy-default-delete-input-by-id:
      parameters:
        path:
          id: "myUniqueInputIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createInputHecTokenById:
    speakeasy-default-create-input-hec-token-by-id:
      parameters:
        path:
          id: "myUniqueHECInputIdToCRUD"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"token": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateInputHecTokenByIdAndToken:
    speakeasy-default-update-input-hec-token-by-id-and-token:
      parameters:
        path:
          id: "myExistingHECInputId"
          token: "myUniqueHECInputTokenIdToCRUD"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listInputStatus:
    speakeasy-default-list-input-status:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getInputStatusById:
    speakeasy-default-get-input-status-by-id:
      parameters:
        path:
          id: "myUniqueStatusInputIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listOutput:
    speakeasy-default-list-output:
      parameters:
        path:
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createOutput:
    speakeasy-default-create-output:
      parameters:
        path:
          groupId: "myExistingGroupId"
        query:
          id: "myUniqueOutputIdToCRUD"
      requestBody:
        application/json: {"type": "elastic", "systemFields": ["cribl_pipe"], "streamtags": [], "loadBalanced": true, "index": "<value>", "concurrency": 5, "maxPayloadSizeKB": 4096, "maxPayloadEvents": 0, "compress": true, "rejectUnauthorized": true, "timeoutSec": 30, "flushPeriodSec": 1, "failedRequestLoggingMode": "none", "safeHeaders": [], "responseRetrySettings": [], "responseHonorRetryAfterHeader": false, "extraParams": [{"name": "filter_path", "value": "errors,items.*.error,items.*._index,items.*.status"}], "elasticVersion": "auto", "includeDocId": false, "writeAction": "create", "retryPartialErrors": false, "onBackpressure": "block", "useRoundRobinDns": false, "excludeSelf": false, "dnsResolvePeriodSec": 600, "loadBalanceStatsPeriodSec": 300, "pqMaxFileSize": "1 MB", "pqMaxSize": "5GB", "pqPath": "$CRIBL_HOME/state/queues", "pqCompress": "none", "pqOnBackpressure": "block", "pqMode": "error"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getOutputById:
    speakeasy-default-get-output-by-id:
      parameters:
        path:
          id: "myUniqueSystemOutputIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateOutputById:
    speakeasy-default-update-output-by-id:
      parameters:
        path:
          id: "myUniqueSystemOutputIdToCRUD"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"type": "signalfx", "systemFields": ["cribl_pipe"], "streamtags": [], "authType": "manual", "realm": "us0", "concurrency": 5, "maxPayloadSizeKB": 4096, "maxPayloadEvents": 0, "compress": true, "rejectUnauthorized": true, "timeoutSec": 30, "flushPeriodSec": 1, "useRoundRobinDns": false, "failedRequestLoggingMode": "none", "safeHeaders": [], "responseRetrySettings": [], "responseHonorRetryAfterHeader": false, "onBackpressure": "block", "pqMaxFileSize": "1 MB", "pqMaxSize": "5GB", "pqPath": "$CRIBL_HOME/state/queues", "pqCompress": "none", "pqOnBackpressure": "block", "pqMode": "error"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteOutputById:
    speakeasy-default-delete-output-by-id:
      parameters:
        path:
          id: "myUniqueSystemOutputIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteOutputPqById:
    speakeasy-default-delete-output-pq-by-id:
      parameters:
        path:
          id: "myExistingOutputId"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getOutputPqById:
    speakeasy-default-get-output-pq-by-id:
      parameters:
        path:
          id: "myExistingOutputId"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getOutputSamplesById:
    speakeasy-default-get-output-samples-by-id:
      parameters:
        path:
          id: "myExistingOutputId"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createOutputTestById:
    speakeasy-default-create-output-test-by-id:
      parameters:
        path:
          id: "myExistingOutputId"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"events": [{"_raw": "<value>"}, {"_raw": "<value>"}]}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listOutputStatus:
    speakeasy-default-list-output-status:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getOutputStatusById:
    speakeasy-default-get-output-status-by-id:
      parameters:
        path:
          id: "myUniqueStatusOutputIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listSchema:
    speakeasy-default-list-schema:
      parameters:
        path:
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSchema:
    speakeasy-default-create-schema:
      parameters:
        path:
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "<id>", "schema": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSchemaById:
    speakeasy-default-get-schema-by-id:
      parameters:
        path:
          id: "myUniqueParquetSchemaIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateSchemaById:
    speakeasy-default-update-schema-by-id:
      parameters:
        path:
          id: "myUniqueParquetSchemaIdToCRUD"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "<id>", "schema": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteSchemaById:
    speakeasy-default-delete-schema-by-id:
      parameters:
        path:
          id: "myUniqueParquetSchemaIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listProfilerItem:
    speakeasy-default-list-profiler-item:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createProfilerItem:
    speakeasy-default-create-profiler-item:
      requestBody:
        application/json: {"id": "<id>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getProfilerItemById:
    speakeasy-default-get-profiler-item-by-id:
      parameters:
        path:
          id: "myUniqueProfilerId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateProfilerItemById:
    speakeasy-default-update-profiler-item-by-id:
      parameters:
        path:
          id: "myUniqueProfilerId"
      requestBody:
        application/json: {"id": "<id>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteProfilerItemById:
    speakeasy-default-delete-profiler-item-by-id:
      parameters:
        path:
          id: "myUniqueProfilerId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listRoutes:
    speakeasy-default-list-routes:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getRoutesById:
    speakeasy-default-get-routes-by-id:
      parameters:
        path:
          id: "myRoutesIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateRoutesById:
    speakeasy-default-update-routes-by-id:
      parameters:
        path:
          id: "myRoutesIdToCRUD"
      requestBody:
        application/json: {"routes": [{"name": "<value>", "filter": "true", "pipeline": "<value>", "enableOutputExpression": false, "final": true}]}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createRoutesAppendById:
    speakeasy-default-create-routes-append-by-id:
      parameters:
        path:
          id: "myExistingRouteId"
      requestBody:
        application/json: [{"final": true, "id": "<id>", "name": "<value>", "pipeline": "<value>"}]
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getRoutesByPack:
    speakeasy-default-get-routes-by-pack:
      parameters:
        path:
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getRoutesByPackAndId:
    speakeasy-default-get-routes-by-pack-and-id:
      parameters:
        path:
          id: "<id>"
          pack: "<value>"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {}
  updateRoutesByPackAndId:
    speakeasy-default-update-routes-by-pack-and-id:
      parameters:
        path:
          id: "<id>"
          pack: "<value>"
          groupId: "<id>"
      requestBody:
        application/json: {"routes": [{"name": "<value>", "filter": "true", "pipeline": "<value>", "enableOutputExpression": false, "final": true}]}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {}
  createRoutesAppendByPackAndId:
    speakeasy-default-create-routes-append-by-pack-and-id:
      parameters:
        path:
          id: "<id>"
          pack: "<value>"
          groupId: "<id>"
      requestBody:
        application/json: [{"final": true, "id": "<id>", "name": "<value>", "pipeline": "<value>"}, {"final": true, "id": "<id>", "name": "<value>", "pipeline": "<value>"}]
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {}
  listLibSchemas:
    speakeasy-default-list-lib-schemas:
      parameters:
        path:
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createLibSchemas:
    speakeasy-default-create-lib-schemas:
      parameters:
        path:
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "<id>", "schema": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getLibSchemasById:
    speakeasy-default-get-lib-schemas-by-id:
      parameters:
        path:
          id: "myUniqueSchemaIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateLibSchemasById:
    speakeasy-default-update-lib-schemas-by-id:
      parameters:
        path:
          id: "myUniqueSchemaIdToCRUD"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "<id>", "schema": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteLibSchemasById:
    speakeasy-default-delete-lib-schemas-by-id:
      parameters:
        path:
          id: "myUniqueSchemaIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSchemaLibByPack:
    speakeasy-default-get-schema-lib-by-pack:
      parameters:
        path:
          pack: "myExistingPackId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSchemaLibByPack:
    speakeasy-default-create-schema-lib-by-pack:
      parameters:
        path:
          pack: "myExistingPackId"
      requestBody:
        application/json: {"id": "<id>", "schema": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSchemaLibByPackAndId:
    speakeasy-default-get-schema-lib-by-pack-and-id:
      parameters:
        path:
          id: "myUniqueSchemaIdToCRUD"
          pack: "myExistingPackId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateSchemaLibByPackAndId:
    speakeasy-default-update-schema-lib-by-pack-and-id:
      parameters:
        path:
          id: "myUniqueSchemaIdToCRUD"
          pack: "myExistingPackId"
      requestBody:
        application/json: {"id": "<id>", "schema": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteSchemaLibByPackAndId:
    speakeasy-default-delete-schema-lib-by-pack-and-id:
      parameters:
        path:
          id: "myUniqueSchemaIdToCRUD"
          pack: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listRestSecret:
    speakeasy-default-list-rest-secret:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createRestSecret:
    speakeasy-default-create-rest-secret:
      requestBody:
        application/json: {"id": "<id>", "secretType": "keypair"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getRestSecretById:
    speakeasy-default-get-rest-secret-by-id:
      parameters:
        path:
          id: "myUniqueSecretsIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateRestSecretById:
    speakeasy-default-update-rest-secret-by-id:
      parameters:
        path:
          id: "myUniqueSecretsIdToCRUD"
      requestBody:
        application/json: {"id": "<id>", "secretType": "credentials"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteRestSecretById:
    speakeasy-default-delete-rest-secret-by-id:
      parameters:
        path:
          id: "myUniqueSecretsIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createEdgeAppscopeProcesses:
    speakeasy-default-create-edge-appscope-processes:
      parameters:
        query:
          pid: "8675309"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getEdgeAppscopeProcesses:
    speakeasy-default-get-edge-appscope-processes:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteEdgeAppscopeProcessesByPid:
    speakeasy-default-delete-edge-appscope-processes-by-pid:
      parameters:
        path:
          pid: "8675309"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getEdgeAppscopeProcessesByPid:
    speakeasy-default-get-edge-appscope-processes-by-pid:
      parameters:
        path:
          pid: "8675309"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateEdgeAppscopeProcessesByPid:
    speakeasy-default-update-edge-appscope-processes-by-pid:
      parameters:
        path:
          pid: "8675309"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getEdgeEventsCollectors:
    speakeasy-default-get-edge-events-collectors:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getEdgeFileinspect:
    speakeasy-default-get-edge-fileinspect:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getEdgeLsByPath:
    speakeasy-default-get-edge-ls-by-path:
      parameters:
        path:
          path: "/var/log"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createProductsEdgeMapQuery:
    speakeasy-default-create-products-edge-map-query:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getEdgeMetadata:
    speakeasy-default-get-edge-metadata:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createEdgeFileIngest:
    speakeasy-default-create-edge-file-ingest:
      parameters:
        query:
          filePath: "/var/log/http.log"
          pipelineId: "myPipelineId"
          outputId: "myOutputId"
          preProcessingPipelineId: "myPreProcessingPipelineId"
          sendToRoutes: "myRoutesId"
          breakerRuleSet: "myBreakerRuleId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getEdgeFileSample:
    speakeasy-default-get-edge-file-sample:
      parameters:
        query:
          path: "/var/log/http.log"
          bytesRequested: 2048
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createEdgeKubeLogs:
    speakeasy-default-create-edge-kube-logs:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getEdgeKubeProxy:
    speakeasy-default-get-edge-kube-proxy:
      parameters:
        query:
          path: "api/v1"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getEdgeContainersById:
    speakeasy-default-get-edge-containers-by-id:
      parameters:
        path:
          id: "myExistingEdgeContainerId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getEdgeContainers:
    speakeasy-default-get-edge-containers:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getEdgeLogs:
    speakeasy-default-get-edge-logs:
      parameters:
        query:
          mode: "auto"
          allow: "*.log"
          path: "/path/to/files"
          depth: 2
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getEdgeProcessesByPid:
    speakeasy-default-get-edge-processes-by-pid:
      parameters:
        path:
          pid: "12345"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getEdgeProcesses:
    speakeasy-default-get-edge-processes:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getEdgeEventsQuery:
    speakeasy-default-get-edge-events-query:
      parameters:
        query:
          Files: "/var/log/http.log"
          source: "system_state/hostsfile"
          limit: 1000
          et: 1759240142
          lt: 1759240162
          filter: "true"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getAuthAuthorizationCodeCallback:
    speakeasy-default-get-auth-authorization-code-callback:
      parameters:
        query:
          code: "myCryptographicallySecureAuthorizationCode"
          state: "Unauthenticated"
  getAuthMetadata:
    speakeasy-default-get-auth-metadata:
      responses:
        "200":
          text/xml: "<value>"
  login:
    speakeasy-default-login:
      requestBody:
        application/json: {"username": "Nikko.Connelly", "password": "Ljp4BunfMR9hNyM"}
      responses:
        "200":
          application/json: {"token": "<value>"}
  logout: {}
  createAuthSloCallback:
    speakeasy-default-create-auth-slo-callback:
      requestBody:
        application/x-www-form-urlencoded: {}
  getAuthSloCallback:
    speakeasy-default-get-auth-slo-callback:
      parameters:
        query:
          SAMLResponse: "{ 'logout': { 'callback': 'https://myapp.exampleco.com/saml/logout', 'slo_enabled': true } }"
          RelayState: "HTTP-Redirect"
  getAuthSlo: {}
  createAuthSsoCallback:
    speakeasy-default-create-auth-sso-callback:
      requestBody:
        application/x-www-form-urlencoded: {}
  getAuthSsoCallback:
    speakeasy-default-get-auth-sso-callback:
      parameters:
        query:
          SAMLResponse: "{ 'logout': { 'callback': 'https://myapp.exampleco.com/saml/logout', 'slo_enabled': true } }"
          RelayState: "HTTP-Redirect"
  getAuthSso:
    speakeasy-default-get-auth-sso:
      responses:
        "200":
          application/json: {"name": "<value>"}
  getAuthGroups:
    speakeasy-default-get-auth-groups:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getAuthMultiFactor:
    speakeasy-default-get-auth-multi-factor:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteAuthUsersTokenById:
    speakeasy-default-delete-auth-users-token-by-id:
      parameters:
        path:
          id: "myExistingUserId"
        query:
          ttl: "300"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getAuthorizePolicy:
    speakeasy-default-get-authorize-policy:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getAuthorizeRoles:
    speakeasy-default-get-authorize-roles:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getChangelogViewed:
    speakeasy-default-get-changelog-viewed:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateChangelogViewed:
    speakeasy-default-update-changelog-viewed:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemDistributedUpgradeCancelByGroup:
    speakeasy-default-create-system-distributed-upgrade-cancel-by-group:
      parameters:
        path:
          group: "myUniqueUpgradeCancelGroupIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemDistributedUpgradeStageByGroup:
    speakeasy-default-create-system-distributed-upgrade-stage-by-group:
      parameters:
        path:
          group: "myUniqueUpgradeStageGroupIdToCRUD"
        query:
          upgradePercentage: "25"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemDistributedUpgradeByGroup:
    speakeasy-default-create-system-distributed-upgrade-by-group:
      parameters:
        path:
          group: "myUniqueDistributedUpgradeGroupIdToCRUD"
      requestBody:
        application/json: {"upgradePercentage": 1, "workerRetries": 5, "workerRetryDelay": 1000}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemDistributedUpgradeDownloadByFile:
    speakeasy-default-get-system-distributed-upgrade-download-by-file:
      parameters:
        path:
          file: "myDistributedUpgradeFile.txt"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  reloadSettings: {}
  triggerRestart: {}
  getSystemSettingsAuth:
    speakeasy-default-get-system-settings-auth:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateSystemSettingsAuth:
    speakeasy-default-update-system-settings-auth:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemSettingsConf:
    speakeasy-default-get-system-settings-conf:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateSystemSettingsConf:
    speakeasy-default-update-system-settings-conf:
      requestBody:
        application/json: {"api": {"disabled": true, "host": "both-draw.com", "port": 3795.06, "protocol": "<value>", "ssl": {"certPath": "<value>", "disabled": false, "passphrase": "<value>", "privKeyPath": "<value>"}, "workerRemoteAccess": false}, "backups": {"backupPersistence": "<value>", "backupsDirectory": "<value>"}, "customLogo": {"enabled": false, "logoDescription": "<value>", "logoImage": "<value>"}, "pii": {"enablePiiDetection": true}, "proxy": {"useEnvVars": true}, "rollback": {"rollbackEnabled": true}, "shutdown": {"drainTimeout": 2424.38}, "sni": {"disableSNIRouting": true}, "system": {"intercom": false, "upgrade": "false"}, "tls": {"defaultCipherList": "<value>", "defaultEcdhCurve": "<value>", "maxVersion": "<value>", "minVersion": "<value>", "rejectUnauthorized": true}, "upgradeGroupSettings": {}, "upgradeSettings": {"disableAutomaticUpgrade": false, "enableLegacyEdgeUpgrade": false, "upgradeSource": "<value>"}, "workers": {"count": 1297.29, "memory": 5944.19, "minimum": 3174.73}}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemSettingsSearchLimits:
    speakeasy-default-get-system-settings-search-limits:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemSettings:
    speakeasy-default-get-system-settings:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateSystemSettings:
    speakeasy-default-update-system-settings:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemSettingsCribl:
    speakeasy-default-get-system-settings-cribl:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemSettingsUpgrade:
    speakeasy-default-get-system-settings-upgrade:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemSettingsUpgradeByVersion:
    speakeasy-default-create-system-settings-upgrade-by-version:
      parameters:
        path:
          version: "1.0.0"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemSettingsUpgradeFromPackage:
    speakeasy-default-create-system-settings-upgrade-from-package:
      requestBody:
        application/json: {}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createOutputClickHouseDescribeTable:
    speakeasy-default-create-output-click-house-describe-table:
      requestBody:
        application/json: {"asyncInserts": true, "database": "<value>", "flushPeriodSec": 6320.13, "format": "json-each-row", "loadBalanced": true, "mappingType": "custom", "tableName": "<value>", "url": "https://blue-fundraising.name"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getClui:
    speakeasy-default-get-clui:
      parameters:
        query:
          query: "dataset=\"cribl_search_sample\" | take 5"
          context: "stream"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSummaryWorkers:
    speakeasy-default-get-summary-workers:
      parameters:
        query:
          filterExp: "truthy"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getWorkers:
    speakeasy-default-get-workers:
      parameters:
        query:
          filterExp: "truthy"
          sort: "group === 'default'"
          sortExp: "group=='default'"
          limit: 10
          offset: 0
          filter: "{\"info\": {\"aws\": {\"type\": \"t2.medium\"}}}"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateWorkersRestart:
    speakeasy-default-update-workers-restart:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getConfigBundlesByGroupAndVersion:
    speakeasy-default-get-config-bundles-by-group-and-version:
      parameters:
        path:
          group: "myExistingBundleGroupId"
          version: "myUniqueVersionIdToCRUD"
      responses:
        "200":
          application/tar+gzip: "0xaB2AD6a98F"
  getSummary:
    speakeasy-default-get-summary:
      parameters:
        query:
          mode: "managed-edge"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createLibExpression:
    speakeasy-default-create-lib-expression:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listCondition:
    speakeasy-default-list-condition:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getConditionById:
    speakeasy-default-get-condition-by-id:
      parameters:
        path:
          id: "myExistingConditionId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getHealthInfo:
    speakeasy-default-get-health-info:
      responses:
        "200":
          application/json: {"status": "standby", "startTime": 8399.98}
        "420":
          application/json: {"status": "standby", "startTime": 8399.98}
  getDiagBundle:
    speakeasy-default-get-diag-bundle:
      responses:
        "200":
          application/tar+gzip: "0xCE94B67B62"
  getSystemInfo:
    speakeasy-default-get-system-info:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemDiag:
    speakeasy-default-get-system-diag:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteSystemDiag:
    speakeasy-default-delete-system-diag:
      parameters:
        query:
          path: "my/Diag/Bundle/Path"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemDiagSend:
    speakeasy-default-create-system-diag-send:
      requestBody:
        application/json: {"sendToCribl": false, "renameJs": true, "includeMetrics": true, "includeGit": true, "includeTopTalkers": false, "includeInstallLogs": false}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getJobResultsById:
    speakeasy-default-get-job-results-by-id:
      parameters:
        path:
          id: "myExistingJobInstanceId"
      responses:
        "200":
          application/x-ndjson: "0xcE7D58fC8b"
  updateJobsCancelById:
    speakeasy-default-update-jobs-cancel-by-id:
      parameters:
        path:
          id: "myExistingJobInstanceId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createJobs:
    speakeasy-default-create-jobs:
      requestBody:
        application/json: {"type": "collection", "ttl": "4h", "ignoreGroupJobsLimit": false, "removeFields": [], "resumeOnBoot": false, "streamtags": [], "executor": {"type": "<value>", "storeTaskResults": true}}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getJobs:
    speakeasy-default-get-jobs:
      parameters:
        query:
          offset: 0
          limit: 100
          runType: "adhoc"
          state: "running"
          id: "id=1608713335.3&id=1608713326.1"
          collectorId: "collectorId=Prometheus-in"
          groupId: "default"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteJobsById:
    speakeasy-default-delete-jobs-by-id:
      parameters:
        path:
          id: "myExistingJobIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getJobsById:
    speakeasy-default-get-jobs-by-id:
      parameters:
        path:
          id: "myExistingJobIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateJobsKeepById:
    speakeasy-default-update-jobs-keep-by-id:
      parameters:
        path:
          id: "myExistingJobIdToCRUD"
        query:
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateJobsPauseById:
    speakeasy-default-update-jobs-pause-by-id:
      parameters:
        path:
          id: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateJobsResumeById:
    speakeasy-default-update-jobs-resume-by-id:
      parameters:
        path:
          id: "myExistingJobId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getJobsResultsByIdAndGroup:
    speakeasy-default-get-jobs-results-by-id-and-group:
      parameters:
        path:
          id: "myExistingJobId"
          group: "myExistingJobGroup"
        query:
          maxFiles: 10
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getJobsErrorsByIdAndGroup:
    speakeasy-default-get-jobs-errors-by-id-and-group:
      parameters:
        path:
          id: "myExistingJobId"
          group: "myExistingJobGroup"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getJobsErrorsById:
    speakeasy-default-get-jobs-errors-by-id:
      parameters:
        path:
          id: "myExistingJobId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSecurityKmsConfig:
    speakeasy-default-get-security-kms-config:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateSecurityKmsConfig:
    speakeasy-default-update-security-kms-config:
      requestBody:
        application/json: {"enableHealthCheck": true, "provider": "local"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSecurityKmsHealth:
    speakeasy-default-get-security-kms-health:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listLicense:
    speakeasy-default-list-license:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createLicense:
    speakeasy-default-create-license:
      requestBody:
        application/json: {"license": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getLicenseById:
    speakeasy-default-get-license-by-id:
      parameters:
        path:
          id: "myExistingLicenseId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteLicenseById:
    speakeasy-default-delete-license-by-id:
      parameters:
        path:
          id: "myExistingLicenseId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getLicense:
    speakeasy-default-get-license:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listLoggerConfig:
    speakeasy-default-list-logger-config:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getLoggerConfigById:
    speakeasy-default-get-logger-config-by-id:
      parameters:
        path:
          id: "myLoggerConfigIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateLoggerConfigById:
    speakeasy-default-update-logger-config-by-id:
      parameters:
        path:
          id: "myLoggerConfigIdToCRUD"
      requestBody:
        application/json: {"channels": [{"id": "<id>", "level": "<value>"}, {"id": "<id>", "level": "<value>"}], "id": "<id>", "limitRate": 1569.58, "maxSizeBytes": 3692.39, "redactFields": ["<value 1>", "<value 2>"], "redactLabel": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteLoggerConfigById:
    speakeasy-default-delete-logger-config-by-id:
      parameters:
        path:
          id: "myLoggerConfigIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemJobsLogsByIdAndGroupId:
    speakeasy-default-get-system-jobs-logs-by-id-and-group-id:
      parameters:
        path:
          id: "myExistingJobId"
          groupId: "myExistingGroupId"
        query:
          limit: 1000
          offset: 1
          endOffset: 10000
          et: 1759218069
          lt: 1759219069
          filter: "truthy"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemLogsById:
    speakeasy-default-get-system-logs-by-id:
      parameters:
        path:
          id: "myExistingSystemLogById"
        query:
          limit: 10000
          endOffset: 20000
          et: 1759218069
          lt: 1759219069
          filter: "truthy"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemLogs:
    speakeasy-default-get-system-logs:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemLogsSearch:
    speakeasy-default-get-system-logs-search:
      parameters:
        query:
          type: "single"
          groupId: "myExsitingGroupId"
          files: "/var/log/httpd.log"
          limit: 100
          et: 1759219069
          lt: 1759212069
          filter: "truthy"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createPacks:
    speakeasy-default-create-packs:
      parameters:
        path:
          groupId: "myExistingGroupId"
        query:
          filename: "./myfile.json"
          disabled: false
      requestBody:
        application/json: {"id": "<id>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getPacks:
    speakeasy-default-get-packs:
      parameters:
        path:
          groupId: "<id>"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deletePacksById:
    speakeasy-default-delete-packs-by-id:
      parameters:
        path:
          id: "myUniquePackIdToCRUD"
          groupId: "myExistingGroupId"
        query:
          disabled: true
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updatePacksById:
    speakeasy-default-update-packs-by-id:
      parameters:
        path:
          id: "myExistingGroupId"
          groupId: "myExistingGroupId"
        query:
          source: "myExistingSourceId"
          minor: "true"
          spec: "main"
          disabled: true
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createPacksClone:
    speakeasy-default-create-packs-clone:
      parameters:
        path:
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"dstGroups": ["<value 1>", "<value 2>"], "packs": ["<value 1>", "<value 2>"], "srcGroup": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getPacksExportById:
    speakeasy-default-get-packs-export-by-id:
      parameters:
        path:
          groupId: "myExistingGroupId"
          id: "myExistingPackId"
        query:
          mode: "default_only"
          filename: "localOutputFile.json"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemProcesses:
    speakeasy-default-get-system-processes:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemMetricsEnum:
    speakeasy-default-create-system-metrics-enum:
      requestBody:
        application/json: {}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemMetrics:
    speakeasy-default-get-system-metrics:
      parameters:
        query:
          wp: "43245"
          numBuckets: 1
          earliest: "2025-09-30 13:41:44.056636"
          latest: "2025-09-30 13:59:44.056636"
          metricNameFilter: ".*"
          filterExpr: "truthy"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemMetricsQuery:
    speakeasy-default-create-system-metrics-query:
      requestBody:
        application/json: {"aggs": {"aggregations": [], "cumulative": false, "flushEventLimit": 9835.34, "flushMemLimit": 7220.64, "hostname": "handy-kielbasa.info", "metricsMode": false, "sufficientStatsOnly": true, "timeWindowSeconds": 7794.15}}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getUiByKey:
    speakeasy-default-get-ui-by-key:
      parameters:
        path:
          key: "myUIStateKey"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateUiByKey:
    speakeasy-default-update-ui-by-key:
      parameters:
        path:
          key: "myUIStateKey"
      requestBody:
        application/json: {"op": "push-recent", "value": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getAiConsent:
    speakeasy-default-get-ai-consent:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createAiConsent:
    speakeasy-default-create-ai-consent:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listTrustPolicy:
    speakeasy-default-list-trust-policy:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listFunction:
    speakeasy-default-list-function:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getFunctionById:
    speakeasy-default-get-function-by-id:
      parameters:
        path:
          id: "myExistingFunctionId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getFunctionByPack:
    speakeasy-default-get-function-by-pack:
      parameters:
        path:
          pack: "myExistingPackId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getFunctionByPackAndId:
    speakeasy-default-get-function-by-pack-and-id:
      parameters:
        path:
          id: "myExistingFunctionId"
          pack: "myExistingPackId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listCollector:
    speakeasy-default-list-collector:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getCollectorById:
    speakeasy-default-get-collector-by-id:
      parameters:
        path:
          id: "myExistingCollectorId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listExecutor:
    speakeasy-default-list-executor:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getExecutorById:
    speakeasy-default-get-executor-by-id:
      parameters:
        path:
          id: "myExistingExecutorId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getGroupsConfigVersionById:
    speakeasy-default-get-groups-config-version-by-id:
      parameters:
        path:
          id: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createProductsGroupsByProduct:
    speakeasy-default-create-products-groups-by-product:
      parameters:
        path:
          product: "edge"
      requestBody:
        application/json: {"id": "<id>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getProductsGroupsByProduct:
    speakeasy-default-get-products-groups-by-product:
      parameters:
        path:
          product: "stream"
        query: {}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateGroupsDeployById:
    speakeasy-default-update-groups-deploy-by-id:
      parameters:
        path:
          id: "myExistingGroupId"
      requestBody:
        application/json: {"version": "<value>"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getGroupsById:
    speakeasy-default-get-groups-by-id:
      parameters:
        path:
          id: "myExistingGroupId"
        query:
          fields: "git.commit"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteGroupsById:
    speakeasy-default-delete-groups-by-id:
      parameters:
        path:
          id: "myUniqueGroupIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {}
  updateGroupsById:
    speakeasy-default-update-groups-by-id:
      parameters:
        path:
          id: "myUniqueGroupIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {}
  getSearchJobsResultsById:
    speakeasy-default-get-search-jobs-results-by-id:
      parameters:
        path:
          id: "myExistingSearchJobId"
        query:
          limit: 1000
          offset: 100
          lowerBound: 1759255372
          upperBound: 1759258372
      responses:
        "200":
          application/json: {"isFinished": false, "job": "Principal Web Liaison", "offset": 7247.69, "persistedEventCount": 1801.66, "totalEventCount": 6653.39}
        "500":
          application/json: {"message": "This is my error message string"}
  listIoMetricsEntry:
    speakeasy-default-list-io-metrics-entry:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getIoMetricsEntryById:
    speakeasy-default-get-io-metrics-entry-by-id:
      parameters:
        path:
          id: "myUniqueIOMetricsIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateIoMetricsEntryById:
    speakeasy-default-update-io-metrics-entry-by-id:
      parameters:
        path:
          id: "myUniqueIOMetricsIdToCRUD"
      requestBody:
        application/json: {"id": "<id>", "level": "minimal"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteIoMetricsEntryById:
    speakeasy-default-delete-io-metrics-entry-by-id:
      parameters:
        path:
          id: "myUniqueIOMetricsIdToCRUD"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteAuthUsersInvalidationById:
    speakeasy-default-delete-auth-users-invalidation-by-id:
      parameters:
        path:
          id: "myExistingUserId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updatePacks:
    speakeasy-default-update-packs:
      parameters:
        path:
          groupId: "myExistingGroupId"
        query:
          filename: "./myLocalFile.json"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getPacksRefsById:
    speakeasy-default-get-packs-refs-by-id:
      parameters:
        path:
          id: "myExistingPackId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createPacksPublishById:
    speakeasy-default-create-packs-publish-by-id:
      parameters:
        path:
          id: "myExistingPackId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getAiSettingsFeaturesByFeature:
    speakeasy-default-get-ai-settings-features-by-feature:
      parameters:
        path:
          feature: "ai-settings"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createAiSettingsFeaturesByFeature:
    speakeasy-default-create-ai-settings-features-by-feature:
      parameters:
        path:
          feature: "ai-settings"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getAiSettingsFeatures:
    speakeasy-default-get-ai-settings-features:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createAiSettingsFeatures:
    speakeasy-default-create-ai-settings-features:
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemInputsByPack:
    speakeasy-default-create-system-inputs-by-pack:
      parameters:
        path:
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
        query:
          id: "myUniquePackIdToCRUD"
      requestBody:
        application/json: {"disabled": false, "sendToRoutes": true, "pqEnabled": false, "streamtags": [], "host": "0.0.0.0", "port": 4317, "maxActiveReq": 256, "maxRequestsPerSocket": 0, "requestTimeout": 0, "socketTimeout": 0, "keepAliveTimeout": 15, "enableHealthCheck": false, "ipAllowlistRegex": "/.*/", "ipDenylistRegex": "/^$/", "protocol": "grpc", "extractSpans": false, "extractMetrics": false, "otlpVersion": "0.10.0", "authType": "none", "maxActiveCxn": 1000, "authHeaderExpr": "`Bearer ${token}`", "tokenTimeoutSecs": 3600, "extractLogs": false}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateSystemInputsByPack:
    speakeasy-default-update-system-inputs-by-pack:
      parameters:
        path:
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
          id: "myUniqueInputIdToCRUD"
        query:
          disabled: true
      requestBody:
        application/json: {"id": "<id>", "type": "collection", "disabled": false, "sendToRoutes": true, "pqEnabled": false, "streamtags": [], "staleChannelFlushMs": 10000, "throttleRatePerSec": "0"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteSystemInputsByPack:
    speakeasy-default-delete-system-inputs-by-pack:
      parameters:
        path:
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
          id: "myUniqueInputIdToCRUD"
      requestBody:
        application/json: {"disabled": false, "sendToRoutes": true, "pqEnabled": false, "streamtags": [], "queueName": "<value>", "queueType": "standard", "createQueue": false, "awsAuthenticationMethod": "auto", "signatureVersion": "v4", "reuseConnections": true, "rejectUnauthorized": true, "enableAssumeRole": false, "durationSeconds": 3600, "maxMessages": 10, "visibilityTimeout": 600, "pollTimeout": 10, "numReceivers": 3}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemOutputsByPack:
    speakeasy-default-create-system-outputs-by-pack:
      parameters:
        path:
          pack: "<value>"
          groupId: "<id>"
      requestBody:
        application/json: {"type": "elastic", "systemFields": ["cribl_pipe"], "streamtags": [], "loadBalanced": true, "index": "<value>", "concurrency": 5, "maxPayloadSizeKB": 4096, "maxPayloadEvents": 0, "compress": true, "rejectUnauthorized": true, "timeoutSec": 30, "flushPeriodSec": 1, "failedRequestLoggingMode": "none", "safeHeaders": [], "responseRetrySettings": [], "responseHonorRetryAfterHeader": false, "extraParams": [{"name": "filter_path", "value": "errors,items.*.error,items.*._index,items.*.status"}], "elasticVersion": "auto", "includeDocId": false, "writeAction": "create", "retryPartialErrors": false, "onBackpressure": "block", "useRoundRobinDns": false, "excludeSelf": false, "dnsResolvePeriodSec": 600, "loadBalanceStatsPeriodSec": 300, "pqMaxFileSize": "1 MB", "pqMaxSize": "5GB", "pqPath": "$CRIBL_HOME/state/queues", "pqCompress": "none", "pqOnBackpressure": "block", "pqMode": "error"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {}
  updateSystemOutputsByPackAndId:
    speakeasy-default-update-system-outputs-by-pack-and-id:
      parameters:
        path:
          pack: "<value>"
          groupId: "<id>"
          id: "<id>"
      requestBody:
        application/json: {"systemFields": ["cribl_pipe"], "streamtags": [], "endpoint": "ingest.lightstep.com:443", "tokenSecret": "<value>", "authTokenName": "lightstep-access-token", "otlpVersion": "1.3.1", "maxPayloadSizeKB": 2048, "protocol": "grpc", "compress": "gzip", "httpCompress": "gzip", "concurrency": 5, "timeoutSec": 30, "flushPeriodSec": 1, "failedRequestLoggingMode": "none", "connectionTimeout": 10000, "keepAliveTime": 30, "keepAlive": true, "onBackpressure": "block", "rejectUnauthorized": true, "useRoundRobinDns": false, "safeHeaders": [], "responseRetrySettings": [], "responseHonorRetryAfterHeader": false, "pqMaxFileSize": "1 MB", "pqMaxSize": "5GB", "pqPath": "$CRIBL_HOME/state/queues", "pqCompress": "none", "pqOnBackpressure": "block", "pqMode": "error"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {}
  deleteSystemOutputsByPackAndId:
    speakeasy-default-delete-system-outputs-by-pack-and-id:
      parameters:
        path:
          pack: "<value>"
          groupId: "<id>"
          id: "<id>"
      requestBody:
        application/json: {"systemFields": ["cribl_pipe"], "streamtags": [], "brokers": [], "topic": "<value>", "ack": 1, "format": "json", "compression": "gzip", "maxRecordSizeKB": 768, "flushEventCount": 1000, "flushPeriodSec": 1, "connectionTimeout": 10000, "requestTimeout": 60000, "maxRetries": 5, "maxBackOff": 30000, "initialBackoff": 300, "backoffRate": 2, "authenticationTimeout": 10000, "reauthenticationThreshold": 10000, "onBackpressure": "block", "pqMaxFileSize": "1 MB", "pqMaxSize": "5GB", "pqPath": "$CRIBL_HOME/state/queues", "pqCompress": "none", "pqOnBackpressure": "block", "pqMode": "error"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {}
  createSystemLookupsByPackAndId:
    speakeasy-default-create-system-lookups-by-pack-and-id:
      parameters:
        path:
          id: "myUniqueLookupIdToCRUD"
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
        query:
          disabled: false
      requestBody:
        application/json: {"id": "<id>", "mode": "memory"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteSystemLookupsByPackAndId:
    speakeasy-default-delete-system-lookups-by-pack-and-id:
      parameters:
        path:
          id: "myUniqueLookupIdToCRUD"
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteBreakersByPackAndId:
    speakeasy-default-delete-breakers-by-pack-and-id:
      parameters:
        path:
          id: "myUniquePackBreakersIdToCRUD"
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createRoutesByPack:
    speakeasy-default-create-routes-by-pack:
      parameters:
        path:
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"routes": []}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteRoutesByPackAndId:
    speakeasy-default-delete-routes-by-pack-and-id:
      parameters:
        path:
          id: "<id>"
          pack: "<value>"
          groupId: "<id>"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {}
  getPipelinesByPack:
    speakeasy-default-get-pipelines-by-pack:
      parameters:
        path:
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getPipelinesByPackWithId:
    speakeasy-default-get-pipelines-by-pack-with-id:
      parameters:
        path:
          pack: "myExistingPackId"
          id: "myUniquePipelineIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemInputsByPack:
    speakeasy-default-get-system-inputs-by-pack:
      parameters:
        path:
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemOutputsByPack:
    speakeasy-default-get-system-outputs-by-pack:
      parameters:
        path:
          pack: "<value>"
          groupId: "<id>"
      requestBody:
        application/json: {"systemFields": ["cribl_pipe"], "streamtags": [], "logLocationType": "organization", "logNameExpression": "<value>", "payloadFormat": "text", "googleAuthMethod": "manual", "maxPayloadSizeKB": 4096, "maxPayloadEvents": 0, "flushPeriodSec": 1, "concurrency": 5, "connectionTimeout": 10000, "timeoutSec": 30, "onBackpressure": "block", "logLocationExpression": "<value>", "pqMaxFileSize": "1 MB", "pqMaxSize": "5GB", "pqPath": "$CRIBL_HOME/state/queues", "pqCompress": "none", "pqOnBackpressure": "block", "pqMode": "error"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {}
  getSystemLookupsByPack:
    speakeasy-default-get-system-lookups-by-pack:
      parameters:
        path:
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createSystemLookupsByPack:
    speakeasy-default-create-system-lookups-by-pack:
      parameters:
        path:
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "<id>", "mode": "memory"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemLookupsByPackAndId:
    speakeasy-default-get-system-lookups-by-pack-and-id:
      parameters:
        path:
          id: "myUniqueLookupIdToCRUD"
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getBreakersByPack:
    speakeasy-default-get-breakers-by-pack:
      parameters:
        path:
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createBreakersByPack:
    speakeasy-default-create-breakers-by-pack:
      parameters:
        path:
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "<id>", "lib": "custom", "minRawLength": 256}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getBreakersByPackAndId:
    speakeasy-default-get-breakers-by-pack-and-id:
      parameters:
        path:
          id: "myUniquePackBreakersIdToCRUD"
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateBreakersByPackAndId:
    speakeasy-default-update-breakers-by-pack-and-id:
      parameters:
        path:
          id: "myUniquePackBreakersIdToCRUD"
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"id": "<id>", "lib": "custom", "minRawLength": 256}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  readRoutesByPackAndId:
    speakeasy-default-read-routes-by-pack-and-id:
      parameters:
        path:
          id: "<id>"
          pack: "<value>"
          groupId: "<id>"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {}
  getPacksByGroup:
    speakeasy-default-get-packs-by-group:
      parameters:
        path:
          groupId: "myExistingGroupId"
        query:
          with: "input1, input2, input3"
          disabled: true
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemInputsByPackAndId:
    speakeasy-default-get-system-inputs-by-pack-and-id:
      parameters:
        path:
          id: "myUniqueInputIdToCRUD"
          pack: "myExistingPackId"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getSystemOutputsByPackAndId:
    speakeasy-default-get-system-outputs-by-pack-and-id:
      parameters:
        path:
          id: "<id>"
          pack: "<value>"
          groupId: "<id>"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {}
  listPackOutput:
    speakeasy-default-list-pack-output:
      parameters:
        path:
          groupId: "myExistingGroupId"
          pack: "myExistingPackId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createPackOutput:
    speakeasy-default-create-pack-output:
      parameters:
        path:
          groupId: "myExistingGroupId"
          pack: "myExistingPackId"
        query:
          id: "myUniquePackDestinationIdToCRUD"
      requestBody:
        application/json: {"systemFields": ["cribl_pipe"], "streamtags": [], "brokers": ["<value 1>", "<value 2>", "<value 3>"], "topic": "<value>", "ack": 1, "format": "json", "compression": "gzip", "maxRecordSizeKB": 768, "flushEventCount": 1000, "flushPeriodSec": 1, "connectionTimeout": 10000, "requestTimeout": 60000, "maxRetries": 5, "maxBackOff": 30000, "initialBackoff": 300, "backoffRate": 2, "authenticationTimeout": 10000, "reauthenticationThreshold": 10000, "onBackpressure": "block", "pqMaxFileSize": "1 MB", "pqMaxSize": "5GB", "pqPath": "$CRIBL_HOME/state/queues", "pqCompress": "none", "pqOnBackpressure": "block", "pqMode": "error"}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getPackOutputById:
    speakeasy-default-get-pack-output-by-id:
      parameters:
        path:
          id: "myUniqueOutputIdToCRUD"
          groupId: "myExistingGroupId"
          pack: "myExistingPackId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updatePackOutputById:
    speakeasy-default-update-pack-output-by-id:
      parameters:
        path:
          id: "myUniqueOutputIdToCRUD"
          groupId: "myExistingGroupId"
          pack: "myExistingPackId"
      requestBody:
        application/json: {"id": "<id>", "type": "tcpjson", "systemFields": ["cribl_pipe"], "streamtags": [], "loadBalanced": true, "compression": "gzip", "logFailedRequests": false, "throttleRatePerSec": "0", "connectionTimeout": 10000, "writeTimeout": 60000, "tokenTTLMinutes": 60, "sendHeader": true, "onBackpressure": "block", "authType": "manual", "excludeSelf": false, "dnsResolvePeriodSec": 600, "loadBalanceStatsPeriodSec": 300, "maxConcurrentSenders": 0, "pqMaxFileSize": "1 MB", "pqMaxSize": "5GB", "pqPath": "$CRIBL_HOME/state/queues", "pqCompress": "none", "pqOnBackpressure": "block", "pqMode": "error", "authToken": ""}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deletePackOutputById:
    speakeasy-default-delete-pack-output-by-id:
      parameters:
        path:
          id: "myUniqueOutputIdToCRUD"
          groupId: "myExistingGroupId"
          pack: "myExistingPackId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getPacksByID:
    speakeasy-default-get-packs-by-ID:
      parameters:
        path:
          groupId: "myExistingGroupId"
          id: "myUniquePackIdToCRUD"
        query:
          with: "input1, input2, input3"
          disabled: true
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listDefaultLakeLakehouses:
    speakeasy-default-list-default-lake-lakehouses:
      responses:
        "200":
          application/json: {}
        "400":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
        "201":
          application/json: {"id": "<id>", "tierSize": "small"}
  createDefaultLakeLakehouse:
    speakeasy-default-create-default-lake-lakehouse:
      requestBody:
        application/json: {"id": "<id>", "tierSize": "small"}
      responses:
        "201":
          application/json: {"id": "<id>", "tierSize": "small"}
        "400":
          application/json: {}
        "500":
          application/json: {}
        "200":
          application/json: {}
  getDefaultLakeLakehouseById:
    speakeasy-default-get-default-lake-lakehouse-by-id:
      parameters:
        path:
          id: "myUniqueLakehouseIdToCRUD"
      responses:
        "200":
          application/json: {}
        "400":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
        "201":
          application/json: {"id": "<id>", "tierSize": "small"}
  updateDefaultLakeLakehouseById:
    speakeasy-default-update-default-lake-lakehouse-by-id:
      parameters:
        path:
          id: "myUniqueLakehouseIdToCRUD"
      requestBody:
        application/json: {"id": "<id>", "tierSize": "small"}
      responses:
        "200":
          application/json: {}
        "400":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteDefaultLakeLakehouseById:
    speakeasy-default-delete-default-lake-lakehouse-by-id:
      parameters:
        path:
          id: "myUniqueLakehouseIdToCRUD"
      responses:
        "400":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
        "200":
          application/json: {}
  getLakehouseDatasetConnections:
    speakeasy-default-get-lakehouse-dataset-connections:
      parameters:
        path:
          lakehouse_id: "<id>"
          lake_dataset_id: "<id>"
      responses:
        "200":
          application/json: {}
  createLakehouseDatasetConnections:
    speakeasy-default-create-lakehouse-dataset-connections:
      parameters:
        path:
          lakehouse_id: "myExistingLakehouseId"
          lake_dataset_id: "myExistingLakeDatasetIdToCRUD"
      responses:
        "200":
          application/json: {}
  updateLakehouseDatasetConnections:
    speakeasy-default-update-lakehouse-dataset-connections:
      parameters:
        path:
          lakehouse_id: "myExistingLakehouseId"
          lake_dataset_id: "myExistingLakeDatasetIdToCRUD"
      responses:
        "200":
          application/json: {}
  deleteLakehouseDatasetConnections:
    speakeasy-default-delete-lakehouse-dataset-connections:
      parameters:
        path:
          lakehouse_id: "myExistingLakehouseId"
          lake_dataset_id: "myExistingLakeDatasetIdToCRUD"
      responses:
        "200":
          application/json: {}
  listCollectors:
    speakeasy-default-list-collectors:
      parameters:
        path:
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  updateCollectorById:
    speakeasy-default-update-collector-by-id:
      parameters:
        path:
          id: "myJobIdToCRUD"
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"type": "collection", "ttl": "4h", "ignoreGroupJobsLimit": false, "removeFields": [], "resumeOnBoot": true, "streamtags": [], "workerAffinity": false, "collector": {"type": "database"}}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  deleteCollectorById:
    speakeasy-default-delete-collector-by-id:
      parameters:
        path:
          id: "myJobIdToCRUD"
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getRoutesByGroupId:
    speakeasy-default-get-routes-by-group-id:
      parameters:
        path:
          groupId: "myExistingGroupId"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  createRoutesByGroupId:
    speakeasy-default-create-routes-by-group-id:
      parameters:
        path:
          groupId: "myExistingGroupId"
      requestBody:
        application/json: {"routes": [{"name": "<value>", "filter": "true", "pipeline": "<value>", "enableOutputExpression": false, "final": true}]}
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  listInstanceSettingsSchema:
    speakeasy-default-list-instance-settings-schema:
      parameters:
        path:
          groupId: "<id>"
          id: "<id>"
      responses:
        "200":
          application/json: {}
        "500":
          application/json: {"message": "This is my error message string"}
  getHealthStatus:
    speakeasy-default-get-health-status:
      responses:
        "200":
          application/json: "OK"
  v1.workspaces.createWorkspace:
    speakeasy-default-v1-workspaces-create-workspace:
      parameters:
        path:
          organizationId: "<id>"
      requestBody:
        application/json: {"workspaceId": "my-workspace", "region": "us-west-2", "alias": "Production Environment", "description": "Main production workspace for customer data processing", "tags": ["production", "customer-data"]}
      responses:
        "201":
          application/json: {"workspaceId": "my-workspace", "region": "us-west-2", "lastUpdated": "2023-01-01T12:00:00Z", "leaderFQDN": "workspace-leader.example.com", "state": "Workspace-Active", "alias": "Production Environment", "description": "Main production workspace for customer data processing", "tags": ["production", "customer-data"]}
  v1.workspaces.listWorkspaces:
    speakeasy-default-v1-workspaces-list-workspaces:
      parameters:
        path:
          organizationId: "<id>"
      responses:
        "200":
          application/json: {"items": [{"workspaceId": "main", "region": "us-west-2", "lastUpdated": "2023-01-01T12:00:00Z", "leaderFQDN": "workspace-leader.example.com", "state": "Workspace-Active", "alias": "Production Environment", "description": "Main production workspace for customer data processing", "tags": ["production", "customer-data"]}], "count": 5}
  v1.workspaces.updateWorkspace:
    speakeasy-default-v1-workspaces-update-workspace:
      parameters:
        path:
          organizationId: "<id>"
          workspaceId: "<id>"
      requestBody:
        application/json: {"alias": "Production Environment", "description": "Main production workspace for customer data processing", "tags": ["production", "customer-data"]}
      responses:
        "200":
          application/json: {"workspaceId": "my-workspace", "region": "us-west-2", "lastUpdated": "2023-01-01T12:00:00Z", "leaderFQDN": "workspace-leader.example.com", "state": "Workspace-Active", "alias": "Production Environment", "description": "Main production workspace for customer data processing", "tags": ["production", "customer-data"]}
  v1.workspaces.deleteWorkspace:
    speakeasy-default-v1-workspaces-delete-workspace:
      parameters:
        path:
          organizationId: "<id>"
          workspaceId: "<id>"
  v1.workspaces.getWorkspace:
    speakeasy-default-v1-workspaces-get-workspace:
      parameters:
        path:
          organizationId: "<id>"
          workspaceId: "<id>"
      responses:
        "200":
          application/json: {"workspaceId": "my-workspace", "region": "us-west-2", "lastUpdated": "2023-01-01T12:00:00Z", "leaderFQDN": "workspace-leader.example.com", "state": "Workspace-Active", "alias": "Production Environment", "description": "Main production workspace for customer data processing", "tags": ["production", "customer-data"]}
examplesVersion: 1.0.2
generatedTests: {}
